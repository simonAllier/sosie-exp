{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":272,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":358,"com.google.gson.functional.StringTest.testStringValueDeserialization":357,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":454,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":143,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":329,"com.google.gson.stream.JsonWriterTest.testRepeatedName":446,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":602,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":2,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":237,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":133,"com.google.gson.MixedStreamTest.testWriteLenient":548,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":426,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":24,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":21,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":124,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":207,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":194,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":590,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":643,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":59,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":179,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":111,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":155,"com.google.gson.functional.ObjectTest.testSingletonLists":205,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":656,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":174,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":664,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":380,"com.google.gson.stream.JsonWriterTest.testStrings":466,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":131,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":92,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":339,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":219,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":88,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":415,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":343,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":519,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":367,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":242,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":192,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":520,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":459,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":32,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":171,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":553,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":253,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":410,"com.google.gson.functional.EnumTest.testEnumCaseMapping":101,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":550,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":663,"com.google.gson.functional.JsonTreeTest.testToJsonTree":310,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":595,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":340,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":40,"com.google.gson.stream.JsonWriterTest.testNulls":443,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":319,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":516,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":419,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":325,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":424,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":565,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":475,"com.google.gson.functional.ObjectTest.testNullDeserialization":229,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":47,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":365,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":215,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":628,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":603,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":639,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":251,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":148,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":226,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":468,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":660,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":151,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":200,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":199,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":338,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":517,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":574,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":571,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":318,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":230,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":531,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":328,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":134,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":189,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":406,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":324,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":307,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":429,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":28,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":498,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":563,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":575,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":190,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":225,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":527,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":79,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":85,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":213,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":461,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":7,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":377,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":412,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":567,"com.google.gson.metrics.PerformanceTest.testDummy":587,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":300,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":167,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":109,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":258,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":126,"com.google.gson.stream.JsonWriterTest.testEmptyArray":436,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":414,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":556,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":543,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":655,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":147,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":50,"com.google.gson.functional.CollectionTest.testSetDeserialization":22,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":60,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":43,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":302,"com.google.gson.functional.EnumTest.testEnumSet":387,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":186,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":110,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":322,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":487,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":220,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":80,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":108,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":621,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":257,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":196,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":458,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":95,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":248,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":624,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":378,"com.google.gson.functional.MapTest.testHashMapDeserialization":401,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":600,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":332,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":274,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":662,"com.google.gson.MixedStreamTest.testReadNulls":672,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":10,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":271,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":304,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":557,"com.google.gson.functional.MapTest.testSortedMap":411,"com.google.gson.functional.MapTest.testMapSerialization":491,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":273,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":188,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":263,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":290,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":355,"com.google.gson.functional.MapTest.testSerializeMaps":382,"com.google.gson.functional.MapTest.testComplexKeysSerialization":33,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":301,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":428,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":592,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":536,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":49,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":100,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":163,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":19,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":588,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":98,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":260,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":425,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":3,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":228,"com.google.gson.functional.MapTest.testStringKeyDeserialization":413,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":294,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":481,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":578,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":178,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":499,"com.google.gson.functional.PrettyPrintingTest.testMap":521,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":580,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":601,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":471,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":93,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":648,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":87,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":295,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":518,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":360,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":666,"com.google.gson.functional.CollectionTest.testQueueSerialization":472,"com.google.gson.functional.MapTest.testMapSerializationEmpty":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":540,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":462,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":616,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":464,"com.google.gson.functional.MapTest.testMapOfMapSerialization":490,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":570,"com.google.gson.JavaSerializationTest.testMapIsSerializable":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":326,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":394,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":438,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":56,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":572,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":561,"com.google.gson.functional.FieldNamingTest.testIdentity":356,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":359,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":397,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":279,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":449,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":231,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":6,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":204,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":309,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":559,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":441,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":172,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":81,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":564,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":665,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":239,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":334,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":323,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":659,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":400,"com.google.gson.functional.MapTest.testMapSubclassSerialization":486,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":577,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":117,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":269,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":303,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":61,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":183,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":370,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":661,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":316,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":635,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":91,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":107,"com.google.gson.functional.EnumTest.testEnumSubclass":97,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":620,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":89,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":218,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":596,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":144,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":193,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":29,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":17,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":597,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":241,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":450,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":612,"com.google.gson.stream.JsonWriterTest.testTwoNames":437,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":240,"com.google.gson.stream.JsonWriterTest.testNullName":444,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":34,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":83,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":288,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":617,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":636,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":5,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":452,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":611,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":658,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":206,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":138,"com.google.gson.MixedStreamTest.testWriteNulls":671,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":533,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":447,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":562,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":529,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":48,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":104,"com.google.gson.CommentsTest.testParseComments":422,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":159,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":482,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":68,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":292,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":622,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":262,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":493,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":545,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":640,"com.google.gson.MixedStreamTest.testReadInvalidState":669,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":57,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":8,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":583,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":264,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":379,"com.google.gson.JsonParserTest.testParseMixedArray":435,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":177,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":375,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":296,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":65,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":568,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":327,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":626,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":287,"com.google.gson.functional.MapTest.testMapDeserialization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":654,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":524,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":485,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":154,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":39,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":488,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":158,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":501,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":20,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":71,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":73,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":44,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":638,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":12,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":247,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":649,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":115,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":120,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":238,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":259,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":492,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":584,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":594,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":398,"com.google.gson.functional.PrimitiveTest.testShortSerialization":629,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":502,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":195,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":255,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":184,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":74,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":176,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":352,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":96,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":121,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":268,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":403,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":181,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":507,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":558,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":136,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":433,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":333,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":374,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":431,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":634,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":631,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":513,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":427,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":38,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":45,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":127,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":342,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":646,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":197,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":312,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":128,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":613,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":235,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":212,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":470,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":14,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":644,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":320,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":244,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":129,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":153,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":542,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":605,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":539,"com.google.gson.stream.JsonWriterTest.testNullStringValue":440,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":330,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":36,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":390,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":598,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":198,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":615,"com.google.gson.stream.JsonWriterTest.testEmptyObject":457,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":579,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":30,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":157,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":388,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":278,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":265,"com.google.gson.functional.MapTest.testGeneralMapField":142,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":210,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":383,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":633,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":145,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":245,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":544,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":494,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":41,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":314,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":623,"com.google.gson.MixedStreamTest.testReadMixedStreamed":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":321,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":407,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":504,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":82,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":305,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":477,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":0,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":298,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":618,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":254,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":384,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":76,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":408,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":585,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":402,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":508,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":560,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":285,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":346,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":445,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":610,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":541,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":399,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":313,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":393,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":162,"com.google.gson.functional.ObjectTest.testNestedDeserialization":236,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":484,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":243,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":510,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":275,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":165,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":252,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":632,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":67,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":102,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":361,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":409,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":106,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":576,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":13,"com.google.gson.JavaSerializationTest.testListIsSerializable":386,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":27,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":137,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":478,"com.google.gson.functional.ObjectTest.testNullSerialization":637,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":16,"com.google.gson.stream.JsonWriterTest.testDoubles":463,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":351,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":404,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":141,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":566,"com.google.gson.functional.MapTest.testInterfaceTypeMap":140,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":289,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":460,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":246,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":168,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":599,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":99,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":416,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":119,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":641,"com.google.gson.MixedStreamTest.testReadClosed":670,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":647,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":250,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":606,"com.google.gson.MixedStreamTest.testWriteClosed":372,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":277,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":474,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":37,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":341,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":112,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":35,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":70,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":66,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":233,"com.google.gson.stream.JsonWriterTest.testLongs":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":77,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":170,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":214,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":473,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":347,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":619,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":349,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":18,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":476,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":331,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":281,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":52,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":203,"com.google.gson.stream.JsonWriterTest.testNumbers":465,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":609,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":317,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":51,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":525,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":69,"com.google.gson.functional.CollectionTest.testQueueDeserialization":396,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":187,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":569,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":364,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":642,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":337,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":348,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":139,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":227,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":652,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":152,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":234,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":381,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":369,"com.google.gson.functional.MapTest.testRawMapSerialization":496,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":421,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":514,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":11,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":222,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":63,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":593,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":554,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":90,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":528,"com.google.gson.functional.PrimitiveTest.testByteSerialization":627,"com.google.gson.ObjectTypeAdapterTest.testSerialize":1,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":546,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":149,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":604,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":25,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":534,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":353,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":113,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":362,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":552,"com.google.gson.functional.MapTest.testMapWithQuotes":489,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":582,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":479,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":645,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":132,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":64,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":537,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":58,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":451,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":156,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":103,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":232,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":423,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":261,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":217,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":650,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":42,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":420,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":26,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":651,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":625,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":589,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":123,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":286,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":336,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":526,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":15,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":282,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":350,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":376,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":270,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":94,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":116,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":173,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":673,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":483,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":512,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":221,"com.google.gson.functional.ObjectTest.testNestedSerialization":223,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":31,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":366,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":500,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":503,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":284,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":495,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":266,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":311,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":86,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":549,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":467,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":216,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":418,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":201,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":169,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":75,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":551,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":586,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":72,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":224,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":344,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":515,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":667,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":532,"com.google.gson.functional.CollectionTest.testSetSerialization":23,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":146,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":130,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":522,"com.google.gson.functional.StringTest.testStringValueSerialization":668,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":368,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":4,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":53,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":391,"com.google.gson.MixedStreamTest.testWriteInvalidState":371,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":581,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":509,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":608,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":182,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":293,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":78,"com.google.gson.stream.JsonWriterTest.testBooleans":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":538,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":354,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":46,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":283,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":249,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":430,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":657,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":547,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":591,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":453,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":417,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":530},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4b5996ab-3e8a-11e6-997a-090be853a73d","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b59e4cc-3e8a-11e6-997a-1116e3af7417","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[0],"tindex":"4b5a0bdd-3e8a-11e6-997a-23a498f6dbca","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                            } \n                            writeDeferredName();\n                            beforeValue(false);\n                            java.io.Writer.append(java.lang.Double.toString(value));\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"4b5a0bde-3e8a-11e6-997a-2735fd4afd10","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter != null) && ((typeAdapter.peek()) != typeAdapter)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"typeAdapter","obj":"typeAdapter","reader":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"tindex":"4b5a32ef-3e8a-11e6-997a-6dc7165adb92","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[80,81,82,83,84,1,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,2,102,3,4,5,6,7,103,104,105,106,107,108,109,110,111,112,113,114,115,8,116,117,9,10,11,12,13,14,15,16,17,18,118,119,120,19,20,21,121,122,123,22,124,23,125,24,25,26,27,28,126,127,29,128,129,130,131,132,30,31,133,134,135,136,137,138,139,32,140,141,142,33,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,34,166,167,35,168,36,169,37,38,39,170,40,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,42,43,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,44,45,232,233,234,235,236,237,238,239,240,241,242,243,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,244,245,246,61,247,248,249,250,251,252,253,254,255,62,256,257,258,259,260,261,262,263,264,265,266,267,63,268,269,270,64,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,65,66,67,68,69,70,297,298,299,300,301,302,303,304,305,306,307,308,71,309,310,311,312,313,314,315,72,73,316,317,318,319,320,321,322,74,323,75,324,325,326,76,327,328,329,330,331,332,333,334,335,336,337,77,338,339,340,341,342,343,344,345,346,347,348,349,350,351,78,79,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374],"tindex":"4b5a32f0-3e8a-11e6-997a-b5ebf29fcda2","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key.isInterface()) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"4b5a5901-3e8a-11e6-997a-cf5d7996e3ab","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                            } \n                            writeDeferredName();\n                            beforeValue(false);\n                            java.io.Writer.append(java.lang.Double.toString(value));\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5a8012-3e8a-11e6-997a-9f6999d50a40","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"4b5a8013-3e8a-11e6-997a-5984806824a9","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"json","this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b5a8014-3e8a-11e6-997a-51ffd678a7f7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b5aa725-3e8a-11e6-997a-bbc8fdff2322","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1364","type":"CtBinaryOperatorImpl","sourcecode":"p == l"},"failures":[],"tindex":"4b5aa726-3e8a-11e6-997a-695fb7f80469","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","l":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[375,376,377,378],"tindex":"4b5aa727-3e8a-11e6-997a-cdd64f30d163","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.Class<?>) {\n        {\n            return (findByObject(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"4b5aa728-3e8a-11e6-997a-cf6d0dbc87d4","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[379,1,380,381,122,124,23,382,216,57,58,59,60,383,291,368],"tindex":"4b5aa729-3e8a-11e6-997a-f98880e1a730","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[82,86,384,385,386,87,88,89,91,93,94,387,388,96,97,389,98,100,101,102,4,5,103,104,107,111,112,113,114,115,116,117,11,17,18,119,19,20,21,121,390,391,392,393,394,123,22,395,125,396,28,126,397,127,129,398,131,132,399,400,138,401,402,403,404,405,406,407,408,409,410,411,412,413,414,146,149,150,151,152,154,155,156,159,162,164,37,38,175,177,415,197,201,205,206,207,209,210,212,213,42,215,217,218,219,221,224,226,227,228,231,232,234,235,236,237,239,240,242,243,46,47,48,49,50,51,52,54,55,56,244,245,246,247,248,249,250,251,252,253,254,255,416,417,62,256,257,258,262,263,264,265,266,267,63,268,269,270,64,274,275,277,418,279,281,284,285,286,287,288,419,289,290,292,294,295,296,297,298,300,301,302,303,305,306,307,312,313,314,315,72,316,317,420,318,319,320,321,322,74,323,75,324,325,326,328,329,421,330,332,333,334,336,337,338,339,340,341,343,344,347,348,350,351,357,358,359,360,361,362,363,364,365,366,367,422],"tindex":"4b5ace3a-3e8a-11e6-997a-19ed84058d71","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj instanceof com.google.gson.JsonArray) {\n        {\n            if (obj instanceof java.lang.Number) {\n                {\n                    try {\n                        if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                            throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                        } \n                    } catch (com.google.gson.stream.MalformedJsonException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:583","type":"CtBinaryOperatorImpl","sourcecode":"context != (com.google.gson.stream.JsonScope.EMPTY_OBJECT)"},"failures":[],"tindex":"4b5ace3b-3e8a-11e6-997a-810fe48a5173","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if ((i == i) || (p == i)) {\n        {\n            if (i != i) {\n                {\n                    java.lang.Appendable.append(((char)(i)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.EMPTY_OBJECT":"i","context":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4b5ace3c-3e8a-11e6-997a-2135cc42ff23","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            if (memberName == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"4b5ace3d-3e8a-11e6-997a-a13e980a6f22","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4b5af54e-3e8a-11e6-997a-814b63b795b2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"4b5af54f-3e8a-11e6-997a-35058fe8ada7","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                            } \n                            writeDeferredName();\n                            beforeValue(false);\n                            java.io.Writer.append(java.lang.Double.toString(value));\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"4b5af550-3e8a-11e6-997a-37214ce713ab","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b5af551-3e8a-11e6-997a-6fcdad0867f4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:361","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[423,375,424,425],"tindex":"4b5af552-3e8a-11e6-997a-f3b42540bc86","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NONE":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"4b5af553-3e8a-11e6-997a-793d79365999","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"4b5b1c64-3e8a-11e6-997a-bd9fec3b9a45","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property != null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"4b5b1c65-3e8a-11e6-997a-2d6d6ddda58e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"4b5b1c66-3e8a-11e6-997a-3705245299e6","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive == primitive) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"primitive","com.google.gson.LongSerializationPolicy.DEFAULT":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5b1c67-3e8a-11e6-997a-81ee1693581a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4b5b1c68-3e8a-11e6-997a-4d31d464969c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"4b5b4379-3e8a-11e6-997a-6d1770ce325c","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            return java.lang.String.valueOf(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            return java.lang.Boolean.toString(primitive.getAsBoolean());\n        } else if (primitive.isString()) {\n            return primitive.getAsString();\n        } else {\n            throw new java.lang.AssertionError();\n        }\n    } else if (keyElement.isJsonNull()) {\n        return \"null\";\n    } else {\n        throw new java.lang.AssertionError();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"4b5b437a-3e8a-11e6-997a-21bbde119dac","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.TypeVariable) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[308,71,309,310],"tindex":"4b5b437b-3e8a-11e6-997a-478a65c5c6c8","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[74],"tindex":"4b5b437c-3e8a-11e6-997a-176e59d91694","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"4b5b437d-3e8a-11e6-997a-ddeec1efbfd6","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:361","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[426,336],"tindex":"4b5b6a8e-3e8a-11e6-997a-33ff5ba8b98a","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        {\n            if (style == style) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.int = style;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_NONE":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"4b5b6a8f-3e8a-11e6-997a-f5794d467eac","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[80,83,84,1,85,91,92,95,99,100,2,102,3,4,427,5,6,7,103,104,106,107,108,109,110,111,112,113,114,115,8,117,9,10,11,12,13,14,15,16,17,18,118,119,120,19,20,21,121,122,22,124,23,24,25,26,27,28,127,29,128,130,30,31,133,134,135,136,137,139,32,140,141,142,33,143,144,145,146,147,148,149,151,152,153,154,155,157,158,159,160,161,163,164,165,34,166,167,35,168,36,169,37,38,39,170,40,197,204,205,206,207,208,209,210,211,212,213,214,42,43,215,216,218,219,220,221,222,223,224,225,226,227,230,231,44,45,232,233,234,235,236,237,238,239,240,241,242,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,256,257,259,260,261,263,264,265,266,63,268,269,270,64,271,272,273,275,276,277,278,279,280,282,283,285,291,292,293,65,66,67,68,69,70,297,298,299,300,304,305,306,307,308,71,309,310,311,312,72,73,320,74,75,76,335,77,342,343,344,345,346,347,348,349,78,79,352,353,354,355,356,368,369,370,371,372,373,374],"tindex":"4b5b6a90-3e8a-11e6-997a-3d1fd4c89a7a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4b5b6a91-3e8a-11e6-997a-71353645c8de","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b5b91a2-3e8a-11e6-997a-b3de3f38b5e1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"4b5b91a3-3e8a-11e6-997a-67ae4edb8894","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if ((name.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"4b5b91a4-3e8a-11e6-997a-d1ad406a0136","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n    } \n    return toJson(src, src.getClass());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src","value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4b5b91a5-3e8a-11e6-997a-7fb0057d8a03","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"4b5b91a6-3e8a-11e6-997a-81c4281933d3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"4b5bb8b7-3e8a-11e6-997a-b537ff6b8bf6","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(typeOfT instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1189","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"4b5bb8b8-3e8a-11e6-997a-ffc8385bb9ec","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if ((i == i) || (p == i)) {\n        {\n            if (i != i) {\n                {\n                    java.lang.Appendable.append(((char)(i)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"i","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[80,83,84,1,85,91,92,95,99,100,2,3,4,5,6,7,103,104,106,107,108,109,110,111,112,113,114,115,8,117,9,10,11,12,13,14,15,16,17,18,118,119,120,19,20,21,121,122,22,124,23,24,25,26,27,28,127,29,128,130,30,31,133,134,135,136,137,139,32,140,141,142,33,143,144,145,146,147,148,149,151,152,153,154,155,157,158,159,160,161,163,164,165,34,166,167,35,168,36,169,37,38,39,170,40,197,204,205,206,207,208,209,210,211,212,213,214,42,43,215,216,218,219,220,221,222,223,224,225,226,227,230,231,44,45,232,233,234,235,236,237,238,239,240,241,242,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,256,257,259,260,261,263,264,265,266,63,268,269,270,64,271,272,273,275,276,277,278,279,280,282,283,285,291,292,293,65,66,67,68,69,70,297,298,299,300,304,305,306,307,308,71,309,310,311,312,72,73,320,74,75,76,335,77,342,343,344,345,346,347,348,349,78,79,352,353,354,355,356,368,369,370,371,372,373,374],"tindex":"4b5bdfc9-3e8a-11e6-997a-efa0f84b35f7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"4b5bdfca-3e8a-11e6-997a-eb0f3d04b8f1","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:417","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"4b5bdfcb-3e8a-11e6-997a-3fdeac909f27","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset == count) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (offset == count) {\n                {\n                    throw new java.lang.AssertionError();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[428,429,430,431,432,433,434,80,83,84,379,1,380,85,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,0,460,461,462,463,464,465,466,467,468,469,92,95,387,388,96,97,99,470,2,3,427,6,7,103,105,106,107,108,109,110,112,113,114,8,9,10,11,12,14,15,16,118,120,21,381,121,471,472,473,474,475,122,476,124,477,23,478,479,480,29,481,128,130,482,483,484,30,31,485,486,382,487,488,139,489,490,491,492,493,140,494,141,142,495,496,33,497,498,499,143,144,145,147,148,149,500,150,151,152,153,501,157,158,160,502,161,163,167,35,168,39,170,41,503,504,505,506,507,508,204,205,208,211,214,509,43,216,220,222,223,510,225,230,44,45,233,238,241,242,46,47,48,49,51,52,53,54,55,56,57,511,58,59,60,244,61,512,416,513,514,515,516,517,518,519,520,521,259,260,522,523,524,261,264,266,268,269,270,64,271,273,276,279,280,282,284,285,525,526,383,527,528,529,530,531,532,533,534,291,293,535,536,65,66,67,68,299,304,306,307,71,311,537,420,538,539,540,541,76,542,328,543,544,335,77,342,345,346,349,78,79,352,353,354,355,356,545,368,546,547,369,370,371,548,549,372,550,551],"tindex":"4b5c06dc-3e8a-11e6-997a-49b5140ef9d5","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"4b5c06dd-3e8a-11e6-997a-8f8aefa017ae","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"4b5c06de-3e8a-11e6-997a-153bfb2928e2","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b5c06df-3e8a-11e6-997a-09b6748dc1fa","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:59","type":"CtUnaryOperatorImpl","sourcecode":"!((delegate) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[80,83,84,1,85,91,92,95,99,100,2,102,3,4,427,5,6,7,103,104,106,107,108,109,110,111,112,113,114,115,8,117,9,10,11,12,14,15,16,17,18,118,119,120,19,20,21,121,122,22,124,23,24,25,26,27,28,127,29,128,130,30,31,133,134,135,136,137,139,32,140,141,142,33,143,144,145,146,147,148,149,151,152,153,154,155,157,158,159,160,161,163,164,165,34,166,167,35,168,36,169,37,38,39,170,40,41,197,204,205,206,207,208,209,210,211,212,213,214,42,43,215,216,218,219,220,221,222,223,510,224,225,226,227,228,230,231,44,45,232,233,234,235,236,237,238,239,240,241,242,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,256,257,259,260,261,263,264,265,63,268,269,270,64,271,272,276,277,278,279,280,282,283,291,292,293,65,66,67,68,69,70,297,298,299,300,304,305,306,307,308,71,309,310,311,312,72,73,320,74,75,76,335,77,342,343,344,345,346,347,348,349,78,79,352,353,354,355,356,368,369,370,371,372,373,374],"tindex":"4b5c2df0-3e8a-11e6-997a-731c30aa8486","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (!(typeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5c2df1-3e8a-11e6-997a-2dc93f32b1a0","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4b5c2df2-3e8a-11e6-997a-05cdcb917729","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5c5503-3e8a-11e6-997a-eb6b770c2159","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"4b5c5504-3e8a-11e6-997a-375baa5e3717","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            return java.lang.String.valueOf(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            return java.lang.Boolean.toString(primitive.getAsBoolean());\n        } else if (primitive.isString()) {\n            return primitive.getAsString();\n        } else {\n            throw new java.lang.AssertionError();\n        }\n    } else if (keyElement.isJsonNull()) {\n        return \"null\";\n    } else {\n        throw new java.lang.AssertionError();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"4b5c5505-3e8a-11e6-997a-2320b646cae1","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:57","type":"CtInvocationImpl","sourcecode":"com.google.gson.TypeAdapterFactory.class.isAssignableFrom(value)"},"failures":[],"tindex":"4b5c5506-3e8a-11e6-997a-6d466e23fb16","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.TypeAdapterFactory.class":"context","value":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5c5507-3e8a-11e6-997a-8be4cbd71603","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"4b5c5508-3e8a-11e6-997a-47b422c8c413","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"4b5c7c19-3e8a-11e6-997a-7dab1643bb2b","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            if (memberName == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"4b5c7c1a-3e8a-11e6-997a-bf036a65f53e","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"4b5c7c1b-3e8a-11e6-997a-01a301011216","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[80,83,84,1,85,91,92,95,99,100,2,3,4,5,6,7,103,104,106,107,108,109,110,111,112,113,114,115,8,117,9,10,11,12,13,14,15,16,17,18,118,119,120,19,20,21,121,122,22,124,23,24,25,26,27,28,127,29,128,130,30,31,133,134,135,136,137,139,32,140,141,142,33,143,144,145,146,147,148,149,151,152,153,154,155,157,158,159,160,161,163,164,165,34,166,167,35,168,36,169,37,38,39,170,40,197,204,205,206,207,208,209,210,211,212,213,214,42,43,215,216,218,219,220,221,222,223,224,225,226,227,230,231,44,45,232,233,234,235,236,237,238,239,240,241,242,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,256,257,259,260,261,263,264,265,266,63,268,269,270,64,271,272,273,275,276,277,278,279,280,282,283,285,291,292,293,65,66,67,68,69,70,297,298,299,300,304,305,306,307,308,71,309,310,311,312,72,73,320,74,75,76,335,77,342,343,344,345,346,347,348,349,78,79,352,353,354,355,356,368,369,370,371,372,373,374],"tindex":"4b5c7c1c-3e8a-11e6-997a-1944ceaf3845","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[552,80,553,81,82,554,555,379,1,85,87,88,89,556,90,92,557,96,97,99,100,470,101,6,103,105,106,107,108,110,112,113,114,116,117,11,119,120,21,381,121,471,473,474,122,394,476,123,124,23,558,24,25,559,26,27,479,28,480,126,397,127,29,481,128,129,130,482,560,398,483,131,561,132,484,133,562,399,563,485,138,402,486,382,488,139,406,408,490,410,32,140,141,142,33,413,498,143,144,564,145,146,147,148,149,500,150,151,152,153,155,501,156,565,157,158,502,163,165,34,166,167,168,36,169,38,39,170,40,566,174,175,177,567,503,568,504,182,569,570,571,572,573,574,575,505,198,576,506,577,578,201,507,579,508,204,205,206,207,208,209,210,214,216,218,219,220,222,223,226,230,231,232,236,238,239,240,241,242,243,46,47,48,49,51,52,53,54,55,56,57,511,58,59,60,244,245,580,246,247,248,249,250,251,252,253,254,255,62,256,257,520,521,259,260,522,523,524,261,262,263,264,265,266,267,63,268,269,270,64,272,279,281,282,283,284,285,525,526,581,383,527,528,529,530,286,287,531,532,533,288,419,289,534,290,291,292,293,294,535,295,536,296,65,67,68,69,70,304,305,306,307,71,311,312,314,582,420,319,321,74,327,328,331,332,543,333,426,544,336,337,583,584,340,342,343,344,346,349,351,585,352,353,354,355,356,358,359,545,362,368,369,370,373,374,550,551],"tindex":"4b5ca32d-3e8a-11e6-997a-17d9804fdedb","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Class) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"4b5ca32e-3e8a-11e6-997a-5944c00e8a6e","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[85,439,445,446,448,453,454,455,469,88,89,92,21,124,561,493,149,151,152,39,569,223,268,269,285,307,582],"tindex":"4b5cca3f-3e8a-11e6-997a-e52dd36e10ce","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"4b5cca40-3e8a-11e6-997a-6142c5611f9d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"4b5cca41-3e8a-11e6-997a-8fe65946581e","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b5cca42-3e8a-11e6-997a-8f85890cc3e0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[552,80,553,81,82,83,84,586,85,468,469,86,587,87,88,89,556,90,91,92,588,93,94,557,589,95,387,388,96,97,389,98,99,100,470,101,590,2,102,3,4,427,5,6,7,103,104,105,106,107,108,109,110,111,112,113,114,115,8,116,117,9,10,11,12,13,14,15,16,17,18,118,119,120,19,20,21,381,121,471,390,391,392,472,473,474,475,122,393,394,476,123,22,124,477,395,23,478,125,558,396,24,25,559,26,27,479,28,480,126,397,127,29,481,128,129,130,482,560,398,483,131,561,132,484,30,31,133,134,135,136,137,562,399,563,400,485,138,401,402,486,382,403,404,487,591,488,405,139,406,407,408,409,489,490,491,410,32,492,493,411,140,494,141,142,495,496,412,33,497,413,498,592,414,499,143,144,564,145,146,147,148,149,500,150,151,152,153,154,155,501,156,565,157,158,159,160,502,161,593,162,163,164,165,34,166,167,35,168,36,169,37,38,39,170,40,594,595,171,596,172,566,597,598,599,173,174,41,175,176,177,600,601,602,603,604,605,178,567,503,606,607,179,180,608,609,181,568,504,610,182,569,183,184,570,185,611,571,612,613,614,615,186,616,617,572,618,187,188,619,189,190,191,192,620,621,573,622,574,575,193,194,505,195,415,623,196,624,625,197,198,626,627,576,628,629,506,577,199,200,630,578,201,507,631,202,632,579,508,633,634,203,635,204,205,206,207,208,209,210,211,212,213,214,509,42,636,43,215,637,216,217,218,638,219,639,220,221,222,223,510,224,225,226,227,228,229,230,231,44,45,232,233,234,235,236,237,238,239,240,241,242,243,640,46,47,48,49,50,51,57,511,58,59,60,244,245,580,246,61,247,641,248,249,250,251,252,253,254,255,417,62,256,257,258,520,521,259,260,522,523,524,261,262,263,264,265,266,267,63,268,269,270,271,642,272,273,274,275,276,277,278,418,279,280,281,282,283,284,285,525,526,581,383,527,528,529,530,286,287,531,532,533,288,419,289,534,290,291,292,293,294,535,295,536,296,65,66,67,68,69,70,643,297,298,299,300,301,302,644,303,304,645,305,306,307,308,71,309,310,311,312,313,646,314,647,315,72,73,537,316,648,582,317,420,318,319,649,320,321,538,322,74,323,650,539,651,652,540,75,653,324,654,655,325,541,326,76,327,542,328,329,656,421,330,331,332,657,543,333,426,544,334,335,336,658,337,583,77,338,339,584,659,340,660,341,661,342,343,344,345,346,347,348,349,350,351,585,78,79,662,352,353,354,355,356,357,663,358,664,359,665,360,361,545,362,666,363,364,365,667,366,367,668,368,546,547,369,669,670,370,671,371,548,672,549,372,373,374,550,551,422],"tindex":"4b5cca43-3e8a-11e6-997a-e7e49d853f3a","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b5cf154-3e8a-11e6-997a-e5186b8b57ae","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"4b5cf155-3e8a-11e6-997a-a504dd177cba","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:536","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_DOCUMENT)"},"failures":[428,429,430,431,432,433,434,80,83,84,379,1,380,85,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,0,460,461,462,463,464,465,466,467,468,469,92,95,387,388,96,97,99,470,2,3,427,6,7,103,105,106,107,108,109,110,112,113,114,8,9,10,11,12,14,15,16,118,120,21,381,121,471,472,473,474,475,122,476,124,477,23,478,479,480,29,481,128,130,482,483,484,30,31,485,486,382,487,488,139,489,490,491,492,493,140,494,141,142,495,496,33,497,498,499,143,144,145,147,148,149,500,150,151,152,153,501,157,158,160,502,161,163,167,35,168,39,170,41,503,504,505,506,507,508,204,205,208,211,214,509,43,216,220,222,223,510,225,230,44,45,233,238,241,242,46,47,48,49,51,52,53,54,55,56,57,511,58,59,60,244,61,512,416,513,514,515,516,517,518,519,520,521,259,260,522,523,524,261,264,266,268,269,270,64,271,273,276,279,280,282,284,285,525,526,383,527,528,529,530,531,532,533,534,291,293,535,536,65,66,67,68,299,304,306,307,71,311,537,420,538,539,540,541,76,542,328,543,544,335,77,342,345,346,349,78,79,352,353,354,355,356,545,368,546,547,369,370,371,548,549,372,550,551],"tindex":"4b5cf156-3e8a-11e6-997a-1b9a3019291c","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"empty","com.google.gson.stream.JsonScope.EMPTY_DOCUMENT":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"4b5d1867-3e8a-11e6-997a-d7193ddb9d78","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[2,3,6,110,35,567,570,571,573,577,508,512,416,513,514,515,516,517,518,534,71],"tindex":"4b5d1868-3e8a-11e6-997a-8d0fd20c1f80","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value <= value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"4b5d1869-3e8a-11e6-997a-ab4d24fe471b","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4b5d186a-3e8a-11e6-997a-1f148eba7df1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1344","type":"CtBinaryOperatorImpl","sourcecode":"p == l"},"failures":[],"tindex":"4b5d186b-3e8a-11e6-997a-ff41c74ccd43","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset == count) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (offset == count) {\n                {\n                    throw new java.lang.AssertionError();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","l":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[242],"tindex":"4b5d186c-3e8a-11e6-997a-fdff54bfbbb3","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"4b5d3f7d-3e8a-11e6-997a-632f838bf80c","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj instanceof com.google.gson.JsonArray) {\n        {\n            if (obj instanceof java.lang.Number) {\n                {\n                    try {\n                        if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                            throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                        } \n                    } catch (com.google.gson.stream.MalformedJsonException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"4b5d3f7e-3e8a-11e6-997a-7fb7c6b0d074","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:382","type":"CtBinaryOperatorImpl","sourcecode":"delta == 0"},"failures":[552,80,553,81,82,83,84,586,87,88,89,93,589,96,2,102,3,4,427,5,6,7,105,111,115,116,10,12,13,14,15,16,17,18,119,120,19,20,558,24,25,559,26,27,479,28,480,126,397,127,29,481,128,129,130,482,560,398,483,131,561,132,484,485,138,382,139,140,142,495,143,564,149,153,154,501,156,565,157,158,160,502,161,593,162,163,164,171,609,572,574,575,624,576,578,579,509,639,237,242,243,640,46,48,245,580,246,248,249,250,251,252,253,254,255,417,62,256,257,258,520,521,259,260,522,523,524,261,262,263,264,265,266,267,63,271,642,272,273,274,275,276,277,278,281,284,285,532,643,297,298,299,300,304,645,305,306,307,311,312,314,420,319,650,541,327,542,331,333,337,583,338,339,584,661,342,343,344,345,346,347,348,349,350,78,79,662,352,353,354,355,356,546,548,549,550,551],"tindex":"4b5d3f7f-3e8a-11e6-997a-419744860f7f","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (dateStyle == 0) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"dateStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"4b5d3f80-3e8a-11e6-997a-2f089bcdc725","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != src) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"src","type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b5d3f81-3e8a-11e6-997a-a15937e2e2eb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"4b5d6692-3e8a-11e6-997a-673317739a0f","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4b5d6693-3e8a-11e6-997a-9992f4138c2b","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5d6694-3e8a-11e6-997a-95be8eeca832","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[80,83,84,1,85,91,92,95,99,100,2,3,4,5,6,7,103,104,106,107,108,109,110,111,112,113,114,115,8,116,117,9,10,11,12,13,14,15,16,17,18,118,119,120,19,20,21,121,122,22,124,23,24,25,26,27,28,127,29,128,130,30,31,133,134,135,136,137,139,32,140,141,142,33,143,144,145,146,147,148,149,151,152,153,154,155,157,158,159,160,161,163,164,165,34,166,167,35,168,36,169,37,38,39,170,40,197,204,205,206,207,208,209,210,211,212,213,214,42,43,215,216,218,219,220,221,222,223,224,225,226,227,230,231,44,45,232,233,234,235,236,237,238,239,240,241,242,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,256,257,259,260,261,263,264,265,266,63,268,269,270,64,271,272,273,275,276,277,278,279,280,282,283,285,291,292,293,65,66,67,68,69,70,297,298,299,300,304,305,306,307,308,71,309,310,311,312,72,73,320,74,75,76,335,77,342,343,344,345,346,347,348,349,78,79,352,353,354,355,356,368,369,370,371,372,373,374],"tindex":"4b5d6695-3e8a-11e6-997a-d5474b2e0bbd","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4b5d6696-3e8a-11e6-997a-6721f0cce70f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:694","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)"},"failures":[],"tindex":"4b5d6697-3e8a-11e6-997a-875545312fb5","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if ((dateStyle == dateStyle) || (p == dateStyle)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (timeStyle == timeStyle) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.int = dateStyle;\n                    com.google.gson.GsonBuilder.this.int = timeStyle;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"timeStyle","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4b5d8da8-3e8a-11e6-997a-61c983406012","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[375,673],"tindex":"4b5d8da9-3e8a-11e6-997a-714dfa5af6ff","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4b5d8daa-3e8a-11e6-997a-9bd0d6ed9dde","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (property != null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4b5d8dab-3e8a-11e6-997a-a7614e10f8de","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (type instanceof java.lang.reflect.WildcardType) {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:467","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[],"tindex":"4b5db4bc-3e8a-11e6-997a-b979befa0dda","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        {\n            if (style == style) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.int = style;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"style","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:961","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"4b5db4bd-3e8a-11e6-997a-0db6d93c58b5","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if ((dateStyle == dateStyle) || (p == dateStyle)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (timeStyle == timeStyle) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467265934299/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.GsonBuilder.this.int = dateStyle;\n                    com.google.gson.GsonBuilder.this.int = timeStyle;\n                    com.google.gson.GsonBuilder.this.java.lang.String = null;\n                    return com.google.gson.GsonBuilder.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"4b5db4be-3e8a-11e6-997a-cbd9e1f38b92","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
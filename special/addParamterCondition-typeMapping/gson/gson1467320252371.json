{"failureDictionary":{"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":237,"com.google.gson.functional.StringTest.testStringValueDeserialization":236,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":38,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":151,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":42,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":197,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":31,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":188,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":69,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":169,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":255,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":208,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":209,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":15,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":168,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":41,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":97,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":26,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":28,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":133,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":231,"com.google.gson.functional.ObjectTest.testSingletonLists":166,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":81,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":235,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":86,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":177,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":2,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":43,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":149,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":207,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":198,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":45,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":164,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":186,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":246,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":171,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":225,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":66,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":126,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":150,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":18,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":195,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":104,"com.google.gson.functional.EnumTest.testEnumCaseMapping":260,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":87,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":210,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":65,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":119,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":73,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":254,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":112,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":170,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":141,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":127,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":244,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":58,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":155,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":193,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":67,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":101,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":6,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":59,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":48,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":90,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":156,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":47,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":196,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":85,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":12,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":102,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":64,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":96,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":76,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":56,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":36,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":100,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":57,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":205,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":213,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":234,"com.google.gson.functional.ObjectTest.testNestedDeserialization":187,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":146,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":226,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":53,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":194,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":37,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":172,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":103,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":106,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":220,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":240,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":91,"com.google.gson.JavaSerializationTest.testListIsSerializable":9,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":14,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":147,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":108,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":92,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":114,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":98,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":11,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":128,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":144,"com.google.gson.functional.CollectionTest.testSetDeserialization":216,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":265,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":162,"com.google.gson.functional.EnumTest.testEnumSet":253,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":68,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":192,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":13,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":44,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":54,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":88,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":206,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":134,"com.google.gson.functional.MapTest.testHashMapDeserialization":95,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":80,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":52,"com.google.gson.functional.MapTest.testSortedMap":105,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":200,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":35,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":110,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":121,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":249,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":79,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":229,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":51,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":261,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":143,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":62,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":145,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":251,"com.google.gson.functional.CollectionTest.testQueueDeserialization":219,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":34,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":243,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":84,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":201,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":181,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":182,"com.google.gson.functional.MapTest.testStringKeyDeserialization":107,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":123,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":157,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":185,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":25,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":77,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":247,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":159,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":1,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":115,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":124,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":239,"com.google.gson.JavaSerializationTest.testMapIsSerializable":8,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":74,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":214,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":264,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":238,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":135,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":148,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":228,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":183,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":27,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":242,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":19,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":153,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":5,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":189,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":70,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":232,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":263,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":93,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":130,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":184,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":16,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":139,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":175,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":163,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":173,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":61,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":158,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":132,"com.google.gson.functional.EnumTest.testEnumSubclass":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":63,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":3,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":176,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":40,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":215,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":83,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":248,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":202,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":17,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":224,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":160,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":20,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":138,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":118,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":178,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":245,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":55,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":222,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":113,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":167,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":94,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":4,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":227,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":49,"com.google.gson.CommentsTest.testParseComments":0,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":131,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":142,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":233,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":89,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":122,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":60,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":179,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":199,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":111,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":266,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":211,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":221,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":24,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":125,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":29,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":75,"com.google.gson.functional.MapTest.testMapDeserialization":99,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":117,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":140,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":230,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":252,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":257,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":191,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":136,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":129,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":137},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"43ace743-3f05-11e6-822a-b15a13468e55","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320046958/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266],"tindex":"43af7f54-3f05-11e6-822a-5f46bc65451c","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj instanceof com.google.gson.JsonNull) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320046958/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"43afcd75-3f05-11e6-822a-31611ebd5266","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"43afcd76-3f05-11e6-822a-d50ec7b0a444","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320046958/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"43aff487-3f05-11e6-822a-a57fcb3c29d7","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320046958/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"43aff488-3f05-11e6-822a-0b1f3e83ab7d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320046958/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"43b01b99-3f05-11e6-822a-c110b383dd77","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if ((srcString != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320046958/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"srcString"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"43b01b9a-3f05-11e6-822a-d7a567e9cefb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320046958/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:361","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"43b0b7db-3f05-11e6-822a-3b832db19711","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320046958/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_NONE":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":9,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":414,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":366,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":50,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":142,"com.google.gson.stream.JsonWriterTest.testRepeatedName":42,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":72,"com.google.gson.MixedStreamTest.testWriteLenient":286,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":355,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":390,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":96,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":106,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":297,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":342,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":202,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":382,"com.google.gson.functional.ObjectTest.testSingletonLists":170,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":354,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":367,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":31,"com.google.gson.stream.JsonWriterTest.testStrings":60,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":64,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":10,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":214,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":188,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":215,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":54,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":292,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":339,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":289,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":365,"com.google.gson.functional.JsonTreeTest.testToJsonTree":421,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":220,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":407,"com.google.gson.stream.JsonWriterTest.testNulls":40,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":383,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":87,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":211,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":375,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":304,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":103,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":190,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":376,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":63,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":324,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":328,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":337,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":144,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":62,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":422,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":148,"com.google.gson.JsonParserTest.testParseString":381,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":212,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":318,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":312,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":182,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":268,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":396,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":408,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":94,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":258,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":20,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":140,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":319,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":181,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":240,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":32,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":55,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":274,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":4,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":76,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":158,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":82,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":394,"com.google.gson.stream.JsonWriterTest.testEmptyArray":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":269,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":353,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":303,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":203,"com.google.gson.functional.EnumTest.testEnumSet":66,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":175,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":1,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":111,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":373,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":124,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":177,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":26,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":81,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":53,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":65,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":334,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":321,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":364,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":88,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":229,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":256,"com.google.gson.functional.MapTest.testMapSerialization":129,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":230,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":378,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":410,"com.google.gson.functional.MapTest.testSerializeMaps":123,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":278,"com.google.gson.functional.MapTest.testComplexKeysSerialization":138,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":19,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":400,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":250,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":192,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":157,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":218,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":384,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":73,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":18,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":113,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":325,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":141,"com.google.gson.functional.PrettyPrintingTest.testMap":216,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":330,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":99,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":346,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":213,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":370,"com.google.gson.functional.CollectionTest.testQueueSerialization":100,"com.google.gson.functional.MapTest.testMapSerializationEmpty":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":264,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":385,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":56,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":58,"com.google.gson.functional.MapTest.testMapOfMapSerialization":128,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":310,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":35,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":198,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":315,"com.google.gson.functional.FieldNamingTest.testIdentity":279,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":368,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":45,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":232,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":75,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":169,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":420,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":38,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":293,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":302,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":369,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":313,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":28,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":351,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":5,"com.google.gson.functional.MapTest.testMapSubclassSerialization":122,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":226,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":205,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":285,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":362,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":397,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":80,"com.google.gson.functional.EnumTest.testEnumSubclass":69,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":316,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":305,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":301,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":112,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":187,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":46,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":403,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":27,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":48,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":311,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":357,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":246,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":43,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":242,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":191,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":116,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":171,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":254,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":409,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":131,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":280,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":199,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":86,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":359,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":29,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":223,"com.google.gson.JsonParserTest.testParseMixedArray":33,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":306,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":374,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":17,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":251,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":308,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":196,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":352,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":221,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":121,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":125,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":160,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":153,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":151,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":7,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":183,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":327,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":90,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":332,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":95,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":186,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":130,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":360,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":155,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":341,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":291,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":275,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":68,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":98,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":225,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":167,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":398,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":22,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":208,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":74,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":184,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":9,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":344,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":114,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":71,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":91,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":343,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":104,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":204,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":150,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":267,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":263,"com.google.gson.stream.JsonWriterTest.testNullStringValue":37,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":156,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":405,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":314,"com.google.gson.stream.JsonWriterTest.testEmptyObject":52,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":326,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":119,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":67,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":152,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":415,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":411,"com.google.gson.functional.MapTest.testGeneralMapField":135,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":239,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":143,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":247,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":270,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":133,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":147,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":162,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":320,"com.google.gson.JsonObjectTest.testDeepCopy":386,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":164,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":107,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":294,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":266,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":363,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":168,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":299,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":236,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":13,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":41,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":265,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":233,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":118,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":180,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":402,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":338,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":253,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":79,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":323,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":298,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":393,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":399,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":109,"com.google.gson.stream.JsonWriterTest.testDoubles":57,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":93,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":3,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":134,"com.google.gson.functional.MapTest.testInterfaceTypeMap":132,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":331,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":159,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":388,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":70,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":207,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":345,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":336,"com.google.gson.MixedStreamTest.testWriteClosed":288,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":102,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":172,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":83,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":2,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":418,"com.google.gson.stream.JsonWriterTest.testLongs":39,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":185,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":272,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":161,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":173,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":101,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":14,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":16,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":105,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":377,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":416,"com.google.gson.stream.JsonWriterTest.testNumbers":59,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":194,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":307,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":419,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":193,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":237,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":417,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":309,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":358,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":126,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":350,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":149,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":97,"com.google.gson.functional.MapTest.testRawMapSerialization":137,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":284,"com.google.gson.JsonParserTest.testParseReader":380,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":209,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":89,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":178,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":413,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":379,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":241,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":296,"com.google.gson.ObjectTypeAdapterTest.testSerialize":30,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":282,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":145,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":391,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":6,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":276,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":84,"com.google.gson.functional.MapTest.testMapWithQuotes":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":110,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":300,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":260,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":201,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":47,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":401,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":77,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":222,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":348,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":261,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":349,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":392,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":78,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":356,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":92,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":234,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":227,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":117,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":206,"com.google.gson.functional.ObjectTest.testNestedSerialization":179,"com.google.gson.JsonObjectTest.testAddingStringProperties":387,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":120,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":146,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":163,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":235,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":136,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":224,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":259,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":287,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":295,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":61,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":176,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":406,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":290,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":11,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":210,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":371,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":245,"com.google.gson.functional.CollectionTest.testSetSerialization":108,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":115,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":219,"com.google.gson.functional.StringTest.testStringValueSerialization":372,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":281,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":195,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":174,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":248,"com.google.gson.stream.JsonWriterTest.testBooleans":36,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":262,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":277,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":189,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":8,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":21,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":335,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":85,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":283,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":49,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":243},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"332326e0-3e7b-11e6-8c27-f5390bd2f382","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"33237501-3e7b-11e6-8c27-59fca504c52c","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"33237502-3e7b-11e6-8c27-39dbc2ddc384","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"33237503-3e7b-11e6-8c27-83a73a366319","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"33239c14-3e7b-11e6-8c27-dbb1843aa552","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[],"tindex":"33239c15-3e7b-11e6-8c27-a969cb8243e2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[0],"tindex":"33239c16-3e7b-11e6-8c27-8b57a19adacc","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if ((memberName.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"3323c327-3e7b-11e6-8c27-43b279d9d490","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"3323c328-3e7b-11e6-8c27-6bc0a59debe1","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,3,4,5,6,7],"tindex":"3323c329-3e7b-11e6-8c27-e5507bd11ae0","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"3323ea3a-3e7b-11e6-8c27-fd652c0c4bc5","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"3324114b-3e7b-11e6-8c27-959c980aa0a4","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[8],"tindex":"3324114c-3e7b-11e6-8c27-2f01ec5417e8","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"3324114d-3e7b-11e6-8c27-bfb950baec74","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"3324385e-3e7b-11e6-8c27-0b000f58a015","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[9,10,11,12,13,14,15,16],"tindex":"3324385f-3e7b-11e6-8c27-bb54a22bb9f2","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"33243860-3e7b-11e6-8c27-bb758f38ee4d","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"33243861-3e7b-11e6-8c27-b3eebc891a1b","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[17,18],"tindex":"33245f72-3e7b-11e6-8c27-b7856f43f367","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (to instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[],"tindex":"33245f73-3e7b-11e6-8c27-5d0f14a4e08c","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"33245f74-3e7b-11e6-8c27-33b36f11844c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"33245f75-3e7b-11e6-8c27-b7878332f309","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[],"tindex":"33248686-3e7b-11e6-8c27-378bf091022e","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:208","type":"CtBinaryOperatorImpl","sourcecode":"(peek()) == (com.google.gson.stream.JsonToken.NAME)"},"failures":[],"tindex":"33248687-3e7b-11e6-8c27-67096ba11bcf","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    java.lang.Object java.lang.Object = field.get(value);\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n    t.write(writer, fieldValue);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value","com.google.gson.stream.JsonToken.NAME":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:793","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME)"},"failures":[],"tindex":"33248688-3e7b-11e6-8c27-4398207b0783","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (end == start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"end","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"33248689-3e7b-11e6-8c27-5564cef0b6c0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"3324868a-3e7b-11e6-8c27-c97202f506e9","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"3324ad9b-3e7b-11e6-8c27-31b8fa08a12a","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"o","java.sql.Timestamp.class":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:549","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.CLOSED)"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,1,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,2,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,6,247,248,249,250,251,252,253,254,255,256,257,258,7,259,260,261,262,263,264,265,266,267,268,269,270,271,272,9,12,13,16,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290],"tindex":"3324ad9c-3e7b-11e6-8c27-5340428c7bcc","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (nonempty == nonempty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.CLOSED":"nonempty","peekStack":"nonempty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"3324d4ad-3e7b-11e6-8c27-cb3cd3fa96aa","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.util.Iterator) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[93,291],"tindex":"3324d4ae-3e7b-11e6-8c27-2f391699cde1","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"3324d4af-3e7b-11e6-8c27-8bb1dca59dd1","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src.isSynthetic()) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[292,293,294,27,28,32,295,296,64,66,67,68,69,70,71,297,72,73,74,75,76,82,88,89,90,298,91,92,93,94,95,96,97,99,101,102,104,105,106,108,110,112,113,114,115,116,299,117,300,119,120,123,126,127,128,131,132,134,135,137,142,301,302,143,303,144,145,146,147,148,149,150,151,304,152,153,154,155,156,157,2,160,161,305,3,162,306,4,163,307,308,164,309,310,311,312,313,314,315,316,317,318,319,165,320,321,322,323,324,166,5,325,167,326,168,169,170,171,172,173,175,176,327,328,177,178,179,180,181,182,183,184,185,186,187,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,329,330,331,205,332,333,334,335,336,337,338,339,340,341,215,216,217,218,219,220,221,223,224,225,226,228,229,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,6,247,248,249,250,251,252,253,254,342,255,343,7,344,345,346,347,348,263,349,350,264,351,352,353,265,266,267,268,354,269,355,270,271,356,357,358,359,272,360,361,362,9,12,13,16,363,273,274,364,275,276,277,278,279,365,366,367,368,369,280,370,371,372,281],"tindex":"3324d4b0-3e7b-11e6-8c27-d1e8ea45d7b4","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[373,17,18],"tindex":"332522d1-3e7b-11e6-8c27-79c0443fa3cb","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:586","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 1"},"failures":[374,375],"tindex":"332549e2-3e7b-11e6-8c27-1720815fab87","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"332570f3-3e7b-11e6-8c27-9140d858a6bc","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"typeOfT","typeOfT":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"33259804-3e7b-11e6-8c27-e1f2feba0150","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[22,23,25,376,377,378,379,380,381,32,0,62,8,382,383,384,385,386,387,63,388,64,78,389,390,391,392,393,394,112,113,114,117,395,396,397,398,399,400,142,302,401,155,402,403,404,405,406,407,188,408,409,410,223,411,224,412,413,228,414,415,416,417,418,256,257,258,419,7,420,421,422,262,282,283],"tindex":"33259805-3e7b-11e6-8c27-0d1b7c3d7210","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"33259806-3e7b-11e6-8c27-1dd2f0f889ff","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (to instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"33259807-3e7b-11e6-8c27-8dcf6713d918","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:53","type":"CtInvocationImpl","sourcecode":"com.google.gson.TypeAdapter.class.isAssignableFrom(value)"},"failures":[],"tindex":"3325bf18-3e7b-11e6-8c27-d70fee451942","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.TypeAdapter.class":"context","value":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1527","type":"CtBinaryOperatorImpl","sourcecode":"(c >= '0') && (c <= '9')"},"failures":[],"tindex":"3325bf19-3e7b-11e6-8c27-fd852cf62f3c","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote >= '0') && (c <= '9')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"3325bf1a-3e7b-11e6-8c27-9fb81480d3b7","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"3325e62b-3e7b-11e6-8c27-99c54bc81a49","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"3325e62c-3e7b-11e6-8c27-cb46ccca2d99","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"3325e62d-3e7b-11e6-8c27-4d0a55134ce0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == value) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193380/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"value","java.util.Date.class":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":46,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
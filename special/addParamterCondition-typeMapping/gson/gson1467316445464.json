{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":134,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":252,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":75,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":28,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":114,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":278,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":123,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":141,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":129,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":146,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":161,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":4,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":22,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":115,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":116,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":2,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":119,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":151,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":159,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":13,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":91,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":45,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":100,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":262,"com.google.gson.functional.ObjectTest.testSingletonLists":157,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":132,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":154,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":229,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":269,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":61,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":172,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":280,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":184,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":217,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":225,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":81,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":82,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":191,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":219,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":188,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":164,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":6,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":245,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":140,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":51,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":260,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":109,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":266,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":17,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":54,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":272,"com.google.gson.functional.JsonTreeTest.testToJsonTree":240,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":267,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":37,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":39,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":46,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":107,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":68,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":3,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":263,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":202,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":8,"com.google.gson.functional.MapTest.testGeneralMapField":112,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":162,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":232,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":70,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":212,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":169,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":283,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":41,"com.google.gson.MixedStreamTest.testReadMixedStreamed":60,"com.google.gson.JsonObjectTest.testDeepCopy":49,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":215,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":179,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":21,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":153,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":256,"com.google.gson.JsonParserTest.testParseString":1,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":143,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":16,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":12,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":181,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":78,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":130,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":85,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":250,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":208,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":40,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":277,"com.google.gson.functional.ObjectTest.testNestedDeserialization":189,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":216,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":281,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":199,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":34,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":205,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":178,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":62,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":64,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":165,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":18,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":128,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":279,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":95,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":155,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":244,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":221,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":98,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":25,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":133,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":32,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":247,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":14,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":111,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":65,"com.google.gson.functional.MapTest.testInterfaceTypeMap":110,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":214,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":223,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":235,"com.google.gson.functional.CollectionTest.testSetDeserialization":118,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":92,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":121,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":168,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":251,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":99,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":173,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":97,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":276,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":67,"com.google.gson.MixedStreamTest.testWriteClosed":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":201,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":230,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":163,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":224,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":101,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":222,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":30,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":55,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":186,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":204,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":197,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":241,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":145,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":166,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":227,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":198,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":79,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":149,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":88,"com.google.gson.functional.MapTest.testComplexKeysSerialization":113,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":249,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":31,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":192,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":122,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":234,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":268,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":237,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":236,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":253,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":29,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":53,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":47,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":76,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":87,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":124,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":108,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":180,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":282,"com.google.gson.functional.MapTest.testStringKeyDeserialization":19,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":187,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":257,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":56,"com.google.gson.JsonParserTest.testParseReader":0,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":175,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":242,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":200,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":80,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":48,"com.google.gson.ObjectTypeAdapterTest.testSerialize":273,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":255,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":23,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":196,"com.google.gson.functional.FieldNamingTest.testIdentity":150,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":147,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":102,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":33,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":207,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":182,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":127,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":156,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":239,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":20,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":135,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":90,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":275,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":195,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":93,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":185,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":77,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":26,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":106,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":167,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":57,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":259,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":144,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":228,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":96,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":171,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":211,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":24,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":84,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":248,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":246,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":209,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":27,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":137,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":52,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":136,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":11,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":35,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":174,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":274,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":5,"com.google.gson.JsonObjectTest.testAddingStringProperties":50,"com.google.gson.functional.ObjectTest.testNestedSerialization":176,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":69,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":126,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":9,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":73,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":158,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":170,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":94,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":233,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":43,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":160,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":265,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":38,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":152,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":71,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":138,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":177,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":83,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":89,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":105,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":7,"com.google.gson.functional.CollectionTest.testSetSerialization":120,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":220,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":258,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":125,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":193,"com.google.gson.MixedStreamTest.testWriteInvalidState":58,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":203,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":72,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":194,"com.google.gson.functional.MapTest.testMapDeserialization":15,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":63,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":42,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":148,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":231,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":44,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":261,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":226,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":264,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":210,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":10,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":254,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":139,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":103,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":183,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":243,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":36,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":104},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"tindex":"6690923f-3efc-11e6-85b9-d3ca555f8515","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6690e060-3efc-11e6-85b9-07a4e88d2e7c","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if ((json.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:917","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6690e061-3efc-11e6-85b9-213c69ff4ed3","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (count == count) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"count","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl"},"failures":[51,52,53,54,55],"tindex":"66910772-3efc-11e6-85b9-73a1b23751b3","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1170","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"66910773-3efc-11e6-85b9-9b8c9fb50b4e","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"indexOfSubstring","com.google.gson.stream.JsonReader.PEEKED_NONE":"indexOfSubstring"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"66910774-3efc-11e6-85b9-c9cf754ec872","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property != null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"66910775-3efc-11e6-85b9-eba0aa5a15d7","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,6,78,79,7,8,9,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,11,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,20,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,22,23,24,25,151,26,27,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,28,198,199,200,201,202,203,204,205,206,29,30,207,208,209,210,211,212,213,214,215,216,217,218,219,220,34,35,36,221,222,223,37,38,224,225,226,227,39,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,40,273,274,275,276],"tindex":"66912e86-3efc-11e6-85b9-3b60aed1772d","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"66912e87-3efc-11e6-85b9-6fa676df3cf0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl"},"failures":[277,278],"tindex":"66915598-3efc-11e6-85b9-f924127c9bbf","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value <= value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"66915599-3efc-11e6-85b9-f75f9c0085da","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    synchronized(java.text.DateFormat) {\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException e) {\n            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"json","this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6691559a-3efc-11e6-85b9-0797347d7a4e","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,6,78,79,7,8,9,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,20,121,122,123,279,124,125,280,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,22,23,24,25,151,26,27,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,281,177,178,179,180,282,181,182,183,184,185,186,187,188,189,190,283,191,192,193,194,195,196,197,28,198,199,200,201,202,203,204,205,206,29,30,207,208,209,210,211,212,213,214,215,216,217,218,219,220,34,35,36,221,222,223,37,38,224,225,226,227,39,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,40,273,274,275,276],"tindex":"66917cab-3efc-11e6-85b9-cbb4c1d282a5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw == raw) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw","rawSupertype":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6691a3bc-3efc-11e6-85b9-47b931873c41","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"toResolve","typeOfT":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6691cacd-3efc-11e6-85b9-3bb01158286f","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"contextRawType","toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6691f1de-3efc-11e6-85b9-4d3cfe1035a6","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if ((!(o.isJsonNull())) && ((o.peek()) != o)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"o","jsonReader":"o","element":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6691f1df-3efc-11e6-85b9-db05addcf33d","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6691f1e0-3efc-11e6-85b9-1379936fa8f5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl"},"failures":[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,6,78,79,7,8,9,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,20,121,122,123,279,124,125,280,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,22,23,24,25,151,26,27,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,28,198,199,200,201,202,203,204,205,206,29,30,207,208,209,210,211,212,213,214,215,216,217,218,219,220,34,35,36,221,222,223,37,38,224,225,226,227,39,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,40,273,274,275,276],"tindex":"669218f1-3efc-11e6-85b9-bf914c34f8a7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (!serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1531","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"669218f2-3efc-11e6-85b9-43c93c836d27","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote >= 'A') && (c <= 'F')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467316043416/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":186,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":607,"com.google.gson.functional.StringTest.testStringValueDeserialization":605,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":660,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":81,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":580,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":404,"com.google.gson.stream.JsonWriterTest.testRepeatedName":652,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":16,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":148,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":70,"com.google.gson.MixedStreamTest.testWriteLenient":628,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":280,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":59,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":53,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":57,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":117,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":452,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":315,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":545,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":167,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":413,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":257,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":31,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":92,"com.google.gson.functional.ObjectTest.testSingletonLists":115,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":581,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":397,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":608,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":642,"com.google.gson.stream.JsonWriterTest.testStrings":670,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":345,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":12,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":595,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":130,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":298,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":455,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":1,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":680,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":621,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":284,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":153,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":444,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":511,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":664,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":248,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":76,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":289,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":389,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":506,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":271,"com.google.gson.functional.EnumTest.testEnumCaseMapping":314,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":606,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":631,"com.google.gson.functional.JsonTreeTest.testToJsonTree":217,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":388,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":597,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":112,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":258,"com.google.gson.stream.JsonWriterTest.testNulls":650,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":279,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":677,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":536,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":574,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":383,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":245,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":325,"com.google.gson.functional.ObjectTest.testNullDeserialization":491,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":155,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":618,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":127,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":294,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":464,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":405,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":488,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":246,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":504,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":86,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":137,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":293,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":598,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":88,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":469,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":468,"com.google.gson.JsonParserTest.testParseString":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":594,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":449,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":678,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":682,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":428,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":559,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":139,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":287,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":532,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":579,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":71,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":361,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":441,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":571,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":213,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":635,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":63,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":374,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":351,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":450,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":442,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":136,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":526,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":10,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":123,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":231,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":665,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":23,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":272,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":409,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":694,"com.google.gson.metrics.PerformanceTest.testDummy":296,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":103,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":29,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":510,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":264,"com.google.gson.stream.JsonWriterTest.testEmptyArray":644,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":300,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":376,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":587,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":573,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":85,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":158,"com.google.gson.functional.CollectionTest.testSetDeserialization":56,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":168,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":126,"com.google.gson.functional.EnumTest.testEnumSet":307,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":547,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":433,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":30,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":338,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":563,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":131,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":28,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":446,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":172,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":457,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":663,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":13,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":501,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":458,"com.google.gson.functional.MapTest.testHashMapDeserialization":355,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":402,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":585,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":519,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":604,"com.google.gson.MixedStreamTest.testReadNulls":629,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":39,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":185,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":210,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":305,"com.google.gson.functional.MapTest.testSortedMap":369,"com.google.gson.functional.MapTest.testMapSerialization":366,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":187,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":176,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":439,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":539,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":235,"com.google.gson.functional.MapTest.testSerializeMaps":357,"com.google.gson.functional.MapTest.testComplexKeysSerialization":80,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":546,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":375,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":634,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":543,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":15,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":157,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":98,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":688,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":51,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":302,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":312,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":174,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":259,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":18,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":490,"com.google.gson.functional.MapTest.testStringKeyDeserialization":273,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":540,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":339,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":471,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":377,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":408,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":403,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":497,"com.google.gson.functional.PrettyPrintingTest.testMap":512,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":318,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":189,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":556,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":297,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":542,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":679,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":611,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":615,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":260,"com.google.gson.functional.CollectionTest.testQueueSerialization":322,"com.google.gson.functional.MapTest.testMapSerializationEmpty":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":569,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":434,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":666,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":668,"com.google.gson.functional.MapTest.testMapOfMapSerialization":365,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":576,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":327,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":645,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":164,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":436,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":346,"com.google.gson.functional.FieldNamingTest.testIdentity":236,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":609,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":265,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":192,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":655,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":140,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":22,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":114,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":216,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":336,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":648,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":391,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":290,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":681,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":378,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":610,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":150,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":590,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":564,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":596,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":352,"com.google.gson.functional.MapTest.testMapSubclassSerialization":356,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":467,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":37,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":182,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":549,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":169,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":239,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":423,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":600,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":72,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":555,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":11,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":27,"com.google.gson.functional.EnumTest.testEnumSubclass":310,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":445,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":129,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":299,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":390,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":82,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":689,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":451,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":65,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":46,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":393,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":152,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":656,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":429,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":151,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":101,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":7,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":535,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":249,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":435,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":484,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":21,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":427,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":658,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":591,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":116,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":354,"com.google.gson.MixedStreamTest.testWriteNulls":627,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":534,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":653,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":349,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":528,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":25,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":156,"com.google.gson.CommentsTest.testParseComments":633,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":255,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":95,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":118,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":341,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":198,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":203,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":448,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":516,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":368,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":613,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":493,"com.google.gson.MixedStreamTest.testReadInvalidState":625,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":165,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":36,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":593,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":177,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":641,"com.google.gson.JsonParserTest.testParseMixedArray":643,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":401,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":691,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":544,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":200,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":418,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":162,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":577,"com.google.gson.functional.MapTest.testMapDeserialization":269,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":572,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":515,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":353,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":91,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":110,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":360,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":94,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":381,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":52,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":274,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":215,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":221,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":141,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":487,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":41,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":499,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":560,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":35,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":50,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":149,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":173,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":282,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":387,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":343,"com.google.gson.functional.PrimitiveTest.testShortSerialization":465,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":384,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":454,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":508,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":424,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":687,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":223,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":400,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":232,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":309,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":247,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":54,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":181,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":244,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":267,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":417,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":334,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":473,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":73,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":286,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":639,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":588,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":243,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":637,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":480,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":474,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":674,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":20,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":64,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":109,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":142,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":552,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":640,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":113,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":219,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":66,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":430,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":146,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":122,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":313,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":43,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":548,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":222,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":495,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":340,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":90,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":578,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":407,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":566,"com.google.gson.stream.JsonWriterTest.testNullStringValue":647,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":583,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":106,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":394,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":460,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":432,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":477,"com.google.gson.stream.JsonWriterTest.testEmptyObject":662,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":68,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":93,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":308,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":191,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":178,"com.google.gson.functional.MapTest.testGeneralMapField":79,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":120,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":525,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":479,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":83,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":197,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":283,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":496,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":685,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":589,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":277,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":380,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":398,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":456,"com.google.gson.MixedStreamTest.testReadMixedStreamed":242,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":251,"com.google.gson.JsonObjectTest.testDeepCopy":261,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":362,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":561,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":211,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":291,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":330,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":207,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":437,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":507,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":225,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":270,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":603,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":266,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":342,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":478,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":196,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":3,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":651,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":420,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":575,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":695,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":350,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":193,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":551,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":386,"com.google.gson.functional.ObjectTest.testNestedDeserialization":147,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":348,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":489,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":492,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":188,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":100,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":505,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":476,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":202,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":17,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":363,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":612,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":26,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":463,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":42,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":62,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":74,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":332,"com.google.gson.functional.ObjectTest.testNullSerialization":485,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":45,"com.google.gson.stream.JsonWriterTest.testDoubles":667,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":602,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":268,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":78,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":392,"com.google.gson.functional.MapTest.testInterfaceTypeMap":77,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":537,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":498,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":105,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":395,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":14,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":673,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":684,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":49,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":500,"com.google.gson.MixedStreamTest.testReadClosed":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":553,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":503,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":411,"com.google.gson.MixedStreamTest.testWriteClosed":241,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":190,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":324,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":108,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":599,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":32,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":104,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":205,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":144,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":201,"com.google.gson.stream.JsonWriterTest.testLongs":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":227,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":111,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":124,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":323,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":4,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":690,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":440,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":5,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":47,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":328,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":584,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":275,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":160,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":481,"com.google.gson.stream.JsonWriterTest.testNumbers":669,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":416,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":558,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":159,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":522,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":204,"com.google.gson.functional.CollectionTest.testQueueDeserialization":335,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":692,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":422,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":438,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":617,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":518,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":592,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":75,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":138,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":661,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":568,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":89,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":145,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":317,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":238,"com.google.gson.functional.MapTest.testRawMapSerialization":372,"com.google.gson.JsonParserTest.testParseReader":253,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":582,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":675,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":40,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":133,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":180,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":385,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":250,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":301,"com.google.gson.functional.PrimitiveTest.testByteSerialization":462,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":527,"com.google.gson.ObjectTypeAdapterTest.testSerialize":9,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":623,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":87,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":406,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":60,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":538,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":233,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":33,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":288,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":614,"com.google.gson.functional.MapTest.testMapWithQuotes":364,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":557,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":616,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":337,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":550,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":347,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":184,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":554,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":166,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":657,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":382,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":24,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":143,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":175,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":447,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":565,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":125,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":278,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":61,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":567,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":459,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":306,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":329,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":281,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":316,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":523,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":44,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":194,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":601,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":693,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":183,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":304,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":263,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":396,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":683,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":344,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":672,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":132,"com.google.gson.functional.ObjectTest.testNestedSerialization":134,"com.google.gson.JsonObjectTest.testAddingStringProperties":262,"com.google.gson.internal.LinkedTreeMapTest.testClear":686,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":69,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":379,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":410,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":620,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":521,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":371,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":179,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":218,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":295,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":630,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":671,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":128,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":520,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":472,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":107,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":224,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":292,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":412,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":632,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":220,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":2,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":676,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":619,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":533,"com.google.gson.functional.CollectionTest.testSetSerialization":58,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":67,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":513,"com.google.gson.functional.StringTest.testStringValueSerialization":622,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":237,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":19,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":161,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":320,"com.google.gson.MixedStreamTest.testWriteInvalidState":240,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":524,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":483,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":415,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":199,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":421,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":230,"com.google.gson.stream.JsonWriterTest.testBooleans":646,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":562,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":234,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":252,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":154,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":256,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":195,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":502,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":636,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":586,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":624,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":359,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":659,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":509,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":529},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9ac087a3-3e85-11e6-b518-9feebc5114a3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[0,1,2,3,4,5],"tindex":"9ac0d5c4-3e85-11e6-b518-617b3f34375a","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,0,1,2,228,3,4,229,5,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"tindex":"9ac0fcd5-3e85-11e6-b518-ff3611c89982","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            if (serialize) {\n                {\n                    return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,59,60,61,62,264,265,73,266,267,268,269,270,271,272,273,100,101,102,106,107,112,153,274,177,178,179,182,183,184,186,275,204,205,213,216,276],"tindex":"9ac0fcd6-3e85-11e6-b518-ab31222809b9","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key != key) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"key","type":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9ac123e7-3e85-11e6-b518-65ffd62250b8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[277,278,279,280,281,282,283,284,285,286,287],"tindex":"9ac123e8-3e85-11e6-b518-8587b68a1b96","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[288,6,289,290,291,7,8,292,10,293,294,295,296,297,298,299,300,301,11,12,302,303,304,305,306,13,307,308,309,310,311,312,14,15,313,314,315,16,17,18,19,20,21,22,23,24,25,316,26,27,28,29,30,31,32,33,34,35,36,263,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,317,54,318,319,320,321,322,323,324,325,55,326,327,328,329,56,57,330,331,58,332,333,334,335,59,60,336,61,62,337,63,338,264,265,64,65,339,66,340,67,341,342,343,344,345,346,347,348,68,69,70,71,72,73,74,349,350,351,352,353,354,355,266,356,357,267,268,358,359,360,269,75,361,362,270,363,364,365,366,271,76,367,368,369,77,370,78,79,371,372,272,80,373,273,374,375,376,377,81,82,378,83,84,85,86,87,379,380,88,89,90,91,92,381,382,383,93,94,95,96,384,97,385,386,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,113,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,114,115,116,117,118,119,120,121,122,123,124,483,125,484,126,127,485,128,486,129,487,130,488,131,132,133,134,489,135,136,137,138,490,491,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,492,493,154,155,156,157,158,159,165,494,166,167,168,495,496,497,498,169,499,500,501,502,503,504,505,506,507,508,509,170,171,172,510,511,512,173,174,513,514,515,175,516,176,177,178,179,517,180,181,182,183,185,518,186,187,519,188,189,190,191,520,192,193,275,194,195,521,196,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,197,198,199,540,541,542,543,544,200,201,202,203,204,205,545,206,207,208,209,546,547,548,549,210,550,211,212,213,214,215,216,217,218,219,551,552,277,553,276,220,221,554,555,556,557,558,278,559,279,560,222,561,562,563,223,564,565,566,567,568,569,224,570,571,572,573,574,575,576,225,577,578,579,580,581,582,583,584,585,586,587,588,280,589,590,226,281,591,592,593,227,594,595,282,596,597,598,599,600,0,1,2,228,3,4,229,5,601,602,603,230,231,604,232,233,234,235,236,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,237,623,624,238,625,626,239,627,240,628,629,630,241,242,243,631,632,633],"tindex":"9ac14af9-3e85-11e6-b518-2578693dae2a","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"9ac1720a-3e85-11e6-b518-fb3589d1aed7","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[432],"tindex":"9ac1720b-3e85-11e6-b518-33644658842c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:170","type":"CtBinaryOperatorImpl","sourcecode":"comparison < 0"},"failures":[634,635,636,637,638,639,640,6,7,8,641,9,642,10,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,293,294,12,13,307,308,309,310,14,313,16,18,20,22,23,24,316,26,27,28,29,30,32,33,34,36,38,39,40,41,43,44,45,48,50,53,317,54,318,322,323,324,325,55,328,57,330,58,332,337,338,65,339,66,67,341,344,348,68,69,353,356,357,358,360,75,364,365,366,367,368,77,370,78,79,371,372,80,373,374,377,81,83,86,87,379,380,88,89,90,381,93,94,96,384,97,98,103,104,105,110,111,398,410,419,453,466,473,478,114,115,118,121,124,483,126,128,131,133,134,489,136,139,141,142,144,149,152,153,154,155,156,157,159,160,161,162,163,164,165,494,166,167,168,495,169,672,673,674,675,676,677,678,679,680,511,512,173,174,513,514,515,175,177,179,181,182,183,184,185,187,189,192,193,194,521,196,522,523,525,526,527,528,529,532,533,534,538,197,199,541,543,200,201,202,203,208,210,212,213,215,218,554,278,562,566,569,575,225,578,579,587,589,226,227,0,228,3,5,230,231,232,233,234,235,236,613,237,623,624,238,239,628,630,241,631,632],"tindex":"9ac1720c-3e85-11e6-b518-7f5e97be0bd6","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty < 0) {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9ac1991d-3e85-11e6-b518-6bf2ab59b4b7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,0,1,2,228,3,4,229,5,230,231,232,233,234,235,236,237,238,239,240,241,242,243,681,682,683,684,685],"tindex":"9ac1991e-3e85-11e6-b518-e5b2beca9df1","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"9ac1c02f-3e85-11e6-b518-cf6daa23c0d5","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if ((o != o) && (token != o)) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"o","token":"o","com.google.gson.stream.JsonToken.NUMBER":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"9ac1c030-3e85-11e6-b518-49f8d759be95","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:381","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[244,686,245,687,249,688,252,10,259,12,333,72,73,153,186,191,214,215,216,217],"tindex":"9ac1c031-3e85-11e6-b518-bf76424593fc","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9ac1e742-3e85-11e6-b518-598b87fecd76","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"9ac1e743-3e85-11e6-b518-c944da9e9e9e","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == src) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src","b":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9ac1e744-3e85-11e6-b518-a1508a295bc1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9ac1e745-3e85-11e6-b518-69f9a8e78467","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[436,449,450,463,471,477,628],"tindex":"9ac1e746-3e85-11e6-b518-d1dd46939df2","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[41,43,44,46,47,51,233,234,235],"tindex":"9ac20e57-3e85-11e6-b518-97aa85f71081","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[288,6,289,290,291,689,297,298,299,16,17,18,19,20,21,22,23,316,31,35,263,334,59,60,336,61,62,337,63,338,264,265,64,65,339,66,340,67,341,342,343,344,345,346,348,353,354,81,378,382,383,384,148,154,156,496,497,498,501,502,503,504,505,506,508,673,674,690,509,170,171,172,510,516,176,177,178,179,517,180,275,218,219,577,584,588,593,282],"tindex":"9ac20e58-3e85-11e6-b518-e9d2c4e6d44e","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"9ac20e59-3e85-11e6-b518-39707f264348","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[691,692,693,694,695],"tindex":"9ac20e5a-3e85-11e6-b518-29b8b8daae97","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9ac2356b-3e85-11e6-b518-a1d833ae774c","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9ac2356c-3e85-11e6-b518-d9d3a869f9af","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1344","type":"CtBinaryOperatorImpl","sourcecode":"p == l"},"failures":[],"tindex":"9ac2356d-3e85-11e6-b518-bb85acd0ca8c","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return char[][i];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","l":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9ac2356e-3e85-11e6-b518-3b85ce867164","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"9ac2356f-3e85-11e6-b518-a5d46761575c","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9ac23570-3e85-11e6-b518-110cc0b0efa3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9ac25c81-3e85-11e6-b518-6f247ddb0b2d","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"9ac25c82-3e85-11e6-b518-61bf083c08da","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"9ac25c83-3e85-11e6-b518-09af33e72a6d","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType != keyType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"keyType","type":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9ac25c84-3e85-11e6-b518-2f98675e7e68","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[6,7,8,9,10,11,12,13,14,15,16,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,0,1,2,228,3,4,229,5,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"tindex":"9ac25c85-3e85-11e6-b518-19b73b5e4a2a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"9ac28396-3e85-11e6-b518-85007292830b","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"9ac28397-3e85-11e6-b518-8ba178599aa6","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl","sourcecode":"isObject"},"failures":[],"tindex":"9ac28398-3e85-11e6-b518-611d66a8acc4","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            if (serialize) {\n                {\n                    return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9ac28399-3e85-11e6-b518-27971d68972a","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9ac2aaaa-3e85-11e6-b518-b9345185968f","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"9ac2aaab-3e85-11e6-b518-37a31047f70c","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"9ac2aaac-3e85-11e6-b518-4143400390c9","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"a","java.util.Date.class":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9ac2aaad-3e85-11e6-b518-393a588fda3d","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"9ac2aaae-3e85-11e6-b518-b96777ec450c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:251","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[],"tindex":"9ac2d1bf-3e85-11e6-b518-432494465029","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"9ac2d1c0-3e85-11e6-b518-9399d995221c","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[688,259,73],"tindex":"9ac2d1c1-3e85-11e6-b518-559b08ec6468","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"9ac2f8d2-3e85-11e6-b518-e54fa40aadee","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"9ac2f8d3-3e85-11e6-b518-05a76859726a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if ((b.peek()) == a) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"b","com.google.gson.stream.JsonToken.NULL":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"9ac2f8d4-3e85-11e6-b518-8fc581f49c40","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"9ac31fe5-3e85-11e6-b518-b1a554c5e010","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[277,278,279,280,281,282],"tindex":"9ac31fe6-3e85-11e6-b518-5f37d90b3da7","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.Class) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9ac31fe7-3e85-11e6-b518-d39799ba3715","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[691],"tindex":"9ac31fe8-3e85-11e6-b518-43ae5717c6ae","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"9ac346f9-3e85-11e6-b518-f9584a5a48e5","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if (!(key instanceof java.lang.reflect.ParameterizedType)) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n                    return node != null ? node.V : null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9ac346fa-3e85-11e6-b518-ed3ce8222cc2","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9ac346fb-3e85-11e6-b518-b529e835a315","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"9ac346fc-3e85-11e6-b518-0904d59d7e7d","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"9ac36e0d-3e85-11e6-b518-690d37d5b1e0","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl","sourcecode":"o == (com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED)"},"failures":[],"tindex":"9ac36e0e-3e85-11e6-b518-255198de1844","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"src","o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[389,458,631,632],"tindex":"9ac36e0f-3e85-11e6-b518-c522ee6ba7f0","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"9ac36e10-3e85-11e6-b518-b1a12d5dd19c","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.WildcardType)) {\n        {\n            return (findByObject(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"9ac36e11-3e85-11e6-b518-494d6d1c43c1","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            if (!(key instanceof java.lang.reflect.ParameterizedType)) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n                    return node != null ? node.V : null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"9ac39422-3e85-11e6-b518-cdcff7f0d1ae","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"9ac39423-3e85-11e6-b518-7184d29b2ec5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467264412951/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":65,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":175,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":198,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":44,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":112,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":4,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":67,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":233,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":22,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":145,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":95,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":89,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":90,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":1,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":93,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":143,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":204,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":192,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":80,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":123,"com.google.gson.functional.ObjectTest.testSingletonLists":141,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":25,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":225,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":18,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":130,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":7,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":19,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":255,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":156,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":100,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":136,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":168,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":238,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":239,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":139,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":229,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":102,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":172,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":148,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":36,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":232,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":121,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":107,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":127,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":29,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":49,"com.google.gson.functional.JsonTreeTest.testToJsonTree":54,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":128,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":33,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":35,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":15,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":87,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":104,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":0,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":3,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":124,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":45,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":39,"com.google.gson.functional.MapTest.testGeneralMapField":110,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":146,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":180,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":9,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":114,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":216,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":153,"com.google.gson.MixedStreamTest.testReadMixedStreamed":254,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":117,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":163,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":55,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":119,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":224,"com.google.gson.JsonParserTest.testParseString":13,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":235,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":28,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":165,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":215,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":23,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":242,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":37,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":8,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":212,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":50,"com.google.gson.functional.ObjectTest.testNestedDeserialization":173,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":99,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":208,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":131,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":221,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":162,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":14,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":149,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":247,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":72,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":75,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":226,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":88,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":132,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":78,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":26,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":98,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":20,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":40,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":109,"com.google.gson.functional.MapTest.testInterfaceTypeMap":108,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":195,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":116,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":134,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":183,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":16,"com.google.gson.functional.CollectionTest.testSetDeserialization":92,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":193,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":65,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":152,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":79,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":157,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":59,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":77,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":197,"com.google.gson.MixedStreamTest.testWriteClosed":253,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":64,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":210,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":135,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":147,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":81,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":133,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":47,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":170,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":220,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":206,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":237,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":138,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":150,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":243,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":10,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":207,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":201,"com.google.gson.functional.MapTest.testComplexKeysSerialization":111,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":245,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":185,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":66,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":182,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":129,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":51,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":6,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":184,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":46,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":199,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":244,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":68,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":106,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":164,"com.google.gson.functional.MapTest.testStringKeyDeserialization":30,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":120,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":171,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":250,"com.google.gson.JsonParserTest.testParseReader":12,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":159,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":209,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":41,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":57,"com.google.gson.ObjectTypeAdapterTest.testSerialize":62,"com.google.gson.JavaSerializationTest.testMapIsSerializable":17,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":118,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":96,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":189,"com.google.gson.functional.FieldNamingTest.testIdentity":248,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":82,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":211,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":166,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":53,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":71,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":140,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":43,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":176,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":191,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":61,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":188,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":73,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":169,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":200,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":42,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":86,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":151,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":194,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":251,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":236,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":63,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":76,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":155,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":113,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":97,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":101,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":213,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":178,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":205,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":177,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":31,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":21,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":60,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":158,"com.google.gson.internal.LinkedTreeMapTest.testClear":2,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":5,"com.google.gson.functional.ObjectTest.testNestedSerialization":160,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":105,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":70,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":203,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":142,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":228,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":154,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":74,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":181,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":126,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":144,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":34,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":223,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":217,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":234,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":230,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":240,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":190,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":85,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":202,"com.google.gson.functional.CollectionTest.testSetSerialization":94,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":115,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":103,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":249,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":69,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":186,"com.google.gson.MixedStreamTest.testWriteInvalidState":252,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":219,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":187,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":218,"com.google.gson.functional.MapTest.testMapDeserialization":27,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":56,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":11,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":179,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":122,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":137,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":125,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":214,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":38,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":231,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":83,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":167,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":58,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":32,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":84},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[0],"tindex":"dc4e26ed-3e6f-11e6-9ab3-f755532a0cbf","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867157/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"dc4e9c1e-3e6f-11e6-9ab3-6bb8f1c91d82","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867157/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:961","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"dc4e9c1f-3e6f-11e6-9ab3-cd718d5058ed","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop == newTop) || (p == newTop)) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867157/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"newTop","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"tindex":"dc4ec330-3e6f-11e6-9ab3-dd729dcc9851","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867157/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"dc4eea41-3e6f-11e6-9ab3-694f13d5b47f","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[59,60,61,62,14,63,18,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,22,23,24,25,26,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,31,32,132,133,134,33,34,135,136,137,138,35,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,36,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,39,203,41,204,42,205,43,206,44,207,208,209,210,45,211,212,213,214,215,216,217,218,219,220,221,222,46,47,223,224,225,226,48,227,49,50,51,52,53,54,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"tindex":"dc4f1152-3e6f-11e6-9ab3-f7836fca8e1a","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867157/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"dc4f1153-3e6f-11e6-9ab3-6506dd7021a3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"dc4f3864-3e6f-11e6-9ab3-79640f098b58","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"dc4f3865-3e6f-11e6-9ab3-ff42c2effb6e","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"json","this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1531","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'A') && (c <= 'F')"},"failures":[],"tindex":"dc4f5f76-3e6f-11e6-9ab3-0fdd2b058aa4","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c >= 'A') && (c <= 'F')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867157/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"dc4f5f77-3e6f-11e6-9ab3-83d12e33ba49","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867157/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":11,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":417,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":327,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":20,"com.google.gson.functional.StringTest.testStringValueDeserialization":654,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":117,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":641,"com.google.gson.stream.JsonWriterTest.testRepeatedName":17,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":511,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":47,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":586,"com.google.gson.MixedStreamTest.testWriteLenient":341,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":466,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":302,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":394,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":70,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":80,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":561,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":543,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":46,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":266,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":201,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":518,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":387,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":442,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":491,"com.google.gson.functional.ObjectTest.testSingletonLists":168,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":298,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":328,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":506,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":10,"com.google.gson.stream.JsonWriterTest.testStrings":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":465,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":35,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":649,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":572,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":32,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":545,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":225,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":361,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":662,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":186,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":226,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":539,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":378,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":480,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":427,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":500,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":214,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":406,"com.google.gson.functional.EnumTest.testEnumCaseMapping":45,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":326,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":345,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":499,"com.google.gson.functional.JsonTreeTest.testToJsonTree":625,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":650,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":414,"com.google.gson.stream.JsonWriterTest.testNulls":15,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":366,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":388,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":281,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":222,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":609,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":507,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":639,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":689,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":125,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":375,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":77,"com.google.gson.functional.ObjectTest.testNullDeserialization":580,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":189,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":660,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":569,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":29,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":159,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":512,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":176,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":376,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":212,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":489,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":577,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":28,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":422,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":121,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":551,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":550,"com.google.gson.JsonParserTest.testParseString":384,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":648,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":151,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":223,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":352,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":632,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":180,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":297,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":526,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":467,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":477,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":536,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":638,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":271,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":0,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":461,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":115,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":152,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":472,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":537,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":576,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":605,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":11,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":319,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":565,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":686,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":349,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":359,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":373,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":407,"com.google.gson.metrics.PerformanceTest.testDummy":429,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":618,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":133,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":55,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":594,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":398,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":430,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":301,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":292,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":591,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":488,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":367,"com.google.gson.functional.CollectionTest.testSetDeserialization":456,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":202,"com.google.gson.functional.EnumTest.testEnumSet":39,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":172,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":620,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":529,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":86,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":369,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":635,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":177,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":54,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":540,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":593,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":546,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":38,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":209,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":155,"com.google.gson.functional.MapTest.testHashMapDeserialization":475,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":509,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":644,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":320,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":599,"com.google.gson.MixedStreamTest.testReadNulls":666,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":62,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":240,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":269,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":434,"com.google.gson.functional.MapTest.testSortedMap":481,"com.google.gson.functional.MapTest.testMapSerialization":107,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":242,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":534,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":596,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":685,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":676,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":611,"com.google.gson.functional.MapTest.testSerializeMaps":101,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":324,"com.google.gson.functional.MapTest.testComplexKeysSerialization":114,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":619,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":482,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":678,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":691,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":261,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":191,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":437,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":132,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":448,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":36,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":436,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":229,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":389,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":690,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":48,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":579,"com.google.gson.functional.MapTest.testStringKeyDeserialization":408,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":371,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":613,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":88,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":162,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":116,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":515,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":205,"com.google.gson.functional.PrettyPrintingTest.testMap":227,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":510,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":73,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":278,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":432,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":224,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":614,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":332,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":655,"com.google.gson.functional.CollectionTest.testQueueSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":289,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":390,"com.google.gson.functional.MapTest.testMapSerializationEmpty":425,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":22,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":530,"com.google.gson.functional.MapTest.testMapOfMapSerialization":106,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":640,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":454,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":148,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":197,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":94,"com.google.gson.functional.FieldNamingTest.testIdentity":325,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":329,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":399,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":244,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":581,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":49,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":167,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":421,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":460,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":501,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":5,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":330,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":485,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":146,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":646,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":636,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":310,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":473,"com.google.gson.functional.MapTest.testMapSubclassSerialization":100,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":353,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":237,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":444,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":621,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":207,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":312,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":339,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":524,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":468,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":630,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":431,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":53,"com.google.gson.functional.EnumTest.testEnumSubclass":42,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":149,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":33,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":571,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":138,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":484,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":542,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":87,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":682,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":347,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":502,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":185,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":527,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":673,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":588,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":410,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":7,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":608,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":379,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":531,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":568,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":145,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":440,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":305,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":560,"com.google.gson.MixedStreamTest.testWriteNulls":340,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":474,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":256,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":470,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":252,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":190,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":441,"com.google.gson.CommentsTest.testParseComments":670,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":385,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":91,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":169,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":493,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":265,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":541,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":612,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":595,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":108,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":331,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":589,"com.google.gson.MixedStreamTest.testReadInvalidState":663,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":198,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":60,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":307,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":234,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":140,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":357,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":615,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":370,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":674,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":262,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":696,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":694,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":350,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":195,"com.google.gson.JsonArrayTest.testRemove":687,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":295,"com.google.gson.functional.MapTest.testMapDeserialization":404,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":291,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":232,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":99,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":344,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":490,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":103,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":136,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":127,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":124,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":415,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":449,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":272,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":629,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":175,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":181,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":64,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":208,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":282,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":443,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":69,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":184,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":228,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":423,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":692,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":309,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":498,"com.google.gson.functional.PrimitiveTest.testShortSerialization":160,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":464,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":129,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":544,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":216,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":525,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":284,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":508,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":321,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":41,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":377,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":72,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":236,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":374,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":402,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":521,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":84,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":163,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":400,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":645,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":2,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":669,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":166,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":554,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":219,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":439,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":182,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":462,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":497,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":274,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":548,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":626,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":89,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":528,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":584,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":564,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":44,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":65,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":268,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":633,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":203,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":463,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":123,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":514,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":286,"com.google.gson.stream.JsonWriterTest.testNullStringValue":13,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":643,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":412,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":450,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":503,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":549,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":147,"com.google.gson.JsonArrayTest.testSet":356,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":164,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":97,"com.google.gson.JsonPrimitiveTest.testEquals":684,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":40,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":126,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":600,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":416,"com.google.gson.functional.MapTest.testGeneralMapField":111,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":563,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":250,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":557,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":204,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":258,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":303,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":424,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":120,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":275,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":154,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":381,"com.google.gson.MixedStreamTest.testReadMixedStreamed":668,"com.google.gson.JsonObjectTest.testDeepCopy":391,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":143,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":634,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":6,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":81,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":623,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":617,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":532,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":215,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":294,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":405,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":317,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":401,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":92,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":165,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":247,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":315,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":16,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":293,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":360,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":471,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":683,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":245,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":627,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":494,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":677,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":96,"com.google.gson.functional.ObjectTest.testNestedDeserialization":585,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":187,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":574,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":354,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":409,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":556,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":264,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":438,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":479,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":656,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":52,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":158,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":445,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":397,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":469,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":83,"com.google.gson.functional.ObjectTest.testNullSerialization":173,"com.google.gson.stream.JsonWriterTest.testDoubles":23,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":67,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":653,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":403,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":110,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":348,"com.google.gson.functional.MapTest.testInterfaceTypeMap":109,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":610,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":206,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":504,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":43,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":218,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":368,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":447,"com.google.gson.MixedStreamTest.testReadClosed":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":276,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":516,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":680,"com.google.gson.MixedStreamTest.testWriteClosed":667,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":76,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":355,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":170,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":651,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":57,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":134,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":420,"com.google.gson.stream.JsonWriterTest.testLongs":14,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":183,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":263,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":675,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":308,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":137,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":171,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":75,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":363,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":672,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":535,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":316,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":446,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":299,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":418,"com.google.gson.stream.JsonWriterTest.testNumbers":25,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":193,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":558,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":142,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":631,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":192,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":248,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":358,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":419,"com.google.gson.functional.CollectionTest.testQueueDeserialization":459,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":144,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":533,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":659,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":306,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":364,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":104,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":288,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":122,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":583,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":71,"com.google.gson.functional.MapTest.testRawMapSerialization":113,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":338,"com.google.gson.JsonParserTest.testParseReader":383,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":642,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":220,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":63,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":178,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":598,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":131,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":380,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":34,"com.google.gson.functional.PrimitiveTest.testByteSerialization":157,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":251,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":693,"com.google.gson.ObjectTypeAdapterTest.testSerialize":9,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":336,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":118,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":513,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":343,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":395,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":671,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":257,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":679,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":322,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":58,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":426,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":657,"com.google.gson.functional.MapTest.testMapWithQuotes":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":279,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":519,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":658,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":85,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":622,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":95,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":277,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":200,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":492,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":50,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":582,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":688,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":233,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":285,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":570,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":260,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":287,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":314,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":396,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":547,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":37,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":455,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":606,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":51,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":304,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":66,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":602,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":681,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":652,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":695,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":238,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":365,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":433,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":393,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":505,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":93,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":217,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":573,"com.google.gson.functional.ObjectTest.testNestedSerialization":179,"com.google.gson.JsonObjectTest.testAddingStringProperties":392,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":98,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":119,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":141,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":661,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":246,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":112,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":235,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":273,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":30,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":342,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":27,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":174,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":601,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":553,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":413,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":616,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":637,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":346,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":428,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":517,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":628,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":362,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":221,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":333,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":255,"com.google.gson.functional.CollectionTest.testSetSerialization":82,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":487,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":90,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":230,"com.google.gson.functional.StringTest.testStringValueSerialization":334,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":335,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":194,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":372,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":451,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":604,"com.google.gson.MixedStreamTest.testWriteInvalidState":665,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":566,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":520,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":259,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":523,"com.google.gson.stream.JsonWriterTest.testBooleans":12,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":318,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":283,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":323,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":382,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":188,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":386,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":603,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":1,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":210,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":300,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":337,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":476,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":19,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":253,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":590},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a01bb6-3e3c-11e6-946a-7791cb27a452","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"77a069d7-3e3c-11e6-946a-017e161be6c6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"77a069d8-3e3c-11e6-946a-9d4dc81b1fb5","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"77a069d9-3e3c-11e6-946a-9f951d94d244","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"77a090ea-3e3c-11e6-946a-49612605cfbf","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"77a090eb-3e3c-11e6-946a-b91a61eb7045","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT.getRawType().equals(typeOfT.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT","to":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"77a090ec-3e3c-11e6-946a-69a640e8f5ba","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"src","type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"77a0b7fd-3e3c-11e6-946a-2392d673105f","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"77a0b7fe-3e3c-11e6-946a-71838e92711f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root != null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a0df0f-3e3c-11e6-946a-398c7c500f39","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"77a0df10-3e3c-11e6-946a-2d53afe5284b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"77a0df11-3e3c-11e6-946a-a5604aeaac0b","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"77a10522-3e3c-11e6-946a-bd0f1e60d114","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"77a10523-3e3c-11e6-946a-c93d4ef05f60","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(typeOfT instanceof java.lang.reflect.GenericArrayType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return object;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"77a10524-3e3c-11e6-946a-03884171bef5","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl","sourcecode":"!changed"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346],"tindex":"77a10525-3e3c-11e6-946a-350b95d30062","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[66,347,324],"tindex":"77a12c36-3e3c-11e6-946a-fb06412c093c","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"77a12c37-3e3c-11e6-946a-99354465e406","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.get();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"src","this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[151,162,164,341],"tindex":"77a12c38-3e3c-11e6-946a-8fc4c360b522","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"77a15349-3e3c-11e6-946a-0717b7cefb7f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o.isJsonNull()) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"77a1534a-3e3c-11e6-946a-c5998f85174b","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc == typeOfSrc) {\n        {\n            if (src == null) {\n                {\n                    if (writer == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[348,349,350,351,352,353,341],"tindex":"77a1534b-3e3c-11e6-946a-1bc03d5d402b","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"77a1534c-3e3c-11e6-946a-95af363e4cb8","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[241,354,243,355],"tindex":"77a17a5d-3e3c-11e6-946a-e5509b54ac56","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"77a17a5e-3e3c-11e6-946a-41274ad50c04","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"77a17a5f-3e3c-11e6-946a-1f42cad4b52e","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"77a17a60-3e3c-11e6-946a-e3bf48bd8382","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"77a1a171-3e3c-11e6-946a-a7a0383e93f0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[284],"tindex":"77a1a172-3e3c-11e6-946a-8daf42dcb606","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[],"tindex":"77a1a173-3e3c-11e6-946a-9d4424f797cf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (root != null) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"77a1a174-3e3c-11e6-946a-8f1092ae5092","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a1c885-3e3c-11e6-946a-a338e97279d3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"77a1c886-3e3c-11e6-946a-a557805f514b","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o","value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"77a1c887-3e3c-11e6-946a-71167797ae57","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc == typeOfSrc) {\n        {\n            if (src == null) {\n                {\n                    if (writer == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"77a1c888-3e3c-11e6-946a-470ebf7ec921","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1186","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[356],"tindex":"77a1ef99-3e3c-11e6-946a-bdb135ee0fc5","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl","sourcecode":"serializeNulls"},"failures":[],"tindex":"77a1ef9a-3e3c-11e6-946a-9d0f1551718a","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"77a1ef9b-3e3c-11e6-946a-cfeca4203254","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[357,358,359,360],"tindex":"77a1ef9c-3e3c-11e6-946a-478b5812d3c6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[313,361,362,314,315,363,364,316,365,366],"tindex":"77a1ef9d-3e3c-11e6-946a-41f61c69662e","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl","sourcecode":"annotation == null"},"failures":[189,190,191,367,192,203,204,206,208,368,239],"tindex":"77a1ef9e-3e3c-11e6-946a-9b7408469205","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            if (annotation == null) {\n                {\n                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                    } \n                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                    } \n                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"77a216af-3e3c-11e6-946a-6b61698d18c1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"77a216b0-3e3c-11e6-946a-2f7aee4f0cf0","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"77a216b1-3e3c-11e6-946a-77502950534f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.GenericArrayType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a216b2-3e3c-11e6-946a-ef75ddeb8c69","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a23dc3-3e3c-11e6-946a-4bbeb6902b40","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"77a23dc4-3e3c-11e6-946a-790d31bf95cb","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[369,370,371],"tindex":"77a23dc5-3e3c-11e6-946a-ffc9d19b578f","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[372,373,97,139],"tindex":"77a23dc6-3e3c-11e6-946a-0fab429a9cae","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"77a264d7-3e3c-11e6-946a-59a78aeb26d5","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            if (annotation == null) {\n                {\n                    java.lang.Class<?> java.lang.Class<?> = annotation.value();\n                    if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n                    } \n                    if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                        java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                        return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n                    } \n                    throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[182,285,287,288,306],"tindex":"77a264d8-3e3c-11e6-946a-99e9fe817dbf","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"77a264d9-3e3c-11e6-946a-ff4cb939b3e4","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"77a264da-3e3c-11e6-946a-1d04ac362b01","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"77a28beb-3e3c-11e6-946a-7f2c576d47a6","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"77a28bec-3e3c-11e6-946a-6554cadc3042","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,186,415,234,416,235,237,238,239,417,418,419,420,271,421,422],"tindex":"77a28bed-3e3c-11e6-946a-2dcb6c7a0eda","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key instanceof java.lang.Class<?>) {\n                {\n                    try {\n                        return key != null ? find(((K)(key)), false) : null;\n                    } catch (java.lang.ClassCastException e) {\n                        return null;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:746","type":"CtBinaryOperatorImpl","sourcecode":"((last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT))) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT))"},"failures":[],"tindex":"77a28bee-3e3c-11e6-946a-a31544f9a882","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (((i == i) || (last == i)) || (last == i)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"i","last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"77a28bef-3e3c-11e6-946a-bdeb2bb22fd7","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key","com.google.gson.stream.JsonToken.NULL":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[44,50,51,52,53,54,56,57,58,59,60,71,74,75,77,79,81,83,84,86,96,99,102,103,107,423,424,112,114,425,115,116,198,200,202,233,238,269,270,271,273,280],"tindex":"77a2b300-3e3c-11e6-946a-bbfb8933d3c4","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[4,204,206,209,211,212,214,234,235,239,240,417,242,354,355,246,247,309],"tindex":"77a2b301-3e3c-11e6-946a-bd7b5a3eaf04","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (skipPast == skipPast) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"77a2b302-3e3c-11e6-946a-bbb72eede325","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[426,4,427,5,6,7,8,428,11,28,29,30,429,31,32,33,430,34,431,35,36,432,433,434,37,38,39,40,41,42,435,436,43,437,44,45,46,47,438,48,372,439,440,49,373,50,441,51,52,53,54,55,56,442,57,58,59,443,60,393,444,61,62,63,64,445,65,66,67,347,446,68,447,69,448,449,70,71,72,73,450,451,452,74,75,76,77,78,453,454,79,455,456,80,81,457,82,83,458,84,459,394,395,460,396,397,85,461,86,398,399,462,87,88,89,463,90,91,92,464,93,465,94,95,96,97,98,466,467,468,400,469,470,471,472,473,99,474,475,401,100,101,402,403,102,476,103,404,104,477,478,405,479,105,106,107,406,480,423,108,481,109,424,110,111,112,113,407,114,425,408,115,482,483,116,117,484,485,486,487,488,489,118,119,120,121,122,123,490,491,124,492,125,126,127,493,128,129,130,131,494,132,495,409,410,411,133,134,135,412,413,496,497,136,137,414,498,499,500,138,501,348,502,503,504,505,506,139,507,508,140,509,510,511,512,513,514,515,349,141,516,517,518,519,520,142,521,350,143,522,523,144,524,525,351,526,145,352,527,528,146,147,529,530,531,148,532,533,534,535,536,537,538,539,149,540,150,541,151,152,542,543,153,544,545,154,546,155,547,548,549,156,157,158,159,160,161,353,550,551,552,162,553,163,554,555,556,164,165,557,166,558,559,167,168,560,561,169,562,563,170,564,565,171,566,567,568,172,569,173,174,570,571,175,572,176,177,573,178,179,574,575,576,577,578,579,580,180,581,181,182,582,183,583,584,585,586,184,587,588,185,186,187,589,188,189,190,191,367,192,198,199,200,201,202,203,204,205,206,207,208,368,209,210,211,212,213,214,215,216,590,591,592,593,594,226,227,228,229,230,231,232,233,595,596,234,416,235,597,598,236,237,238,240,241,417,242,599,354,243,355,600,601,244,245,418,602,603,246,247,248,249,604,250,605,251,252,253,606,607,254,255,256,608,609,610,257,611,258,612,259,613,260,614,261,615,262,263,264,265,419,420,266,616,617,267,618,619,620,268,621,269,622,623,270,271,624,272,421,625,273,626,627,274,275,276,422,628,629,277,630,278,279,631,280,632,281,282,633,634,283,635,284,636,285,286,287,288,289,637,290,638,291,292,639,293,640,294,295,296,297,641,298,642,643,299,644,300,301,645,302,303,646,647,304,305,306,307,308,648,649,309,310,650,311,651,312,313,361,362,314,315,363,364,316,652,653,317,318,319,320,321,322,323,324,325,654,326,327,328,329,330,655,656,331,657,332,658,659,660,333,661,662,334,335,336,337,338,663,664,339,340,665,341,666,342,667,668,669,345,346,670],"tindex":"77a2da13-3e3c-11e6-946a-91e1824c23db","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1240","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY)"},"failures":[],"tindex":"77a2da14-3e3c-11e6-946a-23f9d7d42c3a","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        {\n            return char[][i];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a2da15-3e3c-11e6-946a-09f5f782bcb3","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value.toString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[],"tindex":"77a30126-3e3c-11e6-946a-63ca1cc2724c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[389,624,625,422,632,650,671,672,673,343,674,675,676,677,678,679,680,681,682,683,684,685,686,687],"tindex":"77a30127-3e3c-11e6-946a-f355daf8e59a","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj == null) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:541","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT)"},"failures":[688,357,689,690],"tindex":"77a30128-3e3c-11e6-946a-b370db56f74b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"targetSize","com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[691,4,427,5,6,380,692,693,7,8,11,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,439,49,373,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,445,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,394,395,460,396,397,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,423,108,109,424,110,111,113,114,425,115,116,117,484,485,486,488,489,118,119,120,121,122,124,125,132,409,410,411,133,134,135,412,413,136,137,414,138,348,139,140,349,141,142,350,143,144,351,145,352,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,353,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,574,576,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,368,209,210,211,212,213,214,215,216,218,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,244,245,602,246,247,248,249,250,605,251,252,253,254,256,257,258,259,260,261,262,263,264,265,419,420,266,267,268,269,270,271,624,272,421,625,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,647,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,337,338,339,340,665,341,342,667,345,346],"tindex":"77a30129-3e3c-11e6-946a-4b8270d35318","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (!serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"77a3283a-3e3c-11e6-946a-1183e03ee660","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a3283b-3e3c-11e6-946a-7df3f0931ef9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[694,380,51,394,395,396,397,109,111,117,409,410,411,412,413,414,186,417,419,271,624,272,421,625],"tindex":"77a3283c-3e3c-11e6-946a-f14616292d18","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if ((value.length()) == 0) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"77a3283d-3e3c-11e6-946a-bf66837a8af2","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc == typeOfSrc) {\n        {\n            if (src == null) {\n                {\n                    if (writer == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonIOException();\n                    } else {\n                        {\n                            try {\n                                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                                toJson(src, typeOfSrc, jsonWriter);\n                            } catch (java.io.IOException e) {\n                                throw new com.google.gson.JsonIOException(e);\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfSrc","b":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"77a3283e-3e3c-11e6-946a-bddd13387c5f","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a34f4f-3e3c-11e6-946a-35ded7ae0cc8","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"77a34f50-3e3c-11e6-946a-5188b25bfa8c","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"77a34f51-3e3c-11e6-946a-fb9b66bff267","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (skipPast == skipPast) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"77a34f52-3e3c-11e6-946a-3b4a9a15b2a7","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"jsonElement","this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"77a34f53-3e3c-11e6-946a-279a3b3827e9","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl","sourcecode":"(value != null) && (((type == (java.lang.Object.class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))"},"failures":[],"tindex":"77a37664-3e3c-11e6-946a-7dbe742b890d","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"b","value":"a","java.lang.Object.class":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a37665-3e3c-11e6-946a-55272679aec1","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a37666-3e3c-11e6-946a-a7737c83b6bb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:536","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_DOCUMENT)"},"failures":[],"tindex":"77a37667-3e3c-11e6-946a-5148636f82fe","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == topOfStack) {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"topOfStack","com.google.gson.stream.JsonScope.EMPTY_DOCUMENT":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl","sourcecode":"lowerBound != (originalLowerBound[0])"},"failures":[],"tindex":"77a37668-3e3c-11e6-946a-41dfc11364cf","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"array","lowerBound":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"77a37669-3e3c-11e6-946a-65f5e88c9192","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"77a3766a-3e3c-11e6-946a-87b081be723e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"77a39d7b-3e3c-11e6-946a-8da3595cb669","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"77a39d7c-3e3c-11e6-946a-618fa8dc21a1","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[374,375,377,379,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,401,402,403,404,405,406,407,408,409,410,411,412,413,414,186,415,234,416,235,237,238,239,417,418,419,420,271,422],"tindex":"77a39d7d-3e3c-11e6-946a-59b47344b983","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"77a39d7e-3e3c-11e6-946a-01a1865d7680","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(typeOfT instanceof java.lang.reflect.GenericArrayType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    T T = ((T)(fromJson(jsonReader, typeOfT)));\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return object;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[357,358,695,359,360],"tindex":"77a39d7f-3e3c-11e6-946a-09cc7d41ff6d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[11,12,16,17,18,19,20,35,38,56,70,78,80,136,143,144,169,174,177,179,180,181,183,229,233,238,244,245,247,258,267,271,272,314,335],"tindex":"77a3c490-3e3c-11e6-946a-ed8ba6af5a65","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[312,313,361,362,315,363,316,652,696,365,366],"tindex":"77a3c491-3e3c-11e6-946a-b7d4da47e14f","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"77a3c492-3e3c-11e6-946a-c3cd0ed7a4b6","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a3c493-3e3c-11e6-946a-457d3b611ed4","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1175","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[302,304],"tindex":"77a3eba4-3e3c-11e6-946a-a5bff71b8e29","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (dateStyle == timeStyle) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_LONG":"timeStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"77a3eba5-3e3c-11e6-946a-3f3d2ba50cd3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"77a3eba6-3e3c-11e6-946a-9b88751305bb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[370],"tindex":"77a3eba7-3e3c-11e6-946a-678930f280c3","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"77a3eba8-3e3c-11e6-946a-3f4bd95cc5fa","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"77a3eba9-3e3c-11e6-946a-97cfd42b356b","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key instanceof java.lang.Class<?>) {\n                {\n                    try {\n                        return key != null ? find(((K)(key)), false) : null;\n                    } catch (java.lang.ClassCastException e) {\n                        return null;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467232503682/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key","com.google.gson.stream.JsonToken.NULL":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":151,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":557,"com.google.gson.functional.StringTest.testStringValueDeserialization":555,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":633,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":108,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":199,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":69,"com.google.gson.stream.JsonWriterTest.testRepeatedName":630,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":514,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":447,"com.google.gson.MixedStreamTest.testWriteLenient":28,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":397,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":208,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":320,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":489,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":408,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":506,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":117,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":232,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":597,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":451,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":78,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":332,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":537,"com.google.gson.functional.ObjectTest.testSingletonLists":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":200,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":235,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":62,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":558,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":623,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":362,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":378,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":218,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":425,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":36,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":120,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":1,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":641,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":571,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":526,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":109,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":387,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":261,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":41,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":54,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":458,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":260,"com.google.gson.functional.EnumTest.testEnumCaseMapping":596,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":15,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":556,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":53,"com.google.gson.functional.JsonTreeTest.testToJsonTree":369,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":221,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":174,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":340,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":638,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":301,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":192,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":540,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":499,"com.google.gson.functional.ObjectTest.testNullDeserialization":437,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":342,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":568,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":420,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":19,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":130,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":70,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":426,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":616,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":456,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":603,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":434,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":18,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":222,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":135,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":373,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":217,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":114,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":619,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":639,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":93,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":173,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":297,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":438,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":198,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":106,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":253,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":398,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":189,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":475,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":348,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":275,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":115,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":404,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":107,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":291,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":433,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":34,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":414,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":553,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":74,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":271,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":521,"com.google.gson.metrics.PerformanceTest.testDummy":17,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":236,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":479,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":330,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":48,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":350,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":277,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":206,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":285,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":191,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":602,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":617,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":345,"com.google.gson.functional.CollectionTest.testSetDeserialization":505,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":452,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":384,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":419,"com.google.gson.functional.EnumTest.testEnumSet":587,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":98,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":331,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":179,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":248,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":427,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":40,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":329,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":111,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":47,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":122,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":382,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":453,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":123,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":67,"com.google.gson.functional.MapTest.testHashMapDeserialization":242,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":204,"com.google.gson.MixedStreamTest.testReadNulls":29,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":153,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":554,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":149,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":573,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":381,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":471,"com.google.gson.functional.MapTest.testSortedMap":264,"com.google.gson.functional.MapTest.testMapSerialization":259,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":152,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":104,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":281,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":304,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":227,"com.google.gson.functional.MapTest.testSerializeMaps":245,"com.google.gson.functional.MapTest.testComplexKeysSerialization":272,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":383,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":276,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":311,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":344,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":594,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":548,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":585,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":8,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":592,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":390,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":516,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":436,"com.google.gson.functional.MapTest.testStringKeyDeserialization":274,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":308,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":354,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":137,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":73,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":278,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":68,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":315,"com.google.gson.functional.PrettyPrintingTest.testMap":388,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":492,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":169,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":379,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":35,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":310,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":640,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":561,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":186,"com.google.gson.functional.MapTest.testMapSerializationEmpty":273,"com.google.gson.functional.CollectionTest.testQueueSerialization":496,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":99,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":635,"com.google.gson.functional.MapTest.testMapOfMapSerialization":258,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":194,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":502,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":627,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":101,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":612,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":363,"com.google.gson.functional.FieldNamingTest.testIdentity":228,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":559,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":351,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":530,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":439,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":7,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":368,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":405,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":520,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":56,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":42,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":618,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":560,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":599,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":96,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":210,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":220,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":611,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":239,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":133,"com.google.gson.functional.MapTest.testMapSubclassSerialization":244,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":50,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":339,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":386,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":26,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":88,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":317,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":168,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":399,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":377,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":328,"com.google.gson.functional.EnumTest.testEnumSubclass":590,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":110,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":37,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":423,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":55,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":598,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":116,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":353,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":580,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":58,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":525,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":94,"com.google.gson.stream.JsonWriterTest.testTwoNames":626,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":524,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":477,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":20,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":300,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":100,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":418,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":92,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":519,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":213,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":407,"com.google.gson.MixedStreamTest.testWriteNulls":6,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":241,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":299,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":402,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":293,"com.google.gson.CommentsTest.testParseComments":14,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":325,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":343,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":358,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":409,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":543,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":113,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":306,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":464,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":280,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":263,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":563,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":528,"com.google.gson.MixedStreamTest.testReadInvalidState":24,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":448,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":337,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":215,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":282,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":66,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":13,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":312,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":461,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":83,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":610,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":196,"com.google.gson.functional.MapTest.testMapDeserialization":251,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":190,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":393,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":240,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":536,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":250,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":486,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":542,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":538,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":586,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":367,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":591,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":166,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":424,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":440,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":575,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":318,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":175,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":336,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":522,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":584,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":262,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":389,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":219,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":52,"com.google.gson.functional.PrimitiveTest.testShortSerialization":131,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":360,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":545,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":119,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":460,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":89,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":118,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":180,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":224,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":589,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":491,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":49,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":246,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":82,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":139,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":512,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":207,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":549,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":33,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":624,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":146,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":140,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":636,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":518,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":352,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":441,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":485,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":161,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":614,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":125,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":396,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":355,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":445,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":413,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":595,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":385,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":176,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":500,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":313,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":356,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":535,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":197,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":544,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":183,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":474,"com.google.gson.stream.JsonWriterTest.testNullStringValue":628,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":202,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":482,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":493,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":59,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":126,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":97,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":143,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":550,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":541,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":588,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":157,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":283,"com.google.gson.functional.MapTest.testGeneralMapField":268,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":411,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":290,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":145,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":305,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":314,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":600,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":209,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":266,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":162,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":372,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":121,"com.google.gson.MixedStreamTest.testReadMixedStreamed":32,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":177,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":254,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":43,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":473,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":507,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":234,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":102,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":459,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":195,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":255,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":238,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":243,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":144,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":359,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":159,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":3,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":629,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":85,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":625,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":193,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":403,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":160,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":501,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":547,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":365,"com.google.gson.functional.ObjectTest.testNestedDeserialization":446,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":431,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":527,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":154,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":476,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":457,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":142,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":463,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":256,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":515,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":562,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":327,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":129,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":576,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":323,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":401,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":510,"com.google.gson.functional.ObjectTest.testNullSerialization":10,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":579,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":237,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":247,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":57,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":267,"com.google.gson.functional.MapTest.testInterfaceTypeMap":265,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":302,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":316,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":481,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":60,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":593,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":613,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":621,"com.google.gson.MixedStreamTest.testReadClosed":25,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":319,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":163,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":455,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":76,"com.google.gson.MixedStreamTest.testWriteClosed":31,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":156,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":223,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":412,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":484,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":333,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":480,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":466,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":443,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":216,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":415,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":487,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":497,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":4,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":105,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":5,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":581,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":203,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":532,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":147,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":608,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":81,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":171,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":287,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":346,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":465,"com.google.gson.functional.CollectionTest.testQueueDeserialization":513,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":87,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":103,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":567,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":214,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":469,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":252,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":435,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":185,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":374,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":444,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":490,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":23,"com.google.gson.functional.MapTest.testRawMapSerialization":270,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":201,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":637,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":429,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":574,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":286,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":11,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":604,"com.google.gson.functional.PrimitiveTest.testByteSerialization":128,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":292,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":376,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":606,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":230,"com.google.gson.ObjectTypeAdapterTest.testSerialize":615,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":370,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":71,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":321,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":303,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":225,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":334,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":564,"com.google.gson.functional.MapTest.testMapWithQuotes":257,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":170,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":566,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":347,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":472,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":364,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":607,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":167,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":450,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":539,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":324,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":442,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":394,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":182,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":422,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":309,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":184,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":322,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":468,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":124,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":9,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":504,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":212,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":288,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":326,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":578,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":533,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":470,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":51,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":380,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":61,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":338,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":620,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":361,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":428,"com.google.gson.functional.ObjectTest.testNestedSerialization":430,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":551,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":75,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":371,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":570,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":158,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":269,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":284,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":395,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":30,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":38,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":421,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":529,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":138,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":483,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":187,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":16,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":22,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":165,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":432,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":2,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":569,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":298,"com.google.gson.functional.CollectionTest.testSetSerialization":509,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":601,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":357,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":391,"com.google.gson.functional.StringTest.testStringValueSerialization":572,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":229,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":494,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":517,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":609,"com.google.gson.MixedStreamTest.testWriteInvalidState":27,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":289,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":416,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":80,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":86,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":307,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":178,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":226,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":341,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":12,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":534,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":454,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":205,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":231,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":249,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":632,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":44,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":294},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5],"tindex":"c65085c5-3f53-11e6-9eaa-6b7ab5fb5146","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[6,7,8,9,10,11],"tindex":"c6519736-3f53-11e6-9eaa-1f891465608e","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"c651be47-3f53-11e6-9eaa-dfde0eef6b5d","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[12],"tindex":"c6520c68-3f53-11e6-9eaa-c9f15134892f","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c652f6c9-3f53-11e6-9eaa-c9c214d6edd3","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c6531dda-3f53-11e6-9eaa-b3b0c4d0dd13","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.WildcardType) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c6531ddb-3f53-11e6-9eaa-c7b2f7cdd70d","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c6531ddc-3f53-11e6-9eaa-b751d9d9c27f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c65344ed-3f53-11e6-9eaa-eb52dd290d2e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:271","type":"CtBinaryOperatorImpl"},"failures":[13],"tindex":"c65344ee-3f53-11e6-9eaa-512be464226f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c6536bff-3f53-11e6-9eaa-012fde26f26f","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl"},"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,6,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,7,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,8,379,380,381,9,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,10,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,0,1,2,468,3,4,469,5,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,11,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603],"tindex":"c6539310-3f53-11e6-9eaa-19813b695389","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c653e131-3f53-11e6-9eaa-15f7d4331c89","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c6540842-3f53-11e6-9eaa-7d5189896941","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType == keyType) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"keyType","context":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[15,16,18,19,20,21,23,26,6,27,28,30,31,34,35,36,37,604,605,606,38,40,41,42,43,49,50,51,55,57,63,66,74,75,81,83,84,87,90,92,93,96,97,101,110,112,114,115,118,121,123,127,128,129,130,131,132,133,137,139,143,144,146,149,150,151,152,155,158,159,161,162,163,167,169,170,172,174,175,178,180,182,183,184,185,186,188,190,191,193,195,196,197,198,200,203,205,206,208,209,211,212,213,214,215,216,219,220,222,224,225,226,227,228,229,230,231,232,235,238,240,244,245,248,250,252,257,258,259,262,263,265,266,267,268,269,270,272,273,275,278,279,282,284,287,288,290,291,292,293,294,297,298,299,303,305,307,309,311,313,314,315,316,317,318,319,320,321,7,322,323,324,326,327,328,329,330,331,333,334,335,337,340,341,342,343,344,346,347,349,353,354,355,357,358,359,361,363,364,365,366,367,368,369,370,371,372,373,374,376,378,8,9,382,385,387,388,389,390,391,392,393,394,395,405,406,409,412,415,416,419,10,421,424,426,427,429,430,431,433,438,440,441,443,607,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,0,468,3,5,471,474,475,476,477,478,479,480,481,482,483,486,487,488,489,490,491,492,496,497,498,499,500,503,506,507,509,510,512,514,516,518,520,521,522,525,526,527,530,531,533,535,538,540,541,542,544,545,546,11,548,550,551,552,553,554,556,557,558,559,560,563,565,569,572,573,574,575,577,578,579,582,584,587,588,589,590,593,595,596,597,608,609,610,611,612,613,598,599,600,602,603],"tindex":"c6542f53-3f53-11e6-9eaa-b7cf08f92dd2","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c6545664-3f53-11e6-9eaa-81500e316026","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter != typeAdapter) && (token != typeAdapter)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"typeAdapter","token":"typeAdapter","com.google.gson.stream.JsonToken.NUMBER":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[23,26,6,27,28,30,31,614,604,605,606,149,151,155,230,245,252,269,279,298,320,321,7,322,323,326,366,367,368,369,9,416,465,466,476,477,478,482,483,488,526,535,538,541,542,544,545,546,11,548,599],"tindex":"c655b5f5-3f53-11e6-9eaa-332728bf567d","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (!serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:318","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c655dd06-3f53-11e6-9eaa-a1b156166d91","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == (-2)) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c655dd07-3f53-11e6-9eaa-87e3e202c98f","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c655dd08-3f53-11e6-9eaa-0197647a30f0","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        {\n            if (property == null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c6560419-3f53-11e6-9eaa-11eb48b1b577","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c656041a-3f53-11e6-9eaa-614839a02fd7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[20,21,615,23,26,27,31,32,33,34,40,45,46,47,49,50,51,125,149,151,152,154,155,156,157,159,165,166,176,180,187,195,211,216,224,225,226,227,228,229,233,234,235,236,252,261,265,267,268,272,279,281,282,283,284,286,305,306,307,317,320,321,322,323,324,325,327,328,329,330,331,332,333,334,335,336,337,339,340,341,342,343,344,345,346,348,352,353,355,357,366,367,368,369,370,373,374,377,378,382,389,390,394,395,396,397,398,399,400,401,405,406,407,408,409,410,411,412,413,414,415,417,419,420,421,423,425,427,428,429,430,432,433,434,435,438,439,440,441,442,443,444,445,446,447,607,448,450,451,452,461,462,463,464,465,466,0,1,2,468,3,4,469,5,471,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,491,500,505,506,509,514,516,517,519,520,521,522,523,524,525,526,530,531,533,534,535,536,537,541,542,543,544,546,548,549,550,551,552,553,573,574,575,576,577,578,579,580,581,582,583,584,585,586,593,594,608,609,610,611,612,598,600,601,602,603],"tindex":"c6562b2b-3f53-11e6-9eaa-7da1ef1e5dae","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[616,617,173],"tindex":"c656523c-3f53-11e6-9eaa-8b119ef248e5","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.WildcardType) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[20,21,615,23,26,27,31,32,33,34,40,618,619,620,621,622,45,46,47,49,50,51,125,149,151,152,154,155,156,157,159,165,166,176,180,187,195,211,216,224,225,226,227,228,229,233,234,235,236,252,261,265,267,268,272,279,281,282,283,284,286,305,306,307,317,320,321,322,323,324,325,327,328,329,330,331,332,333,334,335,336,337,339,340,341,342,343,344,345,346,348,352,353,355,357,366,367,368,369,370,373,374,377,378,382,389,390,394,395,396,397,398,399,400,401,405,406,407,408,409,410,411,412,413,414,415,417,419,420,421,423,425,427,428,429,430,432,433,434,435,438,439,440,441,442,443,444,445,446,447,607,448,450,451,452,461,462,463,464,465,466,0,1,2,468,3,4,469,5,471,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,491,500,505,506,509,514,515,516,517,518,519,520,521,522,523,524,525,526,530,531,533,534,535,536,537,541,542,543,544,546,548,549,550,551,552,553,573,574,575,576,577,578,579,580,581,582,583,584,585,586,593,594,608,609,610,611,612,598,600,601,602,603],"tindex":"c656794d-3f53-11e6-9eaa-89926d36fbb0","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c656a05e-3f53-11e6-9eaa-8bd35b123455","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[18,19,20,21,615,623,23,26,34,624,625,614,626,627,628,629,630,631,632,633,634,635,40,49,50,51,149,152,155,159,178,193,195,197,206,211,216,224,225,226,227,228,229,230,231,235,244,245,248,250,252,257,258,259,262,263,265,266,267,268,269,270,272,275,278,279,282,284,305,313,317,324,326,327,328,329,330,331,333,334,335,337,340,341,342,343,344,346,353,354,355,357,358,361,365,367,370,373,374,378,382,388,389,390,394,395,405,406,409,412,415,419,421,427,429,430,433,438,440,441,443,607,448,450,451,452,461,462,463,464,0,468,3,5,471,474,475,479,480,481,486,487,489,491,500,506,509,514,516,520,521,522,525,526,530,531,533,535,541,542,544,545,546,548,550,551,552,553,573,574,575,577,578,579,582,584,593,608,609,610,611,612,613,636,637,638,639,640,641,598,602,603],"tindex":"c657b1cf-3f53-11e6-9eaa-057edf1cbf5a","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467353396073/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":27,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
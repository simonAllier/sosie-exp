{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":149,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":594,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":2,"com.google.gson.functional.StringTest.testStringValueDeserialization":592,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":176,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":510,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":397,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":287,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":252,"com.google.gson.MixedStreamTest.testWriteLenient":15,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":213,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":518,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":186,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":282,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":221,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":285,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":445,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":531,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":612,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":254,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":406,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":127,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":71,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":303,"com.google.gson.functional.ObjectTest.testSingletonLists":219,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":511,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":390,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":595,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":622,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":360,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":209,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":526,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":234,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":376,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":30,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":262,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":608,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":12,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":4,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":437,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":18,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":49,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":343,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":382,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":366,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":48,"com.google.gson.functional.EnumTest.testEnumCaseMapping":611,"com.google.gson.GenericArrayTypeTest.testNotEquals":19,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":372,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":593,"com.google.gson.functional.JsonTreeTest.testToJsonTree":204,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":381,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":528,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":281,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":489,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":63,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":504,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":369,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":104,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":192,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":605,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":231,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":456,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":398,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":577,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":365,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":338,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":241,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":529,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":206,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":461,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":525,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":442,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":421,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":488,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":243,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":550,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":509,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":43,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":214,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":434,"com.google.gson.ParameterizedTypeTest.testNotEquals":23,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":501,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":97,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":197,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":22,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":58,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":443,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":575,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":435,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":240,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":544,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":140,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":227,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":314,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":54,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":292,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":402,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":617,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":171,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":272,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":190,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":28,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":354,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":60,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":84,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":516,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":503,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":337,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":195,"com.google.gson.functional.CollectionTest.testSetDeserialization":108,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":92,"com.google.gson.functional.EnumTest.testEnumSet":115,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":230,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":572,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":426,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":70,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":80,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":339,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":493,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":235,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":69,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":141,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":439,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":144,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":449,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":210,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":362,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":450,"com.google.gson.functional.MapTest.testHashMapDeserialization":35,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":395,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":514,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":476,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":591,"com.google.gson.MixedStreamTest.testReadNulls":623,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":148,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":315,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":85,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":93,"com.google.gson.functional.MapTest.testSortedMap":51,"com.google.gson.functional.MapTest.testMapSerialization":47,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":150,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":177,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":432,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":555,"com.google.gson.functional.MapTest.testSerializeMaps":3,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":165,"com.google.gson.functional.MapTest.testComplexKeysSerialization":55,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":571,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":59,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":559,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":194,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":328,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":309,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":613,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":325,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":610,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":7,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":128,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":288,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":625,"com.google.gson.functional.MapTest.testStringKeyDeserialization":57,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":341,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":556,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":355,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":463,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":61,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":401,"com.google.gson.functional.PrettyPrintingTest.testMap":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":396,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":562,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":584,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":485,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":569,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":375,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":558,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":598,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":602,"com.google.gson.functional.MapTest.testMapSerializationEmpty":56,"com.google.gson.functional.CollectionTest.testQueueSerialization":102,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":499,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":427,"com.google.gson.functional.MapTest.testMapOfMapSerialization":537,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":418,"com.google.gson.JavaSerializationTest.testMapIsSerializable":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":506,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":106,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":333,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":429,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":361,"com.google.gson.functional.FieldNamingTest.testIdentity":166,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":81,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":297,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":244,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":131,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":218,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":291,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":352,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":384,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":344,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":371,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":597,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":294,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":520,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":494,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":527,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":34,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":459,"com.google.gson.functional.MapTest.testMapSubclassSerialization":535,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":78,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":146,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":574,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":0,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":185,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":416,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":582,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":215,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":484,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":208,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":68,"com.google.gson.functional.EnumTest.testEnumSubclass":118,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":438,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":233,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":377,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":383,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":334,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":621,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":444,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":199,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":321,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":386,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":296,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":422,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":295,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":270,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":132,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":552,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":89,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":428,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":290,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":522,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":220,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":534,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":62,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":87,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":546,"com.google.gson.CommentsTest.testParseComments":13,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":65,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":193,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":222,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":306,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":357,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":183,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":258,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":441,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":348,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":538,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":600,"com.google.gson.MixedStreamTest.testReadInvalidState":374,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":90,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":76,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":524,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":17,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":178,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":394,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":614,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":560,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":340,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":255,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":411,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":331,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":507,"com.google.gson.functional.MapTest.testMapDeserialization":42,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":502,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":10,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":347,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":302,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":41,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":279,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":305,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":589,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":326,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":119,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":156,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":245,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":576,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":317,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":563,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":490,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":75,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":293,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":324,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":6,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":50,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":346,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":82,"com.google.gson.functional.PrimitiveTest.testShortSerialization":457,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":370,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":447,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":581,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":417,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":158,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":393,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":163,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":117,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":283,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":145,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":37,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":410,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":465,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":216,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":517,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":139,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":472,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":466,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":620,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":198,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":246,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":278,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":479,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":147,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":200,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":423,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":250,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":226,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":120,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":122,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":157,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":284,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":561,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":356,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":301,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":508,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":400,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":496,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":512,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":99,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":275,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":387,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":452,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":425,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":469,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":311,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":116,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":304,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":154,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":179,"com.google.gson.functional.MapTest.testGeneralMapField":175,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":224,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":543,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":471,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":182,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":335,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":519,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":52,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":480,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":567,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":448,"com.google.gson.MixedStreamTest.testReadMixedStreamed":138,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":44,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":491,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":95,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":109,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":345,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":169,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":430,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":580,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":24,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":160,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":45,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":533,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":36,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":358,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":470,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":31,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":265,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":413,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":505,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":618,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":88,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":298,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":478,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":590,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":83,"com.google.gson.functional.ObjectTest.testNestedDeserialization":251,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":588,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":624,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":151,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":269,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":579,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":468,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":257,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":46,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":599,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":619,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":67,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":455,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":318,"com.google.gson.JavaSerializationTest.testListIsSerializable":26,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":189,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":217,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":111,"com.google.gson.functional.ObjectTest.testNullSerialization":124,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":320,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":532,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":38,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":174,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":385,"com.google.gson.functional.MapTest.testInterfaceTypeMap":173,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":553,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":351,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":274,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":388,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":327,"com.google.gson.MixedStreamTest.testReadClosed":14,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":323,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":481,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":364,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":404,"com.google.gson.MixedStreamTest.testWriteClosed":137,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":153,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":585,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":225,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":530,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":72,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":273,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":260,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":248,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":256,"com.google.gson.stream.JsonWriterTest.testLongs":626,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":162,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":228,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":280,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":103,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":266,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":433,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":268,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":123,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":513,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":367,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":329,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":473,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":409,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":487,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":196,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":540,"com.google.gson.functional.CollectionTest.testQueueDeserialization":113,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":259,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":615,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":415,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":431,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":604,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":475,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":523,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":172,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":498,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":207,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":249,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":98,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":135,"com.google.gson.functional.MapTest.testRawMapSerialization":539,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":33,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":237,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":316,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":181,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":125,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":20,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":378,"com.google.gson.functional.PrimitiveTest.testByteSerialization":454,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":545,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":568,"com.google.gson.ObjectTypeAdapterTest.testSerialize":134,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":205,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":399,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":187,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":554,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":121,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":73,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":342,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":601,"com.google.gson.functional.MapTest.testMapWithQuotes":536,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":486,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":603,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":353,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":94,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":565,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":253,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":483,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":91,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":368,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":64,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":247,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":11,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":495,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":229,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":32,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":188,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":451,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":586,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":548,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":521,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":541,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":319,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":299,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":583,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":616,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":29,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":570,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":77,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":359,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":236,"com.google.gson.JsonObjectTest.testAddingStringProperties":130,"com.google.gson.functional.ObjectTest.testNestedSerialization":238,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":312,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":403,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":566,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":607,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":477,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":53,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":180,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":211,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":16,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":379,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":114,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":232,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":464,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":276,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":159,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":373,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":155,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":239,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":263,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":606,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":551,"com.google.gson.functional.CollectionTest.testSetSerialization":286,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":336,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":201,"com.google.gson.functional.StringTest.testStringValueSerialization":609,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":167,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":100,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":289,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":330,"com.google.gson.MixedStreamTest.testWriteInvalidState":136,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":542,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":408,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":184,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":414,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":492,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":164,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":191,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":126,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":300,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":363,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":515,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":40,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":1,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":27,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":547},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"tindex":"6e5d06d0-3f07-11e6-ac9f-cf1da12a1d0c","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e5dca21-3f07-11e6-ac9f-9bb6474a364f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e5df132-3f07-11e6-ac9f-e53a3bf6d2e0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == o) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"o","o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e5df133-3f07-11e6-ac9f-939ce76295a1","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if ((!(value.isJsonNull())) && ((value.peek()) != value)) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"value","jsonReader":"value","element":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,11,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],"tindex":"6e5f50c4-3f07-11e6-ac9f-976bb2b745ee","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == null) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e5f77d5-3f07-11e6-ac9f-7b31fbb5fc1d","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[121,122,123],"tindex":"6e5f77d6-3f07-11e6-ac9f-eb4aaeb2feeb","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[124,125],"tindex":"6e5f77d7-3f07-11e6-ac9f-c77430b2b07c","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e5f9ee8-3f07-11e6-ac9f-27c3a99ef744","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e5f9ee9-3f07-11e6-ac9f-059d66df647a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6e5f9eea-3f07-11e6-ac9f-39429b86ff69","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n    out.value(dateFormatAsString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6e5fc5fb-3f07-11e6-ac9f-e75021399d3a","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[126,127,128,129,130,20,131],"tindex":"6e5fc5fc-3f07-11e6-ac9f-33a70c11e450","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[132,133,134,135,0,136,137,138,139,140,141,142,143,144,145,146,29,147,148,149,150,151,152,153,154,31,155,156,157,158,159,160,161,162,163,121,164,165,166,167,168,169,170,171,172,49,173,174,175,55,176,177,178,179,180,181,182,183,184,185,186,187,188,189,64,65,67,68,69,190,70,71,72,73,74,75,76,78,79,191,192,193,194,195,196,197,198,199,200,201,202,203,131,204,205,206,207,208,209,210,6,7,11,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,90,91,254,92,255,256,257,258,259,260,261,262,263,264,265,266,267,268,93,95,96,97,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,108,285,286,287,288,289,290,291,292,293,294,295,296,12,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,122,319,320,321,123,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338],"tindex":"6e5fed0d-3f07-11e6-ac9f-336f1971dd93","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[339,340,341],"tindex":"6e60141e-3f07-11e6-ac9f-43618c645593","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl"},"failures":[342,141,343,344,345,346,347,176,348,177,178,179,180,349,181,350,351,186,187,352,188,189,66,77,353,197,80,354,81,198,199,355,200,356,201,357,358,82,359,360,361,83,211,212,362,363,364,365,366,112,367,368,369,370,371],"tindex":"6e60141f-3f07-11e6-ac9f-bd931fd7e3f2","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:59","type":"CtUnaryOperatorImpl"},"failures":[13,372,373,132,133,135,374,0,136,15,16,137,138,139,140,375,376,377,20,21,378,379,342,141,343,344,345,24,25,26,27,142,143,144,28,145,146,29,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,30,448,449,450,451,147,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,148,475,149,150,476,151,152,153,154,477,31,478,479,480,481,482,155,156,483,484,485,486,487,32,488,489,490,157,491,492,493,158,494,495,496,497,498,499,159,500,501,502,503,504,505,506,160,507,508,509,510,511,33,512,513,514,515,516,517,518,519,520,161,521,522,523,524,162,525,526,346,527,528,529,530,163,121,164,165,166,167,531,168,169,170,171,532,533,34,347,534,35,36,535,3,37,38,39,40,41,42,172,43,44,45,46,536,537,47,48,49,50,538,51,173,52,174,175,53,539,54,55,56,57,58,59,60,61,176,348,177,178,179,180,349,181,540,541,542,543,544,545,546,547,548,549,550,551,62,552,63,553,554,555,182,183,184,556,557,558,559,560,561,350,562,351,185,563,564,186,187,352,188,189,64,65,66,67,68,69,190,70,71,72,73,74,75,76,77,78,79,191,194,195,353,197,80,354,81,198,199,355,200,356,201,357,358,82,359,360,361,565,83,202,203,131,204,205,566,567,206,207,84,568,208,209,569,570,85,210,571,572,573,574,4,5,6,7,8,9,10,11,211,212,213,214,215,216,217,87,88,575,218,219,220,221,222,223,224,225,226,227,228,229,89,230,231,232,233,576,234,577,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,90,578,91,254,92,362,363,364,365,579,366,580,581,255,256,257,258,259,260,582,261,262,263,264,265,266,267,268,583,93,94,95,96,97,269,270,271,272,273,274,275,276,277,278,279,280,281,282,98,283,584,99,100,101,102,103,585,104,284,105,106,107,586,108,285,109,110,286,111,587,112,113,287,288,290,291,293,294,295,296,12,588,114,297,298,367,300,301,302,303,589,368,369,304,305,306,307,370,308,125,590,309,310,311,312,313,314,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,315,316,317,318,122,319,320,321,123,322,323,324,325,326,115,116,117,118,119,610,327,328,120,611,612,329,330,331,332,333,334,371,336,337,338],"tindex":"6e606240-3f07-11e6-ac9f-01dfaef65b04","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (!(typeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"6e61e8e1-3f07-11e6-ac9f-1fb8b768c558","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e61e8e2-3f07-11e6-ac9f-95f5be9fc59a","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl"},"failures":[128,613,216],"tindex":"6e620ff3-3f07-11e6-ac9f-319c0024898e","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e623704-3f07-11e6-ac9f-a79cc19e7447","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e625e15-3f07-11e6-ac9f-6d071ee28058","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e625e16-3f07-11e6-ac9f-21f89055e7ea","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl"},"failures":[614,615,616,617,618],"tindex":"6e628527-3f07-11e6-ac9f-eda78657a693","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[132,133,134,135,0,136,137,138,139,140,141,142,143,144,145,146,29,147,148,149,150,151,152,153,154,31,155,156,157,158,159,160,161,162,166,167,168,169,170,171,172,49,173,174,175,55,176,177,178,179,180,181,182,183,184,185,186,187,188,189,64,65,67,68,69,190,70,71,72,73,74,75,76,78,79,191,192,193,194,195,196,197,198,199,200,201,202,203,131,204,205,206,207,208,209,210,6,7,11,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,90,91,254,92,255,256,257,258,259,260,261,262,263,264,265,266,267,268,93,95,96,97,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,108,285,286,287,288,289,290,291,292,293,294,295,296,12,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,318,327,328,329,330,331,332,333,334,335,336,337,338],"tindex":"6e62d348-3f07-11e6-ac9f-f15d9b1990a0","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl"},"failures":[15,429,442,443,455,463,469],"tindex":"6e634879-3f07-11e6-ac9f-a5f7b9ea3fbf","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6e63969a-3f07-11e6-ac9f-1b5960e36a1d","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl"},"failures":[132,133,134,135,0,136,137,138,139,140,141,142,143,144,145,146,29,147,148,149,150,151,152,153,154,31,155,156,157,158,159,160,161,162,163,121,164,165,166,167,168,169,170,171,172,49,173,174,175,55,176,177,178,179,180,181,182,183,184,185,186,187,188,189,64,65,67,68,69,190,70,71,72,73,74,75,76,78,79,191,192,193,194,195,196,197,198,199,200,201,202,203,131,204,205,206,207,208,209,210,6,7,11,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,90,91,254,92,255,256,257,258,259,260,261,262,263,264,265,266,267,268,93,95,96,97,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,108,285,286,287,619,288,289,620,290,291,292,293,294,295,296,12,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,122,319,320,321,123,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338],"tindex":"6e6432db-3f07-11e6-ac9f-e5edd51c10e9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[163,165,315,319,321,326],"tindex":"6e6459ec-3f07-11e6-ac9f-119be41cdb5f","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (srcString != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"srcString"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e6459ed-3f07-11e6-ac9f-bb8f63d46aa0","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[15,429,442,443,455,463,469],"tindex":"6e6480fe-3f07-11e6-ac9f-7b6195c42e77","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e6480ff-3f07-11e6-ac9f-21100ec5235e","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e64a810-3f07-11e6-ac9f-d9672089ac49","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[13,372,373,132,133,621,134,622,135,374,0,136,15,623,16,137,138,139,140,375,376,377,20,21,378,379,342,141,343,344,345,24,25,26,339,340,341,27,142,143,144,28,145,146,29,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,30,448,449,450,451,147,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,148,475,149,150,476,151,152,153,154,477,31,478,479,480,481,482,155,156,483,484,485,486,487,32,488,489,490,157,491,492,493,158,494,495,496,497,498,499,159,500,501,502,503,504,505,506,160,507,508,509,510,511,33,512,513,514,515,516,517,518,519,520,161,521,522,523,524,162,525,526,346,527,528,529,530,163,121,164,165,166,167,531,168,169,170,171,532,533,34,347,534,35,36,535,3,37,38,39,40,41,42,172,43,44,45,46,536,537,47,48,49,50,538,51,173,52,174,175,53,539,54,55,56,57,58,59,60,61,176,348,177,178,179,180,349,181,540,541,542,543,544,545,546,547,548,549,550,551,62,552,63,553,554,555,182,183,184,556,557,558,559,560,561,350,562,351,185,563,564,186,187,352,188,189,64,65,66,67,68,69,190,70,71,72,73,74,75,76,77,78,79,191,192,193,194,195,196,353,197,80,354,81,198,199,355,200,356,201,357,358,82,359,360,361,565,83,202,203,131,204,205,566,567,206,207,84,568,208,209,569,570,85,210,571,572,573,574,4,5,6,7,8,9,10,11,211,212,213,214,215,216,217,87,88,575,218,219,220,221,222,223,224,225,226,227,228,229,89,230,231,232,233,576,234,577,235,236,237,238,624,239,240,241,242,625,243,244,245,246,247,248,249,250,251,252,253,90,578,91,254,92,362,363,364,365,579,366,580,581,255,256,257,258,259,260,582,261,262,263,264,265,266,267,268,583,93,94,95,96,97,269,270,271,272,273,274,275,276,277,278,279,280,281,282,98,283,584,99,100,101,102,103,585,104,284,105,106,107,586,108,285,109,110,286,111,587,112,113,287,619,288,289,620,290,291,292,293,294,295,296,12,588,114,297,298,367,299,300,301,302,303,589,368,369,304,305,306,307,370,308,125,590,309,310,311,312,313,314,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,315,316,317,318,122,319,320,321,123,322,323,324,325,326,115,116,117,118,119,610,327,328,120,611,612,329,330,331,332,333,334,371,335,336,337,338],"tindex":"6e64cf21-3f07-11e6-ac9f-7daf387b802b","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e64f632-3f07-11e6-ac9f-0d195a1201d3","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if ((from instanceof java.lang.reflect.ParameterizedType) && (!(from.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"from","type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[376,626,496,509],"tindex":"6e651d43-3f07-11e6-ac9f-532f47ffb8e8","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6e651d44-3f07-11e6-ac9f-2df600be65d2","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6e654455-3f07-11e6-ac9f-c9429aa22150","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e6607a6-3f07-11e6-ac9f-a3953f518258","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320267702/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e662eb7-3f07-11e6-ac9f-41d2a7eb5fcf","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6e662eb8-3f07-11e6-ac9f-159afaa153b0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6e6655c9-3f07-11e6-ac9f-85df4a6bd843","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"6e6655ca-3f07-11e6-ac9f-c119caf23dcd","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"6e66a3eb-3f07-11e6-ac9f-dbe5fdd09943","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":44,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
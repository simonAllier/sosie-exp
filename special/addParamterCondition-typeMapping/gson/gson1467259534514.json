{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":536,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":258,"com.google.gson.functional.StringTest.testStringValueDeserialization":257,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":300,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":111,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":239,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":513,"com.google.gson.stream.JsonWriterTest.testRepeatedName":292,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":318,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":147,"com.google.gson.MixedStreamTest.testWriteLenient":502,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":128,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":519,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":41,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":127,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":345,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":114,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":427,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":99,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":28,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":84,"com.google.gson.functional.ObjectTest.testSingletonLists":125,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":470,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":94,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":281,"com.google.gson.stream.JsonWriterTest.testStrings":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":59,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":314,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":248,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":136,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":9,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":116,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":251,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":437,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":267,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":150,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":112,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":438,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":304,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":91,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":171,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":73,"com.google.gson.functional.EnumTest.testEnumCaseMapping":21,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":505,"com.google.gson.functional.JsonTreeTest.testToJsonTree":539,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":249,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":535,"com.google.gson.stream.JsonWriterTest.testNulls":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":227,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":329,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":434,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":202,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":235,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":533,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":342,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":153,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":265,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":133,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":313,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":169,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":383,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":139,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":312,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":221,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":81,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":121,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":247,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":435,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":226,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":417,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":458,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":238,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":69,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":109,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":523,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":335,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":234,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":217,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":270,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":53,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":379,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":110,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":416,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":454,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":131,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":282,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":305,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":490,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":75,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":322,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":512,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":211,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":393,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":326,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":54,"com.google.gson.stream.JsonWriterTest.testEmptyArray":284,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":77,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":481,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":176,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":524,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":156,"com.google.gson.functional.CollectionTest.testSetDeserialization":49,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":428,"com.google.gson.functional.EnumTest.testEnumSet":14,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":213,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":410,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":106,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":327,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":230,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":363,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":412,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":276,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":325,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":178,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":117,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":303,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":166,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":315,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":515,"com.google.gson.functional.MapTest.testHashMapDeserialization":64,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":243,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":191,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":330,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":446,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":471,"com.google.gson.functional.MapTest.testSortedMap":74,"com.google.gson.functional.MapTest.testMapSerialization":368,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":447,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":108,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":181,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":204,"com.google.gson.functional.MapTest.testSerializeMaps":362,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":494,"com.google.gson.functional.MapTest.testComplexKeysSerialization":377,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":212,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":269,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":465,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":20,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":155,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":392,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":527,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":39,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":19,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":0,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":441,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":319,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":141,"com.google.gson.functional.MapTest.testStringKeyDeserialization":76,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":206,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":352,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":98,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":380,"com.google.gson.functional.PrettyPrintingTest.testMap":439,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":338,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":12,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":448,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":8,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":207,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":436,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":260,"com.google.gson.functional.CollectionTest.testQueueSerialization":339,"com.google.gson.functional.MapTest.testMapSerializationEmpty":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":477,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":306,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":308,"com.google.gson.functional.MapTest.testMapOfMapSerialization":367,"com.google.gson.JavaSerializationTest.testMapIsSerializable":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":236,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":47,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":285,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":161,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":259,"com.google.gson.functional.FieldNamingTest.testIdentity":495,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":55,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":195,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":295,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":142,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":321,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":405,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":529,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":288,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":92,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":2,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":532,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":244,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":232,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":160,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":62,"com.google.gson.functional.MapTest.testMapSubclassSerialization":361,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":34,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":188,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":214,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":103,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":429,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":223,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":11,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":27,"com.google.gson.functional.EnumTest.testEnumSubclass":17,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":10,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":135,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":113,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":351,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":36,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":422,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":296,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":149,"com.google.gson.stream.JsonWriterTest.testNullName":526,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":521,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":201,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":277,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":24,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":298,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":294,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":126,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":63,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":460,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":293,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":456,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":26,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":154,"com.google.gson.CommentsTest.testParseComments":268,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":355,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":406,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":469,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":180,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":370,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":496,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":424,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":328,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":402,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":182,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":279,"com.google.gson.JsonParserTest.testParseMixedArray":283,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":97,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":508,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":208,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":466,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":237,"com.google.gson.functional.MapTest.testMapDeserialization":68,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":200,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":444,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":360,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":83,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":364,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":396,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":388,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":386,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":40,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":18,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":472,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":418,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":331,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":165,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":336,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":421,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":369,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":440,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":58,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":390,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":115,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":173,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":104,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":401,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":231,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":491,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":16,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":42,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":187,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":66,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":403,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":1,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":274,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":88,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":272,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":431,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":320,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":56,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":90,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":419,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":275,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":485,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":118,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":353,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":145,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":130,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":317,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":228,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":343,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":57,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":385,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":480,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":510,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":476,"com.google.gson.stream.JsonWriterTest.testNullStringValue":287,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":241,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":43,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":522,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":119,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":525,"com.google.gson.stream.JsonWriterTest.testEmptyObject":302,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":358,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":15,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":387,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":183,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":129,"com.google.gson.functional.MapTest.testGeneralMapField":374,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":453,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":163,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":382,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":482,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":372,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":220,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":398,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":229,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":400,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":3,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":215,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":346,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":210,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":172,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":5,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":479,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":71,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":507,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":65,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":404,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":198,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":487,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":291,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":478,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":516,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":61,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":449,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":219,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":87,"com.google.gson.functional.ObjectTest.testNestedDeserialization":146,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":357,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":151,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":415,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":192,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":170,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":468,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":22,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":72,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":261,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":324,"com.google.gson.JavaSerializationTest.testListIsSerializable":7,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":520,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":531,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":348,"com.google.gson.stream.JsonWriterTest.testDoubles":307,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":334,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":256,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":67,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":373,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":203,"com.google.gson.functional.MapTest.testInterfaceTypeMap":371,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":164,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":395,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":174,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":316,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":38,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":168,"com.google.gson.MixedStreamTest.testWriteClosed":504,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":193,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":341,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":250,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":407,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":514,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":29,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":394,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":538,"com.google.gson.stream.JsonWriterTest.testLongs":289,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":420,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":484,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":397,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":408,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":340,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":253,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":488,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":37,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":344,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":242,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":196,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":124,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":158,"com.google.gson.stream.JsonWriterTest.testNumbers":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":224,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":157,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":451,"com.google.gson.functional.CollectionTest.testQueueDeserialization":52,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":509,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":537,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":107,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":246,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":254,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":140,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":365,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":301,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":82,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":144,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":337,"com.google.gson.functional.MapTest.testRawMapSerialization":376,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":500,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":240,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":432,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":35,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":413,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":186,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":455,"com.google.gson.ObjectTypeAdapterTest.testSerialize":280,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":498,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":79,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":528,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":461,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":492,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":30,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":262,"com.google.gson.functional.MapTest.testMapWithQuotes":366,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":100,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":263,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":349,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":60,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":474,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":426,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":297,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":85,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":25,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":143,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":445,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":134,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":132,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":225,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":486,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":530,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":48,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":245,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":323,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":452,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":333,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":450,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":255,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":511,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":189,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":13,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":33,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":93,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":517,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":356,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":430,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":137,"com.google.gson.functional.ObjectTest.testNestedSerialization":414,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":359,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":266,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":384,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":399,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":197,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":375,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":184,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":473,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":4,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":503,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":311,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":194,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":411,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":122,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":534,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":233,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":506,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":222,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":252,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":433,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":459,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":78,"com.google.gson.functional.CollectionTest.testSetSerialization":347,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":354,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":442,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":497,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":23,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":44,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":423,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":409,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":102,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":463,"com.google.gson.stream.JsonWriterTest.testBooleans":286,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":475,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":493,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":152,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":167,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":271,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":31,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":499,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":299,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":175,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":457},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1],"tindex":"e4fe9abb-3e77-11e6-9942-b921e7d55fdd","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"e4fee8dc-3e77-11e6-9942-8900a294f47a","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268],"tindex":"e4fee8dd-3e77-11e6-9942-4ff6404d1c90","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj instanceof java.lang.Class) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e4ff0fee-3e77-11e6-9942-5fe5cb692196","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1236","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,14,15,16,17,316,317,318,319,320,321,322,25,323,324,27,325,326,327,29,30,31,328,329,330,35,331,332,333,334,335,336,41,337,42,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,79,384,80,81,82,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,125,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,150,152,153,154,155,157,158,423,159,160,161,424,425,426,427,428,162,429,430,174,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,182,184,187,188,189,190,446,447,448,195,449,450,197,198,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,216,217,472,473,474,225,475,476,477,478,479,480,238,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506],"tindex":"e4ff0fef-3e77-11e6-9942-65d6c9b69ffb","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (empty == empty) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    int int = peek();\n                    if ((context != nonempty) && (context != empty)) {\n                        throw new java.lang.IllegalStateException(\"Nesting problem.\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n                    } \n                    (int)--;\n                    if (context == nonempty) {\n                        newline();\n                    } \n                    java.io.Writer.write(closeBracket);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_NONE":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[507],"tindex":"e4ff3700-3e77-11e6-9942-e55198896186","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.Character) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"e4ff3701-3e77-11e6-9942-33dee7a3ae8b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"e4ff5e12-3e77-11e6-9942-c167e438ad05","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (!(jsonElement instanceof com.google.gson.JsonPrimitive)) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"e4ff5e13-3e77-11e6-9942-3b5b453380a5","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"e4ff5e14-3e77-11e6-9942-a57240feb8bc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[508,509,510,511,512,513,514,515,516,517],"tindex":"e4ff8525-3e77-11e6-9942-df0c90a6768c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"e4ffac36-3e77-11e6-9942-75ce1202686f","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e4ffac37-3e77-11e6-9942-950a36261510","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"e4ffac38-3e77-11e6-9942-597f980899c0","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"e4ffd349-3e77-11e6-9942-3389d2a61a17","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o == o) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"o","typeOfT":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:824","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)"},"failures":[],"tindex":"e4ffd34a-3e77-11e6-9942-d1a079883972","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == end) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"start","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[518,283,519,520,521,522,150,523,524],"tindex":"e4ffd34b-3e77-11e6-9942-4d36ada08054","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"e4ffd34c-3e77-11e6-9942-c3d81fa7647d","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (!(keyType instanceof java.lang.reflect.WildcardType)) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"e4ffd34d-3e77-11e6-9942-bd4914421fa2","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(src, typeOfSrc, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"e4ffd34e-3e77-11e6-9942-d19939ec79cf","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e4fffa5f-3e77-11e6-9942-eff31243699d","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[525],"tindex":"e4fffa60-3e77-11e6-9942-cfbf71436ce1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[],"tindex":"e4fffa61-3e77-11e6-9942-d5b8927ed6e9","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"e4fffa62-3e77-11e6-9942-05566eb3870e","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    return toJsonTree(src);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e5004883-3e77-11e6-9942-25b53e49607c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:309","type":"CtBinaryOperatorImpl","sourcecode":"(obj == null) || ((getClass()) != (obj.getClass()))"},"failures":[],"tindex":"e5004884-3e77-11e6-9942-b1cbf1d07408","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        toJson(src, src.getClass(), writer);\n    } else {\n        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"src","this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[526],"tindex":"e5006f95-3e77-11e6-9942-c7d4f4feae91","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[527,0,1],"tindex":"e5006f96-3e77-11e6-9942-b787da76d328","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e50096a7-3e77-11e6-9942-b1f6dc14ed64","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"e50096a8-3e77-11e6-9942-21f0d7cf3f47","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"e50096a9-3e77-11e6-9942-7bf666a622c4","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"e500bdba-3e77-11e6-9942-3f64bc0e6b3b","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:912","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"e500bdbb-3e77-11e6-9942-a176415f9cd8","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e500bdbc-3e77-11e6-9942-9737c8f37f93","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e500e4cd-3e77-11e6-9942-a3657632fcc4","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"e500e4ce-3e77-11e6-9942-1929075fcb7b","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"contextRawType","toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[323,519,528,529,530,531,532,533,521,522,534,535,536,537,538,539],"tindex":"e500e4cf-3e77-11e6-9942-fb3e0b4e4cb2","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src instanceof com.google.gson.JsonNull) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e500e4d0-3e77-11e6-9942-5f8a11e6af1f","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"e500e4d1-3e77-11e6-9942-f570edce2ed9","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"e5010be2-3e77-11e6-9942-c345e9ef862f","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e5010be3-3e77-11e6-9942-e582754de0bb","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:861","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_FALSE)"},"failures":[],"tindex":"e5010be4-3e77-11e6-9942-87aa18a07e48","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (empty == empty) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    int int = peek();\n                    if ((context != nonempty) && (context != empty)) {\n                        throw new java.lang.IllegalStateException(\"Nesting problem.\");\n                    } \n                    if ((java.lang.String) != null) {\n                        throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n                    } \n                    (int)--;\n                    if (context == nonempty) {\n                        newline();\n                    } \n                    java.io.Writer.write(closeBracket);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_FALSE":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"e5010be5-3e77-11e6-9942-5789a22e394d","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                    java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n                    com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e50132f6-3e77-11e6-9942-d386dcb41119","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e50132f7-3e77-11e6-9942-753ac66a4a0d","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"e50132f8-3e77-11e6-9942-d71d855c9446","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"e50132f9-3e77-11e6-9942-4f8c398d638f","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"e50132fa-3e77-11e6-9942-3d066d3f5472","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message != null) {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"e5015a0b-3e77-11e6-9942-fb611cf88bbc","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e5015a0c-3e77-11e6-9942-fb9b6b7d0211","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:191","type":"CtBinaryOperatorImpl","sourcecode":"((size)++) > (threshold)"},"failures":[],"tindex":"e5015a0d-3e77-11e6-9942-27f3fe221ea0","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if ((minimum++) > minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"minimum","threshold":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[],"tindex":"e5015a0e-3e77-11e6-9942-b7a068ae76f2","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"e5015a0f-3e77-11e6-9942-3dca2bdc1c84","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern == null) {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:336","type":"CtBinaryOperatorImpl","sourcecode":"delta == 2"},"failures":[],"tindex":"e5018120-3e77-11e6-9942-ed9fe2fb413e","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (timeStyle == 2) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:919","type":"CtBinaryOperatorImpl","sourcecode":"p != (com.google.gson.stream.JsonReader.PEEKED_BUFFERED)"},"failures":[],"tindex":"e5018121-3e77-11e6-9942-c92221218bff","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h != h) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651478/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":55,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
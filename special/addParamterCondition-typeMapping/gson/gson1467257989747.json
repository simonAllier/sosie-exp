{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":95,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":192,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":253,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":298,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":44,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":324,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":191,"com.google.gson.functional.PrimitiveTest.testShortSerialization":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":269,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":2,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":76,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":130,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":153,"com.google.gson.MixedStreamTest.testWriteLenient":263,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":201,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":242,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":276,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":61,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":247,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":248,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":140,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":199,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":251,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":145,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":287,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":119,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":177,"com.google.gson.functional.ObjectTest.testSingletonLists":197,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":156,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":173,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":136,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":184,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":19,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":212,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":80,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":72,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":107,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":224,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":266,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":52,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":53,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":70,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":74,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":228,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":204,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":111,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":279,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":129,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":249,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":7,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":175,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":186,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":181,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":297,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":325,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":167,"com.google.gson.functional.JsonTreeTest.testToJsonTree":152,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":182,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":104,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":311,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":110,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":22,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":126,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":283,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":41,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":178,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":275,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":49,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":239,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":315,"com.google.gson.functional.MapTest.testGeneralMapField":189,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":202,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":232,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":66,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":158,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":209,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":13,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":300,"com.google.gson.MixedStreamTest.testReadMixedStreamed":18,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":69,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":219,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":293,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":166,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":162,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":172,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":260,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":24,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":132,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":294,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":286,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":221,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":164,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":154,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":56,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":93,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":281,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":27,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":168,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":316,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":1,"com.google.gson.functional.ObjectTest.testNestedDeserialization":229,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":270,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":71,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":46,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":98,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":305,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":37,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":218,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":51,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":205,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":256,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":77,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":83,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":295,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":302,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":114,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":174,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":87,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":101,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":117,"com.google.gson.JavaSerializationTest.testListIsSerializable":262,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":64,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":157,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":320,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":90,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":272,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":307,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":288,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":188,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":23,"com.google.gson.functional.MapTest.testInterfaceTypeMap":187,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":68,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":103,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":235,"com.google.gson.functional.CollectionTest.testSetDeserialization":250,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":146,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":138,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":208,"com.google.gson.functional.EnumTest.testEnumSet":274,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":12,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":94,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":118,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":267,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":3,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":289,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":213,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":116,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":25,"com.google.gson.MixedStreamTest.testWriteClosed":17,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":48,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":137,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":106,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":203,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":326,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":120,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":102,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":40,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":36,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":226,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":43,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":84,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":165,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":134,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":109,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":206,"com.google.gson.functional.MapTest.testSortedMap":299,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":314,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":57,"com.google.gson.functional.MapTest.testMapSerialization":296,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":45,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":237,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":245,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":59,"com.google.gson.functional.MapTest.testComplexKeysSerialization":190,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":92,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":318,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":306,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":30,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":139,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":234,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":183,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":149,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":96,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":236,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":39,"com.google.gson.functional.CollectionTest.testQueueDeserialization":321,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":8,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":58,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":254,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":78,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":185,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":220,"com.google.gson.functional.MapTest.testStringKeyDeserialization":304,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":5,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":163,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":227,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":310,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":14,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":308,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":319,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":85,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":215,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":47,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":241,"com.google.gson.functional.MapTest.testMapSerializationEmpty":303,"com.google.gson.functional.CollectionTest.testQueueSerialization":313,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":323,"com.google.gson.ObjectTypeAdapterTest.testSerialize":259,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":161,"com.google.gson.JavaSerializationTest.testMapIsSerializable":261,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":317,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":62,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":34,"com.google.gson.functional.FieldNamingTest.testIdentity":246,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":243,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":121,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":268,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":26,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":222,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":82,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":151,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":196,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":284,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":148,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":9,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":193,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":144,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":258,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":33,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":112,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":285,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":225,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":255,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":125,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":141,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":207,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":15,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":147,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":133,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":135,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":115,"com.google.gson.functional.EnumTest.testEnumSubclass":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":271,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":211,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":65,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":55,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":63,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":73,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":91,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":89,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":28,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":21,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":142,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":195,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":194,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":11,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":99,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":214,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":257,"com.google.gson.functional.ObjectTest.testNestedSerialization":216,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":42,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":309,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":81,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":301,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":240,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":169,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":198,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":282,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":264,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":280,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":210,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":265,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":113,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":233,"com.google.gson.CommentsTest.testParseComments":322,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":180,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":200,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":105,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":171,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":38,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":127,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":217,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":54,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":143,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":124,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":238,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":67,"com.google.gson.functional.CollectionTest.testSetSerialization":252,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":75,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":60,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":31,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":79,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":312,"com.google.gson.MixedStreamTest.testWriteInvalidState":16,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":4,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":20,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":35,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":32,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":160,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":50,"com.google.gson.functional.MapTest.testMapDeserialization":292,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":244,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":231,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":176,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":108,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":291,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":179,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":29,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":97,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":150,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":128,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":122,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":223,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":86,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":290,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":100,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":123},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"4c3f6450-3e74-11e6-aa1b-c1f06c275060","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[1,2],"tindex":"4c3fd981-3e74-11e6-aa1b-23838459a96a","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"4c3fd982-3e74-11e6-aa1b-ef93f5189e46","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[3,4,5],"tindex":"4c400093-3e74-11e6-aa1b-59ed8d08594c","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (!(from instanceof java.lang.reflect.WildcardType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[3,4,5],"tindex":"4c404eb4-3e74-11e6-aa1b-350bfaf13da9","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259],"tindex":"4c4075c5-3e74-11e6-aa1b-f3442046d904","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if ((!serialize) && (!serialize)) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"serialize","skipSerialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[260,261,262,263,264,265,30,31,32,33,34,35,36,38,39,40,65,67,69,266,267,268,269,270,99,102,106,112,114,115,116,120,121,122,124,126,271,272,273,274,275,276,277,278,279,141,142,143,144,146,280,281,282,283,164,165,284,166,167,168,169,170,175,178,179,183,285,286,287,288,289,290,291,292,185,293,294,295,296,297,186,298,299,187,300,188,189,301,302,190,303,304,305,306,307,308,191,197,309,218,224,227,247,310,311,312,313,314,315,316,317,318,250,319,320,321,253,255,322,323,324],"tindex":"4c40c3e6-3e74-11e6-aa1b-51e047d40714","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[325,326],"tindex":"4c411207-3e74-11e6-aa1b-03319f09f4ef","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[],"tindex":"4c413918-3e74-11e6-aa1b-db287b9f63ae","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.InstanceCreator<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4c413919-3e74-11e6-aa1b-d963cae8e79a","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:906","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"4c41602a-3e74-11e6-aa1b-bd3fd32e5515","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_LONG":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"4c41602b-3e74-11e6-aa1b-996e78d8dd7c","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl","sourcecode":"requireExpose"},"failures":[],"tindex":"4c41873c-3e74-11e6-aa1b-19eaec3ebc6c","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"insert"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"4c41ae4d-3e74-11e6-aa1b-51c8bee4005d","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"4c41ae4e-3e74-11e6-aa1b-fde87e1282c9","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"4c41ae4f-3e74-11e6-aa1b-a96d66ff5e59","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"4c41d560-3e74-11e6-aa1b-a91d80f51eb3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl","sourcecode":"!changed"},"failures":[],"tindex":"4c41d561-3e74-11e6-aa1b-8d990ad4c66c","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4c41fc72-3e74-11e6-aa1b-3108d53a548d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"4c41fc73-3e74-11e6-aa1b-b3c4c6b6f473","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257632490/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":317,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":248,"com.google.gson.functional.StringTest.testStringValueDeserialization":247,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":625,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":105,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":229,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":440,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":275,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":140,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":380,"com.google.gson.MixedStreamTest.testWriteLenient":608,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":575,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":618,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":304,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":37,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":121,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":264,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":108,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":343,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":550,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":270,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":24,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":80,"com.google.gson.functional.ObjectTest.testSingletonLists":119,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":573,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":88,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":598,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":261,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":55,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":336,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":239,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":129,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":7,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":110,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":242,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":257,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":143,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":106,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":515,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":395,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":85,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":328,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":164,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":69,"com.google.gson.functional.EnumTest.testEnumCaseMapping":17,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":597,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":613,"com.google.gson.functional.JsonTreeTest.testToJsonTree":322,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":431,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":240,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":316,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":218,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":350,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":286,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":193,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":225,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":298,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":417,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":362,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":146,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":255,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":127,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":478,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":620,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":441,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":498,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":162,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":412,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":132,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":619,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":582,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":77,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":115,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":238,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":287,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":469,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":456,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":217,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":504,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":540,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":228,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":65,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":103,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":381,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":224,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":208,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":49,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":406,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":385,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":470,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":104,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":503,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":536,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":125,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":331,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":591,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":71,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":345,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":444,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":202,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":426,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":348,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":172,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":50,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":73,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":334,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":574,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":569,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":411,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":149,"com.google.gson.functional.CollectionTest.testSetDeserialization":45,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":271,"com.google.gson.functional.EnumTest.testEnumSet":10,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":204,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":496,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":100,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":368,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":221,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":388,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":499,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":327,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":347,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":467,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":171,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":111,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":159,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":340,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":473,"com.google.gson.functional.MapTest.testHashMapDeserialization":60,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":438,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":233,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":527,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":592,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":351,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":524,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":339,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":553,"com.google.gson.functional.MapTest.testSortedMap":70,"com.google.gson.functional.MapTest.testMapSerialization":394,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":526,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":102,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":174,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":195,"com.google.gson.functional.MapTest.testSerializeMaps":266,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":595,"com.google.gson.functional.MapTest.testComplexKeysSerialization":404,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":203,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":407,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":545,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":16,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":148,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":425,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":323,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":35,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":15,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":299,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":324,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":518,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":276,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":134,"com.google.gson.functional.MapTest.testStringKeyDeserialization":72,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":295,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":197,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":370,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":483,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":92,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":408,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":439,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":512,"com.google.gson.functional.PrettyPrintingTest.testMap":516,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":358,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":337,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":559,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":6,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":198,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":288,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":250,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":601,"com.google.gson.functional.CollectionTest.testQueueSerialization":359,"com.google.gson.functional.MapTest.testMapSerializationEmpty":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":566,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":461,"com.google.gson.functional.MapTest.testMapOfMapSerialization":393,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":454,"com.google.gson.JavaSerializationTest.testMapIsSerializable":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":226,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":43,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":154,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":463,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":376,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":249,"com.google.gson.functional.FieldNamingTest.testIdentity":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":51,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":186,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":135,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":277,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":306,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":321,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":491,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":86,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":0,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":310,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":599,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":141,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":235,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":330,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":222,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":567,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":58,"com.google.gson.functional.MapTest.testMapSubclassSerialization":387,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":481,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":30,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":180,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":205,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":97,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":513,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":583,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":214,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":382,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":490,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":9,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":23,"com.google.gson.functional.EnumTest.testEnumSubclass":13,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":466,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":8,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":128,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":432,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":409,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":107,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":369,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":32,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":434,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":509,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":332,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":457,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":142,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":312,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":192,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":329,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":462,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":495,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":20,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":578,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":120,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":59,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":542,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":384,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":538,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":22,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":147,"com.google.gson.CommentsTest.testParseComments":258,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":81,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":373,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":492,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":196,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":468,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":549,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":173,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":397,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":600,"com.google.gson.MixedStreamTest.testReadInvalidState":605,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":268,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":349,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":579,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":175,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":259,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":91,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":297,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":199,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":294,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":546,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":615,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":450,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":227,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":475,"com.google.gson.functional.MapTest.testMapDeserialization":64,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":568,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":521,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":386,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":79,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":390,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":428,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":419,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":415,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":36,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":14,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":558,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":497,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":505,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":352,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":158,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":560,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":357,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":508,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":396,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":517,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":581,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":430,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":54,"com.google.gson.functional.PrimitiveTest.testShortSerialization":479,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":421,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":109,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":166,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":98,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":471,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":561,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":593,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":12,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":38,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":179,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":62,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":95,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":366,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":484,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":325,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":234,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":612,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":489,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":485,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":283,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":344,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":52,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":84,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":556,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":584,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":112,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":209,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":371,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":458,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":138,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":124,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":342,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":291,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":552,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":219,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":263,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":155,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":53,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":414,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":572,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":333,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":443,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":563,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":231,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":39,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":314,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":435,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":113,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":460,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":487,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":378,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":11,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":418,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":529,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":176,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":123,"com.google.gson.functional.MapTest.testGeneralMapField":401,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":272,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":488,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":156,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":273,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":576,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":399,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":211,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":437,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":472,"com.google.gson.MixedStreamTest.testReadMixedStreamed":611,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":220,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":451,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":1,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":206,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":364,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":201,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":464,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":165,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":3,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":571,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":67,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":589,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":61,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":281,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":374,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":189,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":586,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":570,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":57,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":530,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":210,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":424,"com.google.gson.functional.ObjectTest.testNestedDeserialization":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":377,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":144,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":502,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":183,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":311,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":163,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":486,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":548,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":18,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":68,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":251,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":346,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":477,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":353,"com.google.gson.JavaSerializationTest.testListIsSerializable":5,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":308,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":383,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":365,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":355,"com.google.gson.stream.JsonWriterTest.testDoubles":626,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":246,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":63,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":400,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":433,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":194,"com.google.gson.functional.MapTest.testInterfaceTypeMap":398,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":157,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":427,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":436,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":167,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":341,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":34,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":557,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":446,"com.google.gson.MixedStreamTest.testWriteClosed":610,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":184,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":361,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":241,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":493,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":25,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":279,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":319,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":507,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":580,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":429,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":494,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":360,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":244,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":465,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":587,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":33,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":232,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":187,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":118,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":151,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":449,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":215,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":150,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":533,"com.google.gson.functional.CollectionTest.testQueueDeserialization":48,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":318,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":453,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":254,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":237,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":245,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":133,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":565,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":78,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":137,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":262,"com.google.gson.functional.MapTest.testRawMapSerialization":403,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":604,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":230,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":284,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":31,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":500,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":178,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":423,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":300,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":302,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":335,"com.google.gson.functional.PrimitiveTest.testByteSerialization":476,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":537,"com.google.gson.ObjectTypeAdapterTest.testSerialize":260,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":622,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":75,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":442,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":305,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":289,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":292,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":26,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":252,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":326,"com.google.gson.functional.MapTest.testMapWithQuotes":392,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":94,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":253,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":367,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":554,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":56,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":182,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":482,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":269,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":416,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":21,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":136,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":296,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":522,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":562,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":126,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":544,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":216,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":564,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":585,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":474,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":44,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":236,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":303,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":534,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":354,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":531,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":588,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":181,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":616,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":338,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":29,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":87,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":628,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":282,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":375,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":130,"com.google.gson.functional.ObjectTest.testNestedSerialization":501,"com.google.gson.JsonObjectTest.testAddingStringProperties":627,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":379,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":256,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":413,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":445,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":188,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":402,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":177,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":555,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":2,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":609,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":185,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":267,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":116,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":315,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":223,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":447,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":614,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":213,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":243,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":285,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":602,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":541,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":74,"com.google.gson.functional.CollectionTest.testSetSerialization":265,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":372,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":519,"com.google.gson.functional.StringTest.testStringValueSerialization":603,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":274,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":19,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":40,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":510,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":535,"com.google.gson.MixedStreamTest.testWriteInvalidState":607,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":621,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":448,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":96,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":543,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":590,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":594,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":145,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":532,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":160,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":27,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":623,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":389,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":624,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":168,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":539},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"e06a4bd2-3e35-11e6-9c27-19863939a4cc","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"tindex":"e06a99f3-3e35-11e6-9c27-bf788e858429","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == null) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274],"tindex":"e06ac104-3e35-11e6-9c27-350879c7b0e2","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof java.lang.Class) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[275,276,277,278,279,280,281,282,167,283,284,285,286,287,288,289,290],"tindex":"e06ac105-3e35-11e6-9c27-33d9992458e9","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[291,33,292],"tindex":"e06ae816-3e35-11e6-9c27-8939121f4ffc","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl","sourcecode":"type.equals(from)"},"failures":[],"tindex":"e06ae817-3e35-11e6-9c27-81a444e5ec34","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT.equals(typeOfT)) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT","type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[293,294,295],"tindex":"e06ae818-3e35-11e6-9c27-1bac87075844","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (!(from instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:467","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[296,297,298,299],"tindex":"e06b0f29-3e35-11e6-9c27-f1114db28739","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"targetSize","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e06b0f2a-3e35-11e6-9c27-3fa511924efd","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"e06b363b-3e35-11e6-9c27-c17f2c630fd6","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if ((o.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:906","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"e06b363c-3e35-11e6-9c27-57c2555d7fe4","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (counter == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"counter","com.google.gson.stream.JsonReader.PEEKED_LONG":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"e06b363d-3e35-11e6-9c27-49d667770109","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,143,317,318,319,320,290,321,322],"tindex":"e06b845e-3e35-11e6-9c27-c1131ac347a6","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.util.Iterator) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[323,324,325],"tindex":"e06b845f-3e35-11e6-9c27-1b523fa2bea6","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[],"tindex":"e06bab70-3e35-11e6-9c27-e744ca325e2a","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[326,327,328,0,1,300,301,302,329,330,260,261,331,332,333,2,3,4,5,6,7,8,334,335,9,336,337,338,339,340,10,11,12,13,14,15,341,16,342,17,343,275,18,276,19,344,20,277,345,21,22,303,346,23,347,348,278,24,25,26,27,28,349,29,30,350,351,31,352,353,291,354,355,32,33,356,34,357,35,36,37,262,38,358,39,40,41,359,360,361,362,263,42,43,363,44,45,264,364,46,265,365,47,366,48,304,305,306,307,308,367,49,368,50,51,52,369,370,371,53,372,373,374,54,375,55,376,56,377,378,379,380,381,382,325,383,384,57,385,58,386,59,60,61,387,266,62,63,388,389,390,64,391,65,66,67,68,392,393,394,69,395,396,397,70,398,399,400,401,402,403,71,404,405,72,406,407,73,408,309,409,310,410,74,411,412,75,413,76,77,78,414,79,80,415,416,417,418,419,81,420,421,422,423,424,425,82,311,312,313,426,279,427,314,315,83,84,428,429,316,430,431,85,432,86,433,434,435,436,87,88,437,89,90,91,438,439,440,441,442,443,92,444,445,446,447,93,94,448,449,95,450,451,452,96,453,97,98,454,99,455,456,457,458,459,460,100,461,462,463,464,101,102,465,103,104,105,106,466,467,280,468,469,470,107,108,471,109,110,472,111,473,474,112,113,475,476,477,478,479,480,481,114,115,482,483,116,484,485,117,486,487,281,488,489,118,490,491,119,120,121,492,122,123,493,124,125,494,126,495,496,127,267,128,497,129,498,499,130,500,501,502,131,503,132,133,134,504,135,505,506,136,507,137,138,139,140,508,141,142,509,143,144,145,146,147,148,149,150,151,510,152,153,154,268,511,269,270,271,155,156,512,157,513,158,514,159,160,161,162,163,164,165,166,168,169,170,171,172,515,516,517,518,519,520,521,522,173,174,175,176,177,523,178,179,180,181,182,524,525,317,526,527,183,528,184,529,185,186,530,187,531,532,188,189,533,534,535,272,536,537,538,539,190,191,540,541,542,192,193,194,289,195,273,196,543,197,544,198,545,199,546,547,548,549,318,319,550,200,201,551,202,203,204,552,205,553,554,206,207,208,320,290,321,322,555,209,210,556,211,557,213,558,214,559,215,216,218,560,219,220,221,561,222,562,563,564,565,566,223,567,224,568,569,225,570,226,571,227,572,228,573,230,231,232,233,574,234,575,576,235,577,236,578,237,579,580,238,239,581,582,241,583,584,242,243,585,586,244,245,587,588,246,589,590,591,592,593,292,594,595,596,247,597,248,598,249,599,250,251,600,252,601,253,254,255,602,256,257,603,274,604,605,606,607,608,609,610,611,612,613,614,258,615,616,617,618],"tindex":"e06bd281-3e35-11e6-9c27-efe2c805aaa9","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"e06bd282-3e35-11e6-9c27-05e478556ae9","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"e06bf993-3e35-11e6-9c27-097bf4cd7482","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[323,324,325],"tindex":"e06bf994-3e35-11e6-9c27-112317634239","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[583,584,242,243,586,244,587,588,615,616,617],"tindex":"e06c20a5-3e35-11e6-9c27-79b7bec69391","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[619,620,309,621,290,622,623],"tindex":"e06c20a6-3e35-11e6-9c27-1324f9f47d31","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"e06c20a7-3e35-11e6-9c27-1fc44d4a86b6","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[624,625,626],"tindex":"e06c20a8-3e35-11e6-9c27-075a04f7db3e","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[627,304,305,307,308,369,380,381,382,325,383,310,622,623],"tindex":"e06c20a9-3e35-11e6-9c27-7714cf252e9d","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"e06c47ba-3e35-11e6-9c27-eb7bfebd5459","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[628],"tindex":"e06c47bb-3e35-11e6-9c27-d78b2bb29090","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"e06c6ecc-3e35-11e6-9c27-6fd332eb67ef","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src != null) && ((src.peek()) != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","obj":"src","reader":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e06c6ecd-3e35-11e6-9c27-8951341c2fda","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:549","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.CLOSED)"},"failures":[],"tindex":"e06c95de-3e35-11e6-9c27-e7cb4fe1709b","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.CLOSED":"minimum","peekStack":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[],"tindex":"e06c95df-3e35-11e6-9c27-ab039621b415","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"e06c95e0-3e35-11e6-9c27-4dd3df0fdda2","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230662855/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":31,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
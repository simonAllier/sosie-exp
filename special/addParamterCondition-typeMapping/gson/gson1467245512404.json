{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":57,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":354,"com.google.gson.functional.StringTest.testStringValueDeserialization":352,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":142,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":479,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":103,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":204,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":523,"com.google.gson.MixedStreamTest.testWriteLenient":22,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":370,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":489,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":299,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":75,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":542,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":487,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":559,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":151,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":331,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":418,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":338,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":112,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":605,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":249,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":425,"com.google.gson.functional.ObjectTest.testSingletonLists":485,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":292,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":421,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":96,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":355,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":595,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":198,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":316,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":309,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":502,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":1,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":154,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":67,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":368,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":239,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":143,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":567,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":626,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":461,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":8,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":88,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":580,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":460,"com.google.gson.functional.EnumTest.testEnumCaseMapping":330,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":29,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":353,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":87,"com.google.gson.functional.JsonTreeTest.testToJsonTree":351,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":572,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":238,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":28,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":617,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":268,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":392,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":285,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":428,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":623,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":552,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":525,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":365,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":498,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":164,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":104,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":503,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":624,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":578,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":85,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":511,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":619,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":169,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":407,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":168,"com.google.gson.JsonParserTest.testParseString":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":308,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":14,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":148,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":127,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":175,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":388,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":514,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":291,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":140,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":371,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":453,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":282,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":415,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":184,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":475,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":149,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":377,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":141,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":382,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":510,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":65,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":493,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":587,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":108,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":211,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":471,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":615,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":422,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":229,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":247,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":35,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":186,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":313,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":297,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":535,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":284,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":84,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":528,"com.google.gson.functional.CollectionTest.testSetDeserialization":558,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":339,"com.google.gson.functional.EnumTest.testEnumSet":321,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":497,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":584,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":132,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":248,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":185,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":600,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":272,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":448,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":504,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":246,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":145,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":34,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":156,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":320,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":575,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":157,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":101,"com.google.gson.functional.MapTest.testHashMapDeserialization":442,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":296,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":55,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":212,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":319,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":411,"com.google.gson.functional.MapTest.testSortedMap":464,"com.google.gson.functional.MapTest.testMapSerialization":459,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":58,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":138,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":531,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":395,"com.google.gson.functional.MapTest.testSerializeMaps":445,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":540,"com.google.gson.functional.MapTest.testComplexKeysSerialization":472,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":583,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":476,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":402,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":328,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":527,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":437,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":224,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":326,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":570,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":606,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":206,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":513,"com.google.gson.functional.MapTest.testStringKeyDeserialization":474,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":602,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":399,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":190,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":171,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":107,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":478,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":102,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":342,"com.google.gson.functional.PrettyPrintingTest.testMap":568,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":545,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":265,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":317,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":0,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":401,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":358,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":279,"com.google.gson.functional.MapTest.testMapSerializationEmpty":473,"com.google.gson.functional.CollectionTest.testQueueSerialization":549,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":607,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":133,"com.google.gson.functional.MapTest.testMapOfMapSerialization":458,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":124,"com.google.gson.JavaSerializationTest.testMapIsSerializable":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":287,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":555,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":46,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":135,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":199,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":356,"com.google.gson.functional.FieldNamingTest.testIdentity":541,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":187,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":37,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":515,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":77,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":210,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":350,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":484,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":90,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":9,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":81,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":357,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":130,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":301,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":274,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":281,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":439,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":167,"com.google.gson.functional.MapTest.testMapSubclassSerialization":444,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":256,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":333,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":586,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":20,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":122,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":344,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":264,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":372,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":315,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":245,"com.google.gson.functional.EnumTest.testEnumSubclass":324,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":144,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":2,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":500,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":89,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":80,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":599,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":150,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":189,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":219,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":92,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":483,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":11,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":128,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":482,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":227,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":391,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":592,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":627,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":134,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":496,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":126,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":304,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":486,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":441,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":390,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":375,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":384,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":242,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":526,"com.google.gson.CommentsTest.testParseComments":588,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":603,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":194,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":431,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":488,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":50,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":147,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":397,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":530,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":360,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":463,"com.google.gson.MixedStreamTest.testReadInvalidState":19,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":335,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":254,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":306,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":532,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":100,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":612,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":403,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":601,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":47,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":117,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":44,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":289,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":387,"com.google.gson.functional.MapTest.testMapDeserialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":283,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":573,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":440,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":424,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":236,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":450,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":430,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":426,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":225,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":618,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":325,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":263,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":501,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":516,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":214,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":345,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":269,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":253,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":223,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":480,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":462,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":569,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":310,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":86,"com.google.gson.functional.PrimitiveTest.testShortSerialization":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":196,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":433,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":153,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":582,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":123,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":152,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":273,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":537,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":323,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":625,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":544,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":332,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":622,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":446,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":116,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":173,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":565,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":298,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":438,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":26,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":180,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":174,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":597,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":188,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":235,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":517,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":259,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":159,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":417,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":129,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":191,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":521,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":492,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":329,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":216,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":270,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":553,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":340,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":192,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":290,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":432,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":276,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":414,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":294,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":232,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":546,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":93,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":160,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":131,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":177,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":53,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":322,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":429,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":63,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":533,"com.google.gson.functional.MapTest.testGeneralMapField":468,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":490,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":381,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":179,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":82,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":341,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":300,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":466,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":260,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":406,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":155,"com.google.gson.MixedStreamTest.testReadMixedStreamed":25,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":620,"com.google.gson.JsonObjectTest.testDeepCopy":608,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":271,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":454,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":10,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":413,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":560,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":420,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":136,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":581,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":3,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":288,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":455,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":203,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":443,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":178,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":195,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":410,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":70,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":286,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":616,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":376,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":258,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":554,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":436,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":201,"com.google.gson.functional.ObjectTest.testNestedDeserialization":522,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":240,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":508,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":60,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":226,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":579,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":176,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":49,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":205,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":359,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":456,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":244,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":163,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":215,"com.google.gson.JavaSerializationTest.testListIsSerializable":5,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":79,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":374,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":563,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":218,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":202,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":447,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":91,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":467,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":393,"com.google.gson.functional.MapTest.testInterfaceTypeMap":465,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":343,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":231,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":94,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":327,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":596,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":17,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":222,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":261,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":577,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":110,"com.google.gson.MixedStreamTest.testWriteClosed":24,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":62,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":551,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":312,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":491,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":250,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":230,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":52,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":48,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":307,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":237,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":494,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":550,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":71,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":598,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":139,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":73,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":220,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":295,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":39,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":42,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":181,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":115,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":266,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":378,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":529,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":51,"com.google.gson.functional.CollectionTest.testQueueDeserialization":566,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":613,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":121,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":137,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":12,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":364,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":56,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":305,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":452,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":278,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":408,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":520,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":543,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":18,"com.google.gson.functional.MapTest.testRawMapSerialization":470,"com.google.gson.JsonParserTest.testParseReader":610,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":293,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":213,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":506,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":536,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":435,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":589,"com.google.gson.functional.PrimitiveTest.testByteSerialization":162,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":314,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":383,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":591,"com.google.gson.ObjectTypeAdapterTest.testSerialize":594,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":404,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":105,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":76,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":394,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":538,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":6,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":251,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":361,"com.google.gson.functional.MapTest.testMapWithQuotes":457,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":113,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":183,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":412,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":200,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":347,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":170,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":337,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":427,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":241,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":518,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":574,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":275,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":400,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":267,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":69,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":277,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":158,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":557,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":386,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":303,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":379,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":217,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":40,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":614,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":27,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":334,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":318,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":95,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":255,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":15,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":197,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":505,"com.google.gson.functional.ObjectTest.testNestedSerialization":507,"com.google.gson.JsonObjectTest.testAddingStringProperties":609,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":54,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":109,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":367,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":405,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":409,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":469,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":534,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":416,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":13,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":23,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":36,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":499,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":172,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":233,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":280,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":30,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":262,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":509,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":68,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":366,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":389,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":83,"com.google.gson.functional.CollectionTest.testSetSerialization":562,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":193,"com.google.gson.functional.StringTest.testStringValueSerialization":369,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":571,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":74,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":43,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":207,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":547,"com.google.gson.MixedStreamTest.testWriteInvalidState":21,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":380,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":114,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":120,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":398,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":64,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":539,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":621,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":524,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":604,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":41,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":576,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":252,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":449,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":31,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":385},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"3f2c6662-3e57-11e6-9a5d-594fe09447e1","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595],"tindex":"3f2d02a3-3e57-11e6-9a5d-2fb4f159eada","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"3f2d29b4-3e57-11e6-9a5d-01341a67d60c","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"3f2d50c5-3e57-11e6-9a5d-61be86ed1e9c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:536","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_DOCUMENT)"},"failures":[],"tindex":"3f2d50c6-3e57-11e6-9a5d-e510532c7e56","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == topOfStack) {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"topOfStack","com.google.gson.stream.JsonScope.EMPTY_DOCUMENT":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"3f2d77d7-3e57-11e6-9a5d-7139b41558c1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"3f2d9ee8-3e57-11e6-9a5d-f7dfd0819bdf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[0,1,2,6,7,8,9,10,31,32,33,34,35,39,596,597,598,75,76,77,78,79,81,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,201,204,205,206,207,208,209,210,211,243,249,253,255,289,295,298,306,310,341,342,343,416,417,427,428,433,440,441,479,523,524,526,530,531,532,533,534,535,536,565,575,576,577,578,579,580,582,599],"tindex":"3f2d9ee9-3e57-11e6-9a5d-cfd54ec3fd1c","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"3f2ded0a-3e57-11e6-9a5d-7f3d22859285","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"typeAdapter","this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"3f2ded0b-3e57-11e6-9a5d-01b98114ae5a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"3f2e141c-3e57-11e6-9a5d-b30b06ee80de","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"3f2e3b2d-3e57-11e6-9a5d-194a38e73032","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"3f2e3b2e-3e57-11e6-9a5d-3fae31c0be2e","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"3f2e623f-3e57-11e6-9a5d-8368ec7db4ed","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[600,601,602],"tindex":"3f2e6240-3e57-11e6-9a5d-f7f5a3e895bf","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[603,604,605,606,607,608,609,39,51,52,57,75,76,78,79,186,226,227,228,232,233,238,239,255,347,532,533,534,610,611],"tindex":"3f2ed771-3e57-11e6-9a5d-5fe066a5a2cc","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl","sourcecode":"upperBound != (originalUpperBound[0])"},"failures":[],"tindex":"3f2ed772-3e57-11e6-9a5d-a73fdf7e5553","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value != (value[0])) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"value","upperBound":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:746","type":"CtBinaryOperatorImpl","sourcecode":"((last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT))) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT))"},"failures":[],"tindex":"3f2efe83-3e57-11e6-9a5d-09f1fd4cd9ad","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (((timeStyle == timeStyle) || (last == dateStyle)) || (last == timeStyle)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"dateStyle","last":"timeStyle","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT":"timeStyle","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"3f2efe84-3e57-11e6-9a5d-a5c5437134a4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"3f2f2595-3e57-11e6-9a5d-412237f0a9f4","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[7,18,20,21,24,25,26,32,33,34,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,82,83,84,85,159,184,188,189,191,193,204,206,207,209,210,211,215,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,244,245,246,247,248,249,250,251,252,253,254,256,257,262,263,270,273,280,288,302,307,315,316,320,327,328,332,333,334,335,337,338,339,344,347,348,349,350,351,370,371,372,373,374,396,397,398,404,407,408,410,411,413,414,415,416,417,419,420,421,422,423,424,425,429,430,431,432,434,437,438,452,461,465,467,468,472,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,497,498,499,500,502,504,505,506,507,509,510,511,512,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,531,532,533,534,536,541,542,544,553,558,559,562,569,570,574,587,592,593,594],"tindex":"3f2f4ca6-3e57-11e6-9a5d-2df0ebecd8b3","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"3f2f4ca7-3e57-11e6-9a5d-9910703058ed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"3f2f73b8-3e57-11e6-9a5d-cdf97775521f","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"3f2fc1d9-3e57-11e6-9a5d-29a4a50f4a01","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"3f2fe8ea-3e57-11e6-9a5d-a1c7e58d3675","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[612,613,614,615,616],"tindex":"3f2fe8eb-3e57-11e6-9a5d-59025cbbf84b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"3f300ffc-3e57-11e6-9a5d-23b3db083af2","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:208","type":"CtBinaryOperatorImpl","sourcecode":"(peek()) == (com.google.gson.stream.JsonToken.NAME)"},"failures":[],"tindex":"3f300ffd-3e57-11e6-9a5d-5753aea56824","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n    if ((fieldValue != null) || (!isPrimitive)) {\n        field.set(value, fieldValue);\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader","com.google.gson.stream.JsonToken.NAME":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[603,604,605,617,606,607,608,609,39,51,52,57,618,75,76,78,79,186,187,226,227,228,232,233,238,239,255,619,333,334,347,350,373,415,443,446,447,451,455,460,471,474,532,533,534,610,611,589,620,621,622,623,624,625,626,627],"tindex":"3f305e1e-3e57-11e6-9a5d-d305ca882313","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467244955070/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":29,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
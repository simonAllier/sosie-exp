{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":150,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":311,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":60,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":110,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":187,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":67,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":122,"com.google.gson.functional.PrimitiveTest.testShortSerialization":247,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":39,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":15,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":21,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":190,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":179,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":355,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":123,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":125,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":133,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":195,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":146,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":198,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":86,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":251,"com.google.gson.functional.ObjectTest.testSingletonLists":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":175,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":199,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":68,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":4,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":293,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":1,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":254,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":23,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":148,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":218,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":5,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":152,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":354,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":279,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":75,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":58,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":144,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":147,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":307,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":131,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":320,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":348,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":327,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":345,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":173,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":332,"com.google.gson.functional.EnumTest.testEnumCaseMapping":145,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":351,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":25,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":163,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":338,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":334,"com.google.gson.functional.JsonTreeTest.testToJsonTree":370,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":63,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":365,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":367,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":159,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":234,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":252,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":40,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":329,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":140,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":330,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":130,"com.google.gson.functional.MapTest.testGeneralMapField":115,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":44,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":298,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":53,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":272,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":180,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":153,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":222,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":246,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":314,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":343,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":241,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":210,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":35,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":274,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":228,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":134,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":342,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":347,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":13,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":189,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":315,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":171,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":238,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":100,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":232,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":49,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":216,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":253,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":174,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":78,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":9,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":170,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":310,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":268,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":339,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":286,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":76,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":214,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":120,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":362,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":36,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":239,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":265,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":45,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":215,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":28,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":30,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":149,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":224,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":90,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":245,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":306,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":287,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":93,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":358,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":136,"com.google.gson.functional.ObjectTest.testNullSerialization":207,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":178,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":114,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":221,"com.google.gson.functional.MapTest.testInterfaceTypeMap":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":169,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":273,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":323,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":289,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":87,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":81,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":143,"com.google.gson.functional.EnumTest.testEnumSet":139,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":206,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":326,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":94,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":154,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":34,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":104,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":211,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":92,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":344,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":20,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":32,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":129,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":296,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":203,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":242,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":95,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":288,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":361,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":31,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":219,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":264,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":260,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":303,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":186,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":204,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":291,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":128,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":10,"com.google.gson.functional.MapTest.testMapSerialization":109,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":262,"com.google.gson.functional.MapTest.testSerializeMaps":103,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":193,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":12,"com.google.gson.functional.MapTest.testComplexKeysSerialization":118,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":176,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":352,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":56,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":255,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":300,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":226,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":336,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":368,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":42,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":301,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":360,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":229,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":294,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":350,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":261,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":11,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":184,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":16,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":278,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":316,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":124,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":250,"com.google.gson.functional.MapTest.testRawMapSerialization":117,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":121,"com.google.gson.functional.PrettyPrintingTest.testMap":59,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":322,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":126,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":212,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":304,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":156,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":22,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":72,"com.google.gson.functional.MapTest.testMapSerializationEmpty":119,"com.google.gson.functional.CollectionTest.testQueueSerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":166,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":335,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":371,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":46,"com.google.gson.functional.PrimitiveTest.testByteSerialization":244,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":292,"com.google.gson.ObjectTypeAdapterTest.testSerialize":3,"com.google.gson.functional.MapTest.testMapOfMapSerialization":108,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":318,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":230,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":312,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":14,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":356,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":235,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":259,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":284,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":69,"com.google.gson.functional.FieldNamingTest.testIdentity":194,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":52,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":191,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":96,"com.google.gson.functional.MapTest.testMapWithQuotes":107,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":157,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":18,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":200,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":369,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":275,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":285,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":138,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":346,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":155,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":271,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":233,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":85,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":188,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":258,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":88,"com.google.gson.functional.MapTest.testMapSubclassSerialization":102,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":249,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":162,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":196,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":237,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":55,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":82,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":181,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":91,"com.google.gson.functional.EnumTest.testEnumSubclass":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":158,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":236,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":24,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":220,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":270,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":164,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":357,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":295,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":277,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":43,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":182,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":308,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":269,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":151,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":197,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":349,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":283,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":340,"com.google.gson.functional.ObjectTest.testNestedSerialization":213,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":41,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":225,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":313,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":17,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":77,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":231,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":116,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":183,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":57,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":51,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":27,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":47,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":208,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":299,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":281,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":366,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":266,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":26,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":71,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":111,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":7,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":83,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":73,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":185,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":248,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":50,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":2,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":79,"com.google.gson.functional.CollectionTest.testSetSerialization":135,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":62,"com.google.gson.functional.StringTest.testStringValueSerialization":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":280,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":317,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":256,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":223,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":263,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":227,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":54,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":172,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":243,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":168,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":192,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":64,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":297,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":101,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":105,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":290,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":331,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":328,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":302,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":0,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":33,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":177,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":209,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":217,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":305,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":319,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":325,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":160,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":48},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[0,1],"tindex":"1d767e82-3f05-11e6-af21-d39bdfeeffe0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d771ac3-3f05-11e6-af21-b1d1be3f086c","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[2,3,4],"tindex":"1d771ac4-3f05-11e6-af21-03b1a4c11e18","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[5,6,7,8,9,10,11,12],"tindex":"1d771ac5-3f05-11e6-af21-7ff32689004e","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[13],"tindex":"1d7741d6-3f05-11e6-af21-b16434248a81","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d7741d7-3f05-11e6-af21-0b004c7f6691","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[14],"tindex":"1d7768e8-3f05-11e6-af21-4fb6c236eedb","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (!(cls.isInterface())) {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d7768e9-3f05-11e6-af21-c70afd2b94a9","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value.toString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:683","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d7768ea-3f05-11e6-af21-476bfc2676b1","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset == offset) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"offset","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"1d778ffb-3f05-11e6-af21-2f3d080032fe","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        return true;\n    } \n    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n            return true;\n        } \n    }\n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d778ffc-3f05-11e6-af21-65b0d3169eae","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[15,16,17,18,19,20],"tindex":"1d77b70d-3f05-11e6-af21-693c5c978d5d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d77de1e-3f05-11e6-af21-9bc9759970b4","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if ((other != null) && ((other.peek()) != other)) {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"other","obj":"other","reader":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d78052f-3f05-11e6-af21-392d7d91242f","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"toResolve","java.util.Date.class":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[21],"tindex":"1d782c40-3f05-11e6-af21-2b734b072d64","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,5,8,9,12,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,15,16,148,18,149,150,151,152,153,154,155,156,157,158,159,160,161,21,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,19,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347],"tindex":"1d785351-3f05-11e6-af21-2ba4f3a87b8f","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d787a62-3f05-11e6-af21-9bf5bbea961e","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d787a63-3f05-11e6-af21-0f7eb4e45b6c","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d787a64-3f05-11e6-af21-9320875cdf81","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d78a175-3f05-11e6-af21-b95275e245f5","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            if (value == 0) {\n                {\n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d78c886-3f05-11e6-af21-5532310b05a2","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d78c887-3f05-11e6-af21-755ab5e32b87","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"1d78c888-3f05-11e6-af21-134de26d91d7","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d78c889-3f05-11e6-af21-e9a9253b70bf","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d78c88a-3f05-11e6-af21-8988379e1be8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d78ef9b-3f05-11e6-af21-3b681acb8edd","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d78ef9c-3f05-11e6-af21-11b529688fe9","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d78ef9d-3f05-11e6-af21-47f24ce3cbe6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:596","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d78ef9e-3f05-11e6-af21-a595ee63f1b8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize != targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NONE":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl"},"failures":[348,349,350,351,31],"tindex":"1d78ef9f-3f05-11e6-af21-a171b834beaf","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d7916b0-3f05-11e6-af21-979f8bca8e6b","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d7916b1-3f05-11e6-af21-3960b3bb7ed8","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d7916b2-3f05-11e6-af21-5db1e86a19be","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d7916b3-3f05-11e6-af21-f55c4953a45b","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d7916b4-3f05-11e6-af21-091a793d4460","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d793dc5-3f05-11e6-af21-e31ba71b8967","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d793dc6-3f05-11e6-af21-1f27e6c72229","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d793dc7-3f05-11e6-af21-3dba555f23ef","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d793dc8-3f05-11e6-af21-2f0f21c89ce5","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d793dc9-3f05-11e6-af21-656bd83cd49d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d7964da-3f05-11e6-af21-4593bdf5f8b7","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d7964db-3f05-11e6-af21-5100767a8823","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if ((node != null) && (node != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1d798bec-3f05-11e6-af21-83d37f2a3b8c","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d798bed-3f05-11e6-af21-b909dc94a725","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if ((node != null) && (node != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node","right":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[352,1,353,354,75,122,355,356,357,358,359,360,361,362,363,364,365,366,367,368,302,369,370,337,338,339,371],"tindex":"1d79b2fe-3f05-11e6-af21-45c3d021f521","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:917","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1d79b2ff-3f05-11e6-af21-dfe1e3bb9455","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319336166/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":46,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
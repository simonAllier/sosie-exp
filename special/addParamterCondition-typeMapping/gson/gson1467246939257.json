{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":432,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":568,"com.google.gson.functional.StringTest.testStringValueDeserialization":566,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":638,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":47,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":313,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":274,"com.google.gson.stream.JsonWriterTest.testRepeatedName":635,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":9,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":52,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":175,"com.google.gson.MixedStreamTest.testWriteLenient":589,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":534,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":600,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":22,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":148,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":165,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":357,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":322,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":120,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":478,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":411,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":283,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":610,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":18,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":233,"com.google.gson.functional.ObjectTest.testSingletonLists":355,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":529,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":267,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":569,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":94,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":42,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":105,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":543,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":372,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":7,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":325,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":548,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":582,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":397,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":314,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":418,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":203,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":2,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":259,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":63,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":202,"com.google.gson.functional.EnumTest.testEnumCaseMapping":119,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":567,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":594,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":258,"com.google.gson.functional.JsonTreeTest.testToJsonTree":495,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":423,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":256,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":599,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":611,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":506,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":626,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":460,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":523,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":50,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":644,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":158,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":399,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":579,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":368,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":335,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":616,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":275,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":373,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":645,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":61,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":225,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":381,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":608,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":544,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":619,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":229,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":340,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":339,"com.google.gson.JsonParserTest.testParseString":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":542,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":319,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":627,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":298,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":346,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":384,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":456,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":528,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":176,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":195,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":311,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":618,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":520,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":491,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":28,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":217,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":182,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":320,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":312,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":380,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":450,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":95,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":363,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":559,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":16,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":213,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":279,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":482,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":247,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":126,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":72,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":30,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":102,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":219,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":533,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":522,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":224,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":401,"com.google.gson.functional.CollectionTest.testSetDeserialization":164,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":412,"com.google.gson.functional.EnumTest.testEnumSet":110,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":367,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":484,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":303,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":29,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":639,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":510,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":374,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":1,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":125,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":316,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":71,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":327,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":58,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":109,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":328,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":632,"com.google.gson.functional.MapTest.testHashMapDeserialization":184,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":272,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":532,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":434,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":560,"com.google.gson.MixedStreamTest.testReadNulls":642,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":134,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":430,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":108,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":487,"com.google.gson.functional.MapTest.testSortedMap":206,"com.google.gson.functional.MapTest.testMapSerialization":201,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":433,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":604,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":74,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":309,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":463,"com.google.gson.functional.MapTest.testSerializeMaps":187,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":564,"com.google.gson.functional.MapTest.testComplexKeysSerialization":214,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":483,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":218,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":629,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":470,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":117,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":400,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":242,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":146,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":115,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":421,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":612,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":11,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":383,"com.google.gson.functional.MapTest.testStringKeyDeserialization":216,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":641,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":467,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":34,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":342,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":220,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":278,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":56,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":273,"com.google.gson.functional.PrettyPrintingTest.testMap":419,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":151,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":106,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":503,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":6,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":469,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":628,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":572,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":576,"com.google.gson.functional.CollectionTest.testQueueSerialization":155,"com.google.gson.functional.MapTest.testMapSerializationEmpty":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":517,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":613,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":304,"com.google.gson.functional.MapTest.testMapOfMapSerialization":200,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":295,"com.google.gson.JavaSerializationTest.testMapIsSerializable":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":525,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":161,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":306,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":43,"com.google.gson.functional.FieldNamingTest.testIdentity":565,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":570,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":31,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":440,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":385,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":15,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":24,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":354,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":494,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":261,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":3,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":48,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":571,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":301,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":536,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":512,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":519,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":183,"com.google.gson.functional.MapTest.testMapSubclassSerialization":186,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":338,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":132,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":427,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":486,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":293,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":414,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":546,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":587,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":177,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":502,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":104,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":124,"com.google.gson.functional.EnumTest.testEnumSubclass":113,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":315,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":8,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":370,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":260,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":5,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":221,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":321,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":141,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":263,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":396,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":96,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":299,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":395,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":245,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":91,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":459,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":647,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":305,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":366,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":14,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":297,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":539,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":356,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":46,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":458,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":180,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":452,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":54,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":122,"com.google.gson.CommentsTest.testParseComments":596,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":607,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":38,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":237,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":358,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":318,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":465,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":475,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":73,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":205,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":574,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":631,"com.google.gson.MixedStreamTest.testReadInvalidState":586,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":408,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":86,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":337,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":75,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":271,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":471,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":640,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":472,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":597,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":288,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":83,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":332,"com.google.gson.functional.MapTest.testMapDeserialization":193,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":521,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":424,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":45,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":232,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":192,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":254,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":236,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":234,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":147,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":650,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":114,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":501,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":371,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":386,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":136,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":415,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":507,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":19,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":145,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":393,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":204,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":420,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":87,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":40,"com.google.gson.functional.PrimitiveTest.testShortSerialization":336,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":51,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":324,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":64,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":294,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":323,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":511,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":561,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":112,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":646,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":150,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":426,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":643,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":188,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":287,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":21,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":344,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":85,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":243,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":593,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":601,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":351,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":345,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":66,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":32,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":253,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":497,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":547,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":602,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":330,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":82,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":35,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":300,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":391,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":362,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":118,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":138,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":485,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":508,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":413,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":36,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":231,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":527,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":97,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":277,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":514,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":531,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":152,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":250,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":264,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":331,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":302,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":348,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":173,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":111,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":235,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":438,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":76,"com.google.gson.functional.MapTest.testGeneralMapField":210,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":360,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":449,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":350,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":55,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":222,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":535,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":208,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":228,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":498,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":326,"com.google.gson.MixedStreamTest.testReadMixedStreamed":592,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":648,"com.google.gson.JsonObjectTest.testDeepCopy":614,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":196,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":509,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":4,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":166,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":489,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":480,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":307,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":417,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":99,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":526,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":197,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":557,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":185,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":39,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":349,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":445,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":551,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":634,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":290,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":524,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":181,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":441,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":496,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":44,"com.google.gson.functional.ObjectTest.testNestedDeserialization":392,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":378,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":398,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":435,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":244,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":62,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":347,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":474,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":10,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":198,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":573,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":123,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":334,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":137,"com.google.gson.JavaSerializationTest.testListIsSerializable":101,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":26,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":179,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":169,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":140,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":556,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":189,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":209,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":262,"com.google.gson.functional.MapTest.testInterfaceTypeMap":207,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":461,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":57,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":249,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":617,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":265,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":65,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":116,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":144,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":499,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":60,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":281,"com.google.gson.MixedStreamTest.testWriteClosed":591,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":157,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":437,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":252,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":545,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":128,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":248,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":477,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":389,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":541,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":255,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":364,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":156,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":552,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":67,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":310,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":554,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":142,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":162,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":84,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":80,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":352,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":403,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":286,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":504,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":402,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":446,"com.google.gson.functional.CollectionTest.testQueueDeserialization":171,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":476,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":292,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":308,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":578,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":540,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":553,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":194,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":516,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":230,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":390,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":149,"com.google.gson.functional.MapTest.testRawMapSerialization":212,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":585,"com.google.gson.JsonParserTest.testParseReader":605,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":530,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":624,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":135,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":376,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":79,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":240,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":88,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":90,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":103,"com.google.gson.functional.PrimitiveTest.testByteSerialization":333,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":451,"com.google.gson.ObjectTypeAdapterTest.testSerialize":93,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":621,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":226,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":276,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":23,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":462,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":562,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":129,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":575,"com.google.gson.functional.MapTest.testMapWithQuotes":199,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":284,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":577,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":27,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":488,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":172,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":429,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":341,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":410,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":49,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":121,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":388,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":425,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":513,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":365,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":505,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":515,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":550,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":329,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":163,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":454,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":17,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":538,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":139,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":442,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":555,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":428,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":598,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":107,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":20,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":266,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":41,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":623,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":375,"com.google.gson.functional.ObjectTest.testNestedSerialization":377,"com.google.gson.JsonObjectTest.testAddingStringProperties":615,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":174,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":227,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":280,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":581,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":444,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":211,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":77,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":81,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":98,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":590,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":369,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":439,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":343,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":251,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":518,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":282,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":595,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":500,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":549,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":625,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":580,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":457,"com.google.gson.functional.CollectionTest.testSetSerialization":168,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":37,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":422,"com.google.gson.functional.StringTest.testStringValueSerialization":583,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":584,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":12,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":153,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":404,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":448,"com.google.gson.MixedStreamTest.testWriteInvalidState":588,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":285,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":291,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":466,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":558,"com.google.gson.stream.JsonWriterTest.testBooleans":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":620,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":563,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":649,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":53,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":609,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":443,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":59,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":130,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":622,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":191,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":637,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":68,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":453},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"91a2c16b-3e5a-11e6-87c5-bd299aa8a6c4","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"91a30f8c-3e5a-11e6-87c5-3b1bc75111ae","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"91a30f8d-3e5a-11e6-87c5-93075881bfb7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"91a30f8e-3e5a-11e6-87c5-1d8aa048d78d","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"91a3369f-3e5a-11e6-87c5-e7e6da0adeb9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"91a35db0-3e5a-11e6-87c5-41cd36b2754c","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src.peek()) == src) {\n        {\n            if (typeOfSrc instanceof java.lang.reflect.TypeVariable) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"tindex":"91a35db1-3e5a-11e6-87c5-dd6b2b738e67","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type.equals(typeAdapter)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeAdapter","to":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl","sourcecode":"!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[],"tindex":"91a384c2-3e5a-11e6-87c5-0130a5b6f853","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (!(target instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"91a384c3-3e5a-11e6-87c5-a1d610e68a8a","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if ((src.peek()) == src) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"src","com.google.gson.stream.JsonToken.NULL":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"91a3abd4-3e5a-11e6-87c5-5533808a5692","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:902","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"91a3abd5-3e5a-11e6-87c5-7b69a6920988","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_NONE":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0,1,2,3,4,88,89,90,91,92,93,94,95,96,97,98,99,100,101,6,7,8,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,9,10,11,12,13,14,15,16,121,122,17,123,124,125,126,127,18,128,129,130,19,131,20,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,21,171,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,172,44,173,174,175,176,177,178,179,180,181,182,183,45,46,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,47,221,48,222,223,224,225,226,227,228,229,230,231,232,233,234,49,50,235,236,237,238,51,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,52,393,394,395,396,397,398,53,399,54,400,401,402,403,404,405,406,407,408,409,410,411,412,413,55,56,57,414,415,416,58,59,60,61,62,63,417,64,68,69,70,71,72,418,419,420,421,422,423,424,425,73,74,75,76,77,78,79,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,80,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,81,82,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,83,527,528,529,530,531,84,532,533,85,534,535,536,537,538,539,540,86,541,542,543,87,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600],"tindex":"91a3d2e6-3e5a-11e6-87c5-612abea17927","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"91a3f9f7-3e5a-11e6-87c5-a3279bc709e1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"91a44818-3e5a-11e6-87c5-7d6cace206a7","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"91a44819-3e5a-11e6-87c5-0549f4959fec","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"91a4481a-3e5a-11e6-87c5-5b0745e025b4","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"91a4481b-3e5a-11e6-87c5-5bde92a3ab39","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"91a46f2c-3e5a-11e6-87c5-4515472d6e87","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((com.google.gson.JsonPrimitive.this) == obj) {\n        return true;\n    } \n    if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n        return false;\n    } \n    com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n    if ((java.lang.Object) == null) {\n        return (other.java.lang.Object) == null;\n    } \n    if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n        return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n    } \n    if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n        double double = getAsNumber().doubleValue();\n        double double = other.getAsNumber().doubleValue();\n        return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n    } \n    return java.lang.Object.equals(other.java.lang.Object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"91a46f2d-3e5a-11e6-87c5-dddb86503449","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src.peek()) == src) {\n        {\n            if (typeOfSrc instanceof java.lang.reflect.TypeVariable) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return toJsonTree(src, typeOfSrc);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"src","com.google.gson.stream.JsonToken.NULL":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[121,124,125,129,130,231,235,236,242],"tindex":"91a46f2e-3e5a-11e6-87c5-0d95e5d398a7","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array != null) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"91a46f2f-3e5a-11e6-87c5-6dcc56052100","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"91a49540-3e5a-11e6-87c5-7d7abe4cf7eb","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isString()) {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"91a49541-3e5a-11e6-87c5-b7e85048858d","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token.equals(token)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"token","to":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"91a4bc52-3e5a-11e6-87c5-257fbf6ed815","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if ((src.peek()) == src) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"91a4bc53-3e5a-11e6-87c5-e59915fe280a","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n    out.value(dateFormatAsString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"91a4bc54-3e5a-11e6-87c5-7d150386e90a","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    return toJsonTree(src, src.getClass());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src","value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[601,602,603,604,88,605,606,95,607,608,609,610,611,612,613,614,615,616,617,105,17,20,22,23,25,26,30,33,34,35,41,175,176,177,178,179,218,47,48,49,51,244,245,246,250,251,256,397,618,73,74,75,76,77,78,79,429,432,438,80,476,477,487,490,491,492,493,494,495,619,620,621,622],"tindex":"91a4bc55-3e5a-11e6-87c5-493cf71b2cc3","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value instanceof com.google.gson.JsonObject) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[],"tindex":"91a4e366-3e5a-11e6-87c5-23b366d414be","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[498,505,506,534,538,87],"tindex":"91a4e367-3e5a-11e6-87c5-7f313ee70b50","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern == null) {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:543","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"91a4e368-3e5a-11e6-87c5-39bc50812122","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == (-1)) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"91a50a79-3e5a-11e6-87c5-9f2c5c9dba41","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:417","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"91a50a7a-3e5a-11e6-87c5-8736df5f258b","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if ((i != i) && (context != i)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i == i) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return char[][i];\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_NONE":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[9,11,15,127,288,295,298,317,349,623,65,66,624,625,626,627,628,589],"tindex":"91a50a7b-3e5a-11e6-87c5-296519ec22f1","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"91a5318c-3e5a-11e6-87c5-fbd7c48fa641","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"91a5318d-3e5a-11e6-87c5-058f8073b9ce","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[88,89,99,100,101,102,108,111,112,113,114,118,12,16,121,123,124,125,128,129,130,148,149,152,153,155,156,158,160,161,162,163,164,167,169,170,21,171,29,31,40,44,173,180,181,183,45,185,188,189,190,191,193,194,196,197,198,201,202,203,204,206,207,208,209,210,211,213,214,215,216,217,218,219,220,47,221,223,225,231,235,236,242,245,248,252,268,325,355,366,380,387,390,403,404,405,406,407,68,72,420,425,427,428,439,445,458,460,472,475,476,477,487,488,489,490,491,81,82,505,535,589,590,596],"tindex":"91a5318e-3e5a-11e6-87c5-2119f482205c","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"91a5318f-3e5a-11e6-87c5-49aeb45f2a27","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[629,601,630,602,88,22,23,25,26,47,244,245,246,250,251,256,397,432,476,477,487,490,491,492,493,494,495],"tindex":"91a53190-3e5a-11e6-87c5-9569eddef28d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[85],"tindex":"91a558a1-3e5a-11e6-87c5-a916f4af5b5b","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == null) {\n        {\n            if (obj instanceof java.lang.Class) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                            throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                        } \n                    } catch (com.google.gson.stream.MalformedJsonException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"91a558a2-3e5a-11e6-87c5-33ded3662baa","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[1,112,172,373,397,398,631,61,63,417,64],"tindex":"91a558a3-3e5a-11e6-87c5-1173fbacc818","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter != typeAdapter) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"typeAdapter","type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[632],"tindex":"91a57fb4-3e5a-11e6-87c5-f91ee50afe4b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key != null) {\n        {\n            return (findByObject(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[95,633,634,635,636,637,638,105,109,127,148,159,165,254,289,292,358,369,374,377,384,386,389,421,425,428,440,441,445,464,481,491,493,550,584],"tindex":"91a57fb5-3e5a-11e6-87c5-cd838fc65979","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"91a57fb6-3e5a-11e6-87c5-eb078ebb018f","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"other","token":"other","com.google.gson.stream.JsonToken.NUMBER":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"91a5a6c7-3e5a-11e6-87c5-db71264f8802","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"91a5a6c8-3e5a-11e6-87c5-0bb925d4ccb4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[262,279,288,295,298,338,589],"tindex":"91a5a6c9-3e5a-11e6-87c5-99c1a1a557cd","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"91a5a6ca-3e5a-11e6-87c5-7f2efd08ac0b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"91a5a6cb-3e5a-11e6-87c5-61d2f869ab51","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if ((key.length()) == 0) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[88,89,90,639,640,641,93,94,99,100,101,102,108,110,111,112,113,114,118,121,122,17,123,124,125,127,18,128,129,130,19,131,20,132,133,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,167,168,169,21,171,27,29,31,38,40,44,180,181,183,45,184,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,47,221,223,225,227,231,235,236,242,245,248,252,325,355,358,366,380,385,387,390,403,404,405,406,407,408,409,410,411,412,68,72,418,419,420,422,424,425,426,427,428,439,445,451,453,458,460,469,472,473,475,476,477,487,488,489,490,491,81,82,505,511,517,530,535,584,589,642,590,596],"tindex":"91a5cddc-3e5a-11e6-87c5-75b0664d2872","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[643,644,645,646,647,88,648,649,605,606,607,609,610,611,612,613,614,615,20,22,23,25,26,30,31,178,185,188,189,193,197,202,213,216,244,245,246,250,251,256,397,650,75,76,77,427,428,429,432,80,476,477,491,494,619],"tindex":"91a5cddd-3e5a-11e6-87c5-9f9d0eabd4c9","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[1,91,92,93,95,104,105,109,116,117,9,10,11,12,13,14,15,16,121,122,123,124,125,126,127,18,128,129,130,19,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,150,159,164,165,168,22,23,25,26,28,32,33,35,37,173,174,175,176,177,178,179,194,203,207,209,210,214,47,221,222,223,224,225,226,229,230,231,232,233,235,236,237,238,239,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,330,354,355,356,357,358,359,360,361,362,363,364,365,367,368,369,370,372,374,375,376,377,379,380,381,382,384,385,386,387,388,389,390,391,392,52,393,394,395,396,397,53,399,54,400,401,402,403,404,405,406,407,408,410,411,412,414,69,70,71,420,421,425,74,75,76,77,79,426,427,428,429,430,432,433,435,436,437,438,440,441,442,443,445,464,465,466,472,473,474,475,476,477,479,480,481,482,487,489,490,491,492,493,494,495,81,82,500,501,508,511,518,526,537,541,547,548,549,550,551,552,553,554,558,559,561,562,563,564,565,584,585,587,588,591,592,593],"tindex":"91a5f4ee-3e5a-11e6-87c5-ab0f75993461","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"91a5f4ef-3e5a-11e6-87c5-cda8d6b3200a","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value instanceof com.google.gson.JsonObject) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:614","type":"CtBinaryOperatorImpl","sourcecode":"(c == 't') || (c == 'T')"},"failures":[],"tindex":"91a61c00-3e5a-11e6-87c5-9d96cc6aeb5a","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote == 't') || (c == 'T')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"91a61c01-3e5a-11e6-87c5-778b07ee5dcf","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            if (type instanceof java.lang.Class<?>) {\n                {\n                    return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl","sourcecode":"!charsLoaded"},"failures":[],"tindex":"91a61c02-3e5a-11e6-87c5-d31916c49ec5","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (!htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"htmlSafe"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:380","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"91a64313-3e5a-11e6-87c5-9b16a820d925","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset == count) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:338","type":"CtBinaryOperatorImpl","sourcecode":"(context != nonempty) && (context != empty)"},"failures":[],"tindex":"91a64314-3e5a-11e6-87c5-bd47332ec0d9","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if ((i != i) && (context != i)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i == i) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return char[][i];\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"i","nonempty":"i","empty":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"91a64315-3e5a-11e6-87c5-c12930c849a6","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == null) {\n        {\n            if (obj instanceof java.lang.Class) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                            throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                        } \n                    } catch (com.google.gson.stream.MalformedJsonException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"91a64316-3e5a-11e6-87c5-5bf82d8a805b","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246016582/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":60,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":458,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":91,"com.google.gson.functional.StringTest.testStringValueDeserialization":89,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":183,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":410,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":371,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":222,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":353,"com.google.gson.MixedStreamTest.testWriteLenient":18,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":230,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":282,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":597,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":301,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":9,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":198,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":317,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":419,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":217,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":309,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":131,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":380,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":137,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":562,"com.google.gson.functional.ObjectTest.testSingletonLists":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":275,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":312,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":92,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":364,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":582,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":498,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":518,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":292,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":332,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":24,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":422,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":120,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":105,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":107,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":81,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":411,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":166,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":356,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":594,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":48,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":165,"com.google.gson.functional.EnumTest.testEnumCaseMapping":216,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":29,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":90,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":355,"com.google.gson.functional.JsonTreeTest.testToJsonTree":532,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":86,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":514,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":586,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":252,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":268,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":366,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":565,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":192,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":524,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":102,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":328,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":432,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":372,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":333,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":46,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":482,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":341,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":294,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":437,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":550,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":291,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":416,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":395,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":443,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":63,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":274,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":393,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":158,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":231,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":408,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":265,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":580,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":484,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":179,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":237,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":417,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":409,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":57,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":340,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":34,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":36,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":323,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":175,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":229,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":376,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":313,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":505,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":135,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":486,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":181,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":515,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":280,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":267,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":481,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":527,"com.google.gson.functional.CollectionTest.testSetDeserialization":197,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":132,"com.google.gson.functional.EnumTest.testEnumSet":207,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":219,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":327,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":400,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":136,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":485,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":256,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":334,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":3,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":593,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":413,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":41,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":424,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":43,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":522,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":425,"com.google.gson.functional.MapTest.testHashMapDeserialization":148,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":369,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":279,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":37,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":460,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":456,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":533,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":521,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":576,"com.google.gson.functional.MapTest.testSortedMap":169,"com.google.gson.functional.MapTest.testMapSerialization":164,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":459,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":406,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":70,"com.google.gson.functional.MapTest.testSerializeMaps":151,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":299,"com.google.gson.functional.MapTest.testComplexKeysSerialization":176,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":218,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":180,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":77,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":214,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":526,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":574,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":545,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":212,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":84,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":224,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":343,"com.google.gson.functional.MapTest.testStringKeyDeserialization":178,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":490,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":439,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":182,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":375,"com.google.gson.functional.PrettyPrintingTest.testMap":82,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":370,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":555,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":249,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":462,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":519,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":23,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":76,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":95,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":99,"com.google.gson.functional.MapTest.testMapSerializationEmpty":177,"com.google.gson.functional.CollectionTest.testQueueSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":262,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":401,"com.google.gson.functional.MapTest.testMapOfMapSerialization":163,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":392,"com.google.gson.JavaSerializationTest.testMapIsSerializable":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":270,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":194,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":403,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":455,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":499,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":93,"com.google.gson.functional.FieldNamingTest.testIdentity":300,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":487,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":472,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":345,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":228,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":303,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":314,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":531,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":358,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":595,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":94,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":478,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":239,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":284,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":264,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":454,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":145,"com.google.gson.functional.MapTest.testMapSubclassSerialization":150,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":435,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":141,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":307,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":221,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":16,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":118,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":390,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":557,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":450,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":517,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":2,"com.google.gson.functional.EnumTest.testEnumSubclass":210,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":412,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":25,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":330,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":357,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":477,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":418,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":489,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":540,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":360,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":241,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":32,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":396,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":240,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":503,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":66,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":587,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":326,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":402,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":227,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":287,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":316,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":147,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":65,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":235,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":59,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":525,"com.google.gson.CommentsTest.testParseComments":583,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":318,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":494,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":568,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":72,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":415,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":468,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":111,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":97,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":168,"com.google.gson.MixedStreamTest.testReadInvalidState":15,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":128,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":289,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":434,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":113,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":368,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":12,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":78,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":465,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":584,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":385,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":272,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":429,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":62,"com.google.gson.functional.MapTest.testMapDeserialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":266,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":87,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":146,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":561,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":155,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":512,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":567,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":563,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":546,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":211,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":247,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":331,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":346,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":535,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":558,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":253,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":138,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":238,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":544,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":83,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":167,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":293,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":354,"com.google.gson.functional.PrimitiveTest.testShortSerialization":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":496,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":570,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":421,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":50,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":391,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":13,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":367,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":296,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":209,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":185,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":306,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":7,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":384,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":204,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":441,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":281,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":575,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":22,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":448,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":442,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":226,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":347,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":488,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":511,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":243,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":427,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":80,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":491,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":351,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":322,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":215,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":220,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":537,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":254,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":553,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":492,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":273,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":569,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":33,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":259,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":579,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":571,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":277,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":187,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":508,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":361,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":428,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":399,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":445,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":51,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":208,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":566,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":464,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":114,"com.google.gson.functional.MapTest.testGeneralMapField":172,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":320,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":56,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":447,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":71,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":479,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":283,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":244,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":365,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":549,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":423,"com.google.gson.MixedStreamTest.testReadMixedStreamed":21,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":255,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":386,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":199,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":578,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":596,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":311,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":404,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":49,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":26,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":271,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":160,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":144,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":149,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":446,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":495,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":110,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":123,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":269,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":236,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":473,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":242,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":573,"com.google.gson.functional.ObjectTest.testNestedDeserialization":352,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":501,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":108,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":338,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":461,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":502,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":47,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":444,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":467,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":96,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":161,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":223,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":1,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":431,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":536,"com.google.gson.JavaSerializationTest.testListIsSerializable":28,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":234,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":305,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":202,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":539,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":143,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":152,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":171,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":359,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":68,"com.google.gson.functional.MapTest.testInterfaceTypeMap":170,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":556,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":507,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":362,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":213,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":543,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":245,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":45,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":378,"com.google.gson.MixedStreamTest.testWriteClosed":20,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":191,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":295,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":321,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":510,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":4,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":506,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":470,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":349,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":290,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":324,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":513,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":10,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":124,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":407,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":126,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":541,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":278,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":474,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":449,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":451,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":383,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":250,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":53,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":528,"com.google.gson.functional.CollectionTest.testQueueDeserialization":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":389,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":405,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":101,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":457,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":288,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":157,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":261,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":350,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":551,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":184,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":14,"com.google.gson.functional.MapTest.testRawMapSerialization":174,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":276,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":336,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":534,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":117,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":572,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":589,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":58,"com.google.gson.functional.PrimitiveTest.testByteSerialization":430,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":516,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":591,"com.google.gson.ObjectTypeAdapterTest.testSerialize":581,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":547,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":373,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":302,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":69,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":297,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":5,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":98,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":592,"com.google.gson.functional.MapTest.testMapWithQuotes":162,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":381,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":483,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":577,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":500,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":206,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":438,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":130,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":564,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":0,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":348,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":258,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":414,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":75,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":251,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":260,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":304,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":426,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":196,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":61,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":54,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":286,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":538,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":475,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":127,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":308,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":585,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":520,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":140,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":497,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":335,"com.google.gson.functional.ObjectTest.testNestedSerialization":337,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":52,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":104,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":377,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":548,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":109,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":173,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":115,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":79,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":19,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":31,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":329,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":471,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":440,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":509,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":263,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":30,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":246,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":339,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":121,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":103,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":64,"com.google.gson.functional.CollectionTest.testSetSerialization":201,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":480,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":85,"com.google.gson.functional.StringTest.testStringValueSerialization":106,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":493,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":552,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":188,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":225,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":452,"com.google.gson.MixedStreamTest.testWriteInvalidState":17,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":55,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":382,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":73,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":388,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":35,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":298,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":523,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":598,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":476,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":44,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":6,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":154,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":38,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":60},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ddf26784-3f16-11e6-b68e-0391f2665427","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"tindex":"ddf2dcb5-3f16-11e6-b68e-1d5f4d1e5a74","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf303c6-3f16-11e6-b68e-a9d55f5d2187","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[12],"tindex":"ddf303c7-3f16-11e6-b68e-ed71de68a05d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced == null) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ddf32ad8-3f16-11e6-b68e-a54e4a68720a","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"ddf32ad9-3f16-11e6-b68e-a913c636f9af","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","to":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf351ea-3f16-11e6-b68e-3bf7d4042233","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf351eb-3f16-11e6-b68e-2fc71b6cac31","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ddf378fc-3f16-11e6-b68e-7f6470e31662","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ddf378fd-3f16-11e6-b68e-97221202fc8f","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1291","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf378fe-3f16-11e6-b68e-2911d7667d1d","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index != index) {\n        {\n            if (index != index) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"index","limit":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ddf3a00f-3f16-11e6-b68e-4f664246e621","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:596","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf3a010-3f16-11e6-b68e-a5e5031f240b","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index != index) {\n        {\n            if (index != index) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"index","com.google.gson.stream.JsonReader.PEEKED_NONE":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ddf3a011-3f16-11e6-b68e-9d01abaa0b7c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ddf3a012-3f16-11e6-b68e-09f08cb57e0d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf3c723-3f16-11e6-b68e-570a375834f8","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf3c724-3f16-11e6-b68e-a30765189798","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl"},"failures":[13],"tindex":"ddf3c725-3f16-11e6-b68e-bbd86ef86461","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,0,133,134,1,2,3,135,136,137,4,5,6,138,139,140,141,142,143,144,145,146,147,148,149,150,151,7,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,8,171,172,173,174,175,176,177,178,179,180,181,182,183,9,184,185,186,187,188,189,190,10,191,192,193,11,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,13,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597],"tindex":"ddf3ee36-3f16-11e6-b68e-4904795445d3","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ddf41547-3f16-11e6-b68e-afb8b2dc597c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[598],"tindex":"ddf41548-3f16-11e6-b68e-cb8492b482e1","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf43c59-3f16-11e6-b68e-43f5b7a2f610","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"ddf43c5a-3f16-11e6-b68e-b33ca440c9a5","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[14,16,17,20,21,22,34,35,36,39,40,41,51,52,71,72,73,79,80,83,84,88,107,110,112,113,114,115,117,119,120,121,122,123,124,125,126,128,130,131,132,0,133,1,2,3,135,136,137,4,5,6,138,139,141,142,157,166,170,171,172,176,183,9,185,193,197,198,201,206,213,214,222,224,225,227,228,229,230,231,232,233,234,238,239,240,241,246,247,254,13,263,271,285,290,296,297,298,299,300,301,302,304,305,306,307,308,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,327,328,329,330,332,334,335,336,337,339,340,341,342,344,345,346,347,348,349,350,351,352,353,427,451,452,453,454,455,456,458,459,461,462,463,464,465,466,467,468,469,470,472,473,475,476,477,479,480,481,482,484,488,489,491,493,502,503,504,505,506,507,508,509,510,511,512,513,514,517,518,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,550,551,552,557,560,561,562,566,567,568,569,571,574,575,576,578,579,580,581,587,588,593],"tindex":"ddf43c5b-3f16-11e6-b68e-55f436eb2f19","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf4636c-3f16-11e6-b68e-7b1488117d34","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"ddf4636d-3f16-11e6-b68e-73a96590330b","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isBoolean()) {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf48a7e-3f16-11e6-b68e-85f2a75aed14","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.Class<?>) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ddf48a7f-3f16-11e6-b68e-51c498798745","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if ((memberName.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467327290431/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":28,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":81,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":178,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":239,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":295,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":30,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":324,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":177,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":260,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":62,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":116,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":139,"com.google.gson.MixedStreamTest.testWriteLenient":252,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":187,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":228,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":270,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":47,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":233,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":234,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":126,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":185,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":237,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":131,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":283,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":105,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":163,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":320,"com.google.gson.functional.ObjectTest.testSingletonLists":183,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":142,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":159,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":332,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":122,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":170,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":8,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":198,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":66,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":58,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":93,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":210,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":257,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":38,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":39,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":56,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":156,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":60,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":214,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":190,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":97,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":273,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":115,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":235,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":161,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":172,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":167,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":294,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":153,"com.google.gson.functional.JsonTreeTest.testToJsonTree":138,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":168,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":90,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":308,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":96,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":112,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":277,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":27,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":164,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":269,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":35,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":225,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":313,"com.google.gson.functional.MapTest.testGeneralMapField":175,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":188,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":330,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":218,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":52,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":144,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":195,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":297,"com.google.gson.MixedStreamTest.testReadMixedStreamed":7,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":55,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":205,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":290,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":152,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":317,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":329,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":148,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":158,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":246,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":118,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":291,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":282,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":207,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":150,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":140,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":289,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":42,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":79,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":275,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":13,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":154,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":314,"com.google.gson.functional.ObjectTest.testNestedDeserialization":215,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":261,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":57,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":32,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":84,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":302,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":23,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":204,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":37,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":191,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":242,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":63,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":69,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":292,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":299,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":326,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":100,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":160,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":73,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":87,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":103,"com.google.gson.JavaSerializationTest.testListIsSerializable":248,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":50,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":143,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":319,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":255,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":76,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":266,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":304,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":284,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":174,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":325,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":9,"com.google.gson.functional.MapTest.testInterfaceTypeMap":173,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":54,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":89,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":221,"com.google.gson.functional.CollectionTest.testSetDeserialization":236,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":132,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":124,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":194,"com.google.gson.functional.EnumTest.testEnumSet":268,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":80,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":104,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":258,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":249,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":285,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":199,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":102,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":11,"com.google.gson.MixedStreamTest.testWriteClosed":6,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":34,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":123,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":92,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":189,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":1,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":106,"com.google.gson.functional.MapTest.testHashMapDeserialization":281,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":88,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":310,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":26,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":22,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":212,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":29,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":70,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":151,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":120,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":95,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":192,"com.google.gson.functional.MapTest.testSortedMap":296,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":312,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":43,"com.google.gson.functional.MapTest.testMapSerialization":293,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":31,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":223,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":231,"com.google.gson.functional.MapTest.testSerializeMaps":331,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":45,"com.google.gson.functional.MapTest.testComplexKeysSerialization":176,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":78,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":316,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":303,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":16,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":125,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":220,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":169,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":135,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":82,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":222,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":25,"com.google.gson.functional.CollectionTest.testQueueDeserialization":321,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":44,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":240,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":64,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":171,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":206,"com.google.gson.functional.MapTest.testStringKeyDeserialization":301,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":251,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":149,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":213,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":307,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":3,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":305,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":265,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":71,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":201,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":33,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":227,"com.google.gson.functional.MapTest.testMapSerializationEmpty":300,"com.google.gson.functional.CollectionTest.testQueueSerialization":311,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":323,"com.google.gson.ObjectTypeAdapterTest.testSerialize":245,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":147,"com.google.gson.JavaSerializationTest.testMapIsSerializable":247,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":315,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":48,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":20,"com.google.gson.functional.FieldNamingTest.testIdentity":232,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":328,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":229,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":107,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":259,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":12,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":208,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":68,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":137,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":182,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":278,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":134,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":179,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":130,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":244,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":19,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":98,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":279,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":211,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":327,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":241,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":111,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":127,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":193,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":4,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":133,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":119,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":121,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":101,"com.google.gson.functional.EnumTest.testEnumSubclass":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":264,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":197,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":51,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":41,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":49,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":59,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":77,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":262,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":75,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":14,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":128,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":181,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":180,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":263,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":0,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":85,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":200,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":243,"com.google.gson.functional.ObjectTest.testNestedSerialization":202,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":28,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":306,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":67,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":298,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":226,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":155,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":184,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":276,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":253,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":274,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":196,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":256,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":99,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":219,"com.google.gson.CommentsTest.testParseComments":322,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":166,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":91,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":157,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":24,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":113,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":203,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":40,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":129,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":110,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":224,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":53,"com.google.gson.functional.CollectionTest.testSetSerialization":238,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":61,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":46,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":17,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":65,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":309,"com.google.gson.MixedStreamTest.testWriteInvalidState":5,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":250,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":21,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":18,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":146,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":36,"com.google.gson.functional.MapTest.testMapDeserialization":288,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":230,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":217,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":280,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":162,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":94,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":287,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":165,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":15,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":83,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":136,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":108,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":209,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":72,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":286,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":109,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":254},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"0c06c85a-3e77-11e6-8f6d-45673a286c49","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"0c07167b-3e77-11e6-8f6d-4173e4dc331f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[0],"tindex":"0c07167c-3e77-11e6-8f6d-d1f389a3a9c3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"0c07649d-3e77-11e6-8f6d-6b0264a107cc","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if ((typeOfT instanceof java.lang.reflect.ParameterizedType) && (!(typeOfT.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"typeOfT","type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"0c07649e-3e77-11e6-8f6d-5b649891cce1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"0c07649f-3e77-11e6-8f6d-77945dfa472c","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance != instance) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"instance","type":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"0c078ab0-3e77-11e6-8f6d-5bf4f7e51905","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1],"tindex":"0c078ab1-3e77-11e6-8f6d-f10e2affcbc3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],"tindex":"0c07b1c2-3e77-11e6-8f6d-b71ec73a1198","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[246,247,248,249,250,251,252,253,254,255,256,16,17,18,19,20,21,22,24,25,26,51,53,55,257,258,259,260,261,85,88,92,98,99,262,100,101,102,104,105,106,107,108,109,110,263,111,112,264,265,266,267,268,269,270,271,272,273,126,127,128,129,130,132,274,275,276,277,150,151,278,152,153,154,155,156,161,164,165,169,279,280,281,282,283,284,285,286,287,288,171,289,290,291,292,293,294,172,295,296,173,297,174,175,298,299,176,300,301,302,303,304,305,177,183,306,204,210,213,233,307,234,308,309,310,311,312,313,314,315,316,236,317,318,319,320,321,239,241,322,323,324],"tindex":"0c07b1c3-3e77-11e6-8f6d-33c60593473a","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"0c07d8d4-3e77-11e6-8f6d-abfba30adb70","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if ((typeOfT instanceof java.lang.reflect.ParameterizedType) && (!(typeOfT.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"0c07d8d5-3e77-11e6-8f6d-6d24148f5383","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"0c07d8d6-3e77-11e6-8f6d-032ced60ac4f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[325,326,327,88,104,136,328],"tindex":"0c07ffe7-3e77-11e6-8f6d-d909dabb61f7","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"0c07ffe8-3e77-11e6-8f6d-158d17954a7f","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonPrimitive) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1364","type":"CtBinaryOperatorImpl","sourcecode":"p == l"},"failures":[],"tindex":"0c07ffe9-3e77-11e6-8f6d-d7587490ada9","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == offset) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"length","l":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"0c0826fa-3e77-11e6-8f6d-a5ea2c878411","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"0c0826fb-3e77-11e6-8f6d-3dc166ed4d86","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (o instanceof com.google.gson.JsonArray) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return containsKey(o);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"0c0826fc-3e77-11e6-8f6d-8fb0c3260558","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[154,173,175,177],"tindex":"0c0826fd-3e77-11e6-8f6d-398ab03a8f11","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (!(keyElement instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"keyElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"0c084e0e-3e77-11e6-8f6d-4583d51e2999","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"0c084e0f-3e77-11e6-8f6d-d727a1525c08","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    java.util.List<com.google.gson.JsonElement>.add(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[329],"tindex":"0c084e10-3e77-11e6-8f6d-0bb7d979ed48","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[330,331,307,245,332],"tindex":"0c084e11-3e77-11e6-8f6d-d79f16a4534e","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:226","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[],"tindex":"0c087522-3e77-11e6-8f6d-df1553ddf650","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if ((root != null) && (root != null)) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root","right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"0c087523-3e77-11e6-8f6d-c96875b33709","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"context","type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1364","type":"CtBinaryOperatorImpl","sourcecode":"p == l"},"failures":[],"tindex":"0c087524-3e77-11e6-8f6d-af310611232d","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == timeStyle) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","l":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"0c089c35-3e77-11e6-8f6d-054469521c91","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:318","type":"CtBinaryOperatorImpl","sourcecode":"parent != null"},"failures":[],"tindex":"0c089c36-3e77-11e6-8f6d-9b4bed7cd636","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611120/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":29,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
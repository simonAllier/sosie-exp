{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":249,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":343,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":515,"com.google.gson.functional.StringTest.testStringValueDeserialization":679,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":111,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":669,"com.google.gson.stream.JsonWriterTest.testRepeatedName":507,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":583,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":31,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":642,"com.google.gson.MixedStreamTest.testWriteLenient":358,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":430,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":317,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":721,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":71,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":56,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":66,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":443,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":614,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":30,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":278,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":215,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":590,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":403,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":702,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":434,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":487,"com.google.gson.functional.ObjectTest.testSingletonLists":179,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":313,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":344,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":437,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":364,"com.google.gson.stream.JsonWriterTest.testStrings":528,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":429,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":19,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":562,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":674,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":447,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":16,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":616,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":700,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":477,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":537,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":686,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":200,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":233,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":610,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":520,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":383,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":3,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":574,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":229,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":382,"com.google.gson.functional.EnumTest.testEnumCaseMapping":29,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":342,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":361,"com.google.gson.functional.JsonTreeTest.testToJsonTree":287,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":573,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":476,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":142,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":404,"com.google.gson.stream.JsonWriterTest.testNulls":504,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":714,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":296,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":534,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":466,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":667,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":124,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":393,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":63,"com.google.gson.functional.ObjectTest.testNullDeserialization":639,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":203,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":684,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":691,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":633,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":169,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":584,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":188,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":698,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":394,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":227,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":116,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":448,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":12,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":415,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":120,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":621,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":620,"com.google.gson.JsonParserTest.testParseString":400,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":516,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":673,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":161,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":535,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":719,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":155,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":661,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":194,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":312,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":597,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":378,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":564,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":607,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":695,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":666,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":283,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":363,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":425,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":109,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":162,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":432,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":608,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":193,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":260,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":11,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":335,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":523,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":630,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":35,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":147,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":385,"com.google.gson.metrics.PerformanceTest.testDummy":541,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":652,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":135,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":41,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":646,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":410,"com.google.gson.stream.JsonWriterTest.testEmptyArray":498,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":366,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":316,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":307,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":454,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":115,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":711,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":644,"com.google.gson.functional.CollectionTest.testSetDeserialization":560,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":216,"com.google.gson.functional.EnumTest.testEnumSet":23,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":184,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":654,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":600,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":77,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":489,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":663,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":189,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":40,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":611,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":456,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":519,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":617,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":22,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":224,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":165,"com.google.gson.functional.MapTest.testHashMapDeserialization":372,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":581,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":391,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":336,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":647,"com.google.gson.MixedStreamTest.testReadNulls":689,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":48,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":247,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":281,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":367,"com.google.gson.functional.MapTest.testSortedMap":384,"com.google.gson.functional.MapTest.testMapSerialization":98,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":250,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":693,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":458,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":605,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":468,"com.google.gson.functional.MapTest.testSerializeMaps":92,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":340,"com.google.gson.functional.MapTest.testComplexKeysSerialization":107,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":653,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":387,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":492,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":271,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":205,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":420,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":131,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":554,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":20,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":546,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":236,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":405,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":703,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":32,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":638,"com.google.gson.functional.MapTest.testStringKeyDeserialization":386,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":491,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":470,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":79,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":173,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":110,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":587,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":219,"com.google.gson.functional.PrettyPrintingTest.testMap":234,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":582,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":293,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":543,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":15,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":471,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":536,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":348,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":680,"com.google.gson.functional.CollectionTest.testQueueSerialization":60,"com.google.gson.functional.MapTest.testMapSerializationEmpty":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":304,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":406,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":524,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":601,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":526,"com.google.gson.functional.MapTest.testMapOfMapSerialization":97,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":153,"com.google.gson.JavaSerializationTest.testMapIsSerializable":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":668,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":423,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":500,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":158,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":85,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":1,"com.google.gson.functional.FieldNamingTest.testIdentity":341,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":345,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":368,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":252,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":510,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":449,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":706,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":34,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":73,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":178,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":286,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":502,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":575,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":4,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":113,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":346,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":156,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":672,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":664,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":326,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":370,"com.google.gson.functional.MapTest.testMapSubclassSerialization":91,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":172,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":244,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":421,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":655,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":221,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":328,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":355,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":595,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":659,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":542,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":39,"com.google.gson.functional.EnumTest.testEnumSubclass":26,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":159,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":17,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":446,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":143,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":112,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":699,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":613,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":78,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":552,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":576,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":199,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":511,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":715,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":598,"com.google.gson.stream.JsonWriterTest.testTwoNames":499,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":453,"com.google.gson.stream.JsonWriterTest.testNullName":505,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":133,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":9,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":465,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":396,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":602,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":632,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":154,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":513,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":549,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":509,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":321,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":442,"com.google.gson.MixedStreamTest.testWriteNulls":356,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":371,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":266,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":508,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":369,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":262,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":204,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":550,"com.google.gson.CommentsTest.testParseComments":690,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":401,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":82,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":180,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":568,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":275,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":469,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":612,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":457,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":100,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":347,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":643,"com.google.gson.MixedStreamTest.testReadInvalidState":687,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":212,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":46,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":323,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":241,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":418,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":701,"com.google.gson.JsonParserTest.testParseMixedArray":483,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":146,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":472,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":490,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":272,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":712,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":696,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":150,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":209,"com.google.gson.JsonArrayTest.testRemove":710,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":310,"com.google.gson.functional.MapTest.testMapDeserialization":377,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":306,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":239,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":90,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":567,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":705,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":94,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":140,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":126,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":123,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":412,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":555,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":285,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":545,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":658,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":187,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":195,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":50,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":222,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":297,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":488,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":704,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":55,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":198,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":99,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":235,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":325,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":572,"com.google.gson.functional.PrimitiveTest.testShortSerialization":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":428,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":128,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":615,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":0,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":231,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":596,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":299,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":580,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":337,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":25,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":395,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":58,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":243,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":392,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":374,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":593,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":70,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":174,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":411,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":475,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":570,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":482,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":494,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":177,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":623,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":531,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":33,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":196,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":426,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":289,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":329,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":497,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":619,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":473,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":80,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":599,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":641,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":629,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":51,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":280,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":662,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":217,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":427,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":122,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":311,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":586,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":301,"com.google.gson.stream.JsonWriterTest.testNullStringValue":416,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":671,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":138,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":556,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":577,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":440,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":157,"com.google.gson.JsonArrayTest.testSet":485,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":175,"com.google.gson.stream.JsonWriterTest.testEmptyObject":518,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":88,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":24,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":125,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":648,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":413,"com.google.gson.functional.MapTest.testGeneralMapField":104,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":445,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":259,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":707,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":626,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":114,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":218,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":318,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":102,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":119,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":290,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":164,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":397,"com.google.gson.MixedStreamTest.testReadMixedStreamed":481,"com.google.gson.JsonObjectTest.testDeepCopy":407,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":151,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":474,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":697,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":5,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":67,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":390,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":521,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":651,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":603,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":230,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":717,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":309,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":380,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":333,"com.google.gson.JsonArrayTest.testDeepCopy":486,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":373,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":83,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":176,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":256,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":331,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":506,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":594,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":308,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":431,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":253,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":656,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":569,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":87,"com.google.gson.functional.ObjectTest.testNestedDeserialization":451,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":192,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":201,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":538,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":132,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":228,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":625,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":274,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":381,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":484,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":547,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":681,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":38,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":168,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":551,"com.google.gson.JavaSerializationTest.testListIsSerializable":718,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":75,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":566,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":69,"com.google.gson.functional.ObjectTest.testNullSerialization":185,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":53,"com.google.gson.stream.JsonWriterTest.testDoubles":525,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":479,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":375,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":103,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":144,"com.google.gson.functional.MapTest.testInterfaceTypeMap":101,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":467,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":522,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":220,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":137,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":694,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":578,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":27,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":232,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":722,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":223,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":422,"com.google.gson.MixedStreamTest.testReadClosed":688,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":291,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":226,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":588,"com.google.gson.MixedStreamTest.testWriteClosed":360,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":62,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":539,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":181,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":571,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":675,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":43,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":136,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":277,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":197,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":273,"com.google.gson.stream.JsonWriterTest.testLongs":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":324,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":141,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":182,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":61,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":676,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":606,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":332,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":553,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":65,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":692,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":708,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":314,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":414,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":207,"com.google.gson.stream.JsonWriterTest.testNumbers":527,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":627,"com.google.gson.JsonParserTest.testParseInvalidJson":709,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":149,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":660,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":206,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":257,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":276,"com.google.gson.functional.CollectionTest.testQueueDeserialization":563,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":152,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":604,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":683,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":716,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":322,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":677,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":95,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":637,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":303,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":121,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":640,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":57,"com.google.gson.functional.MapTest.testRawMapSerialization":106,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":354,"com.google.gson.JsonParserTest.testParseReader":399,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":670,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":532,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":49,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":190,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":460,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":130,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":6,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":8,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":18,"com.google.gson.functional.PrimitiveTest.testByteSerialization":167,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":261,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":352,"com.google.gson.ObjectTypeAdapterTest.testSerialize":419,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":117,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":585,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":72,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":267,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":338,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":44,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":417,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":480,"com.google.gson.functional.MapTest.testMapWithQuotes":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":294,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":591,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":682,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":76,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":389,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":86,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":246,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":292,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":214,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":512,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":435,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":36,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":450,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":240,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":300,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":634,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":270,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":295,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":302,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":330,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":618,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":21,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":424,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":463,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":37,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":320,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":52,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":254,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":678,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":245,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":713,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":544,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":409,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":579,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":720,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":84,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":530,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":635,"com.google.gson.functional.ObjectTest.testNestedSerialization":191,"com.google.gson.JsonObjectTest.testAddingStringProperties":408,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":89,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":118,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":148,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":685,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":255,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":105,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":242,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":288,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":14,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":359,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":529,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":186,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":649,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":441,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":139,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":665,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":362,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":540,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":589,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":657,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":478,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":533,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":349,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":265,"com.google.gson.functional.CollectionTest.testSetSerialization":68,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":81,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":237,"com.google.gson.functional.StringTest.testStringValueSerialization":350,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":351,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":208,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":548,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":557,"com.google.gson.MixedStreamTest.testWriteInvalidState":357,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":462,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":183,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":592,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":269,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":439,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":334,"com.google.gson.stream.JsonWriterTest.testBooleans":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":298,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":339,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":398,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":202,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":402,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":461,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":225,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":493,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":315,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":353,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":376,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":514,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":263,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":645},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362],"tindex":"68ae9c0a-3e53-11e6-88b8-a39003468a2e","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"68aeea2b-3e53-11e6-88b8-3b6533f019ba","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68aeea2c-3e53-11e6-88b8-cd71b9f30cc6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"68af113d-3e53-11e6-88b8-a33ea35ed76e","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"68af113e-3e53-11e6-88b8-7bf9c337df9a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"68af113f-3e53-11e6-88b8-817478a8f071","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[284,285,286,287],"tindex":"68af3850-3e53-11e6-88b8-6b0f01fdd556","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[363,0],"tindex":"68af3851-3e53-11e6-88b8-fb7eb1a3bb73","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value > value) {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[6,7,8,364,365,366,367,368,82,87,369,370,371,372,373,91,92,374,375,93,376,94,377,95,378,379,380,381,96,97,98,382,383,99,100,384,101,102,103,104,105,106,385,107,108,386,109,387,388,110,111,196,234,235,244,245,272,275,276,277,281,389,390,282,283,299,391,316],"tindex":"68af3852-3e53-11e6-88b8-b38917303981","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType == keyType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"keyType","java.sql.Timestamp.class":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68af5f63-3e53-11e6-88b8-7b7c237e8a8f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:153","type":"CtInvocationImpl","sourcecode":"java.util.Set.class.isAssignableFrom(rawType)"},"failures":[],"tindex":"68af5f64-3e53-11e6-88b8-3f33f6f9bcea","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type.isAssignableFrom(rawType)) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","java.util.Set.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68af8675-3e53-11e6-88b8-270f8e52797d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[299],"tindex":"68af8676-3e53-11e6-88b8-73bdf2ec7ddd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68afad87-3e53-11e6-88b8-d901bea15fc7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[392,393,394,395,396,6,397,398,399,400,401,402,403,404,405,406,407,408,409,71,72,74,75,410,368,411,373,374,375,377,380,382,385,386,132,133,134,138,139,142,200,412,241,413,242,244,245,246,249,414,276,277,283,286,415],"tindex":"68afad88-3e53-11e6-88b8-01ada3f50def","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"68afd499-3e53-11e6-88b8-d924a59253a8","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68afd49a-3e53-11e6-88b8-c1bc8ae0ea93","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"68affbab-3e53-11e6-88b8-a963203ee59e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"68b022bc-3e53-11e6-88b8-5b462f097c8f","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl","sourcecode":"!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[],"tindex":"68b022bd-3e53-11e6-88b8-bbc6c09ad04c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key.isString()) {\n        {\n            if (!(key instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n                    return node != null ? node.V : null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[416,63,95,101,103,111,122,123,125,126,130,131,135,137,141,208,265,270,299,319],"tindex":"68b049ce-3e53-11e6-88b8-63f80512cbba","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[417,2,3,4,5,6,7,418,419,11,15,16,17,366,18,19,367,25,26,27,420,28,29,34,36,37,38,39,40,42,43,44,45,409,421,49,422,55,56,57,58,59,61,62,64,423,65,424,66,68,70,71,72,73,74,75,76,425,77,410,368,426,78,79,80,427,81,82,83,428,84,429,85,86,87,430,369,431,432,90,371,373,91,92,94,95,378,380,97,382,383,101,103,104,107,386,109,111,112,113,114,433,115,116,117,118,119,120,121,122,434,123,435,124,125,126,128,131,132,133,134,135,137,138,139,436,140,141,142,144,437,438,146,147,148,150,151,439,152,153,155,158,160,161,162,163,440,168,171,172,173,441,174,175,176,178,179,442,443,180,444,445,182,186,446,447,189,190,191,448,194,449,450,451,198,452,453,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,222,224,225,226,227,228,229,230,231,454,455,456,233,234,235,236,237,238,239,240,457,458,241,413,242,459,460,243,244,245,246,249,252,414,254,461,255,256,257,258,462,259,260,261,262,263,463,464,264,265,266,465,466,467,267,468,268,469,269,470,270,471,271,472,272,274,275,276,277,281,390,282,283,285,288,473,290,294,295,296,474,299,310,312,314,391,316,475,317,318,320,322,323,325,476,329,477,478,331,332,479,333,337,338,339,340,341,343,345,347,480,351,354,355,481,482,361,362],"tindex":"68b049cf-3e53-11e6-88b8-091711631089","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"o","typeOfT":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"68b049d0-3e53-11e6-88b8-6bc620a08e0d","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:948","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[483,484,485,486],"tindex":"68b049d1-3e53-11e6-88b8-dd9f4705d83c","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i < 0) {\n        {\n            if (i == i) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.get(i);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_NONE":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[487,488,46,47],"tindex":"68b070e2-3e53-11e6-88b8-1dadb4daa4b0","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"68b070e3-3e53-11e6-88b8-3143f4475357","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[485],"tindex":"68b070e4-3e53-11e6-88b8-3dd3d9846e04","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (element.isJsonNull()) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"68b070e5-3e53-11e6-88b8-ad3120429823","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"68b070e6-3e53-11e6-88b8-933e6248400c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key.isString()) {\n        {\n            if (!(key instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n                    return node != null ? node.V : null;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[489,490,491],"tindex":"68b097f7-3e53-11e6-88b8-b7decf0326cf","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.WildcardType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"68b097f8-3e53-11e6-88b8-2d8c836ca664","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if ((key != null) && ((key.peek()) != key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"key","obj":"key","reader":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[],"tindex":"68b097f9-3e53-11e6-88b8-e3f07cf8692c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b0bf0a-3e53-11e6-88b8-0d3dcebe08a7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"68b0bf0b-3e53-11e6-88b8-bf8245598171","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value > value) {\n                {\n                    if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                        throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b0bf0c-3e53-11e6-88b8-b1ab540b152a","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b0bf0d-3e53-11e6-88b8-79fb5b64cf27","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"68b0e61e-3e53-11e6-88b8-657a17d840df","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:469","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_ARRAY)"},"failures":[492,363,493,494,495,496,497,2,9,10,418,419,364,11,483,498,499,500,501,416,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,12,13,19,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,78,79,80,81,82,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,125,126,127,128,129,131,135,136,137,140,141,145,148,151,163,171,174,176,178,179,180,181,182,183,184,186,189,190,191,192,193,194,195,196,197,198,199,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,221,530,232,531,532,533,534,535,536,537,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,279,281,282,283,285,288,292,295,298,301,304,308,309,311,312,316,318,319,324,329,330,331,332,334,335,337,338,339,340,341,347,351,352,353,354,355,357,358,359,360,361,362],"tindex":"68b0e61f-3e53-11e6-88b8-c3ea1aae428e","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"empty","com.google.gson.stream.JsonScope.NONEMPTY_ARRAY":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b0e620-3e53-11e6-88b8-1fb158a181b4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"68b0e621-3e53-11e6-88b8-0b773cd1642f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key","value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"68b10d32-3e53-11e6-88b8-63a7da2a169f","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"68b10d33-3e53-11e6-88b8-2f9ece51ccbe","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b10d34-3e53-11e6-88b8-3f788d6c8050","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"68b10d35-3e53-11e6-88b8-d7609e631d70","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"typeOfT","context":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"68b13446-3e53-11e6-88b8-cfd4412225c0","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[248,538,251,539],"tindex":"68b13447-3e53-11e6-88b8-e36550761fc8","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b13448-3e53-11e6-88b8-25f177faeb39","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"68b13449-3e53-11e6-88b8-b33857039e1f","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b1344a-3e53-11e6-88b8-23da8042b1cb","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b15b5b-3e53-11e6-88b8-63824ad08b51","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"68b15b5c-3e53-11e6-88b8-9dc6798f072f","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b15b5d-3e53-11e6-88b8-b96811394a49","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b15b5e-3e53-11e6-88b8-f3a08f5b9f56","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:170","type":"CtBinaryOperatorImpl","sourcecode":"comparison < 0"},"failures":[],"tindex":"68b15b5f-3e53-11e6-88b8-9552238dacae","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i < 0) {\n        {\n            if (i == i) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.get(i);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b18270-3e53-11e6-88b8-d3590dab5cdd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[299],"tindex":"68b18271-3e53-11e6-88b8-4984c872ef64","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b18272-3e53-11e6-88b8-b76934be712f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"68b18273-3e53-11e6-88b8-eb58b4fee739","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class<?>) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1258","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"68b1a984-3e53-11e6-88b8-a928a365a28d","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == end) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"start","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"68b1a985-3e53-11e6-88b8-45c72a4a3994","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[],"tindex":"68b1a986-3e53-11e6-88b8-911209f8e931","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[417,2,3,4,5,9,10,540,11,12,13,14,541,15,16,17,366,18,542,19,20,543,544,367,21,22,23,24,25,26,545,546,27,420,28,29,30,31,547,32,548,33,549,34,35,36,550,37,38,39,40,41,42,487,43,44,45,488,46,409,421,47,48,49,50,551,51,52,53,552,553,54,422,55,554,555,56,57,58,59,556,557,558,60,61,62,63,64,559,423,65,424,560,66,67,561,68,69,562,70,563,71,72,73,74,75,76,425,77,410,368,426,78,79,80,427,81,82,83,428,84,429,85,86,87,88,89,430,564,565,411,566,369,431,432,370,90,371,372,373,91,92,374,375,93,376,94,377,95,378,379,380,381,96,97,98,382,383,99,100,384,101,102,103,104,105,106,385,107,108,386,109,387,388,110,111,112,113,114,433,115,116,117,118,119,120,121,122,567,434,123,435,124,125,126,568,127,128,129,130,569,131,570,132,133,134,135,136,137,138,139,571,436,140,141,142,572,573,574,143,575,144,576,577,578,579,437,145,438,580,146,581,582,583,584,585,586,587,147,148,588,589,590,591,592,149,593,150,151,594,439,152,595,596,153,597,154,155,598,599,156,157,600,601,602,158,603,604,605,606,607,608,609,610,159,611,160,612,161,162,613,614,163,615,616,164,617,165,618,619,440,166,167,168,169,170,171,172,620,621,622,173,441,174,623,624,625,175,176,626,177,627,628,178,179,442,443,180,444,445,181,629,630,182,183,631,632,184,633,185,186,634,446,187,447,188,189,635,190,191,192,636,193,448,637,638,639,194,449,195,196,450,197,640,641,451,642,198,452,453,199,200,201,643,202,203,204,205,644,206,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,645,454,455,456,646,233,234,235,236,237,238,239,240,457,458,241,413,242,459,460,243,244,245,247,248,249,250,647,538,251,539,648,649,252,253,414,254,461,255,256,257,258,462,259,260,261,262,263,463,464,264,265,266,465,466,467,267,468,268,469,269,470,270,471,271,472,272,273,274,275,276,277,278,650,651,279,652,653,654,280,655,281,389,390,282,283,284,285,286,287,288,473,656,289,290,291,415,657,658,292,659,293,294,660,295,661,296,297,662,474,298,663,299,664,300,301,302,303,304,665,305,666,306,307,667,308,668,309,310,311,312,669,313,670,671,314,391,315,316,475,317,318,672,319,320,321,322,323,324,673,674,325,326,476,327,675,328,329,477,478,330,331,676,677,332,678,479,333,334,335,336,337,338,339,340,341,679,342,343,344,345,346,680,681,347,480,348,682,683,684,349,685,686,350,351,352,353,354,687,688,355,356,357,358,689,359,360,481,482,361,362,690],"tindex":"68b1a987-3e53-11e6-88b8-a77783f6286a","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[36,39,40,44,45,122,125,126,131],"tindex":"68b1d098-3e53-11e6-88b8-2f298e28d518","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[494,495,497,691,692,693,6,399,400,11,401,12,402,403,404,405,406,407,408,13,694,19,37,409,71,72,74,75,410,78,79,80,84,430,564,565,411,566,387,111,113,435,128,132,133,134,138,139,142,200,695,457,458,241,413,242,459,460,246,249,648,414,276,277,281,282,283,284,285,286,287,415,298,352,353],"tindex":"68b1f7a9-3e53-11e6-88b8-b375215bbfe1","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[405,411],"tindex":"68b1f7aa-3e53-11e6-88b8-ddbaeb2e91ae","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"68b1f7ab-3e53-11e6-88b8-b1cebfea6ebb","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"68b1f7ac-3e53-11e6-88b8-bb72c6182147","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name != null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b1f7ad-3e53-11e6-88b8-27828aae6461","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"68b21ebe-3e53-11e6-88b8-63cc9fe31baa","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.ParameterizedType) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[363,493,696,496,697,692,698,699,700,701,702,703,704,705,706,707,708,483,484,709,407,71,430,565,566,90,133,138,200,695,292,661,485,486,710,711],"tindex":"68b21ebf-3e53-11e6-88b8-fb4e7e699392","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b21ec0-3e53-11e6-88b8-0b2a19719051","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"68b21ec1-3e53-11e6-88b8-5b6ead2dcfb9","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b21ec2-3e53-11e6-88b8-fdae9d3598f8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[497,6,7,8,21,37,71,72,73,74,75,92,95,105,111,113,122,123,125,126,127,128,129,130,131,132,133,134,138,139,142,183,200,247,249,251,265,276,277,284,285,286,287,352,354,355,356,357,358,359,360],"tindex":"68b245d3-3e53-11e6-88b8-65c02e869a7a","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"68b245d4-3e53-11e6-88b8-71d9a651b1f3","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b245d5-3e53-11e6-88b8-e9ce96699db7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    java.lang.Object java.lang.Object = field.get(value);\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n    t.write(writer, fieldValue);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"68b245d6-3e53-11e6-88b8-fd9b265b387e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b245d7-3e53-11e6-88b8-c1dc8272dcc9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"68b26ce8-3e53-11e6-88b8-efa2a8481420","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:961","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"68b26ce9-3e53-11e6-88b8-ab8555c8cccc","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if ((offset == count) || (p == offset)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"count","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[328,329,477,478,331,676,332,678,712,713,714],"tindex":"68b26cea-3e53-11e6-88b8-11a31719fe11","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[31,32,34,42,136,160,176,530,232,531,532,533,534,535,536,267,285],"tindex":"68b26ceb-3e53-11e6-88b8-716a0df68e37","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"68b26cec-3e53-11e6-88b8-f9359d290c08","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"element","this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[710],"tindex":"68b293fd-3e53-11e6-88b8-f5df44c33c01","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[20,21,73,130,185,356],"tindex":"68b293fe-3e53-11e6-88b8-41a5daf4eff7","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"68b293ff-3e53-11e6-88b8-41cdd1e2c291","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if ((name != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"68b29400-3e53-11e6-88b8-2d5b8b62f1e1","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"68b29401-3e53-11e6-88b8-69e1786d9ab5","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1189","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"68b29402-3e53-11e6-88b8-3bc1e2205258","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if ((targetSize == targetSize) || (p == targetSize)) {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"targetSize","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b2ba13-3e53-11e6-88b8-e160e12f4af0","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[417,2,3,4,5,6,7,8,9,10,419,364,11,715,716,14,717,365,718,15,16,17,366,18,542,19,543,544,367,22,23,24,25,26,545,546,27,420,28,29,30,31,547,32,548,33,549,34,35,36,550,37,38,39,40,41,42,487,43,44,45,488,46,409,421,47,48,49,50,551,51,52,53,552,553,54,422,55,554,555,56,57,58,59,556,557,558,60,61,62,63,64,559,423,65,424,560,66,67,561,68,69,562,70,563,71,72,73,74,75,76,425,77,410,368,426,78,79,80,427,81,82,83,428,84,429,85,86,87,88,89,430,564,565,411,566,369,431,432,370,90,371,372,373,91,92,374,375,93,376,94,377,95,378,379,380,381,96,97,98,382,383,99,100,384,101,102,103,104,105,106,385,107,108,386,109,387,388,110,111,112,113,114,433,115,116,117,118,119,120,121,122,567,434,123,435,124,125,126,568,127,128,129,130,569,131,570,132,133,134,135,136,137,138,139,571,436,140,141,142,572,573,574,143,575,144,576,577,578,579,437,145,438,580,146,581,582,583,584,585,586,587,147,148,588,589,590,591,592,149,593,150,151,594,439,152,595,596,153,597,154,155,598,599,156,157,600,601,602,158,603,604,605,606,607,608,609,610,159,611,160,612,161,162,613,614,163,615,616,164,617,165,618,619,440,166,167,168,169,170,171,172,620,621,622,173,441,174,623,624,625,175,176,626,177,627,628,178,179,442,443,180,444,445,181,629,630,182,631,632,184,633,186,446,187,447,188,189,635,190,191,192,636,193,448,637,638,194,449,195,196,450,197,640,641,451,642,198,452,453,199,200,201,202,203,204,205,644,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,645,454,455,456,646,233,234,235,236,237,238,239,240,457,458,241,413,242,459,460,243,244,245,246,247,248,249,250,647,538,251,539,648,649,252,253,414,254,461,255,256,257,258,462,259,260,261,262,263,463,464,264,265,266,465,466,467,267,468,268,469,269,470,270,471,271,472,272,273,274,275,276,277,278,650,651,279,652,653,654,280,655,281,389,390,282,283,284,285,286,287,288,473,656,289,290,291,657,658,659,293,660,295,296,297,662,474,663,299,664,300,301,302,303,304,665,305,666,306,307,667,308,668,309,310,311,312,313,670,671,314,391,316,475,317,318,672,319,320,321,322,323,324,673,674,325,327,675,329,477,478,330,331,676,677,332,479,333,334,335,337,338,339,340,341,679,342,343,344,345,346,680,681,347,480,348,682,683,684,349,685,686,350,351,354,687,355,357,358,359,360,481,482,361,362,690,713,714,719,720,721,722],"tindex":"68b2ba14-3e53-11e6-88b8-c1b5ceeb46e0","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"68b2ba15-3e53-11e6-88b8-fbe9578d711a","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[2,9,10,419,11,542,19,22,27,420,31,32,548,549,34,35,36,550,38,39,40,41,42,487,43,44,45,488,46,421,47,48,49,50,551,51,52,53,552,553,54,422,55,554,555,56,58,64,560,66,68,71,72,74,75,425,426,78,80,81,88,89,430,564,565,411,566,95,383,101,103,104,107,111,112,114,433,115,116,117,120,121,122,567,434,125,126,568,127,129,131,570,132,133,134,135,136,137,138,139,571,436,140,141,142,619,178,179,442,443,180,444,445,181,629,630,182,631,184,633,186,446,447,189,635,190,191,636,193,448,637,194,449,195,196,450,197,640,641,451,642,198,452,453,199,200,202,203,204,205,644,206,207,208,209,210,211,212,214,215,216,221,454,455,456,235,236,240,458,241,413,242,460,243,244,245,246,247,249,250,538,251,539,648,252,253,254,461,256,268,469,269,272,273,274,275,276,277,650,651,279,652,281,390,282,283,284,285,286,287,288,473,657,658,662,299,665,309,319,324,329,477,478,330,331,676,677,332,334,335,337,338,339,340,341,351,354,355,357,360,481,482],"tindex":"68b2e126-3e53-11e6-88b8-4f2cc03dfca3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b2e127-3e53-11e6-88b8-2b7521cc23d4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"68b2e128-3e53-11e6-88b8-65e8d1ee4582","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[328,329,477,478,331,676,332,678,712,713,714],"tindex":"68b2e129-3e53-11e6-88b8-a74f6665da70","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"68b2e12a-3e53-11e6-88b8-3d05faf6146a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((b.peek()) == a) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"b","com.google.gson.stream.JsonToken.NULL":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"68b3083b-3e53-11e6-88b8-87a640a5da50","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((b.peek()) == a) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[418,419,364],"tindex":"68b3083c-3e53-11e6-88b8-f7f471f0043f","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242336066/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"68b3083d-3e53-11e6-88b8-d52a3872c722","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
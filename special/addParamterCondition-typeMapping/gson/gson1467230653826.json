{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":190,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":577,"com.google.gson.functional.StringTest.testStringValueDeserialization":575,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":85,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":548,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":372,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":21,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":152,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":74,"com.google.gson.MixedStreamTest.testWriteLenient":594,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":557,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":63,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":57,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":61,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":121,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":420,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":274,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":509,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":171,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":381,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":34,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":96,"com.google.gson.functional.ObjectTest.testSingletonLists":119,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":549,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":365,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":578,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":253,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":307,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":17,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":565,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":134,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":259,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":423,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":4,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":591,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":157,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":412,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":474,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":80,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":246,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":357,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":469,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":333,"com.google.gson.functional.EnumTest.testEnumCaseMapping":273,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":576,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":597,"com.google.gson.functional.JsonTreeTest.testToJsonTree":221,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":356,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":567,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":116,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":527,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":500,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":542,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":352,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":286,"com.google.gson.functional.ObjectTest.testNullDeserialization":628,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":159,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":588,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":131,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":432,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":619,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":373,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":453,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":467,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":90,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":141,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":618,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":568,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":92,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":437,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":564,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":417,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":396,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":526,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":143,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":496,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":547,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":75,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":326,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":409,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":539,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":217,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":67,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":343,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":313,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":418,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":410,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":140,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":490,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":15,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":127,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":232,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":616,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":26,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":340,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":377,"com.google.gson.metrics.PerformanceTest.testDummy":620,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":213,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":107,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":32,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":473,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":299,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":261,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":345,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":555,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":541,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":89,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":162,"com.google.gson.functional.CollectionTest.testSetDeserialization":60,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":172,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":130,"com.google.gson.functional.EnumTest.testEnumSet":266,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":511,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":401,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":33,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":298,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":531,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":135,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":11,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":31,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":414,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":176,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":425,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":18,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":464,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":426,"com.google.gson.functional.MapTest.testHashMapDeserialization":316,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":370,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":553,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":482,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":574,"com.google.gson.MixedStreamTest.testReadNulls":595,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":43,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":189,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":214,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":265,"com.google.gson.functional.MapTest.testSortedMap":336,"com.google.gson.functional.MapTest.testMapSerialization":332,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":191,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":180,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":407,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":615,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":607,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":503,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":236,"com.google.gson.functional.MapTest.testSerializeMaps":319,"com.google.gson.functional.MapTest.testComplexKeysSerialization":84,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":510,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":344,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":609,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":507,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":20,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":161,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":102,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":55,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":621,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":271,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":178,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":600,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":22,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":455,"com.google.gson.functional.MapTest.testStringKeyDeserialization":342,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":504,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":301,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":439,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":346,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":376,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":371,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":460,"com.google.gson.functional.PrettyPrintingTest.testMap":475,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":279,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":193,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":522,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":258,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":506,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":581,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":585,"com.google.gson.functional.CollectionTest.testQueueSerialization":283,"com.google.gson.functional.MapTest.testMapSerializationEmpty":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":537,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":402,"com.google.gson.functional.MapTest.testMapOfMapSerialization":331,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":393,"com.google.gson.JavaSerializationTest.testMapIsSerializable":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":544,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":288,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":168,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":404,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":308,"com.google.gson.functional.FieldNamingTest.testIdentity":237,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":579,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":300,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":196,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":144,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":25,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":118,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":220,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":296,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":359,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":247,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":347,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":580,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":154,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":559,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":2,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":538,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":314,"com.google.gson.functional.MapTest.testMapSubclassSerialization":318,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":435,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":41,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":186,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":513,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":173,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":240,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":391,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":570,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":76,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":521,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":16,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":30,"com.google.gson.functional.EnumTest.testEnumSubclass":269,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":413,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":133,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":260,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":358,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":86,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":252,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":419,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":69,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":613,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":50,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":361,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":156,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":397,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":603,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":155,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":105,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":12,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":499,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":403,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":451,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":24,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":561,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":120,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":315,"com.google.gson.MixedStreamTest.testWriteNulls":633,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":498,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":311,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":492,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":28,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":160,"com.google.gson.CommentsTest.testParseComments":599,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":99,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":122,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":303,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":202,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":207,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":416,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":479,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":335,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":583,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":629,"com.google.gson.MixedStreamTest.testReadInvalidState":593,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":169,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":39,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":563,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":181,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":369,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":508,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":605,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":204,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":386,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":166,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":545,"com.google.gson.functional.MapTest.testMapDeserialization":325,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":540,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":478,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":624,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":95,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":114,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":324,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":98,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":350,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":56,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":219,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":225,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":145,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":452,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":462,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":528,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":38,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":54,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":153,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":177,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":334,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":566,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":355,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":305,"com.google.gson.functional.PrimitiveTest.testShortSerialization":433,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":353,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":422,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":471,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":392,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":1,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":368,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":233,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":268,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":58,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":185,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":320,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":385,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":441,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":623,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":77,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":556,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":244,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":448,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":442,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":276,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":68,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":113,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":146,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":516,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":117,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":70,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":398,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":150,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":126,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":272,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":47,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":512,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":226,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":458,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":302,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":94,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":546,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":375,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":534,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":551,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":110,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":280,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":362,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":428,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":400,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":445,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":72,"com.google.gson.JsonPrimitiveTest.testEquals":614,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":97,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":267,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":195,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":182,"com.google.gson.functional.MapTest.testGeneralMapField":83,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":124,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":489,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":447,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":87,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":201,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":558,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":337,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":349,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":517,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":424,"com.google.gson.MixedStreamTest.testReadMixedStreamed":243,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":327,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":529,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":215,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":248,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":291,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":405,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":470,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":255,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":228,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":328,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":573,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":317,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":304,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":446,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":200,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":7,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":543,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":312,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":197,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":515,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":354,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":608,"com.google.gson.functional.ObjectTest.testNestedDeserialization":151,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":310,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":454,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":456,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":192,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":104,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":468,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":444,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":206,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":275,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":329,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":582,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":29,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":431,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":46,"com.google.gson.JavaSerializationTest.testListIsSerializable":257,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":66,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":78,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":293,"com.google.gson.functional.ObjectTest.testNullSerialization":626,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":49,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":572,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":321,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":82,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":360,"com.google.gson.functional.MapTest.testInterfaceTypeMap":81,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":461,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":109,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":363,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":19,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":53,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":463,"com.google.gson.MixedStreamTest.testReadClosed":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":518,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":466,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":379,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":611,"com.google.gson.MixedStreamTest.testWriteClosed":242,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":194,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":285,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":112,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":569,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":35,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":108,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":209,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":148,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":205,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":230,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":115,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":128,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":284,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":8,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":602,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":408,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":10,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":51,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":552,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":484,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":164,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":449,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":384,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":524,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":163,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":486,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":208,"com.google.gson.functional.CollectionTest.testQueueDeserialization":295,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":390,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":406,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":587,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":481,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":562,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":79,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":536,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":93,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":149,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":278,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":239,"com.google.gson.functional.MapTest.testRawMapSerialization":339,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":550,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":44,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":137,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":184,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":0,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":249,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":251,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":262,"com.google.gson.functional.PrimitiveTest.testByteSerialization":430,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":491,"com.google.gson.ObjectTypeAdapterTest.testSerialize":14,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":630,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":91,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":374,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":604,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":64,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":601,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":502,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":610,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":234,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":36,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":245,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":584,"com.google.gson.functional.MapTest.testMapWithQuotes":330,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":523,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":586,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":297,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":514,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":309,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":188,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":520,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":170,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":351,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":27,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":147,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":179,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":533,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":627,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":129,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":525,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":6,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":535,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":427,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":622,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":290,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":494,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":277,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":560,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":48,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":198,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":612,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":571,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":187,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":264,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":40,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":364,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":306,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":136,"com.google.gson.functional.ObjectTest.testNestedSerialization":138,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":73,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":348,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":378,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":590,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":485,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":338,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":183,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":222,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":254,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":596,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":132,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":483,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":440,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":111,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":227,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":380,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":598,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":617,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":224,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":5,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":589,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":497,"com.google.gson.functional.CollectionTest.testSetSerialization":62,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":88,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":71,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":476,"com.google.gson.functional.StringTest.testStringValueSerialization":592,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":238,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":23,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":165,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":281,"com.google.gson.MixedStreamTest.testWriteInvalidState":241,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":488,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":625,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":383,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":203,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":389,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":530,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":235,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":158,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":199,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":465,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":554,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":631,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":323,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":472,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":493},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a6c357da-3e34-11e6-9786-673825faac83","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a6c3a5fb-3e34-11e6-9786-85ec46352ea8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"a6c3a5fc-3e34-11e6-9786-31162dbb6e02","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"toResolve","to":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"a6c3cd0d-3e34-11e6-9786-135acdc47345","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a6c3f41e-3e34-11e6-9786-293cce08149c","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"a6c3f41f-3e34-11e6-9786-a1220179212e","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[0,1,2],"tindex":"a6c3f420-3e34-11e6-9786-cd49c0984cc2","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[3,4,5,6,7,8,9,10],"tindex":"a6c41b31-3e34-11e6-9786-a5d96b6d1b37","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"a6c44242-3e34-11e6-9786-b7d045951502","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"a6c44243-3e34-11e6-9786-95ed7a14d670","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"a6c44244-3e34-11e6-9786-556430f89e00","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"a6c46955-3e34-11e6-9786-d3c38ef4fe2b","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(jsonElement instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[],"tindex":"a6c46956-3e34-11e6-9786-2f59dbcdb2e6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a6c49067-3e34-11e6-9786-7bcc73f9e070","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:915","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"a6c49068-3e34-11e6-9786-95421e97c407","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((timeStyle == dateStyle) || (p == dateStyle)) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[],"tindex":"a6c4b779-3e34-11e6-9786-2fd5b382e310","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isAssignableFrom(raw)) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"raw","classOfPrimitive":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl","sourcecode":"type.equals(from)"},"failures":[],"tindex":"a6c4b77a-3e34-11e6-9786-01d6b66d5f96","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,1,227,228,229,230,3,4,5,6,7,8,9,10,231,232,233,234,235,236,237,238,239,240,241,242,243,244],"tindex":"a6c4de8b-3e34-11e6-9786-53ccfbdc39ee","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type == type) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"type","context":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[245,11,246,247,248,249,250,251,12,13,252,14,253,15,254,255,256,257,258,259,260,261,262,16,17,263,264,265,18,266,267,268,269,270,271,19,20,272,273,274,21,275,22,23,276,24,25,26,27,28,277,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,278,58,279,280,281,282,283,284,285,286,59,287,288,289,290,60,61,291,292,62,293,294,295,63,64,296,65,66,297,67,298,299,300,68,69,301,70,302,71,303,304,305,306,307,308,309,310,72,73,74,75,76,77,78,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,79,326,327,328,329,330,331,332,333,80,334,335,336,81,337,82,83,338,339,340,84,341,342,343,344,345,346,85,86,347,87,88,89,90,91,348,349,92,93,94,95,96,350,351,352,97,98,99,100,353,101,0,354,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,117,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,118,119,120,121,122,123,124,125,126,127,128,129,451,130,131,132,133,452,134,453,135,136,137,138,454,139,140,141,142,455,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,456,158,159,160,161,162,163,164,165,166,167,168,169,457,170,171,172,458,459,460,461,173,462,463,464,465,466,467,468,469,470,471,472,174,175,176,473,474,475,177,178,476,477,478,179,479,180,181,182,183,480,184,185,186,187,188,189,481,190,191,482,192,193,194,195,483,196,197,484,198,199,485,200,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,201,202,203,504,505,506,507,508,204,205,206,207,208,209,509,210,211,212,213,510,511,512,513,214,514,215,216,217,218,219,220,221,222,223,515,516,517,518,519,224,225,520,521,522,523,524,525,526,527,528,226,529,530,531,1,532,533,534,535,536,537,227,538,539,540,541,542,543,544,228,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,229,560,561,562,563,230,564,565,566,2,567,568,569,570,3,4,5,6,7,8,9,10,571,572,573,231,232,574,233,234,235,236,237,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,238,239,593,240,241,594,595,596,242,243,244,597,598,599],"tindex":"a6c4de8c-3e34-11e6-9786-2372f733bd47","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:581","type":"CtBinaryOperatorImpl","sourcecode":"context == (com.google.gson.stream.JsonScope.NONEMPTY_OBJECT)"},"failures":[],"tindex":"a6c5059d-3e34-11e6-9786-17589e987d92","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"newTop","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"a6c5059e-3e34-11e6-9786-61568a928fc2","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"a6c5059f-3e34-11e6-9786-8faa3477e307","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"a6c52cb0-3e34-11e6-9786-f95572a4b1b3","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a6c52cb1-3e34-11e6-9786-33e97d4b6cfa","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a6c52cb2-3e34-11e6-9786-f1c3a2a4dbca","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"a6c52cb3-3e34-11e6-9786-2babaf91db19","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[600,77],"tindex":"a6c553c4-3e34-11e6-9786-a15740ba6fdc","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:251","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[],"tindex":"a6c553c5-3e34-11e6-9786-df68d89a3531","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"a6c553c6-3e34-11e6-9786-31ad68cd2980","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a6c553c7-3e34-11e6-9786-53f413fb6ed0","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[218,221,519,526,567,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616],"tindex":"a6c57ad8-3e34-11e6-9786-a10dd8f56d5d","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isString()) {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[],"tindex":"a6c57ad9-3e34-11e6-9786-47c0cefa5dab","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"a6c57ada-3e34-11e6-9786-0d6935bbf9c9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a6c57adb-3e34-11e6-9786-69e48041cf3d","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a6c5a1ec-3e34-11e6-9786-f5a412c070b6","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"a6c5a1ed-3e34-11e6-9786-57f6245c57b7","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a6c5a1ee-3e34-11e6-9786-5789763e4367","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[245,11,246,247,248,12,13,617,15,618,619,254,620,258,259,260,261,262,16,17,621,263,264,265,622,18,266,267,268,269,270,271,19,20,272,273,274,21,275,22,23,276,24,25,26,27,28,277,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,278,58,279,280,281,282,283,284,285,286,59,287,288,289,290,60,61,291,292,62,293,294,623,295,63,64,296,65,66,297,67,298,299,300,68,69,301,70,302,71,303,304,305,306,307,308,309,310,72,73,74,75,76,77,78,311,312,313,314,624,315,316,317,318,319,320,321,322,323,324,325,79,326,327,328,329,330,331,332,333,80,334,335,336,81,337,82,83,338,339,340,84,341,342,343,344,345,346,85,86,347,87,88,89,90,91,348,349,92,93,94,95,96,350,351,352,97,98,99,100,353,101,0,354,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,117,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,118,119,120,121,122,123,124,125,126,127,128,625,129,451,130,131,626,132,627,133,452,134,453,135,136,137,138,454,139,140,141,142,455,628,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,456,629,158,159,160,161,162,163,169,457,170,171,172,458,459,460,461,173,462,463,464,465,466,467,468,469,470,471,472,174,175,176,473,474,475,177,178,476,477,478,179,479,180,181,182,183,480,184,185,186,187,189,481,190,191,482,192,193,194,195,483,196,197,484,198,199,485,200,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,201,202,203,504,505,506,507,508,204,205,206,207,208,209,509,210,211,212,213,510,511,512,513,214,514,215,216,217,218,219,220,221,222,223,515,516,517,518,519,224,225,520,521,522,523,524,525,526,527,528,226,529,530,531,1,532,533,534,535,536,537,227,538,539,540,541,542,543,544,228,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,229,560,561,562,563,230,564,565,566,2,567,568,569,570,3,4,5,6,7,8,9,10,571,572,573,231,232,574,233,234,235,236,237,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,238,630,631,239,593,632,240,633,241,594,595,596,242,243,244,597,598,599],"tindex":"a6c5a1ef-3e34-11e6-9786-253d701a4be6","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:828","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BUFFERED)"},"failures":[],"tindex":"a6c5c900-3e34-11e6-9786-3bdcc4fdf56e","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230036581/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":39,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
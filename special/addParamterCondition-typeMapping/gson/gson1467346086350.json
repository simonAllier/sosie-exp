{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":198,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":232,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":101,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":20,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":51,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":190,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":30,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":106,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":35,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":116,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":61,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":184,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":185,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":14,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":114,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":188,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":151,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":72,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":209,"com.google.gson.functional.ObjectTest.testSingletonLists":112,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":109,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":43,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":99,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":216,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":8,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":127,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":194,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":87,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":141,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":180,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":159,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":160,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":18,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":105,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":89,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":145,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":119,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":202,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":29,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":186,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":207,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":46,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":213,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":169,"com.google.gson.functional.JsonTreeTest.testToJsonTree":94,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":214,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":177,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":183,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":79,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":217,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":210,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":25,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":54,"com.google.gson.functional.MapTest.testGeneralMapField":49,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":117,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":81,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":57,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":243,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":124,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":17,"com.google.gson.MixedStreamTest.testReadMixedStreamed":7,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":246,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":135,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":168,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":42,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":96,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":32,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":138,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":26,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":107,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":163,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":230,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":204,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":170,"com.google.gson.functional.ObjectTest.testNestedDeserialization":146,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":86,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":132,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":22,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":171,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":155,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":134,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":9,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":120,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":220,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":191,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":197,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":67,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":44,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":224,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":174,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":70,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":64,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":110,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":227,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":48,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":11,"com.google.gson.functional.MapTest.testInterfaceTypeMap":47,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":245,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":84,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":176,"com.google.gson.functional.CollectionTest.testSetDeserialization":187,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":152,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":235,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":123,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":231,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":71,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":128,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":69,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":13,"com.google.gson.MixedStreamTest.testWriteClosed":6,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":24,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":100,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":118,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":179,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":73,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":175,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":158,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":143,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":154,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":19,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":221,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":34,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":121,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":182,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":164,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":21,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":52,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":38,"com.google.gson.functional.MapTest.testComplexKeysSerialization":50,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":166,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":229,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":237,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":83,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":236,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":215,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":91,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":85,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":233,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":157,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":102,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":165,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":192,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":45,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":136,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":137,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":97,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":144,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":3,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":130,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":222,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":23,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":56,"com.google.gson.ObjectTypeAdapterTest.testSerialize":2,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":95,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":62,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":241,"com.google.gson.functional.FieldNamingTest.testIdentity":39,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":36,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":74,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":203,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":139,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":93,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":111,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":196,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":148,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":199,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":150,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":240,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":65,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":142,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":103,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":15,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":78,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":122,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":4,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":60,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":33,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":98,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":68,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":126,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":242,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":63,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":162,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":88,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":228,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":226,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":205,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":16,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":201,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":200,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":172,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":129,"com.google.gson.functional.ObjectTest.testNestedSerialization":131,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":218,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":195,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":55,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":104,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":113,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":125,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":66,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":82,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":115,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":212,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":178,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":41,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":58,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":27,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":133,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":161,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":149,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":77,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":53,"com.google.gson.functional.CollectionTest.testSetSerialization":189,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":244,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":90,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":40,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":193,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":238,"com.google.gson.MixedStreamTest.testWriteInvalidState":5,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":153,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":59,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":239,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":219,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":37,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":80,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":208,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":181,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":211,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":206,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":234,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":28,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":75,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":223,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":173,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":76},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246],"tindex":"69ef3fa9-3f41-11e6-855f-c925376a29b9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isAssignableFrom(raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345883750/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"raw","classOfPrimitive":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"69f1899a-3f41-11e6-855f-c1c035336cd6","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"69f1b0ab-3f41-11e6-855f-8bf4b2da20b9","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345883750/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"69f1b0ac-3f41-11e6-855f-3900163f61d2","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345883750/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"69f2c21d-3f41-11e6-855f-93e8fe954e65","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"69f3103e-3f41-11e6-855f-8579f22c7fad","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"69f3103f-3f41-11e6-855f-4bb838ea2687","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"bound","type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"69f33750-3f41-11e6-855f-e15f876f11ea","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"o","java.sql.Timestamp.class":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"69f35e61-3f41-11e6-855f-5bf8dcb5af86","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1439","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"69f35e62-3f41-11e6-855f-d96525532f40","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\r') {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467345883750/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":10,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":319,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":356,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":164,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":241,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":2,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":141,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":341,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":5,"com.google.gson.functional.PrimitiveTest.testShortSerialization":92,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":331,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":281,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":314,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":115,"com.google.gson.MixedStreamTest.testWriteLenient":37,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":45,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":133,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":359,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":6,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":299,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":301,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":62,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":309,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":152,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":364,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":272,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":96,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":313,"com.google.gson.functional.ObjectTest.testSingletonLists":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":129,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":153,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":342,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":52,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":234,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":50,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":99,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":43,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":316,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":266,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":106,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":287,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":220,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":24,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":239,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":362,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":238,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":352,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":307,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":193,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":325,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":127,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":279,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":330,"com.google.gson.functional.EnumTest.testEnumCaseMapping":363,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":27,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":117,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":292,"com.google.gson.functional.JsonTreeTest.testToJsonTree":15,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":332,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":244,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":21,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":23,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":113,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":210,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":97,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":335,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":327,"com.google.gson.JsonPrimitiveTest.testEquals":377,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":328,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":358,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":306,"com.google.gson.functional.MapTest.testGeneralMapField":169,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":180,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":212,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":189,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":194,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":134,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":167,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":30,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":67,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":107,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":230,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":86,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":258,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":277,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":374,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":73,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":29,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":59,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":310,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":143,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":231,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":280,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":125,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":77,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":154,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":98,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":185,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":223,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":128,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":105,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":289,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":124,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":355,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":323,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":375,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":47,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":227,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":262,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":321,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":18,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":174,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":84,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":278,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":284,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":181,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":263,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":40,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":338,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":378,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":69,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":318,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":201,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":90,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":379,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":294,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":204,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":10,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":312,"com.google.gson.functional.ObjectTest.testNullSerialization":255,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":132,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":66,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":123,"com.google.gson.functional.MapTest.testInterfaceTypeMap":166,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":373,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":196,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":296,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":273,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":361,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":370,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":254,"com.google.gson.functional.EnumTest.testEnumSet":357,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":199,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":205,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":108,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":158,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":376,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":259,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":56,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":203,"com.google.gson.MixedStreamTest.testWriteClosed":39,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":237,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":274,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":305,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":87,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":251,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":206,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":295,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":17,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":267,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":283,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":339,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":100,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":349,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":140,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":252,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":298,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":304,"com.google.gson.functional.MapTest.testMapSerialization":163,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":102,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":147,"com.google.gson.functional.MapTest.testSerializeMaps":157,"com.google.gson.functional.MapTest.testComplexKeysSerialization":172,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":290,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":308,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":130,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":192,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":365,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":214,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":71,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":334,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":12,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":178,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":215,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":16,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":74,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":235,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":138,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":242,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":315,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":119,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":219,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":232,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":95,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":300,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":33,"com.google.gson.functional.MapTest.testRawMapSerialization":171,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":175,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":195,"com.google.gson.functional.PrettyPrintingTest.testMap":240,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":260,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":302,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":350,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":110,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":42,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":120,"com.google.gson.functional.MapTest.testMapSerializationEmpty":173,"com.google.gson.functional.CollectionTest.testQueueSerialization":303,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":333,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":1,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":3,"com.google.gson.functional.PrimitiveTest.testByteSerialization":89,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":182,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":233,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":150,"com.google.gson.functional.MapTest.testMapOfMapSerialization":162,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":75,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":228,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":0,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":60,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":7,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":80,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":369,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":225,"com.google.gson.functional.FieldNamingTest.testIdentity":148,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":343,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":188,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":145,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":207,"com.google.gson.functional.MapTest.testMapWithQuotes":161,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":111,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":8,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":14,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":248,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":317,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":216,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":226,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":58,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":268,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":109,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":344,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":78,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":271,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":32,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":142,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":368,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":200,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":94,"com.google.gson.functional.MapTest.testMapSubclassSerialization":156,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":246,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":63,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":116,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":191,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":34,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":197,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":135,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":202,"com.google.gson.functional.EnumTest.testEnumSubclass":360,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":112,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":44,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":65,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":371,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":118,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":288,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":236,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":218,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":136,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":179,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":353,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":324,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":64,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":320,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":224,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":31,"com.google.gson.functional.ObjectTest.testNestedSerialization":261,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":336,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":70,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":229,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":76,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":104,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":137,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":177,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":247,"com.google.gson.MixedStreamTest.testWriteNulls":35,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":187,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":38,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":54,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":183,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":256,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":222,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":250,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":22,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":285,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":28,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":165,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":345,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":269,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":347,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":209,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":139,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":186,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":176,"com.google.gson.functional.CollectionTest.testSetSerialization":311,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":221,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":243,"com.google.gson.functional.StringTest.testStringValueSerialization":348,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":149,"com.google.gson.JsonParserTest.testParseMixedArray":41,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":366,"com.google.gson.MixedStreamTest.testWriteInvalidState":36,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":68,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":253,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":282,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":49,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":72,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":190,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":367,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":126,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":122,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":146,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":211,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":245,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":155,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":61,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":159,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":297,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":329,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":326,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":13,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":48,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":275,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":131,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":257,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":265,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":151,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":351,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":198,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":26,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":184},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1cd4a059-3f02-11e6-bf67-7f8513f863fe","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1cd53c9a-3f02-11e6-bf67-49c2b0f91ea9","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == subclass) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass","rawSupertype":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1cd563ab-3f02-11e6-bf67-afed25baccff","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"array","typeOfT":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"1cd58abc-3f02-11e6-bf67-bb29e4adfde1","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls == cls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls","rawSupertype":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1cd58abd-3f02-11e6-bf67-6344b150d6c1","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1cd5b1ce-3f02-11e6-bf67-f5c564967914","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"1cd5d8df-3f02-11e6-bf67-bd632df218a1","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1cd5fff0-3f02-11e6-bf67-a779db8e8f2c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1cd5fff1-3f02-11e6-bf67-db881ecccd7f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1cd62702-3f02-11e6-bf67-0f2bce0d0d45","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1cd62703-3f02-11e6-bf67-595a18c7c5aa","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if ((b != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl"},"failures":[26],"tindex":"1cd64e14-3f02-11e6-bf67-8d6238632b45","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1cd64e15-3f02-11e6-bf67-9da9adc8f649","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1cd67526-3f02-11e6-bf67-8d75100bb276","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"bound","b":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl"},"failures":[],"tindex":"1cd67527-3f02-11e6-bf67-a36a64efa59d","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"1cd69c38-3f02-11e6-bf67-03719ad6298f","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,1,2,3,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,4,102,103,104,105,106,107,108,109,110,111,112,113,26,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,5,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,6,7,8,9,10,200,11,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,12,13,14,15,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,16,17,286,287,288,289,290,291,292,293,18,19,20,294,295,296,21,22,297,298,23,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,24,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,25,372,373,374],"tindex":"1cd6c349-3f02-11e6-bf67-e3f1e84f8a26","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[375,376,138],"tindex":"1cd7116a-3f02-11e6-bf67-f330eec32e81","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl"},"failures":[377,378],"tindex":"1cd7116b-3f02-11e6-bf67-5900f3a0a588","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((com.google.gson.JsonPrimitive.this) == obj) {\n                        return true;\n                    } \n                    if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                        return false;\n                    } \n                    com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n                    if ((java.lang.Object) == null) {\n                        return (other.java.lang.Object) == null;\n                    } \n                    if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                        return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n                    } \n                    if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                        double double = getAsNumber().doubleValue();\n                        double double = other.getAsNumber().doubleValue();\n                        return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n                    } \n                    return java.lang.Object.equals(other.java.lang.Object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonStreamParser:82","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1cd7387c-3f02-11e6-bf67-89fdff51199d","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1cd75f8d-3f02-11e6-bf67-fb586d611cc7","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type == type) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"type","java.util.Date.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1cd7d4be-3f02-11e6-bf67-b5c665eb1ff2","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (obj == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((com.google.gson.JsonPrimitive.this) == obj) {\n                        return true;\n                    } \n                    if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                        return false;\n                    } \n                    com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n                    if ((java.lang.Object) == null) {\n                        return (other.java.lang.Object) == null;\n                    } \n                    if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                        return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n                    } \n                    if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                        double double = getAsNumber().doubleValue();\n                        double double = other.getAsNumber().doubleValue();\n                        return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n                    } \n                    return java.lang.Object.equals(other.java.lang.Object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"1cd7fbcf-3f02-11e6-bf67-fb6e1897e7de","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl"},"failures":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,46,1,2,3,54,56,57,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,104,105,106,107,108,109,110,111,112,113,26,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,161,162,163,164,165,166,167,168,169,171,172,173,174,175,5,176,177,178,179,180,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,198,199,6,7,8,9,10,200,11,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,12,13,14,15,228,229,230,231,232,233,234,235,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,16,17,286,287,288,289,290,291,292,293,18,19,20,294,295,296,21,22,297,298,23,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,24,321,322,323,324,326,327,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,379,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,25,372,373,374],"tindex":"1cd822e0-3f02-11e6-bf67-8941d0249483","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if ((!serializeNulls) && (!serializeNulls)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"serializeNulls","lenient":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl"},"failures":[],"tindex":"1cd87101-3f02-11e6-bf67-e799eca4d363","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"1cd89812-3f02-11e6-bf67-a7c7da037d84","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467318360492/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
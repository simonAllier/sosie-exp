{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":59,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":307,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":126,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":487,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":82,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":383,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":317,"com.google.gson.MixedStreamTest.testWriteLenient":477,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":286,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":30,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":97,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":104,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":365,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":81,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":264,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":214,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":23,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":335,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":356,"com.google.gson.functional.ObjectTest.testSingletonLists":182,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":284,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":308,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":74,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":373,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":423,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":2,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":51,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":231,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":352,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":66,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":228,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":42,"com.google.gson.functional.EnumTest.testEnumCaseMapping":432,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":306,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":479,"com.google.gson.functional.JsonTreeTest.testToJsonTree":406,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":236,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":50,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":10,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":24,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":468,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":139,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":12,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":435,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":202,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":371,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":174,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":428,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":189,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":13,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":226,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":131,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":376,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":427,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":295,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":135,"com.google.gson.JsonParserTest.testParseString":20,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":167,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":161,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":195,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":283,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":318,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":95,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":63,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":350,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":452,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":168,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":194,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":249,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":71,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":299,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":369,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":43,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":86,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":153,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":486,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":401,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":359,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":87,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":279,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":387,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":130,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":386,"com.google.gson.functional.CollectionTest.testSetDeserialization":349,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":215,"com.google.gson.functional.EnumTest.testEnumSet":75,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":186,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":334,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":440,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":445,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":190,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":322,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":333,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":389,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":223,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":325,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":171,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":489,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":300,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":88,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":239,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":402,"com.google.gson.functional.MapTest.testMapSerialization":447,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":393,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":391,"com.google.gson.functional.MapTest.testSerializeMaps":117,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":304,"com.google.gson.functional.MapTest.testComplexKeysSerialization":353,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":259,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":204,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":326,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":145,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":321,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":346,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":430,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":25,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":234,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":83,"com.google.gson.functional.MapTest.testStringKeyDeserialization":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":108,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":177,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":453,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":218,"com.google.gson.functional.PrettyPrintingTest.testMap":232,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":99,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":270,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":429,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":312,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":276,"com.google.gson.functional.CollectionTest.testQueueSerialization":434,"com.google.gson.functional.MapTest.testMapSerializationEmpty":451,"com.google.gson.functional.MapTest.testMapOfMapSerialization":120,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":159,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":164,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":441,"com.google.gson.functional.FieldNamingTest.testIdentity":305,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":309,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":35,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":241,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":378,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":64,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":85,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":181,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":439,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":67,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":128,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":310,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":162,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":384,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":70,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":473,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":176,"com.google.gson.functional.MapTest.testMapSubclassSerialization":444,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":56,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":341,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":0,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":220,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":415,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":319,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":324,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":332,"com.google.gson.functional.EnumTest.testEnumSubclass":78,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":165,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":372,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":424,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":149,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":127,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":107,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":343,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":200,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":385,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":46,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":69,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":15,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":160,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":328,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":290,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":364,"com.google.gson.MixedStreamTest.testWriteNulls":476,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":463,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":251,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":203,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":330,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":111,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":183,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":357,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":263,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":398,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":121,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":311,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":211,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":340,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":292,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":53,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":152,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":482,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":8,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":260,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":156,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":208,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":470,"com.google.gson.functional.MapTest.testMapDeserialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":278,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":237,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":443,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":355,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":147,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":446,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":141,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":138,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":52,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":347,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":410,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":188,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":196,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":90,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":221,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":271,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":339,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":96,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":199,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":233,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":448,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":294,"com.google.gson.functional.PrimitiveTest.testShortSerialization":456,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":143,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":230,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":316,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":301,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":77,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":14,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":348,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":11,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":238,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":38,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":178,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":438,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":36,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":358,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":419,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":457,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":84,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":197,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":351,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":362,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":268,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":363,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":408,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":109,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":381,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":368,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":80,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":92,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":266,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":411,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":216,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":137,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":282,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":273,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":404,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":144,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":48,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":163,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":179,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":115,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":76,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":140,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":396,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":54,"com.google.gson.functional.MapTest.testGeneralMapField":124,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":367,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":248,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":129,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":217,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":287,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":449,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":134,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":464,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":170,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":17,"com.google.gson.MixedStreamTest.testReadMixedStreamed":418,"com.google.gson.JsonObjectTest.testDeepCopy":27,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":157,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":68,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":403,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":436,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":400,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":229,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":281,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":41,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":297,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":180,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":245,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":4,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":280,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":490,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":242,"com.google.gson.functional.ObjectTest.testNestedDeserialization":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":442,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":193,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":460,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":394,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":45,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":227,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":262,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":481,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":331,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":173,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":91,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":33,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":320,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":437,"com.google.gson.functional.ObjectTest.testNullSerialization":459,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":94,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":39,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":123,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":150,"com.google.gson.functional.MapTest.testInterfaceTypeMap":122,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":219,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":360,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":79,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":461,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":269,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":225,"com.google.gson.MixedStreamTest.testWriteClosed":417,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":101,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":395,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":184,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":361,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":488,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":336,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":146,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":62,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":198,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":261,"com.google.gson.stream.JsonWriterTest.testLongs":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":293,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":148,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":185,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":100,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":5,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":6,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":344,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":471,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":60,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":206,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":155,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":405,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":205,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":246,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":61,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":483,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":158,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":291,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":413,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":118,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":275,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":136,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":380,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":98,"com.google.gson.functional.MapTest.testRawMapSerialization":125,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":414,"com.google.gson.JsonParserTest.testParseReader":19,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":89,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":191,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":392,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":454,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":16,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":73,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":250,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":426,"com.google.gson.functional.PrimitiveTest.testByteSerialization":455,"com.google.gson.ObjectTypeAdapterTest.testSerialize":323,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":474,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":132,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":31,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":255,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":302,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":337,"com.google.gson.functional.MapTest.testMapWithQuotes":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":466,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":106,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":114,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":465,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":213,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":329,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":379,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":390,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":272,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":258,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":467,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":274,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":296,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":431,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":289,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":433,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":93,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":243,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":7,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":485,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":9,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":57,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":29,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":491,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":113,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":374,"com.google.gson.JsonObjectTest.testAddingStringProperties":28,"com.google.gson.functional.ObjectTest.testNestedSerialization":192,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":116,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":133,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":154,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":244,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":450,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":55,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":407,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":72,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":478,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":187,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":49,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":412,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":480,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":409,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":3,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":313,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":254,"com.google.gson.functional.CollectionTest.testSetSerialization":105,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":354,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":110,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":235,"com.google.gson.functional.StringTest.testStringValueSerialization":314,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":315,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":207,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":327,"com.google.gson.MixedStreamTest.testWriteInvalidState":416,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":458,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":257,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":469,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":18,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":303,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":201,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":22,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":397,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":224,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":472,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":475,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":252},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"844825b9-3e82-11e6-aca6-19ad2e81d43a","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.JsonPrimitive) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"844873da-3e82-11e6-aca6-a7856d4e1d56","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[],"tindex":"84489aeb-3e82-11e6-aca6-4f40c89adc30","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (counter == counter) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"counter","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"counter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"84489aec-3e82-11e6-aca6-4f5b574d9dad","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"84489aed-3e82-11e6-aca6-b33932ec606c","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","to":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:795","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME)"},"failures":[],"tindex":"84489aee-3e82-11e6-aca6-a5b27b00bd57","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8448c1ff-3e82-11e6-aca6-bb36999f9e64","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"8448c200-3e82-11e6-aca6-2d273f32fd1f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"8448c201-3e82-11e6-aca6-edadeb4fa68a","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o","value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"8448e912-3e82-11e6-aca6-83c54aba36ae","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"8448e913-3e82-11e6-aca6-17bd454be1a4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl","sourcecode":"requireExpose"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"tindex":"8448e914-3e82-11e6-aca6-035481d99d1b","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"84493735-3e82-11e6-aca6-fdda43950871","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,53,55,238,56,58,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,0,1,296,4,6,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315],"tindex":"84493736-3e82-11e6-aca6-73202a0d3191","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"84495e47-3e82-11e6-aca6-d10ea95172e0","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"84498558-3e82-11e6-aca6-cb4d2f02cf20","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        {\n            if (!(clazz.isInterface())) {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[316],"tindex":"8449ac69-3e82-11e6-aca6-e7b38e3d9d40","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:861","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_FALSE)"},"failures":[],"tindex":"8449ac6a-3e82-11e6-aca6-83385f9edb92","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_FALSE":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8449ac6b-3e82-11e6-aca6-99c7f90c99b7","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"8449ac6c-3e82-11e6-aca6-b9905cb105e5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a != null) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"8449ac6d-3e82-11e6-aca6-53a1367bbe4c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if ((name != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[108,109,113,317,318,319,320],"tindex":"8449d37e-3e82-11e6-aca6-5bb60802610d","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[321,25,36],"tindex":"8449d37f-3e82-11e6-aca6-cff1a7b49a94","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[322,69,70,323,71,324,74,325,79,326,82,83,327,328,85,86,329,330,331,332,333,87,334,335,336,337,338,339,340,341,342,88,89,90,91,92,93,94,343,344,95,345,96,346,347,97,348,102,349,104,105,30,31,32,33,350,351,107,109,110,115,116,317,318,319,36,320,118,352,122,123,124,353,126,127,129,354,130,131,132,135,136,137,355,356,140,141,357,142,144,145,358,45,46,47,359,146,360,48,49,361,362,147,148,50,363,181,182,364,365,183,366,367,184,368,369,185,370,186,371,187,372,373,190,374,191,192,375,194,376,377,195,378,196,197,379,198,380,381,382,383,199,384,385,200,51,201,202,203,204,386,205,206,207,208,209,210,211,213,214,215,220,387,388,389,233,234,390,391,53,54,55,392,238,56,57,58,239,59,393,394,240,395,396,241,242,243,397,245,256,398,257,260,261,262,263,61,62,399,400,265,401,402,403,404,63,405,267,64,406,407,408,409,410,411,316,412,281,288,293,1,2,3,296,4,5,413,6,298,299,301,302,303,304,305,315,414,415,416,417,418,419],"tindex":"8449fa90-3e82-11e6-aca6-63918d55d5cc","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"844a21a1-3e82-11e6-aca6-993366b721f7","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[420,421,422,423,424,273,280,282,283],"tindex":"844a21a2-3e82-11e6-aca6-cb572e66a543","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:556","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[88,93,343,347,301,304],"tindex":"844a21a3-3e82-11e6-aca6-3d491bb6a61e","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"indexOfSubstring","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"indexOfSubstring"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[322,66,67,68,16,425,426,69,70,71,427,428,72,429,423,424,73,74,430,431,325,75,76,77,78,79,80,432,81,82,83,84,85,86,329,433,331,332,333,87,334,336,337,338,340,342,88,89,90,92,93,94,95,96,97,98,348,99,434,100,101,435,102,103,104,436,105,437,438,30,31,439,32,33,106,440,107,108,109,110,111,112,113,441,114,442,115,116,443,444,117,445,446,118,119,120,447,448,121,122,449,123,124,450,125,353,451,452,453,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,454,145,45,46,47,359,146,360,48,49,147,148,50,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,455,173,174,456,175,176,177,178,179,180,457,181,182,183,184,185,458,186,459,187,188,189,190,191,192,193,194,195,196,197,198,199,200,51,460,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,461,231,232,233,234,235,236,237,390,53,55,238,56,57,58,239,462,59,393,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,463,255,256,257,258,259,260,261,262,263,61,62,264,265,266,402,404,63,405,267,64,406,407,268,464,269,465,270,466,467,468,271,469,316,272,273,274,275,276,277,278,279,280,281,470,282,283,284,471,472,285,286,287,288,289,290,291,292,293,294,473,295,0,1,296,4,6,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,474,475,414,415,476,416,477,478,417,479,480],"tindex":"844a48b4-3e82-11e6-aca6-e96fe8c8ecea","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"844a48b5-3e82-11e6-aca6-2b0b9191091c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[322,69,70,323,71,324,74,325,79,326,82,83,327,328,85,86,329,330,331,332,333,87,334,335,336,337,338,339,340,341,342,91,97,348,102,349,104,105,30,31,32,33,350,351,107,109,110,115,116,317,318,319,36,320,118,352,122,123,124,353,126,127,129,354,130,131,132,135,136,137,355,356,140,141,357,142,144,145,358,45,46,47,359,146,360,48,49,361,362,147,148,50,363,181,182,364,365,183,366,367,184,368,369,185,370,186,371,187,372,373,190,374,191,192,375,194,376,377,195,378,196,197,379,198,380,381,382,383,199,384,385,200,51,201,202,203,204,386,205,206,207,208,209,210,211,213,214,215,220,387,388,389,233,234,390,391,53,54,55,392,238,56,57,58,239,59,393,394,240,395,396,241,242,243,397,245,256,398,257,260,261,262,263,61,62,399,400,265,401,402,403,404,63,405,267,64,406,407,408,409,410,411,316,412,281,288,293,1,2,3,296,4,5,413,6,298,299,305,315,414,415,416,417,418,419],"tindex":"844a6fc6-3e82-11e6-aca6-edcdedc1fa72","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"844a6fc7-3e82-11e6-aca6-49a59e3aaefa","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"844a96d8-3e82-11e6-aca6-f5c89cfea803","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"844a96d9-3e82-11e6-aca6-5b067e628eaa","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"844abdea-3e82-11e6-aca6-89ab10d1fad5","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"844abdeb-3e82-11e6-aca6-673247933d14","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[322,69,70,323,71,324,74,325,79,326,82,481,83,327,84,328,85,86,329,330,331,332,333,87,334,335,336,337,338,339,340,341,342,88,89,90,91,92,93,94,343,344,95,345,96,346,347,97,348,102,349,104,105,30,31,32,33,350,351,107,109,110,115,116,317,318,319,36,320,118,352,122,123,124,353,126,127,129,354,130,131,132,135,136,137,355,356,140,141,357,142,144,145,358,45,46,47,359,146,360,48,49,361,362,147,148,50,363,181,182,364,365,183,366,367,184,368,369,185,370,186,371,187,372,373,190,374,191,192,375,194,376,377,195,378,196,197,379,198,380,381,382,383,199,384,385,200,51,201,202,203,204,386,205,206,207,208,209,210,211,213,214,215,220,387,388,389,233,234,390,391,53,54,55,392,238,56,57,58,239,59,393,394,240,395,396,241,242,243,397,245,256,398,257,260,261,262,263,61,62,399,400,265,401,402,403,404,63,405,267,64,406,407,408,409,410,411,316,412,281,288,293,1,2,3,296,4,5,413,6,298,299,301,302,303,304,305,315,414,415,416,417,418,419],"tindex":"844ae4fc-3e82-11e6-aca6-81a9fddaeccc","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"844ae4fd-3e82-11e6-aca6-316fb4357331","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[482,483,484,485,486,487,488,489,490,491],"tindex":"844ae4fe-3e82-11e6-aca6-33a2280a9cbd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[464,467,468,286,289,294],"tindex":"844b0c0f-3e82-11e6-aca6-5baf38597b8e","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"844b0c10-3e82-11e6-aca6-43da8daf0c81","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"844b0c11-3e82-11e6-aca6-dd523d174c6f","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        {\n            if (!(clazz.isInterface())) {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263436099/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":41,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
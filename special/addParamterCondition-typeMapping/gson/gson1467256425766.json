{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":234,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":71,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":255,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":3,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":266,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":168,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":51,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":136,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":115,"com.google.gson.MixedStreamTest.testWriteLenient":105,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":159,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":206,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":13,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":148,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":321,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":144,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":145,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":146,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":204,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":262,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":58,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":250,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":324,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":24,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":179,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":47,"com.google.gson.functional.ObjectTest.testSingletonLists":202,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":162,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":125,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":133,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":186,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":314,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":215,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":153,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":196,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":227,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":298,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":299,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":200,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":290,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":155,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":231,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":209,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":238,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":16,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":293,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":101,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":4,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":177,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":70,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":183,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":69,"com.google.gson.GenericArrayTypeTest.testNotEquals":5,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":99,"com.google.gson.stream.JsonWriterTest.testNullStringValue":315,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":184,"com.google.gson.functional.JsonTreeTest.testToJsonTree":288,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":34,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":193,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":199,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":32,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":95,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":157,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":319,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":12,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":180,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":271,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":39,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":259,"com.google.gson.functional.MapTest.testGeneralMapField":167,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":207,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":240,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":124,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":170,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":213,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":73,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":116,"com.google.gson.MixedStreamTest.testReadMixedStreamed":313,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":322,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":320,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":173,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":222,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":65,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":44,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":98,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":175,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":283,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":6,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":295,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":66,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":57,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":224,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":93,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":64,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":160,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":302,"com.google.gson.ParameterizedTypeTest.testNotEquals":110,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":54,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":123,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":40,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":111,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":52,"com.google.gson.functional.ObjectTest.testNestedDeserialization":232,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":152,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":109,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":268,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":79,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":187,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":278,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":221,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":131,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":210,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":307,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":67,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":75,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":141,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":20,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":284,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":143,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":190,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":142,"com.google.gson.JavaSerializationTest.testListIsSerializable":8,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":151,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":163,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":46,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":89,"com.google.gson.functional.ObjectTest.testNullSerialization":1,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":114,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":9,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":81,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":59,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":166,"com.google.gson.functional.MapTest.testInterfaceTypeMap":165,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":252,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":172,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":192,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":243,"com.google.gson.functional.CollectionTest.testSetDeserialization":43,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":87,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":134,"com.google.gson.functional.EnumTest.testEnumSet":11,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":212,"com.google.gson.MixedStreamTest.testReadClosed":104,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":23,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":49,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":112,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":216,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":22,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":127,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":254,"com.google.gson.MixedStreamTest.testWriteClosed":312,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":270,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":195,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":208,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":25,"com.google.gson.functional.MapTest.testHashMapDeserialization":56,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":36,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":191,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":281,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":229,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":277,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":265,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":10,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":297,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":120,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":198,"com.google.gson.functional.MapTest.testSortedMap":72,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":38,"com.google.gson.functional.MapTest.testMapSerialization":68,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":303,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":267,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":257,"com.google.gson.functional.MapTest.testComplexKeysSerialization":76,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":305,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":42,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":80,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":245,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":135,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":242,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":185,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":285,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":244,"com.google.gson.functional.CollectionTest.testQueueDeserialization":48,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":113,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":256,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":304,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":325,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":137,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":164,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":223,"com.google.gson.functional.MapTest.testStringKeyDeserialization":78,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":176,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":230,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":33,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":309,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":82,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":103,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":218,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":269,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":261,"com.google.gson.functional.CollectionTest.testQueueSerialization":37,"com.google.gson.functional.MapTest.testMapSerializationEmpty":77,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":326,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":0,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":2,"com.google.gson.ObjectTypeAdapterTest.testSerialize":130,"com.google.gson.JavaSerializationTest.testMapIsSerializable":7,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":174,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":41,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":149,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":249,"com.google.gson.functional.FieldNamingTest.testIdentity":308,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":50,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":122,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":225,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":140,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":201,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":287,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":97,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":264,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":235,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":86,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":129,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":248,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":17,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":55,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":228,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":90,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":31,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":263,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":211,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":318,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":251,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":310,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":296,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":132,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":21,"com.google.gson.functional.EnumTest.testEnumSubclass":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":102,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":214,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":169,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":150,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":301,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":154,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":19,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":272,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":91,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":237,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":236,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":30,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":188,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":128,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":217,"com.google.gson.functional.ObjectTest.testNestedSerialization":219,"com.google.gson.JsonObjectTest.testAddingStringProperties":327,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":84,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":158,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":139,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":74,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":260,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":203,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":289,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":94,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":53,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":106,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":92,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":121,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":18,"com.google.gson.CommentsTest.testParseComments":108,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":241,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":182,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":205,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":194,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":282,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":274,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":294,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":119,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":291,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":300,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":85,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":29,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":317,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":107,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":258,"com.google.gson.functional.CollectionTest.testSetSerialization":147,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":171,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":156,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":126,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":35,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":138,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":246,"com.google.gson.MixedStreamTest.testWriteInvalidState":311,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":276,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":247,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":275,"com.google.gson.functional.MapTest.testMapDeserialization":63,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":306,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":239,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":323,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":178,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":62,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":197,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":181,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":273,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":316,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":15,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":292,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":27,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":226,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":61,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":189,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":28,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":88},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[0,1],"tindex":"a809747d-3e70-11e6-a81e-1ff0a235f0d7","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        {\n            if (jsonElement == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(jsonElement, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"a809c29e-3e70-11e6-a81e-cb079d9b6ca4","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a809e9af-3e70-11e6-a81e-e98da699b852","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a809e9b0-3e70-11e6-a81e-8554146da2d4","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"a809e9b1-3e70-11e6-a81e-43543246b2bd","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"tindex":"a80a10c2-3e70-11e6-a81e-41c5fce2da7c","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isInterface()) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a80a10c3-3e70-11e6-a81e-75102274b7fc","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[111,112,113],"tindex":"a80a37d4-3e70-11e6-a81e-b1050b04ffca","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"a80a37d5-3e70-11e6-a81e-a1038951cacb","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[114,115],"tindex":"a80a5ee6-3e70-11e6-a81e-8d513ddd957b","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"a80a5ee7-3e70-11e6-a81e-6d7791a20315","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"a80a85f8-3e70-11e6-a81e-5fa0b1266e2f","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a80a85f9-3e70-11e6-a81e-7ba7bb91745b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:541","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT)"},"failures":[],"tindex":"a80a85fa-3e70-11e6-a81e-e3b7013bfa90","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"modifier","com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a80aad0b-3e70-11e6-a81e-6145c6bd6b9c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[116,117,23,118,119,120,121,90,122,123,124,125,126],"tindex":"a80aad0c-3e70-11e6-a81e-7f7830a77877","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if ((value.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"a80ad41d-3e70-11e6-a81e-97444a4b4ae1","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a80ad41e-3e70-11e6-a81e-a132888dabe3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"a80afb2f-3e70-11e6-a81e-79315a2b5a77","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"a80afb30-3e70-11e6-a81e-cbaa3344aa14","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            if (json == null) {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"a80afb31-3e70-11e6-a81e-91649e97ece7","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"ownerType","java.sql.Timestamp.class":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"a80b2242-3e70-11e6-a81e-a120e97e1782","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"a80b2243-3e70-11e6-a81e-eb22fcd4c844","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[127,128,129,130,131,132,133,117,134,135,136,137,138,139,140,141,17,18,20,21,22,142,23,24,25,26,27,28,29,31,32,143,144,145,118,43,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,70,165,166,167,76,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,120,211,212,213,121,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,85,86,250,87,251,252,253,254,255,256,90,257,258,259,260,261,262,263,91,264,265,266,267,268,269,270,271,122,123,272,273,93,124,274,275,276,277,278,279,280,281,282,283,125,284,96,98,99,100,285,286,287,288,289,290,291,292,293,115,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,126,309,310,311,312,313,314],"tindex":"a80b2244-3e70-11e6-a81e-39ff40aec835","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[315,39,164,165,166,168,177,316,180,181,0,185,190,192,198,246,317,318,115,296],"tindex":"a80b2245-3e70-11e6-a81e-3fa4209f1576","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"a80b4956-3e70-11e6-a81e-7519fd5e3da0","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[319,320,321,2,322,323,324,325,326,327,287],"tindex":"a80b7067-3e70-11e6-a81e-c971fce994a3","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a80b7068-3e70-11e6-a81e-0715ae7add38","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:380","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"a80b7069-3e70-11e6-a81e-41b50b7674d4","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a80b706a-3e70-11e6-a81e-f12b5c4d5840","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"a80b706b-3e70-11e6-a81e-ef80aa2731f0","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        {\n            if (jsonElement == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(jsonElement, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a80b706c-3e70-11e6-a81e-4ba3689dbc53","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"a80b977d-3e70-11e6-a81e-7bdbd40a44fa","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[],"tindex":"a80bbe8e-3e70-11e6-a81e-4d06028c3918","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value <= value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467255867067/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":34,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
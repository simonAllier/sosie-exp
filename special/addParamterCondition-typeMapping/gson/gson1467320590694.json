{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":148,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":13,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":249,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":196,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":330,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":49,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":306,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":176,"com.google.gson.stream.JsonWriterTest.testRepeatedName":327,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":57,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":275,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":310,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":66,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":243,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":71,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":50,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":51,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":53,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":75,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":223,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":251,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":32,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":284,"com.google.gson.functional.ObjectTest.testSingletonLists":80,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":313,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":241,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":197,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":130,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":21,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":225,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":321,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":92,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":25,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":117,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":16,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":190,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":144,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":224,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":298,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":154,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":307,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":157,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":239,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":195,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":231,"com.google.gson.functional.JsonTreeTest.testToJsonTree":140,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":158,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":193,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":125,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":129,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":44,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":269,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":23,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":285,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":9,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":305,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":155,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":219,"com.google.gson.functional.MapTest.testGeneralMapField":48,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":179,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":133,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":11,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":113,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":244,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":257,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":280,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":297,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":332,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":276,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":253,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":172,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":115,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":263,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":309,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":250,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":150,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":175,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":331,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":63,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":273,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":207,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":267,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":90,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":184,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":286,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":240,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":17,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":311,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":28,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":238,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":147,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":110,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":162,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":254,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":119,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":173,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":274,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":105,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":89,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":180,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":6,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":8,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":60,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":259,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":35,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":279,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":295,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":122,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":38,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":74,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":314,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":242,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":47,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":256,"com.google.gson.functional.MapTest.testInterfaceTypeMap":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":237,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":114,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":301,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":124,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":33,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":20,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":56,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":84,"com.google.gson.functional.EnumTest.testEnumSet":218,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":303,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":39,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":227,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":171,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":37,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":166,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":131,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":169,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":216,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":82,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":277,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":40,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":123,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":108,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":93,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":104,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":168,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":99,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":141,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":65,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":83,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":128,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":215,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":101,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":69,"com.google.gson.functional.MapTest.testSerializeMaps":208,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":29,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":217,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":189,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":94,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":135,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":159,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":261,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":137,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":136,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":177,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":107,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":264,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":247,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":58,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":45,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":233,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":151,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":289,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":213,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":283,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":4,"com.google.gson.functional.MapTest.testRawMapSerialization":212,"com.google.gson.functional.PrettyPrintingTest.testMap":191,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":300,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":22,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":87,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":142,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":214,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":228,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":234,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":318,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":181,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":294,"com.google.gson.functional.PrimitiveTest.testByteSerialization":320,"com.google.gson.ObjectTypeAdapterTest.testSerialize":163,"com.google.gson.functional.MapTest.testMapOfMapSerialization":210,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":315,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":265,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":149,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":3,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":72,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":98,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":270,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":324,"com.google.gson.functional.FieldNamingTest.testIdentity":70,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":198,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":186,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":67,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":41,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":109,"com.google.gson.functional.MapTest.testMapWithQuotes":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":323,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":59,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":79,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":288,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":293,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":55,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":308,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":199,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":287,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":268,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":31,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":165,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":235,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":34,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":282,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":15,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":230,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":272,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":188,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":5,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":153,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":205,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":64,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":36,"com.google.gson.functional.EnumTest.testEnumSubclass":221,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":271,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":322,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":255,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":112,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":27,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":232,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":116,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":245,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":145,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":111,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":62,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":77,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":120,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":292,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":164,"com.google.gson.functional.ObjectTest.testNestedSerialization":88,"com.google.gson.JsonObjectTest.testAddingStringProperties":319,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":10,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":260,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":296,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":204,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":266,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":328,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":246,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":12,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":167,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":182,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":85,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":134,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":81,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":290,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":126,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":106,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":200,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":211,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":30,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":202,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":248,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":281,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":185,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":18,"com.google.gson.functional.CollectionTest.testSetSerialization":54,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":118,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":192,"com.google.gson.functional.StringTest.testStringValueSerialization":203,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":152,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":95,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":258,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":103,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":262,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":96,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":187,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":278,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":7,"com.google.gson.stream.JsonWriterTest.testBooleans":325,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":236,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":132,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":194,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":317,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":127,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":156,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":304,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":138,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":170,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":42,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":91,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":252,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":143,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":316,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":302,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":121,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":229,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":183},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:574","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d51b1a6-3f06-11e6-9eaa-4f51a65924c6","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (count == 1) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"0d51ffc7-3f06-11e6-9eaa-35f3d11d86f9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    return (removeInternalByKey(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[0,1,2,3],"tindex":"0d51ffc8-3f06-11e6-9eaa-11a1895b8bb8","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from.equals(from)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166],"tindex":"0d5226d9-3f06-11e6-9eaa-bf120f35965c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.Class) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d524dea-3f06-11e6-9eaa-8760e6a9bd11","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl"},"failures":[167,6,7,8,168,169,170,171,172,173,174,175,176,9,10,177,178,179,180,181,182,183,184,185,186,11,187,188,189,190,191,13,14,192,193,194,195,196,197,198,199,200,201,202,203,204,17,18,19,205,26,27,28,29,30,206,31,32,33,38,207,208,45,209,210,211,46,47,48,212,49,50,213,214,215,216,52,217,53,54,55,218,219,220,221,56,222,223,224,57,58,225,59,60,61,62,226,227,228,229,230,231,232,233,234,235,236,237,238,63,239,240,241,242,243,244,64,245,246,247,248,65,249,250,66,67,68,69,70,75,76,251,78,79,80,81,82,83,84,85,252,253,86,87,88,254,89,90,91,92,93,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,94,95,96,97,98,99,102,103,104,105,106,109,110,111,112,287,113,114,115,288,116,289,117,118,290,291,292,293,123,127,128,294,130,132,133,134,135,136,138,141,142,143,295,144,145,146,147,148,149,296,297,150,151,152,298,299,300,301,153,302,303,154,304,305,155,156,157,306,158,159,164,165,307,308,309],"tindex":"0d524deb-3f06-11e6-9eaa-bfa1de4e5649","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"src","java.util.Date.class":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl"},"failures":[],"tindex":"0d5274fc-3f06-11e6-9eaa-df7e859f9bc6","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[310,311,312,313,314,71,72,73,74,287,116,289,117,292,315,316,317,318,319],"tindex":"0d529c0d-3f06-11e6-9eaa-1d73b52f0798","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof java.lang.reflect.WildcardType) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d529c0e-3f06-11e6-9eaa-d7a2cc1cf5f4","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[320],"tindex":"0d52c31f-3f06-11e6-9eaa-bb5c62f6c0c2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl"},"failures":[321,322,6,17,211,50,53,323,75,76,88,264,324,127,130,149,150,151,162,325,326,327,328,329,330,331,332],"tindex":"0d52c320-3f06-11e6-9eaa-491b11c82137","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d52ea31-3f06-11e6-9eaa-a3918f5ca117","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"0d52ea32-3f06-11e6-9eaa-df29b4e45f41","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[],"tindex":"0d531143-3f06-11e6-9eaa-47f046a0060f","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d531144-3f06-11e6-9eaa-afd19a60b3df","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d533855-3f06-11e6-9eaa-b7f75679ff1e","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:958","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d533856-3f06-11e6-9eaa-03fb4e46869f","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d535f67-3f06-11e6-9eaa-c59614930a54","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d535f68-3f06-11e6-9eaa-41781debc5dc","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d535f69-3f06-11e6-9eaa-f9666a6cf353","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if ((value.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"0d53867a-3f06-11e6-9eaa-43dc92331fb4","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320199355/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
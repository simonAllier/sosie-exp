{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":65,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":128,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":162,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":27,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":127,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":54,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":171,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":180,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":152,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":252,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":43,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":157,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":158,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":95,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":160,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":251,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":100,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":1,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":226,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":243,"com.google.gson.functional.ObjectTest.testSingletonLists":131,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":173,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":116,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":92,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":245,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":194,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":259,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":33,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":215,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":143,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":212,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":224,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":37,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":38,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":205,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":210,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":238,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":52,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":267,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":254,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":77,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":61,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":231,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":184,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":117,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":246,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":120,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":113,"com.google.gson.functional.JsonTreeTest.testToJsonTree":106,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":121,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":72,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":76,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":197,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":88,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":35,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":24,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":118,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":204,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":272,"com.google.gson.functional.MapTest.testGeneralMapField":126,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":253,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":146,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":48,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":107,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":257,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":190,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":169,"com.google.gson.MixedStreamTest.testReadMixedStreamed":193,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":50,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":262,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":237,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":109,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":240,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":199,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":89,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":187,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":141,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":111,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":181,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":40,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":64,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":11,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":114,"com.google.gson.functional.ObjectTest.testNestedDeserialization":268,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":211,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":202,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":66,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":20,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":140,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":31,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":165,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":255,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":57,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":213,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":79,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":241,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":217,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":69,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":82,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":46,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":183,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":63,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":125,"com.google.gson.functional.MapTest.testInterfaceTypeMap":124,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":198,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":49,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":71,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":270,"com.google.gson.functional.CollectionTest.testSetDeserialization":274,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":101,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":32,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":94,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":135,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":189,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":220,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":83,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":137,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":81,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":200,"com.google.gson.MixedStreamTest.testWriteClosed":192,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":93,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":203,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":133,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":223,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":84,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":70,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":23,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":19,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":144,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":26,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":58,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":91,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":75,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":134,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":207,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":28,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":271,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":155,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":41,"com.google.gson.functional.MapTest.testComplexKeysSerialization":247,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":219,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":13,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":148,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":234,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":122,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":104,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":174,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":149,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":221,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":22,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":185,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":2,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":163,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":208,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":55,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":123,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":263,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":110,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":178,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":266,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":8,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":34,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":59,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":138,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":29,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":273,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":3,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":6,"com.google.gson.ObjectTypeAdapterTest.testSerialize":168,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":175,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":108,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":44,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":17,"com.google.gson.functional.FieldNamingTest.testIdentity":156,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":153,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":85,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":10,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":264,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":5,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":56,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":130,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":103,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":186,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":177,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":248,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":99,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":167,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":16,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":78,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":265,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":164,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":96,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":228,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":256,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":9,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":102,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":90,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":233,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":80,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":258,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":47,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":39,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":45,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":51,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":62,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":12,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":97,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":129,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":196,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":249,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":67,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":188,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":179,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":166,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":260,"com.google.gson.JsonObjectTest.testAddingStringProperties":4,"com.google.gson.functional.ObjectTest.testNestedSerialization":139,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":25,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":216,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":151,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":115,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":250,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":136,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":147,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":225,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":132,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":244,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":73,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":239,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":21,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":229,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":261,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":206,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":98,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":87,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":150,"com.google.gson.functional.CollectionTest.testSetSerialization":161,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":209,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":53,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":42,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":14,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":214,"com.google.gson.MixedStreamTest.testWriteInvalidState":191,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":172,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":18,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":195,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":15,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":236,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":30,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":154,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":170,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":145,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":0,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":242,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":74,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":119,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":201,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":222,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":230,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":86,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":142,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":60,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":176,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":68,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":227},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[0,1,2,3,4,5,6],"tindex":"4b59b77e-3e77-11e6-8fc3-3ff35482e502","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:364","type":"CtBinaryOperatorImpl","sourcecode":"delta == 2"},"failures":[],"tindex":"4b5a059f-3e77-11e6-8fc3-032bfbcf086d","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (timeStyle == 2) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"4b5a05a0-3e77-11e6-8fc3-1f9223c2603a","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"a","value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,5,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168],"tindex":"4b5a05a1-3e77-11e6-8fc3-9943822343fc","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[169,170],"tindex":"4b5a2cb2-3e77-11e6-8fc3-6f271e3f8063","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if ((json.length()) == 0) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4b5a2cb3-3e77-11e6-8fc3-4518adc5e0c8","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[171,120],"tindex":"4b5a2cb4-3e77-11e6-8fc3-2dbb9ba0d35c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"4b5a53c5-3e77-11e6-8fc3-855523a5a287","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[172],"tindex":"4b5a53c6-3e77-11e6-8fc3-5b013617ac7d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if ((root != null) && (root != null)) {\n        {\n            if (root != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"4b5a7ad7-3e77-11e6-8fc3-1f53b976b5e2","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"4b5a7ad8-3e77-11e6-8fc3-855537c2dee0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5aa1e9-3e77-11e6-8fc3-1d79d76df5e3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"4b5aa1ea-3e77-11e6-8fc3-a7905f53dd15","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"4b5aa1eb-3e77-11e6-8fc3-ef21f7e87ebd","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"componentType","typeOfT":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"4b5ac8fc-3e77-11e6-8fc3-63a878197a49","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5ac8fd-3e77-11e6-8fc3-d3a434f4b98b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:683","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE)"},"failures":[],"tindex":"4b5ac8fe-3e77-11e6-8fc3-37896f6c807f","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"indexOfSubstring","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"indexOfSubstring"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"4b5af00f-3e77-11e6-8fc3-fd9f1c64ec0f","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:381","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[2,173,174],"tindex":"4b5af010-3e77-11e6-8fc3-7909aaa0b2d4","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"4b5b1721-3e77-11e6-8fc3-f5d6e7ad82ca","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return containsKey(o);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"o","this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[0,3,4,175,176,43,44,45,46,177,51,178,52,179,180,181,182,173,183],"tindex":"4b5b1722-3e77-11e6-8fc3-7732ad695fa3","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value instanceof com.google.gson.JsonArray) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5b1723-3e77-11e6-8fc3-11f038870c1f","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"4b5b1724-3e77-11e6-8fc3-ab9db601af46","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4b5b3e35-3e77-11e6-8fc3-c9af81c9e590","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"4b5b3e36-3e77-11e6-8fc3-75c07d2bbb39","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[],"tindex":"4b5b6547-3e77-11e6-8fc3-d3dcf0bf7329","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if ((root != null) && (root != null)) {\n        {\n            if (root != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n                    if (pivotRight != null) {\n                        pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root","right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"4b5b6548-3e77-11e6-8fc3-afdf196cfbce","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4b5b6549-3e77-11e6-8fc3-2f6ec5b8f4a1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[7,184,185,186,187,188,189,190,8,9,191,192,193,194,195,196,197,198,199,200,10,11,12,201,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,202,29,203,204,30,31,38,205,206,39,40,207,208,41,42,43,44,45,46,47,48,209,49,50,210,211,212,51,52,53,54,213,55,214,215,216,56,57,58,59,60,217,61,62,63,218,219,64,220,65,221,222,66,67,68,69,70,71,72,73,223,224,74,75,76,77,78,225,79,80,81,82,83,226,84,85,86,227,87,228,88,229,230,231,171,232,89,90,91,233,92,93,94,234,95,96,97,98,99,100,101,102,103,104,105,5,106,180,181,182,173,183,107,235,236,108,109,110,111,112,237,113,114,115,238,239,240,116,241,117,242,243,118,119,244,120,121,122,245,123,246,124,125,126,247,127,128,248,249,129,130,131,250,251,132,252,253,133,254,255,134,256,135,257,136,258,259,137,260,138,139,261,140,262,263,141,264,142,143,265,144,266,267,268,269,145,146,147,148,270,149,271,150,272,151,273,152,153,154,155,156,157,158,159,274,160,161,162,163,164,165,166,167,168],"tindex":"4b5b8c5a-3e77-11e6-8fc3-75a13285bbd8","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4b5b8c5b-3e77-11e6-8fc3-8d9e00dc1c0e","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"4b5bb36c-3e77-11e6-8fc3-6f9758dd5bdc","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:485","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_OBJECT)"},"failures":[],"tindex":"4b5bb36d-3e77-11e6-8fc3-735039cbb3dc","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"minimum","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4b5bda7e-3e77-11e6-8fc3-993fc5097f75","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message == null) {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"4b5bda7f-3e77-11e6-8fc3-cb1fc2e2fc1b","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4b5bda80-3e77-11e6-8fc3-a5fdd472ea29","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258611125/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
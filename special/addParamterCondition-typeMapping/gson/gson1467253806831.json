{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":550,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":632,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":44,"com.google.gson.functional.StringTest.testStringValueDeserialization":630,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":140,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":671,"com.google.gson.stream.JsonWriterTest.testRepeatedName":36,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":424,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":69,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":521,"com.google.gson.MixedStreamTest.testWriteLenient":293,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":303,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":3,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":655,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":299,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":94,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":104,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":499,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":470,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":335,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":571,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":203,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":432,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":340,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":393,"com.google.gson.functional.ObjectTest.testSingletonLists":171,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":610,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":418,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":633,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":23,"com.google.gson.stream.JsonWriterTest.testStrings":57,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":366,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":61,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":662,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":621,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":509,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":323,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":472,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":215,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":624,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":645,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":7,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":189,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":216,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":462,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":49,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":385,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":310,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":410,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":536,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":384,"com.google.gson.functional.EnumTest.testEnumCaseMapping":334,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":296,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":631,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":409,"com.google.gson.functional.JsonTreeTest.testToJsonTree":583,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":674,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":407,"com.google.gson.stream.JsonWriterTest.testNulls":33,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":85,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":212,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":562,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":607,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":395,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":101,"com.google.gson.functional.ObjectTest.testNullDeserialization":666,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":191,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":642,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":506,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":60,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":482,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":425,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":510,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":534,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":144,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":513,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":59,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":668,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":148,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":486,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":485,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":620,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":213,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":467,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":653,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":446,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":670,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":10,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":183,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":270,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":444,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":304,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":380,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":459,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":604,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":260,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":12,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":359,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":138,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":371,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":468,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":460,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":182,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":241,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":24,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":52,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":280,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":503,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":73,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":387,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":429,"com.google.gson.metrics.PerformanceTest.testDummy":658,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":574,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":158,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":79,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":543,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":360,"com.google.gson.stream.JsonWriterTest.testEmptyArray":26,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":325,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":271,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":547,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":606,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":143,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":525,"com.google.gson.functional.CollectionTest.testSetDeserialization":355,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":204,"com.google.gson.functional.EnumTest.testEnumSet":63,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":176,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":576,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":451,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":80,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":109,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":596,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":178,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":18,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":78,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":464,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":542,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":48,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":474,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":62,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":531,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":475,"com.google.gson.functional.MapTest.testHashMapDeserialization":374,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":422,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":614,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":551,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":677,"com.google.gson.MixedStreamTest.testReadNulls":680,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":230,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":258,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":330,"com.google.gson.functional.MapTest.testSortedMap":386,"com.google.gson.functional.MapTest.testMapSerialization":127,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":231,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":457,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":545,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":564,"com.google.gson.functional.MapTest.testSerializeMaps":121,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":284,"com.google.gson.functional.MapTest.testComplexKeysSerialization":136,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":575,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":11,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":389,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":252,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":193,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":333,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":157,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":348,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":659,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":332,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":219,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":70,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":515,"com.google.gson.functional.MapTest.testStringKeyDeserialization":388,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":566,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":111,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":488,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":139,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":428,"com.google.gson.functional.PrettyPrintingTest.testMap":217,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":423,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":527,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":97,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":232,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":591,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":214,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":322,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":567,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":636,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":639,"com.google.gson.functional.CollectionTest.testQueueSerialization":98,"com.google.gson.functional.MapTest.testMapSerializationEmpty":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":266,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":53,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":452,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":55,"com.google.gson.functional.MapTest.testMapOfMapSerialization":126,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":443,"com.google.gson.JavaSerializationTest.testMapIsSerializable":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":608,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":354,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":28,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":199,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":367,"com.google.gson.functional.FieldNamingTest.testIdentity":285,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":634,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":361,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":39,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":233,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":516,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":72,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":170,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":358,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":582,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":31,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":412,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":311,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":308,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":635,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":449,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":616,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":598,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":673,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":372,"com.google.gson.functional.MapTest.testMapSubclassSerialization":120,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":484,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":227,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":343,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":578,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":206,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":291,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":441,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":675,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":305,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":590,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":327,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":77,"com.google.gson.functional.EnumTest.testEnumSubclass":66,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":463,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":324,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":507,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":411,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":141,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":681,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":469,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":110,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":345,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":414,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":188,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":40,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":316,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":447,"com.google.gson.stream.JsonWriterTest.testTwoNames":27,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":523,"com.google.gson.stream.JsonWriterTest.testNullName":34,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":401,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":19,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":561,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":453,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":505,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":42,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":338,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":445,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":617,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":498,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":373,"com.google.gson.MixedStreamTest.testWriteNulls":679,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":247,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":37,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":369,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":243,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":192,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":339,"com.google.gson.CommentsTest.testParseComments":650,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":114,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":172,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":396,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":256,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":466,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":565,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":544,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":129,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":286,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":667,"com.google.gson.MixedStreamTest.testReadInvalidState":647,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":200,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":84,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":619,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":21,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":224,"com.google.gson.JsonParserTest.testParseMixedArray":25,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":421,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":568,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":253,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":437,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":197,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":609,"com.google.gson.functional.MapTest.testMapDeserialization":379,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":605,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":222,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":119,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":392,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":123,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":161,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":153,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":151,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":349,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":261,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":589,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":184,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":508,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":88,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":529,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":593,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":341,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":93,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":187,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":128,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":218,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":408,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":365,"com.google.gson.functional.PrimitiveTest.testShortSerialization":483,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":155,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":471,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":538,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":442,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":166,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":597,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":281,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":65,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":96,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":226,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":376,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":436,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":168,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":663,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":9,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":306,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":16,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":615,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":14,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":649,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":495,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":490,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":209,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":71,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":185,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":362,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":406,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":17,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":586,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":477,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":584,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":112,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":448,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":519,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":502,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":68,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":89,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":577,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":594,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":205,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":363,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":150,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":269,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":427,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":265,"com.google.gson.stream.JsonWriterTest.testNullStringValue":30,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":612,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":350,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":403,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":415,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":478,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":450,"com.google.gson.stream.JsonWriterTest.testEmptyObject":47,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":493,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":117,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":64,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":152,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":554,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":546,"com.google.gson.functional.MapTest.testGeneralMapField":133,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":501,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":240,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":494,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":6,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":142,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":249,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":272,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":0,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":147,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":163,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":473,"com.google.gson.MixedStreamTest.testReadMixedStreamed":648,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":165,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":595,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":105,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":312,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":580,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":50,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":573,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":455,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":537,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":319,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":268,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":382,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":629,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":375,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":169,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":364,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":237,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":277,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":35,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":438,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":267,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":370,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":234,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":585,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":398,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":116,"com.google.gson.functional.ObjectTest.testNestedDeserialization":520,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":181,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":524,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":552,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":400,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":535,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":492,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":255,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":336,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":383,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":637,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":76,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":481,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":344,"com.google.gson.JavaSerializationTest.testListIsSerializable":321,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":302,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":307,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":107,"com.google.gson.functional.ObjectTest.testNullSerialization":664,"com.google.gson.stream.JsonWriterTest.testDoubles":54,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":91,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":628,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":377,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":132,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":413,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":51,"com.google.gson.functional.MapTest.testInterfaceTypeMap":130,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":563,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":528,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":160,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":416,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":67,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":208,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":656,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":347,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":530,"com.google.gson.MixedStreamTest.testReadClosed":678,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":587,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":533,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":430,"com.google.gson.MixedStreamTest.testWriteClosed":295,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":100,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":553,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":173,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":623,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":81,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":159,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":570,"com.google.gson.stream.JsonWriterTest.testLongs":32,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":186,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":274,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":162,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":174,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":99,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":626,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":682,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":458,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":278,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":346,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":103,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":613,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":556,"com.google.gson.stream.JsonWriterTest.testNumbers":56,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":195,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":496,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":435,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":592,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":194,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":238,"com.google.gson.functional.CollectionTest.testQueueDeserialization":357,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":569,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":440,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":456,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":317,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":641,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":618,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":627,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":124,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":514,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":601,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":149,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":518,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":95,"com.google.gson.functional.MapTest.testRawMapSerialization":135,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":290,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":611,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":210,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":87,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":179,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":548,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":397,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":313,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":242,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":315,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":326,"com.google.gson.functional.PrimitiveTest.testByteSerialization":480,"com.google.gson.ObjectTypeAdapterTest.testSerialize":22,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":288,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":145,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":426,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":300,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":248,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":282,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":82,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":309,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":638,"com.google.gson.functional.MapTest.testMapWithQuotes":125,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":669,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":640,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":108,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":579,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":368,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":263,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":202,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":41,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":394,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":74,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":517,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":223,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":599,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":665,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":251,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":1,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":276,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":600,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":476,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":660,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":661,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":75,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":239,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":90,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":235,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":676,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":228,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":651,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":329,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":342,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":417,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":654,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":683,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":115,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":207,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":511,"com.google.gson.functional.ObjectTest.testNestedSerialization":180,"com.google.gson.JsonObjectTest.testAddingStringProperties":298,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":118,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":146,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":164,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":644,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":236,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":134,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":225,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":262,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":294,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":318,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":58,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":177,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":555,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":489,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":404,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":602,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":297,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":431,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":657,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":588,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":625,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":211,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":643,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":246,"com.google.gson.functional.CollectionTest.testSetSerialization":106,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":391,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":113,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":220,"com.google.gson.functional.StringTest.testStringValueSerialization":646,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":287,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":196,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":337,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":351,"com.google.gson.MixedStreamTest.testWriteInvalidState":292,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":558,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":175,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":434,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":250,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":439,"com.google.gson.stream.JsonWriterTest.testBooleans":29,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":264,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":283,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":190,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":557,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":13,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":532,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":672,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":289,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":378,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":43,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":244,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":539},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"8f09ac05-3e6a-11e6-b5d4-b3b21d09606e","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == key) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"key","com.google.gson.LongSerializationPolicy.DEFAULT":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"8f0a9666-3e6a-11e6-b5d4-9df2fde755af","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (writer == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (boolean) {\n                        writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n                    } \n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n                    if (boolean) {\n                        jsonWriter.setIndent(\"  \");\n                    } \n                    jsonWriter.setSerializeNulls(boolean);\n                    return jsonWriter;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8f0abd77-3e6a-11e6-b5d4-dbd032140fda","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"8f0abd78-3e6a-11e6-b5d4-07fa2e1af5e5","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"8f0abd79-3e6a-11e6-b5d4-d9fa474c9fa3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"8f0abd7a-3e6a-11e6-b5d4-a1c60546afed","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10],"tindex":"8f0ae48b-3e6a-11e6-b5d4-5d3eda5d4d0d","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (src == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8f0ae48c-3e6a-11e6-b5d4-5ff657cd3c2b","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:702","type":"CtBinaryOperatorImpl","sourcecode":"(last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT))"},"failures":[],"tindex":"8f0ae48d-3e6a-11e6-b5d4-37f4e9e72b70","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i != i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((i == i) || (last == i)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.get(i);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"i","last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,1,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297],"tindex":"8f0b0b9e-3e6a-11e6-b5d4-cb5f04290fdf","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[298,299,300,301,302,110,303,304,305,306,307,308,288,289],"tindex":"8f0b32af-3e6a-11e6-b5d4-910daf0fe3e7","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"8f0b32b0-3e6a-11e6-b5d4-fb70c7dc996d","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"8f0b32b1-3e6a-11e6-b5d4-e7def3a7864e","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"o","context":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"8f0b32b2-3e6a-11e6-b5d4-6310783b386a","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from != from) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"from","type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8f0b59c3-3e6a-11e6-b5d4-1719b9c79f90","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[309,18,310,311,312,313,314,315,19,20,22,23,24,316,317,318,319,320,321,322,323,324,325,326,327,61,328,329,330,62,63,64,65,66,331,332,67,333,68,334,335,69,336,70,337,71,338,72,73,74,339,75,76,77,78,79,80,340,81,82,83,341,84,342,343,85,86,87,88,344,89,90,91,345,346,92,347,93,348,349,94,95,96,97,350,351,352,98,99,100,101,102,353,354,103,355,104,105,356,106,107,357,299,300,358,301,302,108,359,109,360,361,362,110,111,112,363,113,114,364,365,115,366,367,368,116,117,118,303,304,305,306,307,369,370,371,372,373,374,375,120,121,376,377,122,378,123,379,124,380,381,382,383,125,126,127,384,385,128,129,386,130,131,132,133,134,135,387,136,137,388,138,389,390,139,140,141,308,142,391,143,144,145,146,147,148,149,150,392,393,151,394,395,152,153,396,154,155,156,397,398,157,399,400,401,402,158,159,160,403,404,405,406,161,162,407,408,409,410,411,412,413,414,415,416,417,418,163,419,420,421,422,423,424,425,426,427,428,429,164,430,431,432,433,434,435,436,437,165,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,166,471,472,473,474,475,476,477,478,479,480,481,482,483,167,484,485,486,487,488,489,168,490,491,492,493,169,494,495,496,497,170,171,498,499,172,500,501,173,502,503,174,504,505,176,506,177,507,508,509,510,178,511,179,180,181,512,182,513,514,515,183,516,184,185,517,186,518,519,520,521,187,522,523,188,189,524,190,191,192,193,525,194,195,196,197,198,199,200,201,202,203,204,205,526,527,528,206,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,216,217,218,219,220,221,222,223,544,545,224,546,225,547,548,226,227,228,229,230,549,550,231,551,552,232,553,554,555,233,234,556,235,557,236,237,238,239,558,240,241,242,243,244,559,560,245,246,247,561,562,563,248,564,249,565,250,566,251,567,252,568,253,254,255,256,569,570,571,572,573,257,574,575,576,577,578,258,579,580,259,260,581,261,582,583,262,584,585,586,0,587,588,589,590,591,592,1,2,593,594,595,596,597,598,599,265,600,601,266,602,603,604,605,606,607,267,608,268,609,269,270,610,611,612,613,614,271,615,3,272,616,273,4,617,618,619,274,620,621,5,622,623,275,624,625,276,277,626,627,278,628,629,279,280,281,282,283,284,285,630,631,632,633,634,635,636,637,286,638,639,640,641,642,643,644,645,646,287,290,647,291,292,293,294,295,648,649,296,297,650,651,652,653,654,655,656],"tindex":"8f0b59c4-3e6a-11e6-b5d4-a72c28356b2f","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1243","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT)"},"failures":[],"tindex":"8f0b80d5-3e6a-11e6-b5d4-9b2e62c0027c","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty == empty) {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[131],"tindex":"8f0b80d6-3e6a-11e6-b5d4-e7cac4fef204","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[],"tindex":"8f0ba7e7-3e6a-11e6-b5d4-5ff73da94968","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key.isAssignableFrom(key)) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"key","classOfPrimitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"8f0ba7e8-3e6a-11e6-b5d4-f599600a5f8c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"8f0bcef9-3e6a-11e6-b5d4-45f548dfae13","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (writer == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (boolean) {\n                        writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n                    } \n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n                    if (boolean) {\n                        jsonWriter.setIndent(\"  \");\n                    } \n                    jsonWriter.setSerializeNulls(boolean);\n                    return jsonWriter;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[18,312,313,19,20,24,326,61,62,75,80,86,88,89,90,92,94,95,98,100,101,102,103,104,105,117,118,120,121,122,123,124,125,126,130,132,133,135,136,138,140,145,146,147,148,149,151,400,401,402,158,160,403,404,161,162,407,163,421,435,171,172,173,174,177,178,180,183,186,187,188,189,195,196,197,198,199,206,210,215,219,223,224,225,227,228,230,550,231,233,234,236,237,238,239,242,243,245,246,248,249,251,253,254,569,571,257,577,259,260,581,261,583,262,266,271,272,276,279,280,631,632,633,634,635,286,639,643,646,287,290,291,294],"tindex":"8f0bcefa-3e6a-11e6-b5d4-037754f6c16e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8f0bcefb-3e6a-11e6-b5d4-a99b763eb56a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[309,18,310,311,312,19,20,657,24,59,60,318,658,322,323,324,325,326,327,61,659,328,329,330,660,62,63,64,65,66,331,332,67,333,68,334,335,69,336,70,337,71,338,72,73,74,339,75,76,77,78,79,80,340,81,82,83,341,84,342,343,85,86,87,88,344,89,90,91,345,346,92,347,93,348,349,94,95,96,97,350,351,352,98,99,100,101,102,353,354,103,661,355,104,105,356,106,107,662,663,357,299,300,358,301,302,108,359,109,360,361,362,110,111,112,363,113,114,364,365,115,366,367,368,116,117,118,303,304,305,306,307,369,370,371,372,119,373,374,375,120,121,376,377,122,378,123,379,124,380,381,382,383,125,126,127,384,385,128,129,386,130,131,132,133,134,135,387,136,137,388,138,389,390,139,140,141,308,142,391,143,144,145,146,147,148,149,150,392,393,151,394,395,152,153,396,154,155,156,397,398,157,399,400,401,402,158,159,160,403,404,405,406,161,162,407,408,409,410,411,412,413,414,415,416,417,418,163,419,420,421,422,423,424,425,426,427,428,429,164,430,431,432,433,434,435,436,437,165,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,166,471,472,473,474,475,476,477,478,479,480,481,482,483,167,484,485,486,487,488,489,168,490,491,492,493,169,494,495,496,497,170,171,498,499,172,500,501,173,502,503,174,175,504,505,176,506,664,177,665,507,508,509,510,178,511,179,180,181,512,182,513,514,515,666,183,516,184,185,517,186,518,519,520,521,187,522,523,188,189,524,667,190,191,192,193,525,194,200,201,202,203,204,205,526,527,528,206,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,216,217,218,219,220,221,222,223,544,545,224,546,225,547,548,226,227,228,230,549,550,231,551,552,232,553,554,555,233,234,556,235,557,236,237,238,239,558,240,241,242,243,244,559,560,245,246,247,561,562,563,248,564,249,565,250,566,251,567,252,568,253,254,255,256,569,570,571,572,573,257,574,575,576,577,578,258,579,580,259,260,581,261,582,583,262,584,585,586,0,587,668,588,589,263,590,591,669,592,1,670,2,593,594,595,264,596,597,598,599,265,600,601,266,602,603,604,605,606,607,267,608,268,609,269,270,671,610,611,612,613,614,672,271,615,3,272,616,273,4,617,618,619,274,620,621,5,673,674,622,623,675,275,624,625,276,277,626,627,278,676,628,629,279,280,677,281,282,283,284,285,630,631,632,633,634,635,636,637,286,638,639,640,641,642,643,644,645,646,287,288,289,290,647,678,291,679,292,293,680,294,295,648,649,296,297,650],"tindex":"8f0bf60c-3e6a-11e6-b5d4-ef7e2c4faf2b","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"8f0c1d1d-3e6a-11e6-b5d4-ede7e0dc049c","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"jsonElement","this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:467","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[],"tindex":"8f0c1d1e-3e6a-11e6-b5d4-0b8d70b49a76","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"i","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"8f0c1d1f-3e6a-11e6-b5d4-39d7d34760cc","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"8f0c1d20-3e6a-11e6-b5d4-95f1e457859d","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"8f0c4431-3e6a-11e6-b5d4-ad7f011e9ca3","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(jsonElement, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"8f0c4432-3e6a-11e6-b5d4-3dded7cc6668","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (!(typeOfT instanceof java.lang.reflect.GenericArrayType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[309,18,310,311,312,681,322,323,324,69,336,70,337,71,338,72,73,299,300,358,301,302,108,359,109,360,361,362,110,111,112,363,113,114,364,365,115,366,367,116,373,140,308,394,395,155,521,190,192,526,527,528,531,532,533,534,535,536,538,208,209,682,540,541,542,543,544,545,224,546,225,547,548,556,262,584,609,613,615,619,5],"tindex":"8f0cb963-3e6a-11e6-b5d4-819af620d575","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8f0e18f4-3e6a-11e6-b5d4-17921517df40","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[34],"tindex":"8f0e18f5-3e6a-11e6-b5d4-f190a00f64b2","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"8f0e18f6-3e6a-11e6-b5d4-fb4f2bb0ca8d","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:919","type":"CtBinaryOperatorImpl","sourcecode":"p != (com.google.gson.stream.JsonReader.PEEKED_BUFFERED)"},"failures":[],"tindex":"8f0e4007-3e6a-11e6-b5d4-a5b860fd8b14","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i != i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((i == i) || (last == i)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.get(i);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"8f0e8e28-3e6a-11e6-b5d4-8bebc3ce5e79","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[309,18,310,311,312,313,314,315,19,20,24,318,319,320,321,322,323,324,325,326,327,61,328,329,330,62,63,64,65,66,331,332,67,333,68,334,335,69,336,70,337,71,338,72,73,74,339,75,76,77,78,79,80,340,81,82,83,341,84,342,343,85,86,87,88,344,89,90,91,345,346,92,347,93,348,349,94,95,96,97,350,351,352,98,99,100,101,102,353,354,103,661,355,104,105,356,106,107,662,663,357,299,300,358,301,302,108,359,109,360,361,362,110,111,112,363,113,114,364,365,115,366,367,368,116,117,118,303,304,305,306,307,369,370,371,372,119,373,374,375,120,121,376,377,122,378,123,379,124,380,381,382,383,125,126,127,384,385,128,129,386,130,131,132,133,134,135,387,136,137,388,138,389,390,139,140,141,308,142,391,143,144,145,146,147,148,149,150,392,393,151,394,395,152,153,396,154,155,156,397,398,157,399,400,401,402,158,159,160,403,404,405,406,161,162,407,408,409,410,411,412,413,414,415,416,417,418,163,419,420,421,422,423,424,425,426,427,428,429,164,430,431,432,433,434,435,436,437,165,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,166,471,472,473,474,475,476,477,478,479,480,481,482,483,167,484,485,486,487,488,489,168,490,491,492,493,169,494,495,496,497,170,171,498,499,172,500,501,173,502,503,174,504,505,176,506,177,507,508,509,510,178,511,179,180,181,512,182,513,514,515,183,516,184,185,517,186,518,519,520,521,187,522,523,188,189,524,190,191,192,193,525,194,195,196,197,198,199,200,201,202,203,204,205,526,527,528,206,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,216,217,218,219,220,221,222,223,544,545,224,546,225,547,548,226,227,228,229,230,549,550,231,551,552,232,553,554,555,233,234,556,235,557,236,237,238,239,558,240,241,242,243,244,559,560,245,246,247,561,562,563,248,564,249,565,250,566,251,567,252,568,253,254,255,256,569,570,571,572,573,257,574,575,576,577,578,258,579,580,259,260,581,261,582,583,262,584,585,586,0,587,668,588,589,263,590,591,669,592,1,670,2,593,594,595,264,596,597,598,599,265,600,601,266,602,603,604,605,606,607,267,608,268,609,269,270,671,610,611,612,613,614,672,271,615,3,272,616,273,4,617,618,619,274,620,621,5,673,674,622,623,675,275,624,625,276,277,626,627,278,676,628,629,279,280,677,281,282,283,284,285,630,631,632,633,634,635,636,637,286,638,639,640,641,642,643,644,645,646,287,290,647,291,292,293,294,295,648,649,296,297,650],"tindex":"8f0eb539-3e6a-11e6-b5d4-53f780b28a17","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:318","type":"CtBinaryOperatorImpl","sourcecode":"parent != null"},"failures":[683],"tindex":"8f0eb53a-3e6a-11e6-b5d4-ddf160a1055f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1435","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\n'"},"failures":[],"tindex":"8f0edc4b-3e6a-11e6-b5d4-535265c2f0e2","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\n') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8f0f035c-3e6a-11e6-b5d4-9350c04762c4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"8f0f2a6d-3e6a-11e6-b5d4-8748be2d181f","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142644/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":41,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
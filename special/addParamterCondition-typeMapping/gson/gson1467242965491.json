{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":75,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":268,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":22,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":335,"com.google.gson.stream.JsonWriterTest.testRepeatedName":14,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":156,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":501,"com.google.gson.MixedStreamTest.testWriteLenient":50,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":414,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":465,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":223,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":98,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":370,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":380,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":483,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":246,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":302,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":253,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":456,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":476,"com.google.gson.functional.ObjectTest.testSingletonLists":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":219,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":303,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":269,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":413,"com.google.gson.stream.JsonWriterTest.testStrings":36,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":235,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":491,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":39,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":89,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":438,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":181,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":385,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":27,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":479,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":42,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":398,"com.google.gson.functional.EnumTest.testEnumCaseMapping":245,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":55,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":267,"com.google.gson.functional.JsonTreeTest.testToJsonTree":266,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":390,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":180,"com.google.gson.stream.JsonWriterTest.testNulls":11,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":202,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":86,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":2,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":306,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":377,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":359,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":489,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":54,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":134,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":348,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":396,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":107,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":494,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":53,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":233,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":294,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":23,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":87,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":126,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":120,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":283,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":218,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":466,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":168,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":300,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":416,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":444,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":333,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":127,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":279,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":353,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":30,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":79,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":402,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":487,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":112,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":160,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":474,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":173,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":188,"com.google.gson.stream.JsonWriterTest.testEmptyArray":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":213,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":431,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":106,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":502,"com.google.gson.functional.CollectionTest.testSetDeserialization":506,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":254,"com.google.gson.functional.EnumTest.testEnumSet":239,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":344,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":189,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":144,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":317,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":349,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":41,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":187,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":433,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":26,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":238,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":393,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":130,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":80,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":73,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":161,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":298,"com.google.gson.functional.MapTest.testMapSerialization":322,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":76,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":503,"com.google.gson.functional.MapTest.testSerializeMaps":316,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":368,"com.google.gson.functional.MapTest.testComplexKeysSerialization":331,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":415,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":290,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":361,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":464,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":313,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":428,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":451,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":236,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":3,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":388,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":426,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":157,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":146,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":138,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":334,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":257,"com.google.gson.functional.PrettyPrintingTest.testMap":386,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":373,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":199,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":88,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":210,"com.google.gson.functional.MapTest.testMapSerializationEmpty":332,"com.google.gson.functional.CollectionTest.testQueueSerialization":374,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":31,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":33,"com.google.gson.functional.MapTest.testMapOfMapSerialization":321,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":118,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":6,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":64,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":123,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":152,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":420,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":270,"com.google.gson.functional.FieldNamingTest.testIdentity":369,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":17,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":57,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":496,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":100,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":159,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":265,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":338,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":9,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":43,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":104,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":271,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":121,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":480,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":410,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":232,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":137,"com.google.gson.functional.MapTest.testMapSubclassSerialization":315,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":248,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":458,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":47,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":90,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":259,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":467,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":463,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":186,"com.google.gson.functional.EnumTest.testEnumSubclass":242,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":124,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":40,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":490,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":108,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":103,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":145,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":448,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":337,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":18,"com.google.gson.stream.JsonWriterTest.testTwoNames":5,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":481,"com.google.gson.stream.JsonWriterTest.testNullName":12,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":171,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":409,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":20,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":119,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":447,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":227,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":482,"com.google.gson.MixedStreamTest.testWriteNulls":48,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":285,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":15,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":281,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":360,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":455,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":149,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":340,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":477,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":68,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":469,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":272,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":324,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":250,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":193,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":229,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":363,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":411,"com.google.gson.JsonParserTest.testParseMixedArray":403,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":111,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":65,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":421,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":115,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":62,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":212,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":391,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":314,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":405,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":475,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":178,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":318,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":308,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":305,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":452,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":460,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":347,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":355,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":163,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":260,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":203,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":457,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":169,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":336,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":323,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":387,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":231,"com.google.gson.functional.PrimitiveTest.testShortSerialization":135,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":310,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":400,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":418,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":205,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":365,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":241,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":372,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":247,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":139,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":384,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":427,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":424,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":478,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":422,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":430,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":142,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":83,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":158,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":356,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":445,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":454,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":195,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":425,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":443,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":471,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":147,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":499,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":486,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":244,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":165,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":401,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":461,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":255,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":217,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":207,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":299,"com.google.gson.stream.JsonWriterTest.testNullStringValue":8,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":311,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":176,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":122,"com.google.gson.stream.JsonWriterTest.testEmptyObject":25,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":140,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":71,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":240,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":307,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":437,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":504,"com.google.gson.functional.MapTest.testGeneralMapField":328,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":485,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":278,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":105,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":256,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":224,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":326,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":196,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":293,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":129,"com.google.gson.MixedStreamTest.testReadMixedStreamed":429,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":116,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":44,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":381,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":470,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":28,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":473,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":399,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":419,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":215,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":155,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":141,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":150,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":297,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":93,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":13,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":214,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":58,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":154,"com.google.gson.functional.ObjectTest.testNestedDeserialization":500,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":182,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":352,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":435,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":170,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":397,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":67,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":185,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":133,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":164,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":102,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":468,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":383,"com.google.gson.functional.ObjectTest.testNullSerialization":345,"com.google.gson.stream.JsonWriterTest.testDoubles":32,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":167,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":109,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":327,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":29,"com.google.gson.functional.MapTest.testInterfaceTypeMap":325,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":258,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":175,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":82,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":243,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":261,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":197,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":395,"com.google.gson.MixedStreamTest.testWriteClosed":52,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":376,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":436,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":341,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":453,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":190,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":174,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":70,"com.google.gson.stream.JsonWriterTest.testLongs":10,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":66,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":230,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":179,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":342,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":375,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":440,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":449,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":220,"com.google.gson.stream.JsonWriterTest.testNumbers":35,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":60,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":114,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":263,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":276,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":362,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":69,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":228,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":441,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":319,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":495,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":209,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":295,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":498,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":371,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":46,"com.google.gson.functional.MapTest.testRawMapSerialization":330,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":84,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":162,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":350,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":505,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":312,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":406,"com.google.gson.functional.PrimitiveTest.testByteSerialization":132,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":234,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":280,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":408,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":96,"com.google.gson.ObjectTypeAdapterTest.testSerialize":412,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":291,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":404,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":99,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":286,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":366,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":191,"com.google.gson.functional.MapTest.testMapWithQuotes":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":200,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":143,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":153,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":198,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":252,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":19,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":183,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":497,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":0,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":392,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":206,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":289,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":225,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":201,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":92,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":208,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":237,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":226,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":277,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":166,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":59,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":249,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":81,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":151,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":492,"com.google.gson.functional.ObjectTest.testNestedSerialization":351,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":72,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":113,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":292,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":296,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":329,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":364,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":301,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":45,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":51,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":37,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":346,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":177,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":462,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":459,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":493,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":439,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":85,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":274,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":284,"com.google.gson.functional.CollectionTest.testSetSerialization":382,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":442,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":148,"com.google.gson.functional.StringTest.testStringValueSerialization":275,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":389,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":95,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":61,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":446,"com.google.gson.MixedStreamTest.testWriteInvalidState":49,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":343,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":288,"com.google.gson.stream.JsonWriterTest.testBooleans":7,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":78,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":204,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":367,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":358,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":434,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":394,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":417,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":221,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":97,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":21,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":282},"transformations":[{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5117dbff-3e51-11e6-aec5-1da4c2fae9b2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (!(boolean))\n        return false;\n    \n    java.lang.Object java.lang.Object = field.get(value);\n    return fieldValue != value;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:319","type":"CtBinaryOperatorImpl","sourcecode":"(parent.left) == node"},"failures":[0,1,2,3],"tindex":"51185130-3e51-11e6-aec5-cbde3e63e45d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node == node) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"node","node":"node","left":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"51189f51-3e51-11e6-aec5-2917c514c32a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"51189f52-3e51-11e6-aec5-49c7b86ebc09","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:62","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"51189f53-3e51-11e6-aec5-fd6238b2d3b2","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter.peek()) == typeAdapter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"typeAdapter","com.google.gson.stream.JsonToken.NULL":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"5118c664-3e51-11e6-aec5-c3e784d15dbe","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"5118c665-3e51-11e6-aec5-fbed8f18dc98","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"5118ed76-3e51-11e6-aec5-7b1e6b2a14f9","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"5118ed77-3e51-11e6-aec5-a79689c6ff38","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (typeOfT == null) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"5118ed78-3e51-11e6-aec5-d71bd7e616f7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1015","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\\\'"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425],"tindex":"51191489-3e51-11e6-aec5-41278b039ef3","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == '\\\\') {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"newTop"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"5119148a-3e51-11e6-aec5-774f5bb1dc28","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.remove(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"51193b9b-3e51-11e6-aec5-cd9f181f3b7e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"51193b9c-3e51-11e6-aec5-53b12aaf73d2","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"51193b9d-3e51-11e6-aec5-3b7afd04bb6a","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[426,427,428],"tindex":"51193b9e-3e51-11e6-aec5-1782aa4c83be","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"511962af-3e51-11e6-aec5-af817b777a37","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[263,264,265,266],"tindex":"511962b0-3e51-11e6-aec5-1fb6866aeb67","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"511962b1-3e51-11e6-aec5-fb63caa356ac","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"jsonElement","this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[1],"tindex":"511962b2-3e51-11e6-aec5-1bd7063df117","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[31,34,36,37,38,41,44,45,46,47,51,53,55,57,58,60,61,62,63,64,65,66,71,72,73,76,78,79,82,83,84,89,92,95,96,97,110,111,114,130,143,144,145,149,150,154,155,161,163,165,166,168,173,174,175,178,179,181,182,184,189,195,196,197,199,200,201,202,203,206,208,209,210,211,212,213,216,219,220,222,223,224,226,227,228,229,231,233,234,235,238,239,240,241,242,243,244,245,246,248,249,255,256,257,258,259,260,262,264,267,268,269,270,271,272,273,274,275,276,277,280,281,283,284,286,287,289,291,292,293,294,295,296,297,299,300,301,302,303,305,315,316,317,318,319,320,321,325,327,328,330,331,333,335,336,337,339,340,341,342,346,349,351,354,356,357,358,359,360,361,362,363,364,370,371,374,376,377,378,379,380,381,384,388,392,393,394,395,396,397,398,399,400,401,402,405,409,410],"tindex":"511989c3-3e51-11e6-aec5-a7c552d3049d","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[41,46,47,49,52,429,430,431,432,433,57,58,59,434,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,435,77,436,437,78,79,91,438,439,92,93,440,441,94,95,98,99,101,102,103,105,442,106,107,443,444,445,145,147,148,156,157,446,447,159,160,161,162,163,164,165,166,167,448,449,168,450,169,451,452,170,171,172,173,174,175,176,177,453,454,178,179,180,181,183,455,185,186,187,188,189,456,190,191,192,457,193,458,194,459,460,461,205,462,215,225,230,463,235,238,243,464,247,248,249,250,252,253,254,259,262,263,264,265,266,465,466,467,427,468,287,469,288,291,294,295,297,298,470,299,300,301,471,472,473,303,474,304,475,476,307,308,477,309,311,313,478,319,479,325,327,328,331,335,336,480,481,337,338,339,482,483,340,484,485,341,486,487,342,488,344,489,346,490,491,349,492,350,351,493,353,494,495,354,496,355,356,497,357,498,499,500,501,358,359,360,361,502,362,503,363,504,364,505,365,366,367,368,369,370,372,378,506,380,382,387,388,392,402,409,410,412],"tindex":"5119b0d4-3e51-11e6-aec5-d1afe7e1d137","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"5119b0d5-3e51-11e6-aec5-0dffb45c6b29","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl","sourcecode":"(!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"5119b0d6-3e51-11e6-aec5-c902dc0eecea","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((!(typeAdapter.isJsonNull())) && ((typeAdapter.peek()) != typeAdapter)) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"typeAdapter","jsonReader":"typeAdapter","element":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5119d7e7-3e51-11e6-aec5-913f1a91dbdb","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5119d7e8-3e51-11e6-aec5-23eb67ff17ef","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"5119d7e9-3e51-11e6-aec5-ed7a04a21473","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"5119d7ea-3e51-11e6-aec5-47fcef783514","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((!(typeAdapter.isJsonNull())) && ((typeAdapter.peek()) != typeAdapter)) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5119d7eb-3e51-11e6-aec5-bf6c03b39e07","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5119fefc-3e51-11e6-aec5-9da3a28ccba7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"5119fefd-3e51-11e6-aec5-01f7371dda80","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5119fefe-3e51-11e6-aec5-5de836370fda","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[1],"tindex":"5119feff-3e51-11e6-aec5-0d404048f5c6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"511a2610-3e51-11e6-aec5-55b451ca9858","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.GenericArrayType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n                    if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                        java.lang.reflect.Type java.lang.reflect.Type = from;\n                        if (from instanceof java.lang.reflect.GenericArrayType) {\n                            t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                        } else if (from instanceof java.lang.Class<?>) {\n                            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                            while (classType.isArray()) {\n                                classType = classType.getComponentType();\n                            }\n                            t = classType;\n                        } \n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[300,325,328,335],"tindex":"511a2611-3e51-11e6-aec5-a39a95c48997","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement == null) {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"keyElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:62","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"511a2612-3e51-11e6-aec5-99e3a0a2366c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value.peek()) == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"value","com.google.gson.stream.JsonToken.NULL":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[5,6,8,13,14,16,21,22,24,33,41,46,47,53,54,57,58,59,60,61,62,63,64,65,66,67,68,71,72,73,76,77,78,79,82,83,84,86,87,88,89,91,92,93,94,95,96,97,103,106,107,145,146,147,148,149,151,154,156,157,159,160,161,162,163,165,166,167,168,169,173,174,175,178,179,181,183,184,185,186,187,188,189,190,191,192,193,194,204,214,215,217,222,225,230,235,238,243,247,248,249,250,252,253,254,255,259,262,264,287,291,294,295,297,298,299,300,301,303,304,307,308,309,310,311,313,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,333,334,335,336,337,338,339,340,341,342,344,346,349,350,351,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,372,378,380,382,386,387,388,392,402,409,410,412,413,422,423,425],"tindex":"511a4d23-3e51-11e6-aec5-c19f370bcee0","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"511a4d24-3e51-11e6-aec5-976bafd007c2","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"511a4d25-3e51-11e6-aec5-7750408ba43a","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.TypeVariable) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"511a4d26-3e51-11e6-aec5-313691dbb75f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"511a4d27-3e51-11e6-aec5-c7748a8ed1dd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key != null) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"511a7438-3e51-11e6-aec5-218abe90e0bb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1435","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\n'"},"failures":[],"tindex":"511a7439-3e51-11e6-aec5-9b80671c2873","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\n') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"511a743a-3e51-11e6-aec5-47f18c17a470","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (!(value instanceof java.lang.reflect.WildcardType)) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl","sourcecode":"declaredByRaw == null"},"failures":[],"tindex":"511a743b-3e51-11e6-aec5-fd0aca1499af","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == null) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"511a743c-3e51-11e6-aec5-b323bc421e2b","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target != target) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"target","type":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"511a9b4d-3e51-11e6-aec5-ad2945d9440e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467242120062/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":47,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
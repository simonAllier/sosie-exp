{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":77,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":381,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":13,"com.google.gson.functional.StringTest.testStringValueDeserialization":379,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":159,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":314,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":120,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":221,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":552,"com.google.gson.MixedStreamTest.testWriteLenient":46,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":397,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":323,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":92,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":571,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":512,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":588,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":168,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":359,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":445,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":366,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":129,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":266,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":452,"com.google.gson.functional.ObjectTest.testSingletonLists":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":315,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":448,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":113,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":215,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":342,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":333,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":530,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":33,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":171,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":5,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":395,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":15,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":17,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":160,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":487,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":37,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":105,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":601,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":486,"com.google.gson.functional.EnumTest.testEnumCaseMapping":358,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":54,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":380,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":104,"com.google.gson.functional.JsonTreeTest.testToJsonTree":378,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":336,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":255,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":289,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":419,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":307,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":455,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":581,"com.google.gson.functional.ObjectTest.testNullDeserialization":542,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":554,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":392,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":524,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":53,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":181,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":121,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":531,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":599,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":102,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":539,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":52,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":337,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":186,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":434,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":332,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":165,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":144,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":288,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":415,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":543,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":313,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":157,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":398,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":479,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":304,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":442,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":201,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":500,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":166,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":404,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":158,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":409,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":538,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":85,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":518,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":608,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":125,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":228,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":496,"com.google.gson.metrics.PerformanceTest.testDummy":31,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":449,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":246,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":264,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":60,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":203,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":339,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":321,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":564,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":306,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":101,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":557,"com.google.gson.functional.CollectionTest.testSetDeserialization":587,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":367,"com.google.gson.functional.EnumTest.testEnumSet":349,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":523,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":605,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":149,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":265,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":202,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":294,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":474,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":532,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":36,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":263,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":162,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":59,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":173,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":348,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":596,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":174,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":118,"com.google.gson.functional.MapTest.testHashMapDeserialization":469,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":319,"com.google.gson.MixedStreamTest.testReadNulls":47,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":79,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":75,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":229,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":346,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":438,"com.google.gson.functional.MapTest.testSortedMap":490,"com.google.gson.functional.MapTest.testMapSerialization":485,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":78,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":155,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":560,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":422,"com.google.gson.functional.MapTest.testSerializeMaps":16,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":569,"com.google.gson.functional.MapTest.testComplexKeysSerialization":497,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":604,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":501,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":429,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":356,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":556,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":464,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":241,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":343,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":354,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":3,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":20,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":223,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":541,"com.google.gson.functional.MapTest.testStringKeyDeserialization":499,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":29,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":207,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":188,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":124,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":503,"com.google.gson.functional.PrettyPrintingTest.testMap":18,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":119,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":370,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":574,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":284,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":344,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":32,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":428,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":385,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":301,"com.google.gson.functional.MapTest.testMapSerializationEmpty":498,"com.google.gson.functional.CollectionTest.testQueueSerialization":578,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":150,"com.google.gson.functional.MapTest.testMapOfMapSerialization":484,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":309,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":584,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":152,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":216,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":383,"com.google.gson.functional.FieldNamingTest.testIdentity":570,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":204,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":62,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":544,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":94,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":227,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":377,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":509,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":107,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":38,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":98,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":384,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":147,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":325,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":335,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":466,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":184,"com.google.gson.functional.MapTest.testMapSubclassSerialization":471,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":273,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":361,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":607,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":14,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":87,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":139,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":372,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":283,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":399,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":341,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":262,"com.google.gson.functional.EnumTest.testEnumSubclass":352,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":161,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":34,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":528,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":106,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":97,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":167,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":206,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":236,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":109,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":508,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":145,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":507,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":244,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":418,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":610,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":151,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":522,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":143,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":328,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":511,"com.google.gson.MixedStreamTest.testWriteNulls":44,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":468,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":417,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":402,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":411,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":259,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":555,"com.google.gson.CommentsTest.testParseComments":609,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":211,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":458,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":513,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":70,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":164,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":424,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":559,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":387,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":489,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":257,"com.google.gson.MixedStreamTest.testReadInvalidState":42,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":363,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":271,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":330,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":561,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":117,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":1,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":430,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":28,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":67,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":134,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":311,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":414,"com.google.gson.functional.MapTest.testMapDeserialization":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":305,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":23,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":467,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":451,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":253,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":476,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":457,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":453,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":242,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":353,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":281,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":529,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":545,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":231,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":373,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":290,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":270,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":240,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":505,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":19,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":334,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":103,"com.google.gson.functional.PrimitiveTest.testShortSerialization":182,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":213,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":460,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":170,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":603,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":140,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":169,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":295,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":566,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":351,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":573,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":360,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":472,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":133,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":190,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":594,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":322,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":465,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":51,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":197,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":191,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":205,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":252,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":546,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":276,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":176,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":444,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":146,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":208,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":550,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":517,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":357,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":233,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":291,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":582,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":368,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":209,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":312,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":298,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":441,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":317,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":249,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":575,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":110,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":177,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":148,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":194,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":73,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":350,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":456,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":83,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":562,"com.google.gson.functional.MapTest.testGeneralMapField":493,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":515,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":408,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":196,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":99,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":369,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":324,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":26,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":277,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":433,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":172,"com.google.gson.MixedStreamTest.testReadMixedStreamed":50,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":292,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":480,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":39,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":440,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":589,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":447,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":153,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":602,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":310,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":481,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":220,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":470,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":195,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":212,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":437,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":8,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":308,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":403,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":275,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":583,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":463,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":218,"com.google.gson.functional.ObjectTest.testNestedDeserialization":551,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":256,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":536,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":80,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":243,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":600,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":193,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":69,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":222,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":386,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":482,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":261,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":180,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":232,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":96,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":401,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":592,"com.google.gson.functional.ObjectTest.testNullSerialization":525,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":235,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":219,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":473,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":108,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":492,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":420,"com.google.gson.functional.MapTest.testInterfaceTypeMap":491,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":371,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":111,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":355,"com.google.gson.MixedStreamTest.testReadClosed":43,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":239,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":278,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":598,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":127,"com.google.gson.MixedStreamTest.testWriteClosed":49,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":82,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":580,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":338,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":516,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":267,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":247,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":72,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":68,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":331,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":254,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":519,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":579,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":9,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":156,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":11,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":237,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":318,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":64,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":198,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":132,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":286,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":405,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":558,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":71,"com.google.gson.functional.CollectionTest.testQueueDeserialization":595,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":138,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":154,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":391,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":76,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":329,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":478,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":300,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":435,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":549,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":572,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":41,"com.google.gson.functional.MapTest.testRawMapSerialization":495,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":316,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":230,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":534,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":565,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":462,"com.google.gson.functional.PrimitiveTest.testByteSerialization":179,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":340,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":410,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":90,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":431,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":30,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":122,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":93,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":421,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":567,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":35,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":268,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":388,"com.google.gson.functional.MapTest.testMapWithQuotes":483,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":285,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":390,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":200,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":439,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":217,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":282,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":365,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":454,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":258,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":547,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":0,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":24,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":297,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":527,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":427,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":287,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":7,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":299,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":175,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":347,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":586,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":413,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":327,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":406,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":234,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":65,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":88,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":362,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":345,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":112,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":272,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":25,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":214,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":533,"com.google.gson.functional.ObjectTest.testNestedSerialization":535,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":74,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":126,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":394,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":432,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":436,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":494,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":563,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":443,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":40,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":48,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":61,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":526,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":189,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":250,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":302,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":55,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":128,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":280,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":537,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":6,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":393,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":416,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":100,"com.google.gson.functional.CollectionTest.testSetSerialization":591,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":210,"com.google.gson.functional.StringTest.testStringValueSerialization":396,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":89,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":224,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":576,"com.google.gson.MixedStreamTest.testWriteInvalidState":45,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":407,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":520,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":131,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":137,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":425,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":293,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":568,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":553,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":66,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":597,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":320,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":2,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":91,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":475,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":12,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":56,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":412},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e69f6ab7-3e7d-11e6-9e58-91fb249ec9ad","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"e69fb8d8-3e7d-11e6-9e58-835f7cb476dd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[0,1,2,3],"tindex":"e69fdfe9-3e7d-11e6-9e58-97d3cab9ca90","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"e69fdfea-3e7d-11e6-9e58-a7d3e85e9766","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"e6a006fb-3e7d-11e6-9e58-136e86e49f97","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e6a006fc-3e7d-11e6-9e58-ab9e545c2bce","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"e6a006fd-3e7d-11e6-9e58-afb254fa6ac5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[4,5,6,7,8,9,10,11],"tindex":"e6a02e0e-3e7d-11e6-9e58-317ac0982394","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24],"tindex":"e6a02e0f-3e7d-11e6-9e58-67604b524ae9","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[25],"tindex":"e6a02e10-3e7d-11e6-9e58-ab574bce425f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[26],"tindex":"e6a05521-3e7d-11e6-9e58-4f31392afac8","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (!(type instanceof java.lang.reflect.WildcardType)) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"e6a0a342-3e7d-11e6-9e58-bfa4f3d42a9a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[27,28,29,30],"tindex":"e6a0a343-3e7d-11e6-9e58-d9dce872d87e","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == from) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"from","typeOfT":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl","sourcecode":"isObject"},"failures":[31,32,33,34,35,36,37,38,39,40,41,42,43,14,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,4,5,6,7,8,9,10,11,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,15,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,16,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,26,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,17,18,19,20,21,22,23,24,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612],"tindex":"e6a0ca54-3e7d-11e6-9e58-13527b985ded","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[46,152,165,166,180,188,194],"tindex":"e6a0f165-3e7d-11e6-9e58-31a52878d18d","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"e6a11876-3e7d-11e6-9e58-ed513d49cf45","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:687","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E)"},"failures":[],"tindex":"e6a11877-3e7d-11e6-9e58-094956fb088b","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"minimum","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"e6a13f88-3e7d-11e6-9e58-cda54ba5a6b5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"e6a13f89-3e7d-11e6-9e58-5d21759507c9","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:917","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[],"tindex":"e6a13f8a-3e7d-11e6-9e58-7916c646d9b9","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467261734497/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":51,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":416,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":2,"com.google.gson.functional.StringTest.testStringValueDeserialization":414,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":40,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":219,"com.google.gson.stream.JsonWriterTest.testRepeatedName":70,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":182,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":277,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":564,"com.google.gson.MixedStreamTest.testWriteLenient":111,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":432,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":536,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":368,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":20,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":92,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":94,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":535,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":228,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":398,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":473,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":404,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":191,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":318,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":479,"com.google.gson.functional.ObjectTest.testSingletonLists":533,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":361,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":175,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":417,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":623,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":271,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":53,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":378,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":548,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":96,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":231,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":152,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":430,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":4,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":6,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":220,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":510,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":103,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":167,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":609,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":509,"com.google.gson.functional.EnumTest.testEnumCaseMapping":397,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":116,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":415,"com.google.gson.functional.JsonTreeTest.testToJsonTree":56,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":166,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":11,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":310,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":337,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":452,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":354,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":36,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":64,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":592,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":566,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":427,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":545,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":17,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":241,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":183,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":549,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":607,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":164,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":555,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":16,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":380,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":246,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":466,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":377,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":225,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":204,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":252,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":89,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":448,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":360,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":217,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":433,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":502,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":351,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":35,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":45,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":261,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":524,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":226,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":437,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":218,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":442,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":554,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":60,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":148,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":540,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":187,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":284,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":520,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":476,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":302,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":317,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":122,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":263,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":382,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":366,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":576,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":353,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":163,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":569,"com.google.gson.functional.CollectionTest.testSetDeserialization":597,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":405,"com.google.gson.functional.EnumTest.testEnumSet":388,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":544,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":613,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":209,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":341,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":497,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":87,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":102,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":316,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":222,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":121,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":233,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":80,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":604,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":234,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":180,"com.google.gson.functional.MapTest.testHashMapDeserialization":492,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":365,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":143,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":149,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":285,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":33,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":387,"com.google.gson.functional.MapTest.testSortedMap":513,"com.google.gson.functional.MapTest.testMapSerialization":508,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":142,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":215,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":572,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":455,"com.google.gson.functional.MapTest.testSerializeMaps":5,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":581,"com.google.gson.functional.MapTest.testComplexKeysSerialization":521,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":612,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":44,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":525,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":461,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":395,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":568,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":488,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":67,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":297,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":30,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":393,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":0,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":9,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":279,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":557,"com.google.gson.functional.MapTest.testStringKeyDeserialization":523,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":458,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":26,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":248,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":186,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":527,"com.google.gson.functional.PrettyPrintingTest.testMap":7,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":181,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":408,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":585,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":334,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":385,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":95,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":460,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":420,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":348,"com.google.gson.functional.MapTest.testMapSerializationEmpty":522,"com.google.gson.functional.CollectionTest.testQueueSerialization":589,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":210,"com.google.gson.functional.MapTest.testMapOfMapSerialization":507,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":201,"com.google.gson.JavaSerializationTest.testMapIsSerializable":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":356,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":594,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":131,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":272,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":418,"com.google.gson.functional.FieldNamingTest.testIdentity":582,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":264,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":72,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":558,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":22,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":55,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":283,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":532,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":169,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":104,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":160,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":419,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":207,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":370,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":343,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":350,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":490,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":244,"com.google.gson.functional.MapTest.testMapSubclassSerialization":494,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":325,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":400,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":615,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":3,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":150,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":199,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":410,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":333,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":384,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":315,"com.google.gson.functional.EnumTest.testEnumSubclass":391,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":221,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":97,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":546,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":168,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":159,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":227,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":25,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":292,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":171,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":531,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":205,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":530,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":300,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":451,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":620,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":66,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":211,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":543,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":203,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":282,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":373,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":534,"com.google.gson.MixedStreamTest.testWriteNulls":15,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":491,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":450,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":435,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":444,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":313,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":567,"com.google.gson.CommentsTest.testParseComments":616,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":85,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":268,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":484,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":224,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":456,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":571,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":422,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":512,"com.google.gson.MixedStreamTest.testReadInvalidState":109,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":401,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":323,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":375,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":573,"com.google.gson.JsonParserTest.testParseMixedArray":43,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":179,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":462,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":132,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":196,"com.google.gson.JsonArrayTest.testRemove":14,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":129,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":358,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":447,"com.google.gson.functional.MapTest.testMapDeserialization":500,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":352,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":12,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":39,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":478,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":78,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":499,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":483,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":480,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":298,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":32,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":332,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":90,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":547,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":287,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":411,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":338,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":322,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":296,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":528,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":8,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":511,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":379,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":165,"com.google.gson.functional.PrimitiveTest.testShortSerialization":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":270,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":37,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":230,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":611,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":200,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":65,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":229,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":342,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":578,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":390,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":584,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":62,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":399,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":495,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":195,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":250,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":602,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":58,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":367,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":489,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":47,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":115,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":257,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":251,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":281,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":265,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":308,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":559,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":50,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":328,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":236,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":472,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":27,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":206,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":562,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":539,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":396,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":289,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":614,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":339,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":406,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":266,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":359,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":485,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":185,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":345,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":363,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":305,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":586,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":237,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":208,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":254,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":138,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":389,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":482,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":52,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":574,"com.google.gson.functional.MapTest.testGeneralMapField":517,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":537,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":441,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":256,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":82,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":161,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":369,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":515,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":329,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":465,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":232,"com.google.gson.MixedStreamTest.testReadMixedStreamed":114,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":340,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":503,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":105,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":470,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":598,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":475,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":213,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":610,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":98,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":357,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":504,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":276,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":493,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":255,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":269,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":83,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":154,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":69,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":197,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":355,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":436,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":327,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":593,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":487,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":274,"com.google.gson.functional.ObjectTest.testNestedDeserialization":563,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":311,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":552,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":144,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":299,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":608,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":253,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":134,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":278,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":421,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":505,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":314,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":240,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":288,"com.google.gson.JavaSerializationTest.testListIsSerializable":100,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":24,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":434,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":601,"com.google.gson.functional.ObjectTest.testNullSerialization":42,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":291,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":275,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":496,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":170,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":516,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":453,"com.google.gson.functional.MapTest.testInterfaceTypeMap":514,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":409,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":304,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":173,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":394,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":295,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":330,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":606,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":189,"com.google.gson.MixedStreamTest.testWriteClosed":113,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":146,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":591,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":381,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":538,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":319,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":303,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":137,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":91,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":376,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":309,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":541,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":590,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":155,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":216,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":157,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":293,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":364,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":124,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":127,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":258,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":194,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":335,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":438,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":570,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":136,"com.google.gson.functional.CollectionTest.testQueueDeserialization":603,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":77,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":214,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":426,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":141,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":374,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":501,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":347,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":467,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":561,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":583,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":108,"com.google.gson.functional.MapTest.testRawMapSerialization":519,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":362,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":286,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":551,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":577,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":38,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":617,"com.google.gson.functional.PrimitiveTest.testByteSerialization":239,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":383,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":443,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":619,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":18,"com.google.gson.ObjectTypeAdapterTest.testSerialize":622,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":463,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":184,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":21,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":454,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":579,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":101,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":320,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":423,"com.google.gson.functional.MapTest.testMapWithQuotes":506,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":192,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":260,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":469,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":273,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":413,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":247,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":403,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":481,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":312,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":560,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":344,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":459,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":336,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":23,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":346,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":235,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":31,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":596,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":446,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":372,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":439,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":290,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":125,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":158,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":81,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":386,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":174,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":324,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":28,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":550,"com.google.gson.internal.LinkedTreeMapTest.testClear":63,"com.google.gson.functional.ObjectTest.testNestedSerialization":88,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":139,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":188,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":429,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":464,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":468,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":518,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":575,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":471,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":106,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":112,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":86,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":123,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":249,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":306,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":349,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":117,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":331,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":553,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":153,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":428,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":449,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":162,"com.google.gson.functional.CollectionTest.testSetSerialization":600,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":10,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":267,"com.google.gson.functional.StringTest.testStringValueSerialization":431,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":75,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":128,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":280,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":587,"com.google.gson.MixedStreamTest.testWriteInvalidState":110,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":440,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":41,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":193,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":198,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":457,"com.google.gson.stream.JsonWriterTest.testBooleans":68,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":147,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":61,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":580,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":565,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":126,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":46,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":605,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":321,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":19,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":498,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":1,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":118,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":445},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:183","type":"CtBinaryOperatorImpl","sourcecode":"comparison < 0"},"failures":[],"tindex":"b6d7a429-3e75-11e6-910d-5f6af44109f6","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i < 0) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"b6d7f24a-3e75-11e6-910d-39fb32d1a2f7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"b6d7f24b-3e75-11e6-910d-31afb250e661","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:264","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[0],"tindex":"b6d7f24c-3e75-11e6-910d-61abb4f20fc1","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"b6d8195d-3e75-11e6-910d-655b38c3d7ce","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == subclass) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass","toResolve":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"b6d8406e-3e75-11e6-910d-f1c2818d434b","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"context","type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6d8406f-3e75-11e6-910d-7faad5a982d8","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13],"tindex":"b6d86780-3e75-11e6-910d-f12012aac7db","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[14],"tindex":"b6d86781-3e75-11e6-910d-03fcc83ac3dd","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,4,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"tindex":"b6d86782-3e75-11e6-910d-4b0dbafbe283","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (!(element instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:145","type":"CtBinaryOperatorImpl","sourcecode":"child == null"},"failures":[51,52,4,53,54,32,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"b6d88e93-3e75-11e6-910d-c7dee28fa028","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"b6d88e94-3e75-11e6-910d-05416ddf4b15","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6d8b5a5-3e75-11e6-910d-1366bc087ce8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"b6d8b5a6-3e75-11e6-910d-a17288b624d9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((key != key) && (token != key)) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"key","token":"key","com.google.gson.stream.JsonToken.NUMBER":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"b6d8b5a7-3e75-11e6-910d-c331a2d0b76a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[68,69,70,71,1,2,72,73,74,75,76,77,78,79,53,80,81,32,82,83,35,84,85,86,87,88,89,90,91,92,93,94,9,13,60],"tindex":"b6d8dcb8-3e75-11e6-910d-41c349326ce8","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6d8dcb9-3e75-11e6-910d-f9fd149eb591","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"b6d8dcba-3e75-11e6-910d-2d5db734528b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"b6d8dcbb-3e75-11e6-910d-0f352515782d","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"b6d8dcbc-3e75-11e6-910d-e5675acd9972","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"b6d903cd-3e75-11e6-910d-e7892201f467","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if ((typeAdapter != typeAdapter) && (token != typeAdapter)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"typeAdapter","token":"typeAdapter","com.google.gson.stream.JsonToken.NUMBER":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6d903ce-3e75-11e6-910d-ab3d5692e4d4","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,3,110,111,112,113,114,115,116,117,118,119,120,121,122,123,72,73,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,51,142,143,144,145,146,52,147,148,149,150,151,152,153,74,154,155,156,157,158,75,20,21,22,23,24,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,76,197,198,77,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,25,26,27,266,267,268,269,270,28,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,78,309,310,4,311,312,313,29,314,315,316,317,79,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,53,385,386,387,80,388,389,390,391,392,393,394,395,396,397,398,399,400,81,401,402,403,404,405,406,407,408,409,410,411,412,413,54,32,55,56,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,57,58,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,82,456,457,458,459,460,461,462,463,464,465,466,467,468,83,33,469,470,34,35,471,472,473,474,475,84,476,477,478,479,480,481,36,482,483,484,485,37,486,38,487,488,489,490,39,491,492,493,494,5,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,40,528,529,530,531,532,533,534,535,85,536,537,538,539,540,541,542,543,544,545,86,546,547,548,549,87,550,551,88,552,553,554,555,556,557,89,558,90,559,560,91,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,92,583,584,585,586,587,588,589,590,591,592,93,593,594,595,596,597,94,598,599,600,601,59,602,603,6,7,8,9,10,11,12,13,604,605,606,607,608,609,610,611,612,613,614,615,60,616,617,618,619,620,621,622,623],"tindex":"b6d903cf-3e75-11e6-910d-01e6225aab59","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[136,137,51,20,21,22,23,24,160,300,305,306,310,29,56,36],"tindex":"b6d92ae0-3e75-11e6-910d-fb01ffe82a0a","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src instanceof java.lang.Number) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"b6d92ae1-3e75-11e6-910d-8d2987d74586","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if ((typeAdapter != typeAdapter) && (token != typeAdapter)) {\n                {\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"b6d951f2-3e75-11e6-910d-313e27aa305c","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b6d951f3-3e75-11e6-910d-f9115297e236","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src instanceof java.lang.Number) {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"b6d951f4-3e75-11e6-910d-7b94fff659d6","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    try {\n        return key != null ? find(((K)(key)), false) : null;\n    } catch (java.lang.ClassCastException e) {\n        return null;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"b6d951f5-3e75-11e6-910d-3f79a993bffa","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"b6d97906-3e75-11e6-910d-a1d1fc115d3d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"b6d97907-3e75-11e6-910d-dba2440c6f59","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"b6d97908-3e75-11e6-910d-8f2b098502ff","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257998344/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":32,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":183,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":423,"com.google.gson.functional.StringTest.testStringValueDeserialization":421,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":60,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":607,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":225,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":87,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":542,"com.google.gson.MixedStreamTest.testWriteLenient":164,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":439,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":512,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":385,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":80,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":138,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":510,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":565,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":273,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":410,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":481,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":123,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":234,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":342,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":488,"com.google.gson.functional.ObjectTest.testSingletonLists":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":380,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":484,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":219,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":424,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":67,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":316,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":399,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":393,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":523,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":149,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":276,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":193,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":437,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":332,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":265,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":571,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":42,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":155,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":211,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":581,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":41,"com.google.gson.functional.EnumTest.testEnumCaseMapping":409,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":169,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":422,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":210,"com.google.gson.functional.JsonTreeTest.testToJsonTree":420,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":574,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":610,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":110,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":359,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":460,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":374,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":491,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":561,"com.google.gson.functional.ObjectTest.testNullDeserialization":616,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":132,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":434,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":519,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":286,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":598,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":226,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":524,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":579,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":208,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":532,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":597,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":602,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":291,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":475,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":392,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":270,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":249,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":605,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":456,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":535,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":379,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":34,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":262,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":440,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":371,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":20,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":85,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":56,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":271,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":445,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":263,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":450,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":531,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":79,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":516,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":588,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":52,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":92,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":230,"com.google.gson.metrics.PerformanceTest.testDummy":593,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":485,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":328,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":340,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":174,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":307,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":11,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":10,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":548,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":373,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":207,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":135,"com.google.gson.functional.CollectionTest.testSetDeserialization":143,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":124,"com.google.gson.functional.EnumTest.testEnumSet":117,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":129,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":585,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":254,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":341,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":306,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":363,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":525,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":154,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":339,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":267,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":173,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":278,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":402,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":576,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":279,"com.google.gson.functional.MapTest.testHashMapDeserialization":23,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":223,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":9,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":185,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":190,"com.google.gson.MixedStreamTest.testReadNulls":596,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":93,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":181,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":12,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":16,"com.google.gson.functional.MapTest.testSortedMap":45,"com.google.gson.functional.MapTest.testMapSerialization":40,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":184,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":260,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":544,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":463,"com.google.gson.functional.MapTest.testSerializeMaps":26,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":552,"com.google.gson.functional.MapTest.testComplexKeysSerialization":53,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":584,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":57,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":470,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":134,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":407,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":500,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":102,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":611,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":405,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":572,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":88,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":534,"com.google.gson.functional.MapTest.testStringKeyDeserialization":55,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":467,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":309,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":293,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":59,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":229,"com.google.gson.functional.PrettyPrintingTest.testMap":62,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":224,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":414,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":139,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":356,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":400,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":148,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":469,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":427,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":431,"com.google.gson.functional.MapTest.testMapSerializationEmpty":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":369,"com.google.gson.functional.CollectionTest.testQueueSerialization":559,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":255,"com.google.gson.functional.MapTest.testMapOfMapSerialization":39,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":246,"com.google.gson.JavaSerializationTest.testMapIsSerializable":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":376,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":563,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":73,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":317,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":425,"com.google.gson.functional.FieldNamingTest.testIdentity":553,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":5,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":176,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":536,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":91,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":202,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":419,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":507,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":213,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":156,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":204,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":426,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":252,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":386,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":591,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":364,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":609,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":21,"com.google.gson.functional.MapTest.testMapSubclassSerialization":25,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":289,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":13,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":349,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":587,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":125,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":162,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":191,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":244,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":355,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":441,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":398,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":338,"com.google.gson.functional.EnumTest.testEnumSubclass":119,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":266,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":150,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":521,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":212,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":203,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":272,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":86,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":100,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":215,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":506,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":250,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":505,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":104,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":459,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":590,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":256,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":518,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":90,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":389,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":509,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":22,"com.google.gson.MixedStreamTest.testWriteNulls":595,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":458,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":15,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":452,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":133,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":335,"com.google.gson.CommentsTest.testParseComments":589,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":6,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":494,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":511,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":2,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":269,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":465,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":543,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":44,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":429,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":601,"com.google.gson.MixedStreamTest.testReadInvalidState":161,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":120,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":347,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":391,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":545,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":592,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":222,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":471,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":1,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":239,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":71,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":377,"com.google.gson.functional.MapTest.testMapDeserialization":32,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":372,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":146,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":502,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":487,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":31,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":109,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":493,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":489,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":103,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":127,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":112,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":130,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":522,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":95,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":416,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":360,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":346,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":325,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":503,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":43,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":63,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":394,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":209,"com.google.gson.functional.PrimitiveTest.testShortSerialization":287,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":314,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":496,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":275,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":583,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":245,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":8,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":221,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":549,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":118,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":555,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":411,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":27,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":238,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":295,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":569,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":384,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":501,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":168,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":302,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":296,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":322,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":61,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":108,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":308,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":352,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":281,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":480,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":251,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":310,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":540,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":515,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":408,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":97,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":586,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":361,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":412,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":311,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":378,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":495,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":228,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":366,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":382,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":106,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":556,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":216,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":282,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":253,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":299,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":76,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":403,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":492,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":189,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":546,"com.google.gson.functional.MapTest.testGeneralMapField":49,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":513,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":449,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":301,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":205,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":413,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":115,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":47,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":353,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":474,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":277,"com.google.gson.MixedStreamTest.testReadMixedStreamed":167,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":35,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":362,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":18,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":157,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":566,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":483,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":258,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":582,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":151,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":114,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":36,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":320,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":24,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":300,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":313,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":478,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":196,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":375,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":444,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":351,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":562,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":499,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":7,"com.google.gson.functional.ObjectTest.testNestedDeserialization":541,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":333,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":529,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":326,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":580,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":298,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":75,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":37,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":321,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":428,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":337,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":285,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":96,"com.google.gson.JavaSerializationTest.testListIsSerializable":152,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":83,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":443,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":568,"com.google.gson.functional.ObjectTest.testNullSerialization":614,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":99,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":319,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":28,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":48,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":214,"com.google.gson.functional.MapTest.testInterfaceTypeMap":46,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":461,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":415,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":329,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":217,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":406,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":324,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":417,"com.google.gson.MixedStreamTest.testReadClosed":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":354,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":578,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":232,"com.google.gson.MixedStreamTest.testWriteClosed":166,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":188,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":560,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":396,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":514,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":343,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":105,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":4,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":74,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":116,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":331,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":517,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":140,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":197,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":261,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":199,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":101,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":383,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":178,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":69,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":303,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":237,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":357,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":136,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":446,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":3,"com.google.gson.functional.CollectionTest.testQueueDeserialization":570,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":243,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":259,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":433,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":182,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":390,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":33,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":368,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":476,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":539,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":554,"com.google.gson.functional.MapTest.testRawMapSerialization":51,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":160,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":567,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":381,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":94,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":527,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":137,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":498,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":64,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":66,"com.google.gson.functional.PrimitiveTest.testByteSerialization":284,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":397,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":451,"com.google.gson.ObjectTypeAdapterTest.testSerialize":147,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":599,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":472,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":227,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":81,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":462,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":550,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":153,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":344,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":430,"com.google.gson.functional.MapTest.testMapWithQuotes":38,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":604,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":432,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":305,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":17,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":318,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":126,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":603,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":122,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":490,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":334,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":537,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":575,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":365,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":615,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":128,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":358,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":82,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":367,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":280,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":612,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":142,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":454,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":388,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":447,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":98,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":179,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":200,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":14,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":401,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":218,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":348,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":315,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":526,"com.google.gson.functional.ObjectTest.testNestedSerialization":528,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":77,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":231,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":436,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":473,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":477,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":50,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":547,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":479,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":158,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":165,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":175,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":520,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":294,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":330,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":113,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":170,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":233,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":111,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":530,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":194,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":435,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":457,"com.google.gson.functional.CollectionTest.testSetSerialization":144,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":206,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":312,"com.google.gson.functional.StringTest.testStringValueSerialization":438,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":573,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":201,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":70,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":89,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":557,"com.google.gson.MixedStreamTest.testWriteInvalidState":163,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":448,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":613,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":236,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":242,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":466,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":606,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":551,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":131,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":180,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":577,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":608,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":600,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":30,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":171,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":453},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"tindex":"2e544727-3e8b-11e6-8c1a-ad0e262249a4","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"2e549548-3e8b-11e6-8c1a-ff11d044d305","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"2e54bc59-3e8b-11e6-8c1a-055bb995ca11","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"2e54bc5a-3e8b-11e6-8c1a-fd0d5f08f4af","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"2e54bc5b-3e8b-11e6-8c1a-5b7e76977576","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    synchronized(java.text.DateFormat) {\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException e) {\n            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[68,69,70,71,72,73,1,74,75,2,3,4,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,8,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,20,42,47,53,128,129,130,61,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147],"tindex":"2e54e36c-3e8b-11e6-8c1a-af644ef444d2","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"2e550a7d-3e8b-11e6-8c1a-e57824a2a263","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[148,149,150,151,0,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,68,172,173,174,175,176,177,178,179,180,69,70,71,72,73,1,74,75,2,3,4,76,77,181,182,183,184,185,186,187,188,189,78,79,190,191,192,193,194,195,196,197,198,199,200,201,80,81,202,82,83,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,84,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,85,306,307,5,308,86,309,310,311,312,6,313,314,315,316,317,318,7,319,320,87,321,88,89,322,90,91,92,93,94,95,96,97,98,99,100,101,323,324,325,102,103,326,104,327,328,105,329,106,330,107,108,109,331,110,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,111,112,355,356,357,358,359,360,361,362,363,8,364,365,366,367,368,369,113,370,371,372,373,374,375,376,114,377,378,379,380,381,382,383,9,10,384,385,115,386,387,388,389,390,391,116,392,393,394,395,396,11,397,398,399,400,401,12,402,117,403,118,119,404,405,406,407,408,409,410,411,13,14,120,121,122,123,124,412,413,414,415,125,416,417,126,418,127,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,15,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,16,17,18,19,20,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,21,502,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,128,518,129,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,130,61,537,538,539,540,541,542,131,132,133,134,135,136,543,544,545,546,547,548,137,549,550,551,552,553,138,554,555,139,556,557,558,559,140,560,561,141,562,563,564,142,143,565,566,567,144,568,145,569,570,571,62,63,572,573,574,146,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,64,65,66,590,591,147,67],"tindex":"2e55318e-3e8b-11e6-8c1a-4b09eec93133","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[592,147,67],"tindex":"2e55589f-3e8b-11e6-8c1a-c3ff6dd6df51","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1344","type":"CtBinaryOperatorImpl","sourcecode":"p == l"},"failures":[],"tindex":"2e5558a0-3e8b-11e6-8c1a-8df42ca56669","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","l":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"2e5558a1-3e8b-11e6-8c1a-c3760eb0a3f1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"2e557eb2-3e8b-11e6-8c1a-b72d0c7f2885","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"2e55a5c3-3e8b-11e6-8c1a-c591f0ddaa41","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"2e55ccd4-3e8b-11e6-8c1a-43d29f5837ed","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[284],"tindex":"2e55ccd5-3e8b-11e6-8c1a-ddb93d2b81a8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"2e55ccd6-3e8b-11e6-8c1a-a9144a900822","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if ((from instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            if (from == from) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from","b":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"2e55f3e7-3e8b-11e6-8c1a-111d22a2b7b1","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.TypeVariable) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonStreamParser:82","type":"CtUnaryOperatorImpl","sourcecode":"!(hasNext())"},"failures":[],"tindex":"2e561af8-3e8b-11e6-8c1a-81f2a39854eb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[593,148,149,150,153,154,155,156,157,158,160,161,594,162,595,163,164,596,165,166,167,168,597,598,169,170,171,68,172,173,174,175,176,177,178,179,180,1,74,75,2,3,4,76,77,181,182,183,184,185,186,187,188,189,78,79,190,191,192,193,194,195,196,197,198,199,200,201,599,600,80,81,202,82,83,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,84,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,85,306,307,5,308,86,309,310,311,312,6,313,314,315,316,317,318,7,319,320,87,321,88,89,322,90,91,92,93,94,95,96,97,98,99,100,101,323,324,325,102,103,326,104,327,328,105,329,106,330,107,108,109,331,110,332,333,601,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,602,111,112,603,355,356,604,357,358,605,359,360,361,362,606,363,8,364,365,366,367,368,369,113,370,371,372,373,374,375,376,114,377,378,379,607,380,381,382,383,9,608,10,384,385,115,386,387,388,389,390,391,116,392,393,394,609,610,395,396,11,397,398,399,611,400,401,12,612,402,117,403,118,119,404,405,406,407,408,409,410,411,13,14,120,121,122,123,124,412,413,414,415,125,416,417,418,127,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,15,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,16,17,18,19,20,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,21,502,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,613,128,518,129,519,614,520,615,521,522,523,524,525,526,527,528,529,530,531,532,533,534,616,535,536,130,61,537,538,539,540,541,542,131,132,133,134,135,136,543,544,545,546,547,548,137,549,550,551,552,553,138,554,555,139,556,557,558,559,140,560,561,141,562,563,564,142,143,565,566,567,144,568,145,569,570,571,62,63,572,573,574,146,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,617],"tindex":"2e561af9-3e8b-11e6-8c1a-5f51478583c4","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:62","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"2e56420a-3e8b-11e6-8c1a-d911fc9c5ba2","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"other","com.google.gson.stream.JsonToken.NULL":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"2e56691b-3e8b-11e6-8c1a-3dc22e160453","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (!(type instanceof java.lang.reflect.WildcardType)) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:536","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_DOCUMENT)"},"failures":[],"tindex":"2e56691c-3e8b-11e6-8c1a-71d31b1b07a4","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"modifier","com.google.gson.stream.JsonScope.EMPTY_DOCUMENT":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"2e56691d-3e8b-11e6-8c1a-0f03a60f6931","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"2e56902e-3e8b-11e6-8c1a-0584a31271c6","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if ((from instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            if (from == from) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"2e57055f-3e8b-11e6-8c1a-1394c47a6610","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"2e570560-3e8b-11e6-8c1a-ad138228c7d2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294915/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":65,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":131,"com.google.gson.functional.StringTest.testStringValueDeserialization":437,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":188,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":511,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":565,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":213,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":551,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":23,"com.google.gson.MixedStreamTest.testWriteLenient":413,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":246,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":28,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":189,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":199,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":529,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":597,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":211,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":264,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":153,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":572,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":13,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":455,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":642,"com.google.gson.functional.ObjectTest.testSingletonLists":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":242,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":265,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":132,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":560,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":626,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":74,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":518,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":539,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":88,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":11,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":599,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":449,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":445,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":20,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":122,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":593,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":470,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":404,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":554,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":101,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":56,"com.google.gson.functional.EnumTest.testEnumCaseMapping":210,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":90,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":130,"com.google.gson.functional.JsonTreeTest.testToJsonTree":78,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":553,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":519,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":73,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":85,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":226,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":509,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":561,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":391,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":42,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":196,"com.google.gson.functional.ObjectTest.testNullDeserialization":545,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":363,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":48,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":443,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":536,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":312,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":402,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":566,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":276,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":9,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":99,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":341,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":542,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":401,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":256,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":379,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":605,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":604,"com.google.gson.JsonParserTest.testParseString":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":517,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":304,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":27,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":609,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":113,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":241,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":580,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":60,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":467,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":590,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":21,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":508,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":83,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":3,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":621,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":186,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":305,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":495,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":591,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":109,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":281,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":39,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":94,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":533,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":217,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":290,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":472,"com.google.gson.metrics.PerformanceTest.testDummy":419,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":527,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":353,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":160,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":424,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":69,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":474,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":630,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":236,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":421,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":340,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":34,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":635,"com.google.gson.functional.CollectionTest.testSetDeserialization":481,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":154,"com.google.gson.functional.EnumTest.testEnumSet":204,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":272,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":488,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":583,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":343,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":505,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":277,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":159,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":403,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":594,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":423,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":600,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":96,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":361,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":308,"com.google.gson.functional.MapTest.testHashMapDeserialization":462,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":563,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":514,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":95,"com.google.gson.MixedStreamTest.testReadNulls":414,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":614,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":326,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":367,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":81,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":634,"com.google.gson.functional.MapTest.testSortedMap":471,"com.google.gson.functional.MapTest.testMapSerialization":175,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":49,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":328,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":448,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":588,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":431,"com.google.gson.functional.MapTest.testSerializeMaps":169,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":260,"com.google.gson.functional.MapTest.testComplexKeysSerialization":184,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":487,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":473,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":365,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":486,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":398,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":45,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":639,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":359,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":485,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":14,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":125,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":214,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":544,"com.google.gson.functional.MapTest.testStringKeyDeserialization":57,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":345,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":316,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":187,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":569,"com.google.gson.functional.PrettyPrintingTest.testMap":123,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":384,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":564,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":223,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":329,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":632,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":87,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":434,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":136,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":438,"com.google.gson.functional.MapTest.testMapSerializationEmpty":185,"com.google.gson.functional.CollectionTest.testQueueSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":233,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":584,"com.google.gson.functional.MapTest.testMapOfMapSerialization":174,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":296,"com.google.gson.JavaSerializationTest.testMapIsSerializable":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":510,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":479,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":301,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":350,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":133,"com.google.gson.functional.FieldNamingTest.testIdentity":261,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":622,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":334,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":546,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":17,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":77,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":216,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":266,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":522,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":555,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":405,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":134,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":338,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":299,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":516,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":255,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":324,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":460,"com.google.gson.functional.MapTest.testMapSubclassSerialization":168,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":315,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":64,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":458,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":489,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":145,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":386,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":410,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":578,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":501,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":613,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":631,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":158,"com.google.gson.functional.EnumTest.testEnumSubclass":207,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":302,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":89,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":538,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":286,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":10,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":337,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":596,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":344,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":636,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":556,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":219,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":581,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":497,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":29,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":399,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":428,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":44,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":535,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":585,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":297,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":250,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":528,"com.google.gson.MixedStreamTest.testWriteNulls":411,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":461,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":115,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":493,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":111,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":364,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":454,"com.google.gson.CommentsTest.testParseComments":649,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":268,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":348,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":644,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":333,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":432,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":595,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":447,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":135,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":177,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":446,"com.google.gson.MixedStreamTest.testReadInvalidState":408,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":150,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":252,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":314,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":142,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":12,"com.google.gson.JsonParserTest.testParseMixedArray":0,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":289,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":435,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":330,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":5,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":293,"com.google.gson.JsonArrayTest.testRemove":33,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":239,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":309,"com.google.gson.functional.MapTest.testMapDeserialization":54,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":235,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":128,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":22,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":16,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":641,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":171,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":356,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":393,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":390,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":53,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":640,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":76,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":500,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":275,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":283,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":369,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":387,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":227,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":456,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":15,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":375,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":124,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":254,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":552,"com.google.gson.functional.PrimitiveTest.testShortSerialization":313,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":625,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":395,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":598,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":103,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":579,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":43,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":228,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":562,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":257,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":206,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":191,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":40,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":262,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":464,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":575,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":203,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":317,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":61,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":515,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":646,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":46,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":418,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":320,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":608,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":215,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":284,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":623,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":629,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":220,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":602,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":436,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":346,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":582,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":549,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":532,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":209,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":212,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":371,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":197,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":503,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":624,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":240,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":394,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":568,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":230,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":513,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":30,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":475,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":557,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":603,"com.google.gson.JsonArrayTest.testSet":31,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":300,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":318,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":104,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":205,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":392,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":66,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":50,"com.google.gson.functional.MapTest.testGeneralMapField":181,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":531,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":18,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":108,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":611,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":117,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":339,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":247,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":221,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":288,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":378,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":307,"com.google.gson.MixedStreamTest.testReadMixedStreamed":417,"com.google.gson.JsonObjectTest.testDeepCopy":35,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":7,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":294,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":504,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":200,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":406,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":648,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":526,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":586,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":102,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":238,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":55,"com.google.gson.JsonArrayTest.testDeepCopy":32,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":167,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":463,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":319,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":349,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":141,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":148,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":576,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":237,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":494,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":335,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":498,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":645,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":352,"com.google.gson.functional.ObjectTest.testNestedDeserialization":550,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":139,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":615,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":627,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":100,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":610,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":332,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":1,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":439,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":469,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":490,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":157,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":311,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":370,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":25,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":524,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":202,"com.google.gson.functional.ObjectTest.testNullSerialization":273,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":373,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":459,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":465,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":180,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":287,"com.google.gson.functional.MapTest.testInterfaceTypeMap":178,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":430,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":385,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":355,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":86,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":558,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":144,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":208,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":388,"com.google.gson.MixedStreamTest.testReadClosed":409,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":222,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":98,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":570,"com.google.gson.MixedStreamTest.testWriteClosed":416,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":195,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":616,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":520,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":628,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":162,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":354,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":68,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":285,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":253,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":270,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":357,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":194,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":451,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":589,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":149,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":637,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":198,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":8,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":243,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":618,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":321,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":612,"com.google.gson.JsonParserTest.testParseInvalidJson":2,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":292,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":502,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":106,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":366,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":67,"com.google.gson.functional.CollectionTest.testQueueDeserialization":483,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":295,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":587,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":442,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":251,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":452,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":172,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":232,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":380,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":548,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":190,"com.google.gson.functional.MapTest.testRawMapSerialization":183,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":407,"com.google.gson.JsonParserTest.testParseReader":37,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":512,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":278,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":368,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":52,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":397,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":110,"com.google.gson.functional.PrimitiveTest.testByteSerialization":310,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":358,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":79,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":376,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":567,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":521,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":116,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":258,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":163,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":440,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":651,"com.google.gson.functional.MapTest.testMapWithQuotes":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":224,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":573,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":441,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":342,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":647,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":351,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":59,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":26,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":152,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":643,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":155,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":547,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":229,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":303,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":537,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":119,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":225,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":231,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":523,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":601,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":360,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":480,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":426,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":107,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":249,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":372,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":336,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":453,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":263,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":633,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":457,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":559,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":70,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":540,"com.google.gson.internal.LinkedTreeMapTest.testClear":41,"com.google.gson.functional.ObjectTest.testNestedSerialization":279,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":105,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":291,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":377,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":444,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":140,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":182,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":143,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":121,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":92,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":415,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":274,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":617,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":607,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":72,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":507,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":91,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":571,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":650,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":499,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":541,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":450,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":137,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":114,"com.google.gson.functional.CollectionTest.testSetSerialization":201,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":620,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":126,"com.google.gson.functional.StringTest.testStringValueSerialization":138,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":347,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":381,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":322,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":476,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":491,"com.google.gson.MixedStreamTest.testWriteInvalidState":412,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":425,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":271,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":574,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":118,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":577,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":63,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":84,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":259,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":362,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":619,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":4,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":244,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":80,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":466,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":112,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":420},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d0ebaa6-3f18-11e6-adf3-733f85c284cb","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if ((other instanceof java.lang.reflect.ParameterizedType) && (!(other.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        {\n            if (other instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d0f2fd7-3f18-11e6-adf3-3d5851a633db","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"typeOfT","context":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d0f2fd8-3f18-11e6-adf3-01cae6c4e3a2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a == null) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"tindex":"5d0f56e9-3f18-11e6-adf3-bf50f6fadedf","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d0f7dfa-3f18-11e6-adf3-590142f2dbdc","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d0f7dfb-3f18-11e6-adf3-3bdc6cd27fb2","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d0fa50c-3f18-11e6-adf3-3bb14f87d6a1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5d0fcc1d-3f18-11e6-adf3-75c3cb56f0f1","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d0fcc1e-3f18-11e6-adf3-fd987ef0801e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[36,37,38,39,40,41,42,43,44,45,46,47,48,49,20,50,51,52,21,53,54,55,56,57,58,59,23,60,24,61,25,62,63,64,65,66,67,68,69,70,29,71,30,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"tindex":"5d0ff32f-3f18-11e6-adf3-fff8acd824e8","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[87,88,89,90,91,92,39,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,20,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,22,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,59,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,26,223,224,225,226,227,63,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,64,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,70,350,351,352,353,354,355,356,357,358,74,359,360,361,362,363,364,365,366,76,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,79,80,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,81,82,83,399,400,401,402,403,404,405,406],"tindex":"5d101a40-3f18-11e6-adf3-8f7ef983e352","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:915","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d104151-3f18-11e6-adf3-b9fa6670fae6","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if ((offset == count) || (p == offset)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"count","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5d104152-3f18-11e6-adf3-85f66381791d","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d104153-3f18-11e6-adf3-1b686c8c1568","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if ((other instanceof java.lang.reflect.ParameterizedType) && (!(other.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        {\n            if (other instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"other","type":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[407,408,409,410,411,412,413,414,415,416,417,418,87,88,89,90,91,92,419,39,93,94,95,420,421,422,423,424,96,97,98,99,100,101,102,103,104,105,106,107,425,108,109,110,111,112,426,427,113,114,115,428,429,430,116,431,117,432,118,433,119,434,120,435,121,436,122,123,124,125,126,127,128,129,437,130,131,132,133,134,438,439,135,440,136,441,442,443,137,444,445,138,20,139,446,140,141,447,448,142,50,143,51,52,145,146,449,450,147,148,451,452,149,453,150,151,152,153,154,155,454,156,157,158,159,160,161,455,162,163,164,456,165,457,458,166,459,167,460,22,461,462,463,168,169,464,465,170,466,171,54,172,467,468,55,469,173,174,175,56,470,176,177,471,178,179,180,181,182,183,472,184,185,57,186,473,474,187,188,189,190,191,192,475,476,477,193,194,195,196,197,478,479,198,480,481,199,200,482,201,202,58,203,483,204,205,206,207,484,485,208,486,209,210,211,487,488,212,489,213,490,214,491,215,492,216,217,23,60,24,61,25,493,494,495,218,496,497,219,498,220,221,222,62,499,500,26,501,223,224,502,225,27,226,227,503,504,63,505,228,506,229,230,231,232,233,507,234,508,235,236,509,237,510,238,239,240,241,511,242,512,513,243,514,244,245,515,246,247,516,248,249,250,251,252,253,517,518,254,255,519,256,520,257,258,259,260,261,28,521,522,523,524,262,64,263,264,525,526,265,527,266,267,528,529,268,530,531,269,532,533,270,271,534,535,272,536,273,274,537,538,275,539,276,277,540,278,279,280,541,281,542,543,544,545,282,546,283,284,547,285,548,549,550,551,552,553,554,286,555,287,556,557,558,559,560,288,561,562,289,563,564,565,566,567,568,569,290,291,570,571,572,573,574,292,575,293,294,576,577,295,578,579,296,580,297,298,581,582,299,300,583,584,585,301,586,587,588,589,590,591,592,593,302,594,303,595,304,305,596,597,306,598,599,307,600,308,601,602,603,309,310,311,312,313,314,315,604,605,606,316,607,317,608,609,610,318,319,611,320,612,613,326,327,65,328,614,615,329,616,66,330,331,332,333,67,68,617,334,335,618,336,619,337,338,339,620,340,341,342,621,343,69,622,623,344,345,346,624,347,348,349,625,70,626,350,351,352,627,29,71,353,354,355,30,72,628,629,356,357,73,630,358,631,74,359,632,633,634,360,361,362,363,364,365,635,366,75,76,77,78,367,368,369,370,371,372,373,636,637,374,638,375,639,640,376,377,378,379,380,381,79,80,382,383,384,385,386,387,388,389,641,642,390,643,391,392,393,644,394,395,396,397,645,398,646,81,647,648,82,83,649,399,400,650,401,402,651,403,404,405,406],"tindex":"5d104154-3f18-11e6-adf3-bfadf04ac5e0","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d108f75-3f18-11e6-adf3-35c24338f58d","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d108f76-3f18-11e6-adf3-6b1bc4ccc187","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d108f77-3f18-11e6-adf3-efbfc4801a7e","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"5d108f78-3f18-11e6-adf3-e3534dd10553","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1397","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"5d108f79-3f18-11e6-adf3-ff3e216ca041","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == '#') {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467328070906/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
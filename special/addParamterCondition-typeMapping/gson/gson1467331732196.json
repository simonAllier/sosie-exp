{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":286,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":315,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":42,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":75,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":19,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":14,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":57,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":71,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":278,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":160,"com.google.gson.MixedStreamTest.testWriteLenient":16,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":215,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":165,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":12,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":123,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":183,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":102,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":274,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":149,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":222,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":276,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":29,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":254,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":190,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":296,"com.google.gson.functional.ObjectTest.testSingletonLists":81,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":7,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":218,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":173,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":212,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":300,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":143,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":235,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":282,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":25,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":84,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":200,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":270,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":256,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":257,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":151,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":78,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":202,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":250,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":227,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":5,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":290,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":126,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":159,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":275,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":325,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":117,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":41,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":298,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":40,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":328,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":97,"com.google.gson.functional.JsonTreeTest.testToJsonTree":207,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":299,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":104,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":268,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":11,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":68,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":322,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":59,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":301,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":118,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":122,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":156,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":108,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":177,"com.google.gson.functional.MapTest.testGeneralMapField":47,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":225,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":194,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":4,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":179,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":320,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":232,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":9,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":150,"com.google.gson.MixedStreamTest.testReadMixedStreamed":142,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":134,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":242,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":36,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":96,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":172,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":209,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":20,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":162,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":37,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":28,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":8,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":245,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":26,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":216,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":260,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":80,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":313,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":292,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":98,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":109,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":72,"com.google.gson.functional.ObjectTest.testNestedDeserialization":251,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":199,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":240,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":53,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":264,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":331,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":255,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":83,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":144,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":228,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":304,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":38,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":49,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":279,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":285,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":61,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":174,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":332,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":266,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":188,"com.google.gson.JavaSerializationTest.testListIsSerializable":22,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":186,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":219,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":114,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":310,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":55,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":73,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":30,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":46,"com.google.gson.functional.MapTest.testInterfaceTypeMap":44,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":146,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":321,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":197,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":267,"com.google.gson.functional.CollectionTest.testSetDeserialization":112,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":88,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":318,"com.google.gson.functional.EnumTest.testEnumSet":121,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":314,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":189,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":69,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":31,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":236,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":63,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":145,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":148,"com.google.gson.MixedStreamTest.testWriteClosed":141,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":155,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":213,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":101,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":226,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":64,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":100,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":93,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":90,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":249,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":329,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":152,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":305,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":74,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":164,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":229,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":272,"com.google.gson.functional.MapTest.testSortedMap":43,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":107,"com.google.gson.functional.MapTest.testMapSerialization":39,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":261,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":175,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":168,"com.google.gson.functional.MapTest.testComplexKeysSerialization":50,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":263,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":312,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":111,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":6,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":54,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":127,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":196,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":319,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":120,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":204,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":198,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":316,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":92,"com.google.gson.functional.CollectionTest.testQueueDeserialization":115,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":327,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":214,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":262,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":280,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":35,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":243,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":244,"com.google.gson.functional.MapTest.testStringKeyDeserialization":52,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":2,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":85,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":210,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":323,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":103,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":138,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":56,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":113,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":238,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":306,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":154,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":178,"com.google.gson.functional.MapTest.testMapSerializationEmpty":51,"com.google.gson.functional.CollectionTest.testQueueSerialization":106,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":18,"com.google.gson.ObjectTypeAdapterTest.testSerialize":137,"com.google.gson.JavaSerializationTest.testMapIsSerializable":21,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":208,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":3,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":110,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":184,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":131,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":330,"com.google.gson.functional.FieldNamingTest.testIdentity":169,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":166,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":65,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":70,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":291,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":246,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":206,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":220,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":284,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":95,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":253,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":287,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":87,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":136,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":130,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":27,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":60,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":248,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":76,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":23,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":192,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":230,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":139,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":182,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":163,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":211,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":62,"com.google.gson.functional.EnumTest.testEnumSubclass":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":10,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":234,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":132,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":185,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":259,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":13,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":311,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":309,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":293,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":24,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":289,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":326,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":288,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":99,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":324,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":135,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":237,"com.google.gson.functional.ObjectTest.testNestedSerialization":239,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":82,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":302,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":283,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":48,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":77,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":221,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":58,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":17,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":79,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":116,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":233,"com.google.gson.CommentsTest.testParseComments":15,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":187,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":195,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":223,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":297,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":269,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":171,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":91,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":157,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":241,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":258,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":67,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":176,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":133,"com.google.gson.functional.CollectionTest.testSetSerialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":203,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":170,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":105,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":128,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":281,"com.google.gson.MixedStreamTest.testWriteInvalidState":140,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":89,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":129,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":181,"com.google.gson.functional.MapTest.testMapDeserialization":34,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":303,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":167,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":193,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":295,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":33,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":271,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":119,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":294,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":317,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":125,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":158,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":66,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":247,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":307,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":32,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":265,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":191},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3],"tindex":"fe2df6e4-3f1f-11e6-a926-8dec7a7c37f4","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == null) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14],"tindex":"fe2eba35-3f1f-11e6-a926-f9bbe33b5936","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,10,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],"tindex":"fe2ee146-3f1f-11e6-a926-13608c21dca2","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1240","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fe2fa497-3f1f-11e6-a926-aba4bcc26f3f","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset == count) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY":"count"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:59","type":"CtUnaryOperatorImpl"},"failures":[135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,23,24,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,35,41,44,46,47,50,57,175,176,177,178,179,180,181,182,183,184,185,186,60,187,61,62,63,188,189,190,64,65,66,191,67,192,68,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,75,214,76,77,78,215,216,217,218,219,220,81,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,83,242,243,244,245,246,247,84,248,249,85,250,251,252,253,86,87,254,88,89,90,255,91,92,93,256,257,258,259,260,261,262,263,94,96,97,98,264,99,265,266,100,267,268,269,101,270,271,272,273,102,274,275,112,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,117,295,296,118,119,297,298,299,120,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,127,128,129,130,131,132,320,133,321,134],"tindex":"fe2fcba8-3f1f-11e6-a926-452b1b524b5d","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (!(typeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fe2ff2b9-3f1f-11e6-a926-81db898e90e2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fe3019ca-3f1f-11e6-a926-93ca022e19ed","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl"},"failures":[],"tindex":"fe3040db-3f1f-11e6-a926-d57a1607ed1c","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isAssignableFrom(subclass)) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"subclass","classOfPrimitive":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fe3040dc-3f1f-11e6-a926-49ad130a2064","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[322],"tindex":"fe3067ed-3f1f-11e6-a926-07276f56fd81","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fe308efe-3f1f-11e6-a926-d90061963fbc","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fe308eff-3f1f-11e6-a926-d732f3df5d04","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[323,202,324,215,216,217,219],"tindex":"fe30b610-3f1f-11e6-a926-778f9f23f8a4","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fe30dd21-3f1f-11e6-a926-c7e3e4051532","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.TypeVariable)) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl"},"failures":[325,326,327,328,329],"tindex":"fe30dd22-3f1f-11e6-a926-732d851f07b4","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fe310433-3f1f-11e6-a926-397a7d8c2226","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[330,331,332],"tindex":"fe310434-3f1f-11e6-a926-abd3644c8c0b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fe312b45-3f1f-11e6-a926-470818f48d80","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"fe312b46-3f1f-11e6-a926-2bf83af4d560","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"fe312b47-3f1f-11e6-a926-83cc11beffe4","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if ((!throwOnEof) && (!throwOnEof)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"throwOnEof","deserialize":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl"},"failures":[],"tindex":"fe31ee98-3f1f-11e6-a926-db8fdca23b52","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467331288132/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
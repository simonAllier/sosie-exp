{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":253,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":430,"com.google.gson.functional.StringTest.testStringValueDeserialization":428,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":664,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":189,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":513,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":553,"com.google.gson.stream.JsonWriterTest.testRepeatedName":656,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":71,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":245,"com.google.gson.MixedStreamTest.testWriteLenient":2,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":198,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":687,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":520,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":211,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":62,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":67,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":221,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":592,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":477,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":534,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":42,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":561,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":332,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":181,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":304,"com.google.gson.functional.ObjectTest.testSingletonLists":219,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":514,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":431,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":547,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":392,"com.google.gson.stream.JsonWriterTest.testStrings":675,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":620,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":138,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":528,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":231,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":399,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":330,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":594,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":176,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":641,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":444,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":25,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":17,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":588,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":669,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":185,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":540,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":636,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":348,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":371,"com.google.gson.functional.EnumTest.testEnumCaseMapping":476,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":403,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":429,"com.google.gson.functional.JsonTreeTest.testToJsonTree":291,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":539,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":530,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":281,"com.google.gson.stream.JsonWriterTest.testNulls":653,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":493,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":32,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":507,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":548,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":631,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":318,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":284,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":441,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":229,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":115,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":678,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":554,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":537,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":328,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":347,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":267,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":236,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":677,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":531,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":145,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":600,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":599,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":665,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":527,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":33,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":107,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":682,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":339,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":604,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":96,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":512,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":574,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":199,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":365,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":585,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":504,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":150,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":7,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":268,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":380,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":108,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":483,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":586,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":235,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":415,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":6,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":162,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":226,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":671,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":197,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":377,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":558,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":218,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":274,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":49,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":616,"com.google.gson.stream.JsonWriterTest.testEmptyArray":646,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":382,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":385,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":448,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":506,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":266,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":343,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":287,"com.google.gson.functional.CollectionTest.testSetDeserialization":190,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":43,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":91,"com.google.gson.functional.EnumTest.testEnumSet":469,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":479,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":578,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":50,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":615,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":496,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":48,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":315,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":589,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":165,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":595,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":668,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":139,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":345,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":111,"com.google.gson.functional.MapTest.testHashMapDeserialization":356,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":551,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":384,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":405,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":610,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":123,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":292,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":148,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":390,"com.google.gson.functional.MapTest.testSortedMap":374,"com.google.gson.functional.MapTest.testMapSerialization":58,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":124,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":171,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":583,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":424,"com.google.gson.functional.MapTest.testSerializeMaps":57,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":84,"com.google.gson.functional.MapTest.testComplexKeysSerialization":188,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":478,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":381,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":638,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":15,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":192,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":286,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":310,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":299,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":474,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":20,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":333,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":72,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":238,"com.google.gson.functional.MapTest.testStringKeyDeserialization":379,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":130,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":118,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":61,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":557,"com.google.gson.functional.PrettyPrintingTest.testMap":18,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":552,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":627,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":64,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":490,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":622,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":34,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":398,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":426,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":434,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":438,"com.google.gson.functional.MapTest.testMapSerializationEmpty":378,"com.google.gson.functional.CollectionTest.testQueueSerialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":502,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":579,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":672,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":674,"com.google.gson.functional.MapTest.testMapOfMapSerialization":370,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":573,"com.google.gson.JavaSerializationTest.testMapIsSerializable":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":509,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":461,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":648,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":104,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":252,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":134,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":689,"com.google.gson.functional.FieldNamingTest.testIdentity":85,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":432,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":386,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":128,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":659,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":239,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":336,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":73,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":89,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":290,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":533,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":651,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":541,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":154,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":681,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":433,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":613,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":102,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":522,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":497,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":529,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":354,"com.google.gson.functional.MapTest.testMapSubclassSerialization":358,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":598,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":86,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":183,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":481,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":1,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":301,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":449,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":571,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":489,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":608,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":282,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":47,"com.google.gson.functional.EnumTest.testEnumSubclass":472,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":105,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":230,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":400,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":99,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":263,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":329,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":591,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":270,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":156,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":543,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":75,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":660,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":576,"com.google.gson.stream.JsonWriterTest.testTwoNames":647,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":204,"com.google.gson.stream.JsonWriterTest.testNullName":654,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":272,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":313,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":421,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":535,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":580,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":101,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":196,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":662,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":658,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":524,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":220,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":355,"com.google.gson.MixedStreamTest.testWriteNulls":679,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":12,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":657,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":383,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":417,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":180,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":285,"com.google.gson.CommentsTest.testParseComments":634,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":90,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":307,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":387,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":127,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":168,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":590,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":447,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":373,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":436,"com.google.gson.MixedStreamTest.testReadInvalidState":396,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":54,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":526,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":172,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":645,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":331,"com.google.gson.JsonParserTest.testParseMixedArray":321,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":550,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":686,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":427,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":257,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":324,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":566,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":250,"com.google.gson.JsonArrayTest.testRemove":342,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":510,"com.google.gson.functional.MapTest.testMapDeserialization":364,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":505,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":23,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":56,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":4,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":303,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":335,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":137,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":363,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":306,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":319,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":300,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":140,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":206,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":97,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":536,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":293,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":628,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":494,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":182,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":334,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":143,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":19,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":372,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":350,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":538,"com.google.gson.functional.PrimitiveTest.testShortSerialization":116,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":619,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":632,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":593,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":411,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":688,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":572,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":208,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":549,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":81,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":471,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":63,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":215,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":359,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":565,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":119,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":467,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":201,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":325,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":519,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":9,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":160,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":122,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":603,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":29,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":195,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":240,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":269,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":279,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":485,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":640,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":247,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":131,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":577,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":243,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":225,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":475,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":295,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":480,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":207,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":626,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":617,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":302,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":511,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":556,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":499,"com.google.gson.stream.JsonWriterTest.testNullStringValue":650,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":516,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":276,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":455,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":544,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":597,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":103,"com.google.gson.JsonArrayTest.testSet":340,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":120,"com.google.gson.stream.JsonWriterTest.testEmptyObject":667,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":166,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":305,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":470,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":256,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":173,"com.google.gson.functional.MapTest.testGeneralMapField":59,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":223,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":337,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":414,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":606,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":14,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":264,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":351,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":685,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":521,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":375,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":486,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":625,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":110,"com.google.gson.MixedStreamTest.testReadMixedStreamed":159,"com.google.gson.JsonObjectTest.testDeepCopy":344,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":326,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":495,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":567,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":312,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":464,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":637,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":670,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":217,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":581,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":410,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":401,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":79,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":367,"com.google.gson.JsonArrayTest.testDeepCopy":341,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":453,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":357,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":121,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":618,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":26,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":37,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":655,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":568,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":508,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":482,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":129,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":484,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":633,"com.google.gson.functional.ObjectTest.testNestedDeserialization":244,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":388,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":233,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":446,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":254,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":271,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":409,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":605,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":126,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":193,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":322,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":368,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":435,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":46,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":114,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":294,"com.google.gson.JavaSerializationTest.testListIsSerializable":402,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":202,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":214,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":69,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":142,"com.google.gson.stream.JsonWriterTest.testDoubles":673,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":452,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":360,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":187,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":542,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":152,"com.google.gson.functional.MapTest.testInterfaceTypeMap":186,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":423,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":352,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":275,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":545,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":28,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":191,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":684,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":298,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":487,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":346,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":559,"com.google.gson.MixedStreamTest.testWriteClosed":158,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":255,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":459,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":224,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":532,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":51,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":136,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":260,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":98,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":258,"com.google.gson.stream.JsonWriterTest.testLongs":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":80,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":227,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":280,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":65,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":178,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":584,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":38,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":296,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":462,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":327,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":517,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":612,"com.google.gson.stream.JsonWriterTest.testNumbers":153,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":248,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":607,"com.google.gson.JsonParserTest.testParseInvalidJson":323,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":564,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":491,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":288,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":412,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":259,"com.google.gson.functional.CollectionTest.testQueueDeserialization":468,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":570,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":582,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":440,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":609,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":179,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":525,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":184,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":237,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":666,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":501,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":146,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":242,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":454,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":0,"com.google.gson.functional.MapTest.testRawMapSerialization":60,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":515,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":30,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":94,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":141,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":175,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":320,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":393,"com.google.gson.functional.PrimitiveTest.testByteSerialization":113,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":395,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":416,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":621,"com.google.gson.ObjectTypeAdapterTest.testSerialize":151,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":643,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":555,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":3,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":212,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":13,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":82,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":52,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":437,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":635,"com.google.gson.functional.MapTest.testMapWithQuotes":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":77,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":562,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":439,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":614,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":391,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":135,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":70,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":76,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":41,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":661,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":630,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":44,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":241,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":24,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":498,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":228,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":492,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":36,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":500,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":596,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":680,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":463,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":418,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":523,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":155,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":261,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":450,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":87,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":623,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":451,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":546,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":683,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":133,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":232,"com.google.gson.functional.ObjectTest.testNestedSerialization":95,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":167,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":100,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":443,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":624,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":349,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":376,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":174,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":16,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":397,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":404,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":676,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":92,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":611,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":602,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":277,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":209,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":5,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":560,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":205,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":234,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":177,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":31,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":442,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":316,"com.google.gson.functional.CollectionTest.testSetSerialization":68,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":265,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":132,"com.google.gson.functional.StringTest.testStringValueSerialization":445,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":147,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":194,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":249,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":456,"com.google.gson.MixedStreamTest.testWriteInvalidState":157,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":413,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":642,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":563,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":169,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":569,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":161,"com.google.gson.stream.JsonWriterTest.testBooleans":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":78,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":83,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":283,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":8,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":408,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":518,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":644,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":362,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":663,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":11,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":406},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b678c1d5-3f1c-11e6-89cd-79ac2896b1c5","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:746","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b6793706-3f1c-11e6-89cd-b559d01a861f","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (((start == end) || (last == start)) || (last == end)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"start","last":"start","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT":"end","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"b6793707-3f1c-11e6-89cd-9df7d66c4733","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[84,155,156],"tindex":"b6795e18-3f1c-11e6-89cd-95cc538a4e2d","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl"},"failures":[0,1,157,158,159,160,6,161,162,163,164,165,166,167,14,168,169,16,170,19,20,24,25,26,171,172,173,174,175,35,176,177,36,37,178,179,38,39,41,42,43,44,180,46,47,48,49,50,181,51,52,53,182,54,183,55,184,185,186,187,59,188,189,62,63,66,190,67,68,70,191,192,71,193,72,194,195,196,73,197,198,199,200,201,202,74,203,204,75,205,206,207,208,209,79,210,80,81,82,83,84,85,211,212,213,214,215,86,87,216,217,88,218,89,219,220,221,90,222,223,224,225,226,227,228,91,229,92,230,231,93,232,94,95,233,234,235,236,237,238,96,239,97,240,241,98,242,243,244,245,246,247,248,249,250,251,252,123,253,124,254,125,255,256,257,258,126,127,259,260,128,129,261,262,263,264,265,266,267,268,269,270,131,132,271,272,273,274,136,275,276,277,278,279,137,280,281,282,138,139,283,284,285,286,287,288,289,140,290,291,292,141,293,294,295,155,142,156,296,297,298,143,299,300,144,145,146,147,301,302,303,304,305,306,307,308,309,310,311,148,312,149,150,151,313,314,315],"tindex":"b6795e19-3f1c-11e6-89cd-c923b3b54929","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isAssignableFrom(raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw","rawSupertype":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:409","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b679852a-3f1c-11e6-89cd-b3fc6181ef5e","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b679ac3b-3f1c-11e6-89cd-05d1a8014180","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b679ac3c-3f1c-11e6-89cd-d380869141cf","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b679ac3d-3f1c-11e6-89cd-99878ea3f299","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[316,317,184,186,187,189,318,208,249,271,272,273,274,275,276,277,280,281,290,302,319,305,306,320,310],"tindex":"b679d34e-3f1c-11e6-89cd-c5f89c93e525","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b679d34f-3f1c-11e6-89cd-19d8af95736a","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != (src[0])) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"src","lowerBound":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[208,142],"tindex":"b679d350-3f1c-11e6-89cd-db566d7e5646","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b679f961-3f1c-11e6-89cd-6f12be1c9ce0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b679f962-3f1c-11e6-89cd-7f4ca2f99f51","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b679f963-3f1c-11e6-89cd-c9e7f49c4ec8","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[321,322,323,7,8,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,56,198,200,76,339,340,341,342,343,344],"tindex":"b679f964-3f1c-11e6-89cd-15fc31999137","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67a2075-3f1c-11e6-89cd-99ad8c7681e0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67a2076-3f1c-11e6-89cd-83996184c338","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67a2077-3f1c-11e6-89cd-89863258f568","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67a2078-3f1c-11e6-89cd-91deaf854e76","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[345,346,347,348,349,26,172,174,70,350,123,253,124,254,255,351,352,315],"tindex":"b67a2079-3f1c-11e6-89cd-b1f7d0b3d057","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67a478a-3f1c-11e6-89cd-aff5ba938cc6","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67a478b-3f1c-11e6-89cd-e37421382fe3","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1358","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67a478c-3f1c-11e6-89cd-b735ea20fa12","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (((i == ' ') || (c == '\\r')) || (c == '\\t')) {\n        {\n            return char[][i];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[208],"tindex":"b67a478d-3f1c-11e6-89cd-01ea621aaada","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"b67a6e9e-3f1c-11e6-89cd-b9b4aac93206","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json.isBoolean()) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67a6e9f-3f1c-11e6-89cd-eda1f2aefc15","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67a6ea0-3f1c-11e6-89cd-699f70591993","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"context","type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"b67a6ea1-3f1c-11e6-89cd-430e48b3ac75","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json.isBoolean()) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67a6ea2-3f1c-11e6-89cd-2fb3f9210797","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"b67a95b3-3f1c-11e6-89cd-4d77bcd1a459","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67a95b4-3f1c-11e6-89cd-3d6fa8e5f24e","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[353,18,19,354,355,356,357,358,57,359,360,361,362,363,364,184,365,366,367,368,369,370,58,371,185,372,373,374,186,375,187,59,376,60,377,188,378,379,380,381,382,61,189,383,208,384,385,86,87,240,257,127,259,260,386,387,388,389,390,148,391,312,149,150,392,393,394,395],"tindex":"b67a95b5-3f1c-11e6-89cd-8d70e32d2b54","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType == keyType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"keyType","b":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:438","type":"CtBinaryOperatorImpl"},"failures":[0,396,1,157,2,397,158,159,160,398,399,400,401,353,402,403,5,404,6,161,162,405,406,163,164,165,407,345,408,346,347,409,348,410,411,166,167,412,10,413,414,415,416,417,11,418,419,420,316,12,421,422,423,13,424,14,168,169,425,317,426,15,427,16,170,17,18,19,20,21,22,23,24,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,25,446,349,26,447,171,172,173,174,448,175,449,35,176,177,36,37,178,179,38,450,39,40,41,42,43,44,180,45,46,47,48,49,50,181,51,52,53,182,54,451,183,55,452,453,354,56,355,356,357,358,57,359,360,361,362,363,364,184,365,366,367,368,369,370,58,371,185,372,373,374,186,375,187,59,376,60,377,188,378,379,380,381,382,61,189,62,454,63,64,455,456,457,458,65,459,318,66,460,461,462,463,190,67,464,465,68,69,466,467,468,70,469,470,471,472,473,474,191,192,475,476,477,478,479,480,481,71,193,72,194,195,196,73,197,198,199,200,201,202,383,482,483,74,203,204,75,484,485,486,487,488,205,206,76,489,490,77,491,492,339,493,494,207,495,78,496,208,497,498,499,500,501,502,209,503,504,505,506,507,508,509,79,510,511,512,513,514,515,516,517,384,518,385,519,520,521,522,210,523,524,525,526,80,527,528,350,529,530,531,532,81,82,83,84,85,211,212,533,213,214,215,86,87,534,216,217,88,218,89,219,220,221,90,222,223,224,225,226,227,228,535,91,229,92,230,536,231,537,93,232,94,95,233,234,235,236,237,238,96,239,97,240,241,98,242,243,244,245,538,539,540,99,541,542,543,544,545,546,547,246,548,549,550,551,552,553,554,555,556,557,558,100,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,101,575,576,577,102,103,578,579,580,104,581,582,583,584,585,586,587,588,105,589,106,590,107,108,591,592,109,593,594,110,595,111,596,247,597,112,113,114,115,116,117,598,599,600,601,118,602,119,603,604,605,120,121,606,122,607,608,248,249,250,251,252,123,609,253,124,610,254,125,255,256,257,258,126,127,259,260,611,128,129,612,261,262,263,613,264,265,266,267,614,268,615,616,386,269,270,130,131,617,132,387,618,619,133,620,134,135,388,271,272,273,274,136,275,276,277,278,279,137,280,281,389,621,282,138,622,623,390,139,283,284,285,286,287,288,289,140,290,291,292,141,293,294,295,155,142,156,296,297,298,143,299,300,144,624,625,145,146,147,626,351,627,352,301,628,629,302,303,304,319,630,631,305,306,307,308,632,309,320,633,310,311,148,391,312,149,150,634,313,314,393,394,395,635,315,636,154,637],"tindex":"b67abcc6-3f1c-11e6-89cd-bf2fbf1b9467","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[208],"tindex":"b67abcc7-3f1c-11e6-89cd-b790f3346ba3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67abcc8-3f1c-11e6-89cd-e5dfafca17ba","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:485","type":"CtBinaryOperatorImpl"},"failures":[0,1,157,2,397,158,403,5,6,321,638,7,8,9,639,325,640,161,162,166,167,412,10,414,415,416,417,11,420,316,12,13,14,169,317,15,16,17,18,19,20,21,22,23,24,436,25,349,26,172,174,27,28,29,30,31,32,33,34,641,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,358,57,361,363,184,369,370,58,372,373,186,375,187,59,376,60,188,378,380,61,189,62,454,63,64,458,65,459,318,66,462,67,464,68,69,70,469,470,471,472,191,475,71,72,195,73,197,74,75,76,492,78,499,502,508,79,511,512,385,521,210,80,81,82,83,84,85,215,86,87,88,89,219,90,224,227,642,91,92,93,94,95,233,235,96,97,240,98,246,100,567,109,117,119,121,248,249,250,251,252,123,124,125,257,258,126,127,128,129,261,263,264,266,267,614,615,270,130,131,132,387,133,388,274,136,275,137,280,138,139,283,284,285,286,288,140,292,141,293,295,155,142,297,143,144,624,625,145,146,147,643,644,626,301,302,319,305,306,308,632,309,310,148,149,150,645,151,392,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,152,671,672,673,674,153,675,676,313,314,677,678,315],"tindex":"b67ae3d9-3f1c-11e6-89cd-6f6b8fd52f8e","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        {\n            if (empty == empty) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    beforeValue(true);\n                    push(empty);\n                    java.io.Writer.write(openBracket);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"empty","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67ae3da-3f1c-11e6-89cd-456fb078869b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[0,1,157,158,159,160,6,161,162,163,164,165,166,167,14,168,169,16,170,19,20,24,25,26,171,172,173,174,175,35,176,177,36,37,178,179,38,39,41,42,43,44,180,46,47,48,49,50,181,51,52,53,182,54,183,55,184,185,186,187,59,188,189,62,63,66,190,67,68,70,191,192,71,72,194,196,73,197,198,199,200,201,202,74,203,204,75,205,206,207,208,209,79,210,80,81,82,83,84,85,211,212,213,214,215,86,87,216,217,88,218,89,219,220,221,90,222,223,224,225,226,227,228,91,229,92,230,231,93,232,94,95,234,235,236,237,96,239,97,240,241,98,242,243,244,245,247,248,249,250,251,252,123,253,124,254,125,255,256,257,258,126,127,259,260,128,129,261,262,263,264,265,266,267,268,269,270,131,132,271,272,273,274,136,275,276,277,278,279,137,280,281,282,138,139,283,284,285,286,287,288,289,140,290,291,292,141,293,294,295,155,142,156,296,297,298,143,299,300,144,145,146,147,301,302,303,304,305,306,307,308,309,310,311,148,312,149,150,151,313,314,315],"tindex":"b67ae3db-3f1c-11e6-89cd-4d3a2acb5e25","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl"},"failures":[0,1,157,158,159,160,6,161,162,163,164,165,166,167,14,168,169,16,170,19,20,24,25,26,171,172,173,174,175,35,176,177,36,37,178,179,38,39,41,42,43,44,180,46,47,48,49,50,181,51,52,53,182,54,183,55,184,185,186,187,59,188,189,62,63,66,190,67,68,70,191,192,71,72,194,196,73,197,198,199,200,201,202,74,203,204,75,205,206,207,208,209,79,210,80,81,82,83,84,85,211,212,213,214,215,86,87,216,217,88,218,89,219,220,221,90,222,223,224,225,226,227,228,91,229,92,230,231,93,232,94,95,234,235,236,237,96,239,97,240,241,98,242,243,244,245,247,248,249,250,251,252,123,253,124,254,125,255,256,257,258,126,127,259,260,128,129,261,262,263,264,265,266,267,268,269,270,131,132,271,272,273,274,136,275,276,277,278,279,137,280,281,282,138,139,283,284,285,286,287,288,289,140,290,291,292,141,293,294,295,155,142,156,296,297,298,143,299,300,144,145,146,147,301,302,303,304,305,306,307,308,309,310,311,148,312,149,150,151,313,314,315],"tindex":"b67b0aec-3f1c-11e6-89cd-e9d6671412f1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                {\n                    if (name == null) {\n                        {\n                            if (deserialize) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                                        @java.lang.Override\n                                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            java.lang.Object java.lang.Object = field.get(value);\n                                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                                            t.write(writer, fieldValue);\n                                        }\n\n                                        @java.lang.Override\n                                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                                            if ((fieldValue != null) || (!isPrimitive)) {\n                                                field.set(value, fieldValue);\n                                            } \n                                        }\n\n                                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            if (!(boolean))\n                                                return false;\n                                            \n                                            java.lang.Object java.lang.Object = field.get(value);\n                                            return fieldValue != value;\n                                        }\n                                    };\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"deserialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67b31fd-3f1c-11e6-89cd-2d02d9793861","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67b31fe-3f1c-11e6-89cd-bb21ffdb49f9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67b31ff-3f1c-11e6-89cd-7352d9c73a84","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[0,1,679,157,2,397,158,640,316,25,45,57,184,376,189,211,212,533,213,214,642,123,253,125,259,260,613,271,272,273,276,277,281,680,289,140,290,291,643,302,319,305,306,308,632,309,320,310,393,394,395],"tindex":"b67b3200-3f1c-11e6-89cd-6777649d5a59","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (!serializeNulls) {\n        {\n            if (!serializeNulls) {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67b5911-3f1c-11e6-89cd-6df6dea8f13a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == '\\n') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:482","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67b5912-3f1c-11e6-89cd-4f741a303d80","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if ((timeStyle == timeStyle) || (peekStack == timeStyle)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"timeStyle","com.google.gson.stream.JsonScope.EMPTY_OBJECT":"timeStyle","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67b5913-3f1c-11e6-89cd-ab41b7fe9e33","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67b5914-3f1c-11e6-89cd-ff282c5523b3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                {\n                    if (name == null) {\n                        {\n                            if (deserialize) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                                        @java.lang.Override\n                                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            java.lang.Object java.lang.Object = field.get(value);\n                                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                                            t.write(writer, fieldValue);\n                                        }\n\n                                        @java.lang.Override\n                                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                                            if ((fieldValue != null) || (!isPrimitive)) {\n                                                field.set(value, fieldValue);\n                                            } \n                                        }\n\n                                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            if (!(boolean))\n                                                return false;\n                                            \n                                            java.lang.Object java.lang.Object = field.get(value);\n                                            return fieldValue != value;\n                                        }\n                                    };\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67b8025-3f1c-11e6-89cd-f780348eff44","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter > ignoreVersionsAfter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"b67b8026-3f1c-11e6-89cd-237639d6e2f2","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n                    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67b8027-3f1c-11e6-89cd-ddaeaa94ec7c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67b8028-3f1c-11e6-89cd-753cf49a41dc","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"other","com.google.gson.stream.JsonToken.NULL":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"b67ba739-3f1c-11e6-89cd-b32b061c335f","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Map.Entry) {\n        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:586","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67ba73a-3f1c-11e6-89cd-0f9fc3cc2706","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (nonempty == 1) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"nonempty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"b67ba73b-3f1c-11e6-89cd-d9aeb24b0f3e","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n    } \n    java.util.Date java.util.Date = deserializeToDate(json);\n    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n        return date;\n    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n        return new java.sql.Timestamp(date.getTime());\n    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n        return new java.sql.Date(date.getTime());\n    } else {\n        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl"},"failures":[0,1,157,158,159,160,6,161,162,163,164,165,166,167,14,168,169,16,170,19,20,24,25,26,171,172,173,174,175,35,176,177,36,37,178,179,38,39,41,42,43,44,180,46,47,48,49,50,181,51,52,53,182,54,183,55,184,185,186,187,59,188,189,62,63,66,190,67,68,70,191,192,71,193,72,194,195,196,73,197,198,199,200,201,202,74,203,204,75,205,206,207,208,209,79,210,80,81,82,83,84,85,211,212,213,214,215,86,87,216,217,88,218,89,219,220,221,90,222,223,224,225,226,227,228,91,229,92,230,231,93,232,94,95,234,235,236,237,96,239,97,240,241,98,242,243,244,245,247,248,249,250,251,252,123,253,124,254,125,255,256,257,258,126,127,259,260,128,129,261,262,263,264,265,266,267,268,269,270,131,132,271,272,273,274,136,275,276,277,278,279,137,280,281,282,138,139,283,284,285,286,287,288,289,140,290,291,292,141,293,294,295,155,142,156,296,297,298,143,299,300,144,145,146,147,301,302,303,304,305,306,307,308,309,310,311,148,312,149,150,151,313,314,315,681,682,683,684,685],"tindex":"b67ba73c-3f1c-11e6-89cd-b51d9eaec79f","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:139","type":"CtBinaryOperatorImpl"},"failures":[686],"tindex":"b67bce4d-3f1c-11e6-89cd-315af7c72561","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[687,638,7,8,688,689,324,9,639,325,640,25,189,211,212,533,213,214,253,259,260,271,272,273,276,277,281,289,140,290,291,148,149,150,393,394,395],"tindex":"b67bce4e-3f1c-11e6-89cd-e3468ae77f38","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (!(value instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:879","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67bf55f-3f1c-11e6-89cd-bd0a9b6e8494","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        {\n            if (empty == empty) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    beforeValue(true);\n                    push(empty);\n                    java.io.Writer.write(openBracket);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_NONE":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67bf560-3f1c-11e6-89cd-6d638d669a73","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67bf561-3f1c-11e6-89cd-7b5e51008e86","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67bf562-3f1c-11e6-89cd-af44e54347db","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67bf563-3f1c-11e6-89cd-f746d2e2c3dd","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"b67bf564-3f1c-11e6-89cd-b959e9ed08d7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                {\n                    if (name == null) {\n                        {\n                            if (deserialize) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                                        @java.lang.Override\n                                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            java.lang.Object java.lang.Object = field.get(value);\n                                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                                            t.write(writer, fieldValue);\n                                        }\n\n                                        @java.lang.Override\n                                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                                            if ((fieldValue != null) || (!isPrimitive)) {\n                                                field.set(value, fieldValue);\n                                            } \n                                        }\n\n                                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            if (!(boolean))\n                                                return false;\n                                            \n                                            java.lang.Object java.lang.Object = field.get(value);\n                                            return fieldValue != value;\n                                        }\n                                    };\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67c1c75-3f1c-11e6-89cd-a932c93938c4","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                {\n                    if (((int) & (field.getModifiers())) != 0) {\n                        return true;\n                    } \n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if (field.isSynthetic()) {\n                        return true;\n                    } \n                    if (boolean) {\n                        com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                        if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                            return true;\n                        } \n                    } \n                    if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(field.getType())) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    if (!(list.isEmpty())) {\n                        com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                        for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                            if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                return true;\n                            } \n                        }\n                    } \n                    return false;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67c1c76-3f1c-11e6-89cd-e981372fbd88","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"b67c1c77-3f1c-11e6-89cd-fdad50702fdf","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                {\n                    if (name == null) {\n                        {\n                            if (deserialize) {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.lang.RuntimeException();\n                            } else {\n                                {\n                                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                                        @java.lang.Override\n                                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            java.lang.Object java.lang.Object = field.get(value);\n                                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                                            t.write(writer, fieldValue);\n                                        }\n\n                                        @java.lang.Override\n                                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                                            if ((fieldValue != null) || (!isPrimitive)) {\n                                                field.set(value, fieldValue);\n                                            } \n                                        }\n\n                                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                                            if (!(boolean))\n                                                return false;\n                                            \n                                            java.lang.Object java.lang.Object = field.get(value);\n                                            return fieldValue != value;\n                                        }\n                                    };\n                                }\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"b67c4388-3f1c-11e6-89cd-1ba354ad0b6f","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if ((toFind.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"b67c4389-3f1c-11e6-89cd-bdf863903e5d","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (!serializeNulls) {\n        {\n            if (!serializeNulls) {\n                {\n                    com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080713/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"serializeNulls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":69,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
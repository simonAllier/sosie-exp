{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":459,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":93,"com.google.gson.functional.StringTest.testStringValueDeserialization":91,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":183,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":620,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":372,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":222,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":354,"com.google.gson.MixedStreamTest.testWriteLenient":21,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":230,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":283,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":599,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":302,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":13,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":198,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":318,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":420,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":217,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":310,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":131,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":381,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":137,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":563,"com.google.gson.functional.ObjectTest.testSingletonLists":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":276,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":313,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":94,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":365,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":583,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":499,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":519,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":293,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":333,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":27,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":423,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":121,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":602,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":107,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":109,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":83,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":412,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":166,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":357,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":594,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":50,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":165,"com.google.gson.functional.EnumTest.testEnumCaseMapping":216,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":32,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":92,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":356,"com.google.gson.functional.JsonTreeTest.testToJsonTree":533,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":623,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":515,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":586,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":252,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":269,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":367,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":566,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":192,"com.google.gson.functional.ObjectTest.testNullDeserialization":626,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":525,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":104,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":329,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":433,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":631,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":373,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":334,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":48,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":483,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":342,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":630,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":615,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":438,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":551,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":292,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":417,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":597,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":396,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":618,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":65,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":275,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":394,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":158,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":231,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":409,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":266,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":581,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":485,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":179,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":237,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":418,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":410,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":59,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":341,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":37,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":39,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":324,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":175,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":229,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":377,"com.google.gson.metrics.PerformanceTest.testDummy":610,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":314,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":506,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":135,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":487,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":181,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":516,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":281,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":268,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":482,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":528,"com.google.gson.functional.CollectionTest.testSetDeserialization":197,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":132,"com.google.gson.functional.EnumTest.testEnumSet":207,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":219,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":328,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":401,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":136,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":486,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":16,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":256,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":335,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":7,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":593,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":414,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":43,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":425,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":45,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":523,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":426,"com.google.gson.functional.MapTest.testHashMapDeserialization":148,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":370,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":280,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":461,"com.google.gson.MixedStreamTest.testReadNulls":609,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":611,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":457,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":534,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":522,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":577,"com.google.gson.functional.MapTest.testSortedMap":169,"com.google.gson.functional.MapTest.testMapSerialization":164,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":460,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":114,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":407,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":72,"com.google.gson.functional.MapTest.testSerializeMaps":151,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":300,"com.google.gson.functional.MapTest.testComplexKeysSerialization":176,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":218,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":180,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":79,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":214,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":527,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":575,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":546,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":627,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":212,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":3,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":86,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":224,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":344,"com.google.gson.functional.MapTest.testStringKeyDeserialization":178,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":76,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":491,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":440,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":182,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":376,"com.google.gson.functional.PrettyPrintingTest.testMap":84,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":371,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":556,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":249,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":463,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":520,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":26,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":78,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":97,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":101,"com.google.gson.functional.MapTest.testMapSerializationEmpty":177,"com.google.gson.functional.CollectionTest.testQueueSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":263,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":402,"com.google.gson.functional.MapTest.testMapOfMapSerialization":163,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":393,"com.google.gson.JavaSerializationTest.testMapIsSerializable":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":271,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":194,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":404,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":456,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":500,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":95,"com.google.gson.functional.FieldNamingTest.testIdentity":301,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":488,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":473,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":346,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":228,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":304,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":315,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":532,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":359,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":595,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":96,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":479,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":239,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":285,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":265,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":622,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":145,"com.google.gson.functional.MapTest.testMapSubclassSerialization":150,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":436,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":141,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":308,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":221,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":19,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":391,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":558,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":613,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":451,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":518,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":6,"com.google.gson.functional.EnumTest.testEnumSubclass":210,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":413,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":28,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":331,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":358,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":478,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":419,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":490,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":541,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":361,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":241,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":35,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":397,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":240,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":504,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":68,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":587,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":327,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":403,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":227,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":288,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":317,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":147,"com.google.gson.MixedStreamTest.testWriteNulls":603,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":67,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":235,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":61,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":526,"com.google.gson.CommentsTest.testParseComments":584,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":319,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":495,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":569,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":74,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":416,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":469,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":113,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":99,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":168,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":612,"com.google.gson.MixedStreamTest.testReadInvalidState":18,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":128,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":290,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":435,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":115,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":369,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":1,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":80,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":466,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":386,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":454,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":273,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":430,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":64,"com.google.gson.functional.MapTest.testMapDeserialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":267,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":89,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":146,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":562,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":155,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":513,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":568,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":564,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":547,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":211,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":247,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":332,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":536,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":559,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":253,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":138,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":238,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":545,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":85,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":167,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":294,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":355,"com.google.gson.functional.PrimitiveTest.testShortSerialization":434,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":497,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":571,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":422,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":52,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":392,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":257,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":368,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":297,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":209,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":185,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":307,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":11,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":385,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":204,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":442,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":282,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":576,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":25,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":449,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":443,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":226,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":348,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":489,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":512,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":243,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":604,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":428,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":82,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":398,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":492,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":352,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":323,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":215,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":220,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":538,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":254,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":554,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":493,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":274,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":570,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":260,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":580,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":278,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":187,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":509,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":362,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":429,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":400,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":446,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":53,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":208,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":567,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":465,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":116,"com.google.gson.functional.MapTest.testGeneralMapField":172,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":321,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":58,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":448,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":73,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":480,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":284,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":244,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":366,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":550,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":424,"com.google.gson.MixedStreamTest.testReadMixedStreamed":24,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":255,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":387,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":199,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":579,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":596,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":312,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":405,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":51,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":29,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":272,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":160,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":144,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":149,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":447,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":496,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":112,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":124,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":270,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":236,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":474,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":242,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":574,"com.google.gson.functional.ObjectTest.testNestedDeserialization":353,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":502,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":110,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":339,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":462,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":503,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":49,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":445,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":468,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":98,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":161,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":223,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":5,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":432,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":537,"com.google.gson.JavaSerializationTest.testListIsSerializable":31,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":234,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":306,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":202,"com.google.gson.functional.ObjectTest.testNullSerialization":624,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":540,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":143,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":152,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":171,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":360,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":70,"com.google.gson.functional.MapTest.testInterfaceTypeMap":170,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":557,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":508,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":363,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":213,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":600,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":544,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":560,"com.google.gson.MixedStreamTest.testReadClosed":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":245,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":47,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":379,"com.google.gson.MixedStreamTest.testWriteClosed":23,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":191,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":296,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":322,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":511,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":8,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":507,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":471,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":350,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":291,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":325,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":514,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":14,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":125,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":408,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":127,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":542,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":279,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":475,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":450,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":452,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":384,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":250,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":529,"com.google.gson.functional.CollectionTest.testQueueDeserialization":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":470,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":390,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":406,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":36,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":103,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":458,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":289,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":157,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":262,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":351,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":552,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":184,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":17,"com.google.gson.functional.MapTest.testRawMapSerialization":174,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":277,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":601,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":337,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":535,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":119,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":573,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":589,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":60,"com.google.gson.functional.PrimitiveTest.testByteSerialization":431,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":517,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":591,"com.google.gson.ObjectTypeAdapterTest.testSerialize":582,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":607,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":548,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":374,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":303,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":71,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":298,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":9,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":100,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":592,"com.google.gson.functional.MapTest.testMapWithQuotes":162,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":617,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":102,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":484,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":578,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":501,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":206,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":616,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":130,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":565,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":4,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":349,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":0,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":259,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":415,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":625,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":77,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":251,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":261,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":305,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":427,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":606,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":196,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":63,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":56,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":287,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":539,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":476,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":614,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":309,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":585,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":521,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":140,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":364,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":598,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":498,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":336,"com.google.gson.functional.ObjectTest.testNestedSerialization":338,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":54,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":106,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":378,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":549,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":111,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":173,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":117,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":81,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":22,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":34,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":330,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":472,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":441,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":510,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":264,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":33,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":380,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":246,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":340,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":122,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":105,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":66,"com.google.gson.functional.CollectionTest.testSetSerialization":201,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":481,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":87,"com.google.gson.functional.StringTest.testStringValueSerialization":108,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":494,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":553,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":188,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":225,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":453,"com.google.gson.MixedStreamTest.testWriteInvalidState":20,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":57,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":605,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":383,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":75,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":389,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":619,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":299,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":524,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":477,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":46,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":621,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":2,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":628,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":154,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":40,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":62},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b786ca-3f31-11e6-a088-6949772e25c1","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3b7fbfb-3f31-11e6-a088-3d00c62cf4a3","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3b7fbfc-3f31-11e6-a088-039edc855acf","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3b8230d-3f31-11e6-a088-39127b51d71e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n    if ((fieldValue != null) || (!isPrimitive)) {\n        field.set(value, fieldValue);\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3],"tindex":"a3b8230e-3f31-11e6-a088-739c99cf8a24","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b84a1f-3f31-11e6-a088-d9a058790823","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"toResolve","typeOfT":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b89840-3f31-11e6-a088-e9587b752349","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b89841-3f31-11e6-a088-e1f120ff8fc3","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15],"tindex":"a3b8bf52-3f31-11e6-a088-8da3732b246a","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3b8e663-3f31-11e6-a088-632210071ae6","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b8e664-3f31-11e6-a088-efd9f02f26c8","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3b90d75-3f31-11e6-a088-e7f08f9a42d0","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if ((value.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(value instanceof java.lang.reflect.TypeVariable)) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"a3b90d76-3f31-11e6-a088-09f20606e7df","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        return true;\n    } \n    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n            return true;\n        } \n    }\n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b93487-3f31-11e6-a088-2f8f0ee86d7f","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b93488-3f31-11e6-a088-c1bb041c45e2","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[16],"tindex":"a3b93489-3f31-11e6-a088-87184aa5180a","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3b95b9a-3f31-11e6-a088-69ed031b4eba","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b95b9b-3f31-11e6-a088-7d6c52d5572a","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if ((value.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(value instanceof java.lang.reflect.TypeVariable)) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n                    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                        out.beginObject();\n                        out.endObject();\n                        return ;\n                    } \n                    typeAdapter.write(out, value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3b982ac-3f31-11e6-a088-39c3c1db168d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b982ad-3f31-11e6-a088-f743382cab40","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"a","this":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3b9a9be-3f31-11e6-a088-ff0cff9d65a7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,4,133,134,5,6,7,135,136,137,8,9,10,138,139,140,141,142,143,144,145,146,147,148,149,150,151,11,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,12,171,172,173,174,175,176,177,178,179,180,181,182,183,13,184,185,186,187,188,189,190,14,191,192,193,15,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600],"tindex":"a3b9a9bf-3f31-11e6-a088-a9cdfc44261b","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl"},"failures":[21,404,417,418,432,440,446],"tindex":"a3b9d0d0-3f31-11e6-a088-3f961a2b5655","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl"},"failures":[134,479,566],"tindex":"a3b9f7e1-3f31-11e6-a088-d1e754c64e31","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.WildcardType) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b9f7e2-3f31-11e6-a088-f5a3e154d1b0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[17,19,22,37,38,39,53,54,55,56,60,61,65,66,71,73,77,81,86,90,92,93,94,95,96,99,101,105,108,109,111,112,115,117,601,602,123,134,136,150,151,153,155,157,162,163,170,171,172,174,176,179,183,13,184,190,191,192,193,195,198,199,220,238,241,263,281,284,308,309,310,313,316,319,322,325,330,335,338,345,350,366,369,384,452,453,454,455,456,457,459,460,466,467,470,473,474,503,504,505,506,508,509,510,513,514,515,517,519,523,530,531,533,534,536,538,539,543,548,549,550,551,552,553,558,564,580,581,587,588,589,593,596],"tindex":"a3b9f7e3-3f31-11e6-a088-9559732437e3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3b9f7e4-3f31-11e6-a088-37c3c52722ee","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3ba1ef5-3f31-11e6-a088-45a1419b2b05","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3ba1ef6-3f31-11e6-a088-1b2f0a174a2e","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3ba1ef7-3f31-11e6-a088-7dc853c35cab","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3ba1ef8-3f31-11e6-a088-69a52fdb2e3b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl"},"failures":[17,19,603,20,21,22,23,604,66,109,134,151,157,173,183,302,303,304,305,306,605,457,459,463,470,471,479,503,504,505,509,510,515,606,530,531,532,533,607,561,564,567,568,570,571,572,573,575,589,590,591],"tindex":"a3ba1ef9-3f31-11e6-a088-3d1894eef7d9","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3ba460a-3f31-11e6-a088-d10ee3643bd5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((key != key) && (token != key)) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"key","token":"key","com.google.gson.stream.JsonToken.NUMBER":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[17,18,608,19,603,20,21,609,22,23,24,25,26,27,28,32,33,34,610,37,38,39,611,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,612,111,112,113,114,115,116,117,118,119,613,120,121,122,123,124,125,126,127,614,128,129,130,131,132,4,133,134,5,6,7,135,136,137,8,9,10,138,139,140,141,142,143,144,145,146,147,148,149,150,151,11,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,12,171,172,173,174,175,176,177,178,179,180,181,182,183,13,184,185,186,187,188,189,190,14,191,192,193,15,194,195,196,197,198,199,200,201,202,203,204,205,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,615,246,247,616,248,249,617,250,251,618,252,253,254,255,619,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,620,276,277,278,279,280,621,281,282,283,284,285,286,287,288,289,290,291,292,293,294,622,623,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,605,326,327,328,329,624,330,625,331,332,333,334,335,336,337,338,339,340,341,342,343,344,626,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,627,520,521,522,606,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,607,628,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,584,587,588,629,630,631,592,593,594,595,596],"tindex":"a3ba460b-3f31-11e6-a088-35e5ed7f0e54","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a3ba6d1c-3f31-11e6-a088-135d98db110f","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (!throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a3ba942d-3f31-11e6-a088-5f953ccc26d3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (node != null) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467338643351/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":36,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
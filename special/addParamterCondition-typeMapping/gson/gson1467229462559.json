{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":131,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":227,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":261,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":320,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":337,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":64,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":67,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":258,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":5,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":117,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":197,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":48,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":331,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":313,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":4,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":38,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":132,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":359,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":0,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":139,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":266,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":116,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":292,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":55,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":242,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":25,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":206,"com.google.gson.functional.ObjectTest.testSingletonLists":210,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":51,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":311,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":338,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":34,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":10,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":37,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":363,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":119,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":225,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":295,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":323,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":367,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":46,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":74,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":259,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":115,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":127,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":294,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":137,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":244,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":7,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":166,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":103,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":171,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":309,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":60,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":336,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":300,"com.google.gson.functional.JsonTreeTest.testToJsonTree":98,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":172,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":264,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":71,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":73,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":26,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":191,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":358,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":365,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":207,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":146,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":168,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":2,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":111,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":169,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":88,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":80,"com.google.gson.functional.MapTest.testGeneralMapField":155,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":276,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":230,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":13,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":158,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":245,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":314,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":31,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":163,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":179,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":202,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":198,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":17,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":217,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":3,"com.google.gson.JsonObjectTest.testDeepCopy":29,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":254,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":160,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":185,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":23,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":105,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":321,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":164,"com.google.gson.JsonParserTest.testParseString":20,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":257,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":308,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":366,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":59,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":189,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":327,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":54,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":144,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":208,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":223,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":310,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":273,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":49,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":325,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":75,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":307,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":130,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":270,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":94,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":221,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":68,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":196,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":255,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":290,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":222,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":277,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":21,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":329,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":61,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":121,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":181,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":350,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":201,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":126,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":360,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":122,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":41,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":52,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":42,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":129,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":312,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":56,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":154,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":178,"com.google.gson.functional.MapTest.testInterfaceTypeMap":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":306,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":159,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":247,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":361,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":32,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":243,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":114,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":362,"com.google.gson.functional.EnumTest.testEnumSet":110,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":214,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":250,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":296,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":253,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":218,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":346,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":352,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":136,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":251,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":348,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":199,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":212,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":354,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":174,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":91,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":226,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":289,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":330,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":123,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":267,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":319,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":176,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":213,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":135,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":15,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":369,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":78,"com.google.gson.functional.MapTest.testSerializeMaps":148,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":334,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":326,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":138,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":14,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":63,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":89,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":287,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":234,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":232,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":173,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":183,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":95,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":9,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":233,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":274,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":90,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":186,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":27,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":318,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":118,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":149,"com.google.gson.functional.MapTest.testStringKeyDeserialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":302,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":45,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":165,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":133,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":205,"com.google.gson.functional.MapTest.testRawMapSerialization":156,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":371,"com.google.gson.JsonParserTest.testParseReader":19,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":246,"com.google.gson.functional.PrettyPrintingTest.testMap":260,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":364,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":124,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":134,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":219,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":297,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":83,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":342,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":303,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":16,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":109,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":278,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":101,"com.google.gson.functional.MapTest.testMapOfMapSerialization":151,"com.google.gson.ObjectTypeAdapterTest.testSerialize":347,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":187,"com.google.gson.JavaSerializationTest.testMapIsSerializable":33,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":161,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":39,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":6,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":192,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":238,"com.google.gson.functional.FieldNamingTest.testIdentity":335,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":339,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":283,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":332,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":355,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":43,"com.google.gson.functional.MapTest.testMapWithQuotes":150,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":269,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":97,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":120,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":209,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":141,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":145,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":86,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":104,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":65,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":340,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":190,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":241,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":107,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":66,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":304,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":349,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":204,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":368,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":84,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":299,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":286,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":248,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":322,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":372,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":315,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":351,"com.google.gson.functional.EnumTest.testEnumSubclass":113,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":193,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":177,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":157,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":301,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":324,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":44,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":35,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":316,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":128,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":271,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":85,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":228,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":36,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":69,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":47,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":106,"com.google.gson.internal.LinkedTreeMapTest.testClear":1,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":8,"com.google.gson.JsonObjectTest.testAddingStringProperties":30,"com.google.gson.functional.ObjectTest.testNestedSerialization":220,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":147,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":162,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":182,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":188,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":272,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":317,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":370,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":53,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":108,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":279,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":215,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":231,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":22,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":143,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":211,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":72,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":291,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":77,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":152,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":341,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":239,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":343,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":357,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":203,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":282,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":79,"com.google.gson.functional.CollectionTest.testSetSerialization":140,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":142,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":263,"com.google.gson.functional.StringTest.testStringValueSerialization":344,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":345,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":235,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":180,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":288,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":184,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":236,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":285,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":200,"com.google.gson.functional.MapTest.testMapDeserialization":58,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":100,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":305,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":333,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":229,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":265,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":24,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":175,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":170,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":167,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":76,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":96,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":252,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":356,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":216,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":224,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":102,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":125,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":57,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":249,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":298,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":280},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102],"tindex":"e0b64553-3e31-11e6-b2fa-2bda18818e49","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            if (create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"e0b6ba84-3e31-11e6-b2fa-19ee8cf34236","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[103,104,105,106,107,21,108,109,34,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,44,45,46,142,143,144,47,145,146,147,148,149,150,151,152,153,154,155,156,64,157,65,158,159,160,161,162,163,164,165,166,167,168,169,170,171,67,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,79,81,266,84,86,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,96,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345],"tindex":"e0b6e195-3e31-11e6-b2fa-c5feb661e3d2","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.Class<?>) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[],"tindex":"e0b708a6-3e31-11e6-b2fa-673c64b269cf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b != null) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"e0b708a7-3e31-11e6-b2fa-8d79fe9b46af","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e0b708a8-3e31-11e6-b2fa-57f33ddf50c8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b != null) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[192,196,201],"tindex":"e0b72fb9-3e31-11e6-b2fa-690d3dde7e62","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:902","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"e0b72fba-3e31-11e6-b2fa-8779c0cab063","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (end == end) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"end","com.google.gson.stream.JsonReader.PEEKED_NONE":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e0b72fbb-3e31-11e6-b2fa-af342e76bec9","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e0b756cc-3e31-11e6-b2fa-495c40f1f65c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[],"tindex":"e0b756cd-3e31-11e6-b2fa-cb434272e3a7","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"e0b756ce-3e31-11e6-b2fa-81325372d70c","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"e0b77ddf-3e31-11e6-b2fa-b187b83eb37c","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter.length()) == 0) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"e0b77de0-3e31-11e6-b2fa-99ebee070af0","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (!(o instanceof java.util.Map.Entry)) {\n        return false;\n    } \n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n    if (node == null) {\n        return false;\n    } \n    removeInternal(node, true);\n    return true;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[346,106,107,347,21,34,348,114,117,118,120,121,349,350,351,352,122,353,354,355,356,357,358,123,124,125,127,128,129,130,131,132,359,137,139,140,38,39,40,41,44,46,142,146,147,149,153,154,155,64,157,159,160,161,164,165,166,169,170,171,172,173,68,69,70,360,174,361,71,72,175,176,73,209,210,211,212,213,214,215,218,219,220,222,223,224,225,226,227,228,74,229,230,231,232,233,234,235,236,237,238,239,241,242,243,248,362,363,364,365,366,367,261,262,368,79,81,266,84,85,86,267,87,369,268,269,270,271,273,284,288,289,290,291,90,91,293,92,93,94,95,96,97,98,370,308,315,319,323,324,325,326,328,329,331,332,333,334,335,345,371,372],"tindex":"e0b77de1-3e31-11e6-b2fa-6bddedceb624","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.util.Iterator) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:174","type":"CtInvocationImpl","sourcecode":"java.util.Map.class.isAssignableFrom(rawType)"},"failures":[],"tindex":"e0b7a4f2-3e31-11e6-b2fa-334ca4d292ce","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type.isAssignableFrom(rawType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","java.util.Map.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e0b7cc03-3e31-11e6-b2fa-cd0df31e2f67","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e0b7cc04-3e31-11e6-b2fa-a7762dd262c8","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e0b7cc05-3e31-11e6-b2fa-1d8e518369be","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"e0b7cc06-3e31-11e6-b2fa-b1b4e55666ed","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"e0b7f317-3e31-11e6-b2fa-3d8c9a93a4da","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"e0b7f318-3e31-11e6-b2fa-dde5816f1e23","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b != null) {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[],"tindex":"e0b7f319-3e31-11e6-b2fa-e1e8c7e79e9e","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            if (create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030288/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e0b81a2a-3e31-11e6-b2fa-03479960b59b","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":24,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
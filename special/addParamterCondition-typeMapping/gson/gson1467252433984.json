{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":254,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":341,"com.google.gson.functional.StringTest.testStringValueDeserialization":608,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":678,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":116,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":592,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":638,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":464,"com.google.gson.stream.JsonWriterTest.testRepeatedName":670,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":36,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":536,"com.google.gson.MixedStreamTest.testWriteLenient":356,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":417,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":515,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":4,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":76,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":61,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":71,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":514,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":496,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":35,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":283,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":220,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":471,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":650,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":390,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":444,"com.google.gson.functional.ObjectTest.testSingletonLists":184,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":314,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":342,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":459,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":632,"com.google.gson.stream.JsonWriterTest.testStrings":691,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":416,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":24,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":599,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":524,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":21,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":498,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":602,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":700,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":616,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":205,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":238,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":492,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":683,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":436,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":8,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":453,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":234,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":435,"com.google.gson.functional.EnumTest.testEnumCaseMapping":34,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":340,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":359,"com.google.gson.functional.JsonTreeTest.testToJsonTree":292,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":452,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":600,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":147,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":651,"com.google.gson.stream.JsonWriterTest.testNulls":667,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":52,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":697,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":561,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":590,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":129,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":367,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":68,"com.google.gson.functional.ObjectTest.testNullDeserialization":530,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":208,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":614,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":521,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":18,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":174,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":465,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":193,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":643,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":232,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":121,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":527,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":17,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":578,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":125,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":504,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":503,"com.google.gson.JsonParserTest.testParseString":647,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":679,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":598,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":166,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":698,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":702,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":160,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":508,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":583,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":199,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":313,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":479,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":418,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":431,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":489,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":589,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":288,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":657,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":410,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":114,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":167,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":422,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":490,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":198,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":265,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":16,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":333,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":518,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":686,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":40,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":152,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":438,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":637,"com.google.gson.metrics.PerformanceTest.testDummy":377,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":570,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":140,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":46,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":545,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":411,"com.google.gson.stream.JsonWriterTest.testEmptyArray":660,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":378,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":317,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":308,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":542,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":540,"com.google.gson.functional.CollectionTest.testSetDeserialization":406,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":221,"com.google.gson.functional.EnumTest.testEnumSet":28,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":189,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":572,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":482,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":47,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":82,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":586,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":194,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":45,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":493,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":544,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":499,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":682,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":27,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":229,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":170,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":640,"com.google.gson.functional.MapTest.testHashMapDeserialization":425,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":462,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":595,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":334,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":551,"com.google.gson.MixedStreamTest.testReadNulls":619,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":53,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":252,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":286,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":382,"com.google.gson.functional.MapTest.testSortedMap":437,"com.google.gson.functional.MapTest.testMapSerialization":103,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":255,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":487,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":547,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":563,"com.google.gson.functional.MapTest.testSerializeMaps":97,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":338,"com.google.gson.functional.MapTest.testComplexKeysSerialization":112,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":571,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":440,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":626,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":276,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":210,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":385,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":136,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":370,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":398,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":25,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":384,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":241,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":652,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":37,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":529,"com.google.gson.functional.MapTest.testStringKeyDeserialization":439,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":565,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":84,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":178,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":115,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":468,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":224,"com.google.gson.functional.PrettyPrintingTest.testMap":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":463,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":64,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":297,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":380,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":20,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":566,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":699,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":346,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":609,"com.google.gson.functional.CollectionTest.testQueueSerialization":65,"com.google.gson.functional.MapTest.testMapSerializationEmpty":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":305,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":653,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":483,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":687,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":689,"com.google.gson.functional.MapTest.testMapOfMapSerialization":102,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":158,"com.google.gson.JavaSerializationTest.testMapIsSerializable":624,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":591,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":404,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":662,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":163,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":216,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":90,"com.google.gson.functional.FieldNamingTest.testIdentity":339,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":343,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":412,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":257,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":673,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":531,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":39,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":78,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":183,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":291,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":665,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":454,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":9,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":701,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":118,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":344,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":161,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":597,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":587,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":324,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":423,"com.google.gson.functional.MapTest.testMapSubclassSerialization":96,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":177,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":249,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":393,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":573,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":226,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":326,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":353,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":477,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":372,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":581,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":379,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":44,"com.google.gson.functional.EnumTest.testEnumSubclass":31,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":164,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":22,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":523,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":148,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":117,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":495,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":83,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":395,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":455,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":204,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":674,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":480,"com.google.gson.stream.JsonWriterTest.testTwoNames":661,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":538,"com.google.gson.stream.JsonWriterTest.testNullName":668,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":138,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":14,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":560,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":369,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":484,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":520,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":159,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":388,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":676,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":672,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":320,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":513,"com.google.gson.MixedStreamTest.testWriteNulls":354,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":424,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":271,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":671,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":420,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":267,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":209,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":389,"com.google.gson.CommentsTest.testParseComments":622,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":648,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":87,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":185,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":446,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":280,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":494,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":564,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":546,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":105,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":345,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":539,"com.google.gson.MixedStreamTest.testReadInvalidState":617,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":217,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":51,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":322,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":246,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":630,"com.google.gson.JsonParserTest.testParseMixedArray":361,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":151,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":633,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":567,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":277,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":155,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":214,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":311,"com.google.gson.functional.MapTest.testMapDeserialization":430,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":307,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":244,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":95,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":443,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":99,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":145,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":131,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":128,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":399,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":656,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":290,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":580,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":192,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":200,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":227,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":299,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":391,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":60,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":203,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":104,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":240,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":6,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":451,"com.google.gson.functional.PrimitiveTest.testShortSerialization":175,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":415,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":133,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":497,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":236,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":478,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":368,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":461,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":335,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":30,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":644,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":63,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":248,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":365,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":427,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":474,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":75,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":179,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":373,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":659,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":596,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":621,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":627,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":182,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":507,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":694,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":38,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":413,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":294,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":327,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":629,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":501,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":576,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":85,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":481,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":534,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":517,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":56,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":285,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":584,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":414,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":127,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":312,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":467,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":635,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":302,"com.google.gson.stream.JsonWriterTest.testNullStringValue":664,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":594,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":143,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":400,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":456,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":502,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":162,"com.google.gson.JsonArrayTest.testSet":363,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":180,"com.google.gson.stream.JsonWriterTest.testEmptyObject":681,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":93,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":29,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":130,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":374,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":548,"com.google.gson.functional.MapTest.testGeneralMapField":109,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":516,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":264,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":510,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":119,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":223,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":273,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":705,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":318,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":1,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":124,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":150,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":169,"com.google.gson.MixedStreamTest.testReadMixedStreamed":620,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":645,"com.google.gson.JsonObjectTest.testDeepCopy":654,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":156,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":585,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":10,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":72,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":575,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":684,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":569,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":485,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":235,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":623,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":310,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":433,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":331,"com.google.gson.JsonArrayTest.testDeepCopy":364,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":426,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":88,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":181,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":261,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":329,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":669,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":475,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":628,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":309,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":641,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":421,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":258,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":577,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":447,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":92,"com.google.gson.functional.ObjectTest.testNestedDeserialization":535,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":197,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":206,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":552,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":137,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":233,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":509,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":279,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":362,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":386,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":434,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":610,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":43,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":173,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":394,"com.google.gson.JavaSerializationTest.testListIsSerializable":625,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":80,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":419,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":74,"com.google.gson.functional.ObjectTest.testNullSerialization":190,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":58,"com.google.gson.stream.JsonWriterTest.testDoubles":688,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":607,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":428,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":108,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":149,"com.google.gson.functional.MapTest.testInterfaceTypeMap":106,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":562,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":685,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":225,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":142,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":457,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":32,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":237,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":704,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":228,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":397,"com.google.gson.MixedStreamTest.testReadClosed":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":295,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":231,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":469,"com.google.gson.MixedStreamTest.testWriteClosed":358,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":67,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":553,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":186,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":601,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":639,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":48,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":141,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":282,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":202,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":278,"com.google.gson.stream.JsonWriterTest.testLongs":666,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":323,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":146,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":187,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":66,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":604,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":488,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":330,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":396,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":315,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":555,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":212,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":511,"com.google.gson.stream.JsonWriterTest.testNumbers":690,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":154,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":582,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":211,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":262,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":281,"com.google.gson.functional.CollectionTest.testQueueDeserialization":409,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":634,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":157,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":486,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":613,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":321,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":605,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":100,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":528,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":680,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":304,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":126,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":533,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":62,"com.google.gson.functional.MapTest.testRawMapSerialization":111,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":352,"com.google.gson.JsonParserTest.testParseReader":646,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":593,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":695,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":54,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":195,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":550,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":135,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":11,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":13,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":23,"com.google.gson.functional.PrimitiveTest.testByteSerialization":172,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":266,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":350,"com.google.gson.ObjectTypeAdapterTest.testSerialize":631,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":122,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":466,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":77,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":272,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":336,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":49,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":375,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":611,"com.google.gson.functional.MapTest.testMapWithQuotes":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":298,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":472,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":612,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":81,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":574,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":91,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":251,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":296,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":219,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":675,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":445,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":41,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":532,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":245,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":301,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":522,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":275,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":2,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":303,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":328,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":500,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":26,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":405,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":42,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":263,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":57,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":259,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":606,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":636,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":250,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":381,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":392,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":458,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":642,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":703,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":89,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":693,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":525,"com.google.gson.functional.ObjectTest.testNestedSerialization":196,"com.google.gson.internal.LinkedTreeMapTest.testClear":366,"com.google.gson.JsonObjectTest.testAddingStringProperties":655,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":94,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":123,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":153,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":615,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":260,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":110,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":247,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":293,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":19,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":357,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":692,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":191,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":554,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":506,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":144,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":568,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":588,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":360,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":376,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":470,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":579,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":603,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":696,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":347,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":270,"com.google.gson.functional.CollectionTest.testSetSerialization":73,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":442,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":86,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":242,"com.google.gson.functional.StringTest.testStringValueSerialization":348,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":349,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":213,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":387,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":401,"com.google.gson.MixedStreamTest.testWriteInvalidState":355,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":557,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":188,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":473,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":274,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":476,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":332,"com.google.gson.stream.JsonWriterTest.testBooleans":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":300,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":337,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":371,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":207,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":649,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":556,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":230,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":658,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":316,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":351,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":429,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":677,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":268,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":541},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"5cbfb5af-3e67-11e6-84e7-fbf47c74b547","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc003d0-3e67-11e6-84e7-e74bfd3a1266","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"5cc02ae1-3e67-11e6-84e7-5939dcd06fb4","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"5cc02ae2-3e67-11e6-84e7-f34b6c66857d","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[1,2,3,4,5,6],"tindex":"5cc02ae3-3e67-11e6-84e7-d5a4d7738977","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"5cc02ae4-3e67-11e6-84e7-f7c16e20ce00","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"5cc051f5-3e67-11e6-84e7-390c19aedd67","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc051f6-3e67-11e6-84e7-01aae3e03ab8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,1,295,296,297,298,2,3,299,300,0,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,4,318,319,5,320,321,322,323,6,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360],"tindex":"5cc07907-3e67-11e6-84e7-5593916a9e27","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (!htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[361,362,363,364],"tindex":"5cc07908-3e67-11e6-84e7-45cd5f880f35","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:161","type":"CtBinaryOperatorImpl","sourcecode":"nearest == null"},"failures":[365,366,367,368,369,370,371,372,373,254,374,290],"tindex":"5cc07909-3e67-11e6-84e7-a39d23cc2190","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"5cc0a01a-3e67-11e6-84e7-6b7d0856b9b9","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(typeOfT instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[375,7,8,9,10,14,15,376,16,17,18,19,377,20,21,22,378,23,379,24,25,380,381,382,26,27,28,29,30,31,383,384,32,385,33,34,35,36,386,37,387,38,388,39,40,41,389,42,43,44,45,46,47,390,48,49,50,391,51,392,393,52,53,54,55,394,56,57,58,395,396,59,397,60,398,399,61,62,63,64,400,401,402,65,66,67,68,69,403,404,70,405,406,71,72,407,73,74,408,75,409,76,77,78,79,80,81,410,82,411,412,413,83,84,85,414,86,87,88,415,89,416,90,91,92,93,94,417,418,372,373,419,420,421,422,423,95,424,425,426,96,97,427,428,98,429,99,430,100,431,432,433,434,101,102,103,435,436,104,105,437,106,107,108,109,110,111,438,112,113,439,114,440,441,115,116,117,118,119,442,120,121,122,123,124,125,126,127,443,444,128,445,129,130,131,446,132,133,134,135,447,136,448,137,138,139,140,141,142,143,144,449,450,145,146,147,451,452,453,148,454,149,455,456,457,458,459,150,460,461,151,462,463,464,465,466,467,468,152,153,469,470,471,472,473,154,474,155,156,475,476,157,477,478,158,479,159,160,480,481,161,162,482,483,484,163,485,486,487,488,489,490,491,492,164,493,165,494,166,167,495,496,168,497,498,169,499,170,500,501,502,171,172,173,174,175,176,177,503,504,505,178,506,179,507,508,509,180,181,510,182,511,512,183,184,513,514,185,515,516,186,517,518,187,188,519,520,189,521,190,191,522,523,192,524,193,194,525,195,196,197,526,198,527,528,529,530,199,531,200,201,532,202,533,534,535,536,203,537,538,204,205,206,539,207,208,209,210,540,211,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,541,542,543,544,545,238,239,240,241,242,243,244,245,546,547,246,548,247,549,550,248,249,250,252,253,254,255,551,552,256,553,374,554,257,258,555,259,556,260,261,262,263,557,264,265,266,267,268,558,559,269,270,271,560,561,562,272,563,273,564,274,565,275,566,276,567,277,278,279,280,281,282,283,568,569,284,570,571,572,285,573,286,574,575,287,288,289,290,291,292,293,576,577,294,1,295,578,579,580,296,581,297,298,582,2,583,3,299,584,585,300,586,0,587,301,302,303,304,305,588,306,589,307,308,590,309,591,310,311,312,313,592,314,593,594,315,595,316,317,596,4,318,597,319,5,320,321,322,323,598,599,6,324,600,325,601,326,327,602,603,328,329,604,605,330,606,607,331,332,333,334,335,336,337,338,339,608,340,341,342,343,344,609,610,345,611,346,612,613,614,347,615,616,348,349,350,351,352,617,618,353,354,355,356,619,357,358,620,621,359,360,622],"tindex":"5cc0c72b-3e67-11e6-84e7-0584af4af273","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"5cc0c72c-3e67-11e6-84e7-dd20ee290dee","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:346","type":"CtBinaryOperatorImpl","sourcecode":"delta == (-2)"},"failures":[],"tindex":"5cc0ee3d-3e67-11e6-84e7-931fd29846e4","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == (-2)) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"5cc0ee3e-3e67-11e6-84e7-d15379f92ecf","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"5cc0ee3f-3e67-11e6-84e7-cb53f4822946","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"5cc0ee40-3e67-11e6-84e7-2930fb87db34","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc0ee41-3e67-11e6-84e7-751bdcb4597d","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"5cc0ee42-3e67-11e6-84e7-d9b9324ccf63","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc11553-3e67-11e6-84e7-990bc9df7357","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[7,30,91,193,205,206,539,232,234,235,236],"tindex":"5cc11554-3e67-11e6-84e7-cfb6f667fc4e","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:59","type":"CtUnaryOperatorImpl","sourcecode":"!((delegate) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[375,7,8,9,10,11,12,13,14,15,16,19,623,624,625,20,21,22,378,23,379,24,380,381,382,27,28,29,30,31,383,384,32,385,33,34,35,36,37,388,39,41,389,42,43,44,45,46,47,390,48,49,50,391,51,392,393,52,53,54,55,394,56,57,58,395,396,59,397,60,398,399,61,62,63,64,400,401,402,65,66,67,68,69,403,404,70,405,406,71,72,407,73,74,408,75,409,76,77,78,79,80,81,410,82,411,412,413,83,84,85,414,86,87,88,415,89,416,90,91,92,93,94,417,418,372,373,419,420,421,422,423,95,424,425,426,96,97,427,428,98,429,99,430,100,431,432,433,434,101,102,103,435,436,104,105,437,106,107,108,109,110,111,438,112,113,439,114,440,441,115,116,117,118,442,120,121,122,123,124,125,126,127,443,444,128,445,129,130,131,446,132,133,134,135,447,136,448,137,138,139,140,141,142,143,144,449,450,145,146,147,451,452,453,148,454,149,455,456,457,458,459,150,460,461,151,462,463,464,465,466,467,468,152,153,469,470,471,472,473,154,474,155,156,475,476,157,477,478,158,479,159,160,480,481,161,162,482,483,484,163,485,486,487,488,489,490,491,492,164,493,165,494,166,167,495,496,168,497,498,169,499,170,500,501,502,171,172,173,174,175,176,177,503,504,505,178,506,179,507,508,509,180,181,510,182,511,512,183,184,513,514,185,515,516,186,517,518,187,519,520,189,521,191,523,192,524,193,194,525,195,196,526,198,527,528,199,531,200,201,532,202,533,534,535,536,203,537,538,204,205,206,207,210,540,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,541,542,543,544,545,238,239,240,241,242,243,244,245,546,547,246,548,247,549,550,248,249,250,251,252,253,254,255,551,552,256,553,374,554,257,258,555,556,260,261,262,263,557,264,265,266,267,268,558,559,269,270,271,560,561,562,272,563,273,564,274,565,275,566,276,567,277,278,279,280,281,282,283,568,569,284,570,571,572,285,573,286,574,575,287,288,289,290,291,292,293,576,577,294,1,295,578,579,580,296,581,297,298,582,2,583,3,299,584,585,300,586,0,587,301,302,303,304,305,588,306,589,307,308,590,309,591,310,311,312,313,592,314,593,594,315,595,316,317,596,4,318,597,319,5,320,321,322,323,598,599,6,324,600,325,601,326,327,602,603,328,329,604,605,330,606,607,331,332,333,334,335,336,337,338,339,608,340,341,342,343,344,609,610,345,611,346,612,613,614,347,615,616,348,349,352,617,353,355,356,357,358,620,621,359,360,622],"tindex":"5cc11555-3e67-11e6-84e7-77c341377505","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (!(typeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"5cc13c66-3e67-11e6-84e7-bd38b3f15c84","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc == src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"typeOfSrc","java.util.Date.class":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[626,627,628,629,11,12,13,76,77,79,80,116,137,138,139,143,144,147,205,254,281,282,286,287,288,289,290,291,292],"tindex":"5cc13c67-3e67-11e6-84e7-2939fecd844d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[630,631,632],"tindex":"5cc13c68-3e67-11e6-84e7-7b824c42fca9","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"5cc13c69-3e67-11e6-84e7-55fd7922b9e0","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"5cc13c6a-3e67-11e6-84e7-dfdb0b2c6445","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter == typeAdapter) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"typeAdapter","context":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc1637b-3e67-11e6-84e7-cdd3236e3f96","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[172],"tindex":"5cc1637c-3e67-11e6-84e7-d11381ff6cf7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"5cc1637d-3e67-11e6-84e7-b3795a2cff29","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"5cc1637e-3e67-11e6-84e7-0fde690c437f","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc1637f-3e67-11e6-84e7-7989baa0407d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"5cc18a90-3e67-11e6-84e7-33621b397b3c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[633,634,635,636,637,638,639,640,641,642],"tindex":"5cc18a91-3e67-11e6-84e7-73cebcb7d79c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            if (create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n                    int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n                    int int = hash & ((table.int) - 1);\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        table[index] = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    if (((int)++) > (int)) {\n                        doubleCapacity();\n                    } \n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[53,57,395,399,335,338],"tindex":"5cc1b1a2-3e67-11e6-84e7-3f917b6c0813","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[365,367,643,644,369,11,645,371,646,647,648,649,650,651,652,653,654,655,392,76,77,79,80,411,412,373,426,427,428,430,433,435,438,439,137,138,139,143,144,147,205,656,246,548,247,249,250,251,254,555,281,282,288,291,578],"tindex":"5cc1b1a3-3e67-11e6-84e7-0de6dd84ac6b","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            if ((!create) && (!create)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"create","skipSerialize":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"5cc1d8b4-3e67-11e6-84e7-a5a1e7826dc2","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"5cc1d8b5-3e67-11e6-84e7-c116b1af78c0","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"5cc1d8b6-3e67-11e6-84e7-97cb19a59814","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key","com.google.gson.stream.JsonToken.NULL":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc1d8b7-3e67-11e6-84e7-75cf86027cb9","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"5cc1d8b8-3e67-11e6-84e7-4130e6d32558","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[642],"tindex":"5cc1d8b9-3e67-11e6-84e7-c3fda32a5de4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:683","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE)"},"failures":[626,657,658,627,628,659,629,7,14,15,630,631,632,16,361,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,17,18,24,27,28,29,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,81,82,83,84,85,86,87,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,123,124,125,126,127,128,130,131,132,133,134,136,140,141,142,145,146,150,153,156,168,176,179,181,183,184,185,186,187,188,189,191,194,195,196,197,198,199,200,201,202,203,204,205,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,226,693,237,694,695,696,697,698,699,700,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,284,286,287,288,290,293,296,2,300,302,305,309,310,312,313,317,318,319,323,327,328,329,330,332,333,335,336,337,338,339,345,349,350,351,352,353,355,356,357,358,359,360],"tindex":"5cc226da-3e67-11e6-84e7-7966c47244d3","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (empty == empty) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    beforeValue(true);\n                    push(empty);\n                    java.io.Writer.write(openBracket);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"empty","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"5cc226db-3e67-11e6-84e7-5f1e2ebf3433","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[11,12,13,632,624,378,382,412,87,92,420,423,424,425,426,96,97,427,428,98,429,99,430,100,431,432,433,434,101,102,103,435,436,104,105,437,106,107,108,109,110,111,438,112,113,439,114,440,441,115,116,201,239,240,249,250,277,280,281,282,286,574,575,287,288,0,595,317],"tindex":"5cc226dc-3e67-11e6-84e7-e132b0e73c55","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyType instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[7,14,15,631,16,24,27,32,36,37,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,69,71,73,76,77,79,80,83,85,86,93,94,100,106,108,109,116,117,120,121,122,125,126,127,130,131,132,134,136,137,138,139,140,141,142,143,144,145,146,147,183,184,185,186,187,189,191,194,195,196,198,199,200,201,202,203,204,205,207,208,209,210,211,212,213,214,215,216,217,219,220,221,226,237,694,695,697,698,700,240,241,245,246,247,248,249,250,251,252,254,255,256,257,258,259,261,273,277,278,279,280,281,282,284,286,287,288,289,290,291,292,293,310,319,323,327,328,329,330,332,333,335,336,337,338,339,349,352,353],"tindex":"5cc24ded-3e67-11e6-84e7-2bea8961d3dd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"value","context":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"5cc24dee-3e67-11e6-84e7-052bab7c6d63","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            if (create) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n                    int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n                    int int = hash & ((table.int) - 1);\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        table[index] = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    if (((int)++) > (int)) {\n                        doubleCapacity();\n                    } \n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc274ff-3e67-11e6-84e7-870b1793be95","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc27500-3e67-11e6-84e7-e38a7493c303","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[16,663,669,670,672,677,678,24,27,47,61,69,71,145,156,157,185,191,194,196,199,200,202,241,245,250,257,258,261,273,284,288,290,328,349],"tindex":"5cc27501-3e67-11e6-84e7-4751ab9c9929","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"5cc27502-3e67-11e6-84e7-3359067699db","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[658,627],"tindex":"5cc29c13-3e67-11e6-84e7-793995862823","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"5cc29c14-3e67-11e6-84e7-61698a14e67c","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"5cc29c15-3e67-11e6-84e7-b3001acd1f3d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"5cc29c16-3e67-11e6-84e7-23aa9a6cc692","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"5cc29c17-3e67-11e6-84e7-7921bed44804","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"5cc2c328-3e67-11e6-84e7-4f01e3f1236f","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"5cc2c329-3e67-11e6-84e7-7fd783f30530","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc2c32a-3e67-11e6-84e7-fd0f99590b58","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl","sourcecode":"!changed"},"failures":[7,14,15,631,16,379,24,27,32,385,36,386,37,387,38,388,39,40,41,389,43,44,45,46,47,390,48,49,50,391,51,393,52,53,54,55,394,56,57,58,395,396,59,397,60,398,399,61,63,69,406,71,73,76,77,79,80,410,413,83,85,86,93,94,417,418,372,373,419,100,436,106,108,109,112,116,117,119,442,120,121,122,125,126,127,443,444,130,131,446,132,134,136,448,137,138,139,140,141,142,143,144,449,450,145,146,147,501,183,184,513,514,185,515,516,186,517,518,187,519,189,521,191,523,524,194,525,195,196,526,198,527,528,199,531,200,201,532,202,533,534,535,536,203,537,538,204,205,207,208,209,210,540,211,212,213,214,215,216,217,219,220,221,226,542,543,544,240,241,245,547,246,548,247,550,248,249,250,251,252,254,255,552,256,553,374,257,258,259,556,261,273,564,274,277,278,279,280,281,282,568,569,284,570,286,575,287,288,289,290,291,292,293,576,579,580,584,0,588,310,319,323,327,602,603,328,329,604,605,330,332,333,335,336,337,338,339,349,352,353,355,358,620,621,701,702,703,704,705],"tindex":"5cc2c32b-3e67-11e6-84e7-4125e79a9a36","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc2ea3c-3e67-11e6-84e7-7df6e3a8fb00","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:361","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"5cc2ea3d-3e67-11e6-84e7-835d83bd617f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (offset == counter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"counter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc2ea3e-3e67-11e6-84e7-855fbb208511","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"5cc2ea3f-3e67-11e6-84e7-bf6e6a8a32d8","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"5cc31150-3e67-11e6-84e7-11034ae171e0","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"5cc31151-3e67-11e6-84e7-bb95863ce5af","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if ((memberName != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[68,100,106,108,116,127,128,130,131,135,136,137,138,139,140,142,143,144,146,147,213,270,275,291,0],"tindex":"5cc31152-3e67-11e6-84e7-d96183fbf100","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"5cc31153-3e67-11e6-84e7-29b7db64a017","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[626,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,394,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,253,255,257,258,259,260,261,262,263,264,265,266,267,268,269,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,1,295,296,297,298,2,3,299,300,0,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,4,318,319,5,320,321,322,323,6,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,351,352,353,354,355,356,357,358,359,360],"tindex":"5cc31154-3e67-11e6-84e7-b9d4d8a6f704","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc33865-3e67-11e6-84e7-5d434277c433","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:854","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"5cc33866-3e67-11e6-84e7-11dcb3a2e366","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (empty == empty) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    beforeValue(true);\n                    push(empty);\n                    java.io.Writer.write(openBracket);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_NONE":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"5cc33867-3e67-11e6-84e7-716517714e5f","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (other == other) {\n                {\n                    return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"other","java.util.Date.class":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"5cc35f78-3e67-11e6-84e7-f7181ef844f7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc35f79-3e67-11e6-84e7-359c383c542d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc35f7a-3e67-11e6-84e7-b1e4bf976653","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:917","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[],"tindex":"5cc35f7b-3e67-11e6-84e7-2b8a6af048e8","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (count == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"count","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[7,14,15,631,16,379,24,27,32,385,36,37,387,388,39,40,41,389,43,44,45,46,47,390,48,49,50,391,51,393,52,53,54,55,394,56,57,58,395,396,59,397,60,398,399,61,63,69,406,71,73,76,77,79,80,410,413,83,85,86,93,94,417,418,372,373,419,100,436,106,108,109,112,116,117,119,442,120,121,122,125,126,127,443,444,130,131,446,132,134,136,448,137,138,139,140,141,142,143,144,449,450,145,146,147,501,183,184,513,514,185,515,516,186,517,518,187,519,189,521,191,523,524,194,525,195,196,526,198,527,528,199,531,200,201,532,202,533,534,535,536,203,537,538,204,205,207,208,209,210,540,211,212,213,214,215,216,217,219,220,221,226,542,543,544,240,241,245,547,246,548,247,550,248,249,250,251,252,254,255,552,256,553,374,257,258,259,556,261,273,564,274,277,278,279,280,281,282,568,569,284,570,286,575,287,288,289,290,291,292,293,576,579,580,584,0,588,310,319,323,327,602,603,328,329,604,605,330,332,333,335,336,337,338,339,349,352,353,355,358,620,621],"tindex":"5cc35f7c-3e67-11e6-84e7-8fea17bc3c72","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[633],"tindex":"5cc35f7d-3e67-11e6-84e7-b11dd2e385e5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"5cc3868e-3e67-11e6-84e7-7b1fb96b9396","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj.isString()) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc3868f-3e67-11e6-84e7-a159a7ae58a8","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc38690-3e67-11e6-84e7-6bda0b3cd062","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"5cc38691-3e67-11e6-84e7-eb0a11e60838","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (other == other) {\n                {\n                    return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc3aca2-3e67-11e6-84e7-d3efd3cdfd61","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"5cc3aca3-3e67-11e6-84e7-63af1c39a0d4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc3aca4-3e67-11e6-84e7-7199df206b57","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc3aca5-3e67-11e6-84e7-e5045b43eb9d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc3aca6-3e67-11e6-84e7-85179e9d8188","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"5cc3aca7-3e67-11e6-84e7-4523e953fe94","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"5cc3aca8-3e67-11e6-84e7-9b7dbf3e43e8","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyType instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"5cc3d3b9-3e67-11e6-84e7-4907fdffc1f1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5cc3d3ba-3e67-11e6-84e7-f9e70ab42865","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc3d3bb-3e67-11e6-84e7-7be6d2bbf4f2","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"5cc3d3bc-3e67-11e6-84e7-9f74d115d72a","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            if ((!create) && (!create)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = 0;\n                    if (nearest != null) {\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                        while (true) {\n                            comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                            if (comparison == 0) {\n                                return nearest;\n                            } \n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            if (child == null) {\n                                break;\n                            } \n                            nearest = child;\n                        }\n                    } \n                    if (!create) {\n                        return null;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (nearest == null) {\n                        if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                            throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                        } \n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                    } else {\n                        created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                        if (comparison < 0) {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        } else {\n                            nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                        }\n                        rebalance(nearest, true);\n                    }\n                    (int)++;\n                    (int)++;\n                    return created;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"5cc3facd-3e67-11e6-84e7-5bc8ff82088e","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[631,36,37,387,388,39,40,51,52,53,54,55,394,56,57,58,395,396,398,399,61,406,73,76,77,79,80,410,83,93,94,436,112,138,141,143,449,450,145,147,150,519,189,200,201,207,208,209,210,540,211,212,213,214,215,216,217,219,220,221,226,542,550,251,277,278,279,280,281,282,290,579,580,0,588,310,323,332,333],"tindex":"5cc3face-3e67-11e6-84e7-1105d91485d9","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc3facf-3e67-11e6-84e7-c747d5730bdd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"5cc3fad0-3e67-11e6-84e7-0bcaec2d9ae2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((java.lang.String) != null) {\n                        if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                            com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                            object.add(java.lang.String, value);\n                        } \n                        java.lang.String = null;\n                    } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                        com.google.gson.JsonElement = value;\n                    } else {\n                        com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                        if (element instanceof com.google.gson.JsonArray) {\n                            ((com.google.gson.JsonArray)(element)).add(value);\n                        } else {\n                            throw new java.lang.IllegalStateException();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"5cc3fad1-3e67-11e6-84e7-1df0773e08af","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:251","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[365,366,367,368,369,370,371,16,652,24,408,372,373,205,254,374,289,290,291,292],"tindex":"5cc421e2-3e67-11e6-84e7-2dc8736ebd6c","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467250914386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":219,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":255,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":156,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":87,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":239,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":107,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":230,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":192,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":214,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":47,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":12,"com.google.gson.MixedStreamTest.testWriteLenient":272,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":80,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":258,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":7,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":287,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":205,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":25,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":212,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":284,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":95,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":262,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":183,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":294,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":275,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":56,"com.google.gson.functional.ObjectTest.testSingletonLists":162,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":78,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":96,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":240,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":152,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":216,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":62,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":198,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":139,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":315,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":154,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":261,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":153,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":251,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":210,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":124,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":224,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":76,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":190,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":229,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":298,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":67,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":231,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":159,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":312,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":314,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":276,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":41,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":57,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":233,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":226,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":285,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":227,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":257,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":301,"com.google.gson.functional.MapTest.testGeneralMapField":105,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":112,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":133,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":125,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":81,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":29,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":52,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":148,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":48,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":280,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":169,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":286,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":188,"com.google.gson.JsonObjectTest.testDeepCopy":279,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":271,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":35,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":24,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":292,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":149,"com.google.gson.JsonParserTest.testParseString":283,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":191,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":75,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":297,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":39,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":97,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":293,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":58,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":117,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":142,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":77,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":61,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":13,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":74,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":254,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":222,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":308,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":173,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":1,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":309,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":46,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":189,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":195,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":113,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":174,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":20,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":236,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":31,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":218,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":299,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":51,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":250,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":131,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":10,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":16,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":303,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":79,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":295,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":28,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":73,"com.google.gson.functional.MapTest.testInterfaceTypeMap":103,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":270,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":127,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":184,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":260,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":166,"com.google.gson.functional.EnumTest.testEnumSet":256,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":63,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":187,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":170,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":3,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":185,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":209,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":49,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":164,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":202,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":307,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":178,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":194,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":237,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":59,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":86,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":165,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":204,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":208,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":92,"com.google.gson.functional.MapTest.testSerializeMaps":98,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":201,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":211,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":123,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":316,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":263,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":135,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":33,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":232,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":110,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":136,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":306,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":36,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":85,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":157,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":277,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":215,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":99,"com.google.gson.functional.MapTest.testStringKeyDeserialization":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":69,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":138,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":150,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":55,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":206,"com.google.gson.functional.MapTest.testRawMapSerialization":106,"com.google.gson.JsonParserTest.testParseReader":282,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":126,"com.google.gson.functional.PrettyPrintingTest.testMap":155,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":171,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":207,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":248,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":64,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":70,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":278,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":289,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":114,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":151,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":5,"com.google.gson.functional.MapTest.testMapOfMapSerialization":101,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":37,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":146,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":8,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":42,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":267,"com.google.gson.functional.FieldNamingTest.testIdentity":93,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":241,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":119,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":90,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":304,"com.google.gson.functional.MapTest.testMapWithQuotes":100,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":221,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":161,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":217,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":305,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":137,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":144,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":23,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":179,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":17,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":242,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":40,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":182,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":71,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":266,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":54,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":26,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":66,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":122,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":128,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":197,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":82,"com.google.gson.functional.EnumTest.testEnumSubclass":259,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":43,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":27,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":268,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":68,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":199,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":83,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":111,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":252,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":223,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":220,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":290,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":302,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":143,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":18,"com.google.gson.JsonObjectTest.testAddingStringProperties":4,"com.google.gson.functional.ObjectTest.testNestedSerialization":172,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":288,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":234,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":32,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":147,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":38,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":84,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":109,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":21,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":115,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":167,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":134,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":273,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":141,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":163,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":313,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":196,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":102,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":243,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":180,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":245,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":53,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":118,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":108,"com.google.gson.functional.CollectionTest.testSetSerialization":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":140,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":158,"com.google.gson.functional.StringTest.testStringValueSerialization":246,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":94,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":264,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":30,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":193,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":34,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":121,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":265,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":50,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":235,"com.google.gson.functional.MapTest.testMapDeserialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":72,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":91,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":281,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":132,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":160,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":274,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":203,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":228,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":225,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":317,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":145,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":186,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":168,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":176,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":6,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":249,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":129,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":65,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":116},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb09e30-3f4b-11e6-b002-6377c4dbebe4","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb16181-3f4b-11e6-b002-f1627d2f9f51","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:793","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb18892-3f4b-11e6-b002-67c002b8b99b","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return char[][i];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb18893-3f4b-11e6-b002-973bc106eb38","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb1d6b4-3f4b-11e6-b002-039e183faca2","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl"},"failures":[0,1,2,3],"tindex":"bbb1d6b5-3f4b-11e6-b002-6138ff9bc473","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (!deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb224d6-3f4b-11e6-b002-c989fcb9e370","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb24be7-3f4b-11e6-b002-01b840642140","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17],"tindex":"bbb24be8-3f4b-11e6-b002-e1e5212c20b2","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,2,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,11,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,17,269,270,271],"tindex":"bbb272f9-3f4b-11e6-b002-0d9ea09e44d9","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.Class) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1358","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb2e82a-3f4b-11e6-b002-5b0d65d5108b","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (((index == ' ') || (c == '\\r')) || (c == '\\t')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb3ab7b-3f4b-11e6-b002-db200cdfa457","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb3d28c-3f4b-11e6-b002-751b98451fcd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb3f99d-3f4b-11e6-b002-17e0d2f1c2a7","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb420ae-3f4b-11e6-b002-b97b389a8a86","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb420af-3f4b-11e6-b002-49a76002a508","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb420b0-3f4b-11e6-b002-7397d52798a7","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl"},"failures":[272,42,45,46,51,55,57],"tindex":"bbb447c1-3f4b-11e6-b002-432495c9b3cc","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[273,274,275,276,277,278,279,4,280,281,282,283,284,285,286,287,288,289,26,290,291,292,293,294,295,296,297,298,299,300,108,301,109,7,8,9,10,302,303,304,305,15,179,306,307,308,309,310,311,312,313,314,315,316,317],"tindex":"bbb447c2-3f4b-11e6-b002-b111d09a69bc","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb46ed3-3f4b-11e6-b002-0bfdf010adc1","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb50b14-3f4b-11e6-b002-c745843f43af","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb53225-3f4b-11e6-b002-e3cddb6ba87c","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb53226-3f4b-11e6-b002-eba19d2b2ea5","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb53227-3f4b-11e6-b002-cda311e9e15d","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb53228-3f4b-11e6-b002-6fbd1443a2f4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb55939-3f4b-11e6-b002-d79fe1999bd1","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        return true;\n    } \n    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n            return true;\n        } \n    }\n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb5593a-3f4b-11e6-b002-e550ed6437bf","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token == token) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"token","java.sql.Timestamp.class":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb5593b-3f4b-11e6-b002-f5803939ad71","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbb5804c-3f4b-11e6-b002-47e75cf9f57f","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"bbb5804d-3f4b-11e6-b002-eb7cf74d9969","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context","to":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:549","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb5a75e-3f4b-11e6-b002-97e365b3f923","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.CLOSED":"newTop","peekStack":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb5a75f-3f4b-11e6-b002-55ee642dd0a3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.Class<?>) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb5a760-3f4b-11e6-b002-6772351f43b4","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb5ce71-3f4b-11e6-b002-e5cccff632f2","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb5ce72-3f4b-11e6-b002-f5941433761e","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbb5ce73-3f4b-11e6-b002-f5d83d8419c8","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if ((value != value) && (token != value)) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467349800956/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"value","token":"value","com.google.gson.stream.JsonToken.NUMBER":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":36,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":266,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":58,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":409,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":117,"com.google.gson.stream.JsonWriterTest.testRepeatedName":401,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":143,"com.google.gson.MixedStreamTest.testWriteLenient":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":178,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":194,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":118,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":128,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":141,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":202,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":81,"com.google.gson.functional.ObjectTest.testSingletonLists":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":174,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":203,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":59,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":390,"com.google.gson.stream.JsonWriterTest.testStrings":422,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":307,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":12,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":387,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":427,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":66,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":49,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":414,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":364,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":28,"com.google.gson.functional.EnumTest.testEnumCaseMapping":140,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":14,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":57,"com.google.gson.functional.JsonTreeTest.testToJsonTree":319,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":54,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":305,"com.google.gson.stream.JsonWriterTest.testNulls":398,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":157,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":384,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":345,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":125,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":312,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":250,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":362,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":214,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":26,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":282,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":361,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":188,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":331,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":410,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":242,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":385,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":236,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":40,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":220,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":173,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":326,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":355,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":374,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":115,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":243,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":36,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":219,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":17,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":21,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":417,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":147,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":228,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":298,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":88,"com.google.gson.stream.JsonWriterTest.testEmptyArray":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":168,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":281,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":82,"com.google.gson.functional.EnumTest.testEnumSet":134,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":210,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":89,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":284,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":99,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":215,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":87,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":363,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":413,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":23,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":310,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":246,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":371,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":22,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":264,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":320,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":353,"com.google.gson.functional.MapTest.testMapSerialization":104,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":267,"com.google.gson.functional.MapTest.testSerializeMaps":98,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":192,"com.google.gson.functional.MapTest.testComplexKeysSerialization":113,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":373,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":47,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":314,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":352,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":369,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":308,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":52,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":367,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":144,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":2,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":286,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":254,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":116,"com.google.gson.functional.PrettyPrintingTest.testMap":50,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":338,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":154,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":268,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":11,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":386,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":63,"com.google.gson.functional.MapTest.testMapSerializationEmpty":114,"com.google.gson.functional.CollectionTest.testQueueSerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":165,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":418,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":420,"com.google.gson.functional.MapTest.testMapOfMapSerialization":103,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":234,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":393,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":239,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":263,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":292,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":19,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":60,"com.google.gson.functional.FieldNamingTest.testIdentity":193,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":275,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":404,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":146,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":196,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":204,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":318,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":396,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":365,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":61,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":279,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":237,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":357,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":187,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":262,"com.google.gson.functional.MapTest.testMapSubclassSerialization":97,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":253,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":200,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":5,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":73,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":340,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":86,"com.google.gson.functional.EnumTest.testEnumSubclass":137,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":240,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":13,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":224,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":278,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":285,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":149,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":405,"com.google.gson.stream.JsonWriterTest.testTwoNames":392,"com.google.gson.stream.JsonWriterTest.testNullName":399,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":296,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":356,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":235,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":407,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":182,"com.google.gson.MixedStreamTest.testWriteNulls":6,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":42,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":402,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":38,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":313,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":206,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":289,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":272,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":62,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":106,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":78,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":184,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":252,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":70,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":388,"com.google.gson.JsonParserTest.testParseMixedArray":372,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":227,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":269,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":231,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":171,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":167,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":55,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":96,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":100,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":303,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":347,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":344,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":424,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":317,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":213,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":221,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":322,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":341,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":158,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":148,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":327,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":51,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":105,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":186,"com.google.gson.functional.PrimitiveTest.testShortSerialization":251,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":349,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":18,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":30,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":160,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":189,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":136,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":120,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":199,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":132,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":255,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":429,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":378,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":376,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":258,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":381,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":145,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":222,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":150,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":379,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":287,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":139,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":142,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":323,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":126,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":336,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":172,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":162,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":354,"com.google.gson.stream.JsonWriterTest.testNullStringValue":395,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":350,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":301,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":238,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":256,"com.google.gson.stream.JsonWriterTest.testEmptyObject":412,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":31,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":135,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":346,"com.google.gson.functional.MapTest.testGeneralMapField":110,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":35,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":44,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":280,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":337,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":179,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":151,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":226,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":330,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":245,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":232,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":129,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":366,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":415,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":170,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":95,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":290,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":69,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":76,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":400,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":169,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":276,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":294,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":67,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":218,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":295,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":27,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":271,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":85,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":249,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":368,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":198,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":131,"com.google.gson.functional.ObjectTest.testNullSerialization":211,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":325,"com.google.gson.stream.JsonWriterTest.testDoubles":419,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":109,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":225,"com.google.gson.functional.MapTest.testInterfaceTypeMap":107,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":416,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":339,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":300,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":72,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":152,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":25,"com.google.gson.MixedStreamTest.testWriteClosed":10,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":124,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":207,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":90,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":299,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":274,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":223,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":270,"com.google.gson.stream.JsonWriterTest.testLongs":397,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":185,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":208,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":304,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":123,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":77,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":127,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":175,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":259,"com.google.gson.stream.JsonWriterTest.testNumbers":421,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":230,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":316,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":33,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":315,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":273,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":233,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":183,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":101,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":164,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":332,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":119,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":4,"com.google.gson.functional.MapTest.testRawMapSerialization":112,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":382,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":216,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":321,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":351,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":358,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":37,"com.google.gson.functional.PrimitiveTest.testByteSerialization":248,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":306,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":360,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":334,"com.google.gson.ObjectTypeAdapterTest.testSerialize":389,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":328,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":3,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":195,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":43,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":190,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":91,"com.google.gson.functional.MapTest.testMapWithQuotes":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":155,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":283,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":293,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":153,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":80,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":406,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":83,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":161,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":241,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":156,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":163,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":197,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":309,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":34,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":181,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":324,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":277,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":201,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":291,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":380,"com.google.gson.functional.ObjectTest.testNestedSerialization":217,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":32,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":229,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":329,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":68,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":111,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":71,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":48,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":9,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":16,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":423,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":212,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":302,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":15,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":383,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":64,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":41,"com.google.gson.functional.CollectionTest.testSetSerialization":130,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":53,"com.google.gson.functional.StringTest.testStringValueSerialization":65,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":288,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":333,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":260,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":370,"com.google.gson.MixedStreamTest.testWriteInvalidState":7,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":209,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":45,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":20,"com.google.gson.stream.JsonWriterTest.testBooleans":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":159,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":191,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":311,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":375,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":176,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":335,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":408,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":39},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3],"tindex":"327364db-3f22-11e6-8fd1-d7e4f72209e2","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from != from) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"from","type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"3273da0c-3f22-11e6-8fd1-cbf66c56981b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:828","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3273da0d-3f22-11e6-8fd1-795e649e7a7a","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"start","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366],"tindex":"3273da0e-3f22-11e6-8fd1-ddf62bf76358","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3274011f-3f22-11e6-8fd1-6712d7702951","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"32742830-3f22-11e6-8fd1-9d9a3596357c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"32742831-3f22-11e6-8fd1-93680c9d54ed","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl"},"failures":[367],"tindex":"32744f42-3f22-11e6-8fd1-7926a4621b5c","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[11,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,267,268,269,270,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,298,299,300,303,304,306,307,308,309,310,311,312,313,314,315,317,320,321,322,368,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,361,362,363,364,365,366],"tindex":"32747653-3f22-11e6-8fd1-43903b6fb8a6","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"32749d64-3f22-11e6-8fd1-8331a5fa7da1","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"32749d65-3f22-11e6-8fd1-d91b251647db","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"32749d66-3f22-11e6-8fd1-11c1a1bf1766","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[369],"tindex":"32749d67-3f22-11e6-8fd1-a5dabc8e7df9","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl"},"failures":[8,239,242,243,249,254,256],"tindex":"3274c478-3f22-11e6-8fd1-dbbfa1238a58","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[31,370,147,226],"tindex":"3274eb89-3f22-11e6-8fd1-e3ae540ed9cc","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"3274eb8a-3f22-11e6-8fd1-7f910ab1a497","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[371],"tindex":"3275129b-3f22-11e6-8fd1-7f56f38d391a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3275129c-3f22-11e6-8fd1-dd3e2e3af4cd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"327539ad-3f22-11e6-8fd1-cb9e319f5dea","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl"},"failures":[4,5,7,8,9,10,14,15,17,372,373,374,375,376,377,378,379,20,21,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,66,68,69,70,71,380,72,381,382,383,384,385,386,387,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,136,137,138,139,143,144,145,146,147,148,149,153,156,159,162,165,169,170,172,173,177,179,180,185,189,190,191,192,193,199,200,201,203,204,205,206,207,208,209,210,212,215,216,217,218,219,220,221,222,223,226,229,232,244,252,255,257,259,260,261,262,263,264,267,268,269,270,271,272,275,276,277,278,280,281,282,283,284,285,286,287,288,289,291,294,298,299,300,303,304,307,310,311,312,313,314,315,317,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,340,343,344,346,347,348,349,350,352,353,354,355,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,356,357,361,362,363],"tindex":"327539ae-3f22-11e6-8fd1-85f0f79c8fe8","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"327560bf-3f22-11e6-8fd1-99a40e200e1a","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    return ((T)(fromJson(json, typeOfT)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"json","this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"327560c0-3f22-11e6-8fd1-2f979b8247ae","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[12,13,17,69,106,118,128,155,199,200,217,233,292,303,307,328,331,332,355,394,400,401,403,408,409,410,362],"tindex":"327560c1-3f22-11e6-8fd1-f57c481ad978","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"327560c2-3f22-11e6-8fd1-e7cc724801a8","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[189,320,424],"tindex":"327560c3-3f22-11e6-8fd1-af05bd56b00e","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl"},"failures":[425],"tindex":"327560c4-3f22-11e6-8fd1-95ec46bb1396","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if ((!unlink) && (!unlink)) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"unlink","skipSerialize":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[426,427,428,429,430,151,156,157,178,181,186],"tindex":"3275aee5-3f22-11e6-8fd1-732aa830978c","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3275aee6-3f22-11e6-8fd1-156f0f3943c0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if ((key != key) && (token != key)) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"key","token":"key","com.google.gson.stream.JsonToken.NUMBER":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[],"tindex":"3275aee7-3f22-11e6-8fd1-677ece85baf9","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3275aee8-3f22-11e6-8fd1-ffab09eafc6d","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3275d5f9-3f22-11e6-8fd1-670bcec4df39","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"3275d5fa-3f22-11e6-8fd1-23694cba0633","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3275fd0b-3f22-11e6-8fd1-df088d462e12","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1397","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"3275fd0c-3f22-11e6-8fd1-4539a7a596a2","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == '#') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332037963/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":34,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
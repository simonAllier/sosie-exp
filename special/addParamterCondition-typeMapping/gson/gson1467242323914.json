{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":140,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":560,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":406,"com.google.gson.functional.StringTest.testStringValueDeserialization":559,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":73,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":551,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":205,"com.google.gson.stream.JsonWriterTest.testRepeatedName":398,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":620,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":17,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":101,"com.google.gson.MixedStreamTest.testWriteLenient":196,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":254,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":677,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":689,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":42,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":246,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":250,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":283,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":516,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":151,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":583,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":328,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":501,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":26,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":267,"com.google.gson.functional.ObjectTest.testSingletonLists":281,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":675,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":496,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":682,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":387,"com.google.gson.stream.JsonWriterTest.testStrings":419,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":62,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":227,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":175,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":296,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":12,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":646,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":179,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":466,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":569,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":102,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":123,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":514,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":411,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":258,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":5,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":90,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":115,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":605,"com.google.gson.functional.EnumTest.testEnumCaseMapping":491,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":198,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":681,"com.google.gson.functional.JsonTreeTest.testToJsonTree":351,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":612,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":556,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":278,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":369,"com.google.gson.stream.JsonWriterTest.testNulls":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":165,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":243,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":463,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":664,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":549,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":80,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":215,"com.google.gson.functional.ObjectTest.testNullDeserialization":527,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":318,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":567,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":293,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":422,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":650,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":621,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":100,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":113,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":264,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":303,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":421,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":679,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":265,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":521,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":520,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":174,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":93,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":371,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":464,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":633,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":544,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":305,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":481,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":507,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":255,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":511,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":601,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":548,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":160,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":380,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":48,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":446,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":94,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":593,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":512,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":302,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":470,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":188,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":225,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":289,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":414,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":24,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":204,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":607,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":624,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":155,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":217,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":236,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":122,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":50,"com.google.gson.stream.JsonWriterTest.testEmptyArray":389,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":580,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":610,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":482,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":674,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":263,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":320,"com.google.gson.functional.CollectionTest.testSetDeserialization":249,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":329,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":292,"com.google.gson.functional.EnumTest.testEnumSet":423,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":538,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":508,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":237,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":49,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":546,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":297,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":235,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":643,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":121,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":410,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":518,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":110,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":228,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":95,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":207,"com.google.gson.functional.MapTest.testHashMapDeserialization":595,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":618,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":553,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":142,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":189,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":29,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":138,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":156,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":581,"com.google.gson.functional.MapTest.testSortedMap":606,"com.google.gson.functional.MapTest.testMapSerialization":440,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":141,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":132,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":510,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":533,"com.google.gson.functional.MapTest.testSerializeMaps":68,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":193,"com.google.gson.functional.MapTest.testComplexKeysSerialization":259,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":537,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":379,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":609,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":477,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":230,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":319,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":88,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":0,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":39,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":490,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":1,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":126,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":19,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":526,"com.google.gson.functional.MapTest.testStringKeyDeserialization":608,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":534,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":54,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":97,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":447,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":500,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":108,"com.google.gson.functional.PrettyPrintingTest.testMap":124,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":619,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":428,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":14,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":668,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":11,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":465,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":535,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":562,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":684,"com.google.gson.functional.CollectionTest.testQueueSerialization":429,"com.google.gson.functional.MapTest.testMapSerializationEmpty":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":480,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":415,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":638,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":417,"com.google.gson.functional.MapTest.testMapOfMapSerialization":439,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":631,"com.google.gson.JavaSerializationTest.testMapIsSerializable":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":550,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":588,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":391,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":92,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":63,"com.google.gson.functional.FieldNamingTest.testIdentity":194,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":561,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":51,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":335,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":401,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":306,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":23,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":44,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":280,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":350,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":393,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":494,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":6,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":370,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":74,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":683,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":315,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":554,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":547,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":672,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":594,"com.google.gson.functional.MapTest.testMapSubclassSerialization":435,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":652,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":242,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":332,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":539,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":177,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":330,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":360,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":505,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":542,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":658,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":226,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":234,"com.google.gson.functional.EnumTest.testEnumSubclass":425,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":642,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":13,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":295,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":613,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":210,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":260,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":515,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":53,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":35,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":615,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":317,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":402,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":575,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":634,"com.google.gson.stream.JsonWriterTest.testTwoNames":390,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":316,"com.google.gson.stream.JsonWriterTest.testNullName":396,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":270,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":8,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":531,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":639,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":659,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":22,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":404,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":632,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":678,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":282,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":67,"com.google.gson.MixedStreamTest.testWriteNulls":574,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":475,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":399,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":591,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":472,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":106,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":232,"com.google.gson.CommentsTest.testParseComments":688,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":58,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":268,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":284,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":340,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":345,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":645,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":131,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":442,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":484,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":104,"com.google.gson.MixedStreamTest.testReadInvalidState":687,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":326,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":173,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":454,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":133,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":386,"com.google.gson.JsonParserTest.testParseMixedArray":388,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":499,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":200,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":536,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":342,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":367,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":628,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":168,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":649,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":530,"com.google.gson.functional.MapTest.testMapDeserialization":600,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":673,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":129,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":66,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":77,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":277,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":437,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":82,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":78,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":40,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":349,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":353,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":307,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":660,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":30,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":528,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":669,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":27,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":38,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":314,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":125,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":441,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":611,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":60,"com.google.gson.functional.PrimitiveTest.testShortSerialization":651,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":84,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":517,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":117,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":506,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":222,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":498,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":190,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":16,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":247,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":331,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":597,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":503,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":41,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":455,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":2,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":384,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":171,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":364,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":382,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":657,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":654,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":212,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":52,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":276,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":308,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":178,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":666,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":279,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":55,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":635,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":312,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":288,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":426,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":32,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":665,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":354,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":459,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":365,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":56,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":76,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":169,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":576,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":623,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":202,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":479,"com.google.gson.stream.JsonWriterTest.testNullStringValue":214,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":552,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":273,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":584,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":616,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":519,"com.google.gson.JsonArrayTest.testSet":376,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":637,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":98,"com.google.gson.stream.JsonWriterTest.testEmptyObject":409,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":252,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":81,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":424,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":146,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":134,"com.google.gson.functional.MapTest.testGeneralMapField":71,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":286,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":469,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":656,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":107,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":261,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":339,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":483,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":163,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":449,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":450,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":647,"com.google.gson.MixedStreamTest.testReadMixedStreamed":363,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":377,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":545,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":602,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":7,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":158,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":433,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":412,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":153,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":640,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":116,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":577,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":356,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":603,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":680,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":59,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":456,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":149,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":182,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":629,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":167,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":208,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":592,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":540,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":587,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":87,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":65,"com.google.gson.functional.ObjectTest.testNestedDeserialization":313,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":103,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":457,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":143,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":269,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":114,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":655,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":344,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":18,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":563,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":604,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":233,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":96,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":31,"com.google.gson.JavaSerializationTest.testListIsSerializable":579,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":46,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":257,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":434,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":34,"com.google.gson.stream.JsonWriterTest.testDoubles":416,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":558,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":598,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":216,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":614,"com.google.gson.functional.MapTest.testInterfaceTypeMap":70,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":413,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":532,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":109,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":218,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":486,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":617,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":211,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":229,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":373,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":661,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":667,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":112,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":625,"com.google.gson.MixedStreamTest.testWriteClosed":362,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":145,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":431,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":275,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":557,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":206,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":238,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":272,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":347,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":310,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":343,"com.google.gson.stream.JsonWriterTest.testLongs":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":357,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":219,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":290,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":430,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":183,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":641,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":185,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":36,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":170,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":147,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":322,"com.google.gson.stream.JsonWriterTest.testNumbers":418,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":524,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":91,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":543,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":321,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":467,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":201,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":346,"com.google.gson.functional.CollectionTest.testQueueDeserialization":590,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":509,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":630,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":366,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":566,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":172,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":184,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":69,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":304,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":671,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":266,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":311,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":427,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":359,"com.google.gson.functional.MapTest.testRawMapSerialization":444,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":589,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":676,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":461,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":244,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":299,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":137,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":86,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":571,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":471,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":488,"com.google.gson.functional.PrimitiveTest.testByteSerialization":570,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":573,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":195,"com.google.gson.ObjectTypeAdapterTest.testSerialize":224,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":75,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":622,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":43,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":476,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":191,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":239,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":564,"com.google.gson.functional.MapTest.testMapWithQuotes":438,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":502,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":565,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":47,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":157,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":64,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":334,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":478,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":327,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":403,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":79,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":231,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":309,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":166,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":525,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":644,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":221,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":164,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":45,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":670,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":648,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":15,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":492,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":529,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":25,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":555,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":33,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":337,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":186,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":203,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":333,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":368,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":489,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":28,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":495,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":209,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":372,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":61,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":460,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":298,"com.google.gson.functional.ObjectTest.testNestedSerialization":300,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":253,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":448,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":451,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":568,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":148,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":72,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":135,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":161,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":197,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":487,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":420,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":294,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":662,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":522,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":274,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":355,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":10,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":199,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":626,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":352,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":180,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":462,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":685,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":150,"com.google.gson.functional.CollectionTest.testSetSerialization":251,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":262,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":57,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":127,"com.google.gson.functional.StringTest.testStringValueSerialization":686,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":358,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":20,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":220,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":585,"com.google.gson.MixedStreamTest.testWriteInvalidState":361,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":663,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":99,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":627,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":341,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":504,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":187,"com.google.gson.stream.JsonWriterTest.testBooleans":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":375,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":192,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":378,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":105,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":338,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":111,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":381,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":240,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":485,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":599,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":405,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":118,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":473},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"d2ad9b26-3e4f-11e6-b604-971f78047b1a","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"array","type":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[0,1,2],"tindex":"d2ade947-3e4f-11e6-b604-5798c4e5e52e","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:857","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_TRUE)"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199],"tindex":"d2ae1058-3e4f-11e6-b604-e5f16c01bb25","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (datePattern == null) {\n        {\n            if (timeStyle == dateStyle) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_TRUE":"dateStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[200,201,202,203,204,205,206,207,208,209],"tindex":"d2ae3769-3e4f-11e6-b604-1fc84e2ea416","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2ae5e7a-3e4f-11e6-b604-817cb1dcfd62","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"d2ae5e7b-3e4f-11e6-b604-33153e26f544","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType.equals(keyType)) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"keyType","to":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"d2ae858c-3e4f-11e6-b604-67b223750ed2","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[4,16,64,100,102,103,104,115,116,117],"tindex":"d2ae858d-3e4f-11e6-b604-a7079d412d8a","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2ae858e-3e4f-11e6-b604-c58d7debc9d0","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[3,4,5,6,7,210,11,12,13,17,18,19,20,21,22,23,24,25,26,27,28,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,67,73,74,79,80,84,101,105,106,107,108,109,110,111,112,113,114,115,117,211,212,213,118,119,120,121,122,131,132,133,134,135,136,137,147,161,162,168,170,171,173,176],"tindex":"d2aeac9f-3e4f-11e6-b604-e549b1fb7495","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter == typeAdapter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter == null) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2aeaca0-3e4f-11e6-b604-2b40c531ac44","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"d2aeaca1-3e4f-11e6-b604-919ce2982ff1","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter == typeAdapter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter == null) {\n                {\n                    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n                    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n                    } \n                    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n                    } \n                    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n                    } \n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"typeAdapter","typeOfT":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"d2aed3b2-3e4f-11e6-b604-9fa2ee8d8705","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json.isString()) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:319","type":"CtBinaryOperatorImpl","sourcecode":"((value) instanceof java.lang.Number) && ((other.value) instanceof java.lang.Number)"},"failures":[],"tindex":"d2aed3b3-3e4f-11e6-b604-f19b29f35944","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if ((src instanceof java.lang.Number) && ((src.java.lang.Object) instanceof java.lang.Number)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"src","value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[214,215,69,70,216,73,76,78,81,82,86,88,217,218,219,220,150,221,222,223],"tindex":"d2aed3b4-3e4f-11e6-b604-7b5f229be573","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[4,8,9,224,225,226,227,228,229,230,17,18,19,20,21,22,23,24,231,232,233,234,235,236,237,26,238,239,240,27,241,242,243,29,244,30,31,32,33,34,35,36,245,37,38,39,40,246,247,248,249,250,251,42,43,45,46,48,52,53,55,57,252,253,254,255,256,2,257,69,258,70,216,71,259,73,260,261,262,263,264,75,265,266,76,77,267,81,82,268,83,85,88,89,269,270,271,217,272,218,273,274,275,276,277,219,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,101,314,315,316,317,102,105,318,106,319,320,321,322,220,323,324,325,326,327,328,329,330,119,120,121,125,126,130,132,133,134,135,137,331,332,333,334,138,140,141,143,144,145,146,335,336,337,338,149,339,340,341,342,343,344,345,346,347,152,153,154,155,156,158,159,160,348,349,350,351,161,162,352,353,354,222,355,356,223,357,178,179,180,181,182,183,184,185,187,188,190,191,192,193,194,358,359,360,361,362,363,364],"tindex":"d2aefac5-3e4f-11e6-b604-3fafa01a0f05","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d2aefac6-3e4f-11e6-b604-ebbd45972753","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"d2aefac7-3e4f-11e6-b604-d327f49accb5","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type == type) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"type","typeOfT":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[4,8,9,224,225,365,366,226,227,228,229,230,17,18,19,20,21,22,23,24,231,232,233,234,235,236,237,26,238,239,240,27,241,242,243,29,244,30,31,32,33,34,35,36,245,37,38,39,40,246,247,248,249,250,251,42,43,45,46,48,52,53,55,57,252,253,254,255,256,2,257,69,258,70,216,71,259,73,260,261,262,263,264,75,265,266,76,77,267,81,82,268,83,85,88,89,269,270,271,217,272,218,273,274,275,276,277,219,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,101,314,315,316,317,102,105,318,106,319,320,321,322,220,323,324,325,326,327,328,329,330,119,120,121,125,126,130,132,133,134,135,137,331,332,333,334,138,140,141,143,144,145,146,335,336,337,338,149,339,340,341,342,343,344,345,346,347,152,153,154,155,156,158,159,160,348,349,350,351,161,162,352,353,354,222,355,356,223,357,178,179,180,181,182,183,184,185,187,188,190,191,192,193,194,358,359,360,361,362,363,364,367,368,369,370,371,372,373,374],"tindex":"d2af21d8-3e4f-11e6-b604-6f4eb651bb2c","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serialize) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (((int) & (field.getModifiers())) != 0) {\n                                return true;\n                            } \n                            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                                return true;\n                            } \n                            if (field.isSynthetic()) {\n                                return true;\n                            } \n                            if (boolean) {\n                                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                                    return true;\n                                } \n                            } \n                            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                                return true;\n                            } \n                            if (isAnonymousOrLocal(field.getType())) {\n                                return true;\n                            } \n                            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                            if (!(list.isEmpty())) {\n                                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                        return true;\n                                    } \n                                }\n                            } \n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d2af21d9-3e4f-11e6-b604-111fd5215f93","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"d2af21da-3e4f-11e6-b604-b711ea48209a","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"d2af48eb-3e4f-11e6-b604-934e9e167ca4","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:319","type":"CtBinaryOperatorImpl","sourcecode":"(parent.left) == node"},"failures":[200,209],"tindex":"d2af48ec-3e4f-11e6-b604-4d436b21d7cb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node == node) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"replacement","node":"node","left":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2af48ed-3e4f-11e6-b604-aff0e9934650","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:828","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BUFFERED)"},"failures":[29,33,35,40,190,193],"tindex":"d2af48ee-3e4f-11e6-b604-37f1831fa5b2","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"indexOfSubstring","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"indexOfSubstring"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2af6fff-3e4f-11e6-b604-ddbd82ed06a0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[375],"tindex":"d2af7000-3e4f-11e6-b604-b1a1495ca700","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"d2af7001-3e4f-11e6-b604-d38db508f079","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"d2af7002-3e4f-11e6-b604-d5e28f7510a4","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2af7003-3e4f-11e6-b604-536b6315acdf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"d2af7004-3e4f-11e6-b604-7b752afe298f","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (datePattern == null) {\n        {\n            if (timeStyle == dateStyle) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n                    if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n                    } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                        dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n                    } else {\n                        return ;\n                    }\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n                    factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"datePattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2af9715-3e4f-11e6-b604-23a12eb0798c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d2af9716-3e4f-11e6-b604-2d22402ef9d6","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src instanceof com.google.gson.JsonObject) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"d2af9717-3e4f-11e6-b604-399ee7aae16f","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    return java.lang.reflect.Field.get(instance);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"d2af9718-3e4f-11e6-b604-8577440758e5","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            if (factory == factory) {\n                {\n                    java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:428","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"d2af9719-3e4f-11e6-b604-e73ad72bc5ae","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (offset == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2af971a-3e4f-11e6-b604-5f0dee80faab","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:824","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)"},"failures":[376],"tindex":"d2afbe2b-3e4f-11e6-b604-f1a26cc9c381","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[377,378],"tindex":"d2afbe2c-3e4f-11e6-b604-6fac9fcc2bc7","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            if (in == null) {\n                {\n                    if (in == null) {\n                        {\n                            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                            return read(reader);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2afbe2d-3e4f-11e6-b604-9f720cbc5900","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"d2afbe2e-3e4f-11e6-b604-bf8ba02fd50c","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    if (jsonTree == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n                return read(jsonReader);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"d2afbe2f-3e4f-11e6-b604-f7e86f07517c","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            if (in == null) {\n                {\n                    if (in == null) {\n                        {\n                            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                            return read(reader);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[177,178,179,180,181,182,183,184,185,186,367,368,369],"tindex":"d2afbe30-3e4f-11e6-b604-cd0ef3eff219","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"until"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"d2afbe31-3e4f-11e6-b604-cde5a780cd0e","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"d2afe542-3e4f-11e6-b604-dfcc7d5ce32d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.WildcardType) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[379,380,381,382,383,384,385,4,8,9,386,224,387,225,388,389,390,391,392,214,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,227,228,423,424,16,425,229,426,17,19,21,23,24,231,25,233,234,235,236,237,238,239,240,241,243,29,244,30,32,33,34,245,38,246,427,247,428,429,430,431,215,248,432,250,433,251,434,47,49,53,54,55,57,58,61,65,252,253,66,435,68,436,437,69,438,439,440,441,442,70,443,216,71,72,444,259,445,446,447,73,260,261,263,264,75,448,449,265,266,76,78,81,82,83,84,85,88,217,272,218,277,219,450,451,452,453,454,455,456,280,281,284,287,290,99,292,294,297,299,300,457,302,305,307,308,310,314,317,102,105,318,106,319,321,322,220,323,324,325,326,458,327,328,329,459,330,460,211,212,461,462,463,464,465,466,123,124,125,126,127,128,129,130,133,135,331,332,333,334,138,141,144,335,336,337,148,149,467,468,469,470,471,472,473,474,150,475,476,339,341,221,477,342,343,344,345,154,156,159,160,349,161,478,164,375,479,480,167,356,169,481,482,483,223,357,178,181,182,185,187,188,190,191,192,193,194,484,358,195,485,359,360,361,196,197,362,198,199],"tindex":"d2afe543-3e4f-11e6-b604-09c93848144e","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2afe544-3e4f-11e6-b604-89412424cee2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"d2b00c55-3e4f-11e6-b604-bbdc92e80bef","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[486],"tindex":"d2b00c56-3e4f-11e6-b604-77098c8be507","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"d2b00c57-3e4f-11e6-b604-8fec02d325f2","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if ((src != src) && (token != src)) {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[],"tindex":"d2b00c58-3e4f-11e6-b604-313fcf01bcc3","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (unlink) {\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if ((left != null) && (right != null)) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                        removeInternal(adjacent, false);\n                        int int = 0;\n                        left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (left != null) {\n                            leftHeight = left.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                            left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        int int = 0;\n                        right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        if (right != null) {\n                            rightHeight = right.int;\n                            adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                            right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                        } \n                        adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                        replaceInParent(node, adjacent);\n                        return ;\n                    } else if (left != null) {\n                        replaceInParent(node, left);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else if (right != null) {\n                        replaceInParent(node, right);\n                        node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    } else {\n                        replaceInParent(node, null);\n                    }\n                    rebalance(originalParent, false);\n                    (int)--;\n                    (int)++;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"d2b03369-3e4f-11e6-b604-952eb0231f76","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            if (in == null) {\n                {\n                    if (in == null) {\n                        {\n                            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                            return read(reader);\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[4,6,7,8,9,224,225,487,11,12,13,488,226,227,14,489,228,16,425,490,229,230,491,17,18,19,20,22,23,24,231,232,25,233,234,235,236,237,26,238,239,240,27,241,28,242,243,29,244,30,31,32,33,34,35,36,245,37,38,39,40,246,247,248,492,249,250,251,493,42,43,45,46,48,50,52,53,55,56,57,62,64,252,253,254,255,256,2,257,67,69,258,70,216,71,259,73,260,261,262,263,264,75,449,265,266,76,77,267,79,81,82,268,83,85,87,88,89,269,270,271,217,272,218,273,274,275,276,277,219,278,90,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,279,519,520,521,522,523,524,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,525,295,296,297,298,299,300,301,302,303,304,526,527,305,306,307,308,309,310,311,312,313,101,314,315,316,317,102,103,105,318,106,319,320,321,322,220,323,324,325,326,327,328,329,459,107,109,330,528,110,111,112,113,114,115,116,117,119,120,121,122,125,126,130,131,132,133,134,135,136,137,331,332,333,334,138,140,141,142,143,144,145,146,335,336,147,337,338,148,149,529,530,531,532,533,339,340,341,534,535,536,342,343,344,345,346,347,152,153,154,155,537,538,539,156,158,159,160,348,349,350,351,161,162,540,163,541,352,353,542,543,544,165,354,545,546,222,547,355,548,549,550,356,168,481,551,552,170,553,171,554,223,555,172,357,174,175,556,557,178,179,180,181,182,183,184,185,186,558,187,188,190,191,192,193,194,559,560,561,562,563,564,565,566,567,568,569,358,359,360,361,362,363,364],"tindex":"d2b0336a-3e4f-11e6-b604-a961cbc8e0c0","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value.isInterface()) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2b05a7b-3e4f-11e6-b604-c9dec85efd14","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2b05a7c-3e4f-11e6-b604-a9ab56f759b8","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n    out.value(dateFormatAsString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[570],"tindex":"d2b05a7d-3e4f-11e6-b604-d5fbd70e47d2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2b05a7e-3e4f-11e6-b604-45c8eeb98a27","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2b05a7f-3e4f-11e6-b604-93f98330e696","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2b08190-3e4f-11e6-b604-51948a80261d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[],"tindex":"d2b08191-3e4f-11e6-b604-d194c743cc93","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            if ((src != src) && (token != src)) {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2b08192-3e4f-11e6-b604-0fc5b4f73c55","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2b08193-3e4f-11e6-b604-5ba01ff51bab","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"d2b08194-3e4f-11e6-b604-05808b4c20ef","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"context","java.sql.Timestamp.class":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[92,93,94,96,97,98,196],"tindex":"d2b0a8a5-3e4f-11e6-b604-01979f10ec3a","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"d2b0a8a6-3e4f-11e6-b604-3f7a0c232e06","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from.getRawType().equals(from.getRawType())) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1258","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"d2b0a8a7-3e4f-11e6-b604-adc2a4f27964","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset == offset) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2b0cfb8-3e4f-11e6-b604-13468dff7fe1","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2b0cfb9-3e4f-11e6-b604-f1eb0bfdbe7f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[540,546,172],"tindex":"d2b0cfba-3e4f-11e6-b604-1544500bbd20","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[178,179,180,182,183,185],"tindex":"d2b0cfbb-3e4f-11e6-b604-f93d2757e61b","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"d2b0cfbc-3e4f-11e6-b604-b37cf537145a","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serialize) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (((int) & (field.getModifiers())) != 0) {\n                                return true;\n                            } \n                            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                                return true;\n                            } \n                            if (field.isSynthetic()) {\n                                return true;\n                            } \n                            if (boolean) {\n                                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                                    return true;\n                                } \n                            } \n                            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                                return true;\n                            } \n                            if (isAnonymousOrLocal(field.getType())) {\n                                return true;\n                            } \n                            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                            if (!(list.isEmpty())) {\n                                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                        return true;\n                                    } \n                                }\n                            } \n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[4,8,9,224,225,227,228,229,17,19,23,24,231,233,234,235,236,237,238,239,240,241,243,29,244,30,32,33,34,245,38,246,247,248,250,251,42,43,45,46,53,55,57,252,253,69,70,216,71,73,260,263,264,75,265,266,76,81,82,83,85,88,269,270,271,217,272,218,273,274,277,219,278,280,281,284,287,290,292,294,297,299,300,302,305,307,308,310,314,317,102,105,318,106,319,321,322,220,323,324,325,326,327,328,329,330,211,212,461,463,464,466,125,126,130,133,135,331,332,333,334,138,140,141,144,335,336,337,149,339,342,343,344,345,346,347,154,156,159,160,348,349,350,351,161,356,223,357,178,181,182,185,187,188,190,191,192,193,194,358,359,360],"tindex":"d2b0f6cd-3e4f-11e6-b604-990885348a97","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.GenericArrayType) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"d2b0f6ce-3e4f-11e6-b604-d7c182bdaf87","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            if (factory == factory) {\n                {\n                    java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[],"tindex":"d2b0f6cf-3e4f-11e6-b604-e31a0997574b","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2b0f6d0-3e4f-11e6-b604-259f7d0678b8","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"d2b0f6d1-3e4f-11e6-b604-afd8d39e00d4","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d2b11de2-3e4f-11e6-b604-470730d5c504","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:364","type":"CtBinaryOperatorImpl","sourcecode":"delta == 2"},"failures":[379,380,381,382,383,384,385,4,8,9,386,224,387,225,388,389,390,391,392,214,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,227,228,423,424,16,425,229,426,17,19,21,23,24,231,25,233,234,235,236,237,238,239,240,241,243,29,244,30,32,33,34,245,38,246,427,247,428,429,430,431,215,248,432,250,433,251,434,47,49,53,54,55,57,58,61,65,252,253,66,435,68,436,437,69,438,439,440,441,442,70,443,216,71,72,444,259,445,446,447,73,260,261,263,264,75,448,449,265,266,76,78,81,82,83,84,85,88,217,272,218,277,219,450,451,452,453,454,455,456,280,281,284,287,290,99,292,294,297,299,300,457,302,305,307,308,310,314,317,102,105,318,106,319,321,322,220,323,324,325,326,458,327,328,329,459,330,460,211,212,461,462,463,464,465,466,123,124,125,126,127,128,129,130,133,135,331,332,333,334,138,141,144,335,336,337,148,149,467,468,469,470,471,472,473,474,150,475,476,339,341,221,477,342,343,344,345,154,156,159,160,349,161,478,164,375,479,480,167,356,169,481,482,483,223,357,178,181,182,185,187,188,190,191,192,193,194,484,358,195,485,359,360,361,196,197,362,198,199],"tindex":"d2b11de3-3e4f-11e6-b604-e7976e0b9e73","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == 2) {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"d2b11de4-3e4f-11e6-b604-158feb36875f","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d2b11de5-3e4f-11e6-b604-d7a2421553aa","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d2b11de6-3e4f-11e6-b604-4363d470092c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"d2b144f7-3e4f-11e6-b604-edb10ff166fd","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"d2b144f8-3e4f-11e6-b604-e55645be56de","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d2b144f9-3e4f-11e6-b604-4b696c20334f","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"d2b144fa-3e4f-11e6-b604-db1f730af515","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == obj) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"obj","java.sql.Timestamp.class":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[],"tindex":"d2b144fb-3e4f-11e6-b604-d582ff98394f","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serialize) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    } else {\n                        {\n                            if (((int) & (field.getModifiers())) != 0) {\n                                return true;\n                            } \n                            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                                return true;\n                            } \n                            if (field.isSynthetic()) {\n                                return true;\n                            } \n                            if (boolean) {\n                                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                                    return true;\n                                } \n                            } \n                            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                                return true;\n                            } \n                            if (isAnonymousOrLocal(field.getType())) {\n                                return true;\n                            } \n                            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                            if (!(list.isEmpty())) {\n                                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                                        return true;\n                                    } \n                                }\n                            } \n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d2b16c0c-3e4f-11e6-b604-f17e58955304","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[],"tindex":"d2b16c0d-3e4f-11e6-b604-13f75f27e0bc","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter > ignoreVersionsAfter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[],"tindex":"d2b16c0e-3e4f-11e6-b604-39c33709e8ea","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.Class) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:401","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_OBJECT)"},"failures":[],"tindex":"d2b16c0f-3e4f-11e6-b604-c12794abc619","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_END_OBJECT":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"d2b16c10-3e4f-11e6-b604-dd0497310b2c","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"d2b16c11-3e4f-11e6-b604-89d3b66d4747","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"d2b19322-3e4f-11e6-b604-435f33fb2700","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"toFind","com.google.gson.LongSerializationPolicy.DEFAULT":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"d2b19323-3e4f-11e6-b604-41863f6228d8","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (property == null) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (value == null) {\n                        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"d2b19324-3e4f-11e6-b604-711e3385bbeb","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[382,383,385,4,8,9,224,387,225,390,391,214,397,398,400,405,406,408,417,421,422,227,228,229,17,19,23,24,231,25,233,234,235,236,237,238,239,240,241,243,29,244,30,32,33,34,245,38,246,247,248,250,251,53,54,55,57,58,61,65,252,253,435,68,436,437,69,438,439,440,441,442,70,443,216,71,72,444,259,446,447,73,260,263,264,75,265,266,76,81,82,83,84,85,88,217,272,218,277,219,280,281,284,287,290,292,294,297,299,300,302,305,307,308,310,314,317,102,105,318,106,319,321,322,220,323,324,325,326,327,328,329,459,330,211,212,461,463,464,465,466,124,125,126,130,133,135,331,332,333,334,138,141,144,335,336,337,149,339,342,343,344,345,154,156,159,160,349,161,375,167,356,169,482,223,357,178,181,182,185,187,188,190,191,192,193,194,358,195,485,359,360],"tindex":"d2b19325-3e4f-11e6-b604-955b8d88903f","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"d2b1ba36-3e4f-11e6-b604-13403c592f22","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[385,571,572,573,15,25,42,43,44,45,46,68,69,72,73,74,76,78,81,82,83,84,85,86,88,269,270,271,273,274,278,99,102,138,140,144,150,346,347,348,349,350,351,195,359,360,574,361,196,197,362],"tindex":"d2b1ba37-3e4f-11e6-b604-85a3ac6d1fdd","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[95,198],"tindex":"d2b1ba38-3e4f-11e6-b604-c3d18fbdd7fd","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[3,4,5,6,7,571,572,573,8,9,224,387,225,575,576,487,577,578,579,11,12,13,580,488,226,227,14,489,581,228,423,424,16,425,582,490,229,230,426,491,583,17,18,19,20,21,22,23,24,231,232,25,233,234,235,236,237,26,238,239,240,27,241,28,242,243,29,244,30,31,32,33,34,35,36,245,37,38,39,40,246,427,247,428,584,585,586,429,430,431,215,248,587,588,432,492,249,250,433,589,251,434,493,41,590,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,252,253,254,255,256,2,257,591,592,593,594,66,67,595,596,435,68,597,598,436,599,437,600,69,601,602,603,604,438,439,440,605,258,441,442,606,70,443,216,71,72,444,607,259,445,608,446,609,610,447,73,260,74,261,262,263,264,75,448,449,265,266,76,77,267,78,79,80,81,82,268,83,84,85,86,87,88,89,269,270,271,217,272,218,273,274,275,276,277,219,278,611,612,90,613,494,614,615,616,617,495,496,450,497,498,499,618,619,620,621,622,623,500,624,451,625,626,501,502,627,91,503,628,452,629,504,630,505,506,631,507,632,633,634,635,636,637,508,638,639,92,640,509,510,641,511,512,513,514,642,643,644,645,93,94,515,516,453,517,646,647,518,95,648,279,519,649,570,96,650,651,454,652,520,521,653,97,522,455,654,523,655,98,456,656,657,524,658,280,281,282,283,284,285,286,287,288,289,290,291,659,292,293,294,295,660,296,100,297,298,299,300,457,301,302,303,304,526,305,306,307,308,309,310,311,312,313,101,314,315,316,317,102,103,105,318,106,319,320,321,322,220,323,324,325,326,458,327,328,329,459,107,108,109,330,528,661,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,331,332,333,334,138,139,140,141,142,143,144,145,146,662,335,336,147,337,338,148,149,467,468,663,469,470,471,472,473,529,530,474,150,475,531,664,532,476,533,339,340,341,534,221,535,477,536,342,343,344,345,346,347,151,152,153,154,155,537,538,665,539,156,157,158,159,160,348,349,350,351,161,162,540,666,163,667,352,353,542,668,543,164,165,669,354,545,546,222,547,166,479,670,671,480,355,672,548,673,674,549,167,550,356,168,169,481,675,676,552,170,553,482,171,677,483,554,223,555,678,172,173,357,174,175,176,679,557,177,178,179,180,181,182,183,184,185,186,558,680,187,188,189,190,191,192,193,194,559,681,560,682,561,683,562,563,484,564,684,565,566,567,685,568,569,686,358,359,687,360,361,196,197,362,363,364,198,199,688,367,368,369,689],"tindex":"d2b1ba39-3e4f-11e6-b604-bf706fae708b","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (!serialize) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467240817044/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
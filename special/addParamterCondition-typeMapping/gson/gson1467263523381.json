{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":56,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":230,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":297,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":15,"com.google.gson.MixedStreamTest.testWriteLenient":1,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":185,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":70,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":332,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":342,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":208,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":264,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":215,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":386,"com.google.gson.functional.ObjectTest.testSingletonLists":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":181,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":265,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":231,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":197,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":21,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":414,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":144,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":347,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":24,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":360,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":402,"com.google.gson.functional.EnumTest.testEnumCaseMapping":207,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":36,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":229,"com.google.gson.functional.JsonTreeTest.testToJsonTree":228,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":352,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":143,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":387,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":164,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":7,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":268,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":411,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":339,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":321,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":35,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":102,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":310,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":358,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":79,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":34,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":396,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":256,"com.google.gson.JsonParserTest.testParseString":407,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":8,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":94,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":12,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":245,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":180,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":131,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":375,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":295,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":95,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":241,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":315,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":60,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":364,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":84,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":124,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":403,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":136,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":151,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":175,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":78,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":216,"com.google.gson.functional.EnumTest.testEnumSet":201,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":306,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":18,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":111,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":279,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":311,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":23,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":150,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":200,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":355,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":98,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":61,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":54,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":125,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":260,"com.google.gson.functional.MapTest.testMapSerialization":284,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":57,"com.google.gson.functional.MapTest.testSerializeMaps":278,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":330,"com.google.gson.functional.MapTest.testComplexKeysSerialization":293,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":374,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":252,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":323,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":275,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":198,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":350,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":382,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":16,"com.google.gson.functional.MapTest.testStringKeyDeserialization":404,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":113,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":106,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":296,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":219,"com.google.gson.functional.PrettyPrintingTest.testMap":348,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":335,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":161,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":9,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":20,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":172,"com.google.gson.functional.MapTest.testMapSerializationEmpty":294,"com.google.gson.functional.CollectionTest.testQueueSerialization":336,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":388,"com.google.gson.functional.MapTest.testMapOfMapSerialization":283,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":11,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":45,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":119,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":232,"com.google.gson.functional.FieldNamingTest.testIdentity":331,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":394,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":38,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":17,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":72,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":227,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":300,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":25,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":76,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":233,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":90,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":372,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":194,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":105,"com.google.gson.functional.MapTest.testMapSubclassSerialization":277,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":210,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":29,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":62,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":221,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":149,"com.google.gson.functional.EnumTest.testEnumSubclass":204,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":93,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":22,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":80,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":75,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":112,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":299,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":134,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":371,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":413,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":189,"com.google.gson.MixedStreamTest.testWriteNulls":30,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":247,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":243,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":322,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":384,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":116,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":302,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":49,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":234,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":286,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":212,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":155,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":191,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":325,"com.google.gson.JsonParserTest.testParseMixedArray":365,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":83,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":46,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":377,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":10,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":43,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":178,"com.google.gson.functional.MapTest.testMapDeserialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":174,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":353,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":276,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":367,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":141,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":280,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":270,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":267,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":392,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":226,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":309,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":317,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":127,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":222,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":165,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":132,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":298,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":285,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":349,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":193,"com.google.gson.functional.PrimitiveTest.testShortSerialization":103,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":272,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":362,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":167,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":327,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":203,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":412,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":334,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":209,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":410,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":398,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":107,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":346,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":383,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":380,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":378,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":109,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":4,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":123,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":318,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":157,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":381,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":114,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":206,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":128,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":363,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":340,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":217,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":179,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":169,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":273,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":139,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":91,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":108,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":52,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":202,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":269,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":405,"com.google.gson.functional.MapTest.testGeneralMapField":290,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":240,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":77,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":218,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":186,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":288,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":158,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":255,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":97,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":408,"com.google.gson.JsonObjectTest.testDeepCopy":389,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":87,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":26,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":343,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":177,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":401,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":122,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":397,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":14,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":117,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":259,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":65,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":176,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":39,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":121,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":145,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":314,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":133,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":359,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":48,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":148,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":101,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":74,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":345,"com.google.gson.functional.ObjectTest.testNullSerialization":307,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":130,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":399,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":81,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":289,"com.google.gson.functional.MapTest.testInterfaceTypeMap":287,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":220,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":138,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":3,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":205,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":159,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":357,"com.google.gson.MixedStreamTest.testWriteClosed":33,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":338,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":303,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":152,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":137,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":51,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":47,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":192,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":142,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":304,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":337,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":66,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":182,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":391,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":41,"com.google.gson.JsonNullTest.testEqualsAndHashcode":0,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":86,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":225,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":238,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":324,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":50,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":88,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":190,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":171,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":257,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":333,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":28,"com.google.gson.functional.MapTest.testRawMapSerialization":292,"com.google.gson.JsonParserTest.testParseReader":406,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":5,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":126,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":312,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":274,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":368,"com.google.gson.functional.PrimitiveTest.testByteSerialization":100,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":196,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":242,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":370,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":68,"com.google.gson.ObjectTypeAdapterTest.testSerialize":415,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":253,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":366,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":71,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":248,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":328,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":153,"com.google.gson.functional.MapTest.testMapWithQuotes":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":110,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":120,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":160,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":214,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":19,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":146,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":354,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":168,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":163,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":64,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":170,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":199,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":188,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":239,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":129,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":40,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":211,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":395,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":2,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":118,"com.google.gson.functional.ObjectTest.testNestedSerialization":313,"com.google.gson.JsonObjectTest.testAddingStringProperties":390,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":53,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":85,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":254,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":258,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":291,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":326,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":263,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":27,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":32,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":308,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":140,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":37,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":6,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":236,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":246,"com.google.gson.functional.CollectionTest.testSetSerialization":344,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":115,"com.google.gson.functional.StringTest.testStringValueSerialization":237,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":351,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":67,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":42,"com.google.gson.MixedStreamTest.testWriteInvalidState":31,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":305,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":250,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":166,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":329,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":409,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":320,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":385,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":356,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":376,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":183,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":69,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":244},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"2e8cee3a-3e81-11e6-9918-4f5745b4d350","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[0],"tindex":"2e8d636b-3e81-11e6-9918-bbbe5dd8ad5c","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"2e8d8a7c-3e81-11e6-9918-1f2ffe8c2e90","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:398","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"2e8d8a7d-3e81-11e6-9918-f926f4d791ad","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == offset) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"length","com.google.gson.stream.JsonReader.PEEKED_NONE":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"2e8db18e-3e81-11e6-9918-0f31c79a8d1a","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:309","type":"CtBinaryOperatorImpl","sourcecode":"(obj == null) || ((getClass()) != (obj.getClass()))"},"failures":[],"tindex":"2e8dd89f-3e81-11e6-9918-338fe583751b","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"toFind","this":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"tindex":"2e8dffb0-3e81-11e6-9918-27f2955b52dc","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[19,20,21,22,23,24,25,26,27,28,29,30,31,1,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,10,87,88,11,89,12,90,91,92,93,13,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,14,109,110,111,112,113,114,115,116,117,118,119,120,121,122,15,16,123,17,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,18,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381],"tindex":"2e8dffb1-3e81-11e6-9918-e5606ee4ce24","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[382,383],"tindex":"2e8e4dd2-3e81-11e6-9918-ad2318345d93","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"2e8e4dd3-3e81-11e6-9918-55d979f69f7a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[384,385,386,387,382,388,389,390,391,50,51,56,392,70,71,73,74,393,394,133,134,135,139,140,143,144,395,396,210,211,224,262,397,398,399,400,401,402,403,404,325,405,326,406,407,408,409,410,411,412,413],"tindex":"2e8e74e4-3e81-11e6-9918-5901f1565e59","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"2e8e74e5-3e81-11e6-9918-196d4fdbb9a3","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"2e8e74e6-3e81-11e6-9918-31fe4af979f8","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[36,98],"tindex":"2e8e9bf7-3e81-11e6-9918-2f4a4d4f01d5","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"2e8e9bf8-3e81-11e6-9918-97e6ae797d64","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if ((a != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"2e8e9bf9-3e81-11e6-9918-6987848b85ed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[23,28,29,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,3,4,5,7,8,414,63,64,65,66,67,70,71,73,74,75,77,78,79,112,114,115,15,16,17,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,146,148,149,150,151,18,152,153,154,155,156,177,187,192,197,200,205,209,210,211,212,214,215,216,221,224,225,226,227,228,249,253,256,257,259,260,261,262,263,265,266,269,270,271,273,275,281,287,289,290,297,298,299,300,301,302,303,304,306,308,311,312,313,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,334,340,342,344,349,350,354,364,371,372,415],"tindex":"2e8ec30a-3e81-11e6-9918-b91b88bb7960","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[91],"tindex":"2e8ec30b-3e81-11e6-9918-ef0e481d5706","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"2e8eea1c-3e81-11e6-9918-c55c315bde6a","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"2e8eea1d-3e81-11e6-9918-b3e22f7ba914","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1527","type":"CtBinaryOperatorImpl","sourcecode":"(c >= '0') && (c <= '9')"},"failures":[],"tindex":"2e8eea1e-3e81-11e6-9918-5d4963075ead","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if ((quote >= '0') && (c <= '9')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"2e8f112f-3e81-11e6-9918-77e272923951","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"2e8f1130-3e81-11e6-9918-cd2e2652a815","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance == null) {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[],"tindex":"2e8f1131-3e81-11e6-9918-293b4cac0b62","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467263077967/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"deserialization"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":24,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
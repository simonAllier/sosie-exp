{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":123,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":290,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":277,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":341,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":38,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":185,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":222,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":289,"com.google.gson.functional.PrimitiveTest.testShortSerialization":90,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":264,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":354,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":111,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":159,"com.google.gson.MixedStreamTest.testWriteLenient":13,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":365,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":177,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":195,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":53,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":324,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":326,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":201,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":334,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":200,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":256,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":207,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":94,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":338,"com.google.gson.functional.ObjectTest.testSingletonLists":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":173,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":257,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":223,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":372,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":189,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":370,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":97,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":2,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":113,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":310,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":149,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":373,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":102,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":135,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":339,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":198,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":119,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":355,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":332,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":209,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":258,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":171,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":263,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":352,"com.google.gson.functional.EnumTest.testEnumCaseMapping":199,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":18,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":161,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":253,"com.google.gson.functional.JsonTreeTest.testToJsonTree":220,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":265,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":344,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":130,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":134,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":77,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":156,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":95,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":34,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":260,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":194,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":261,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":331,"com.google.gson.functional.MapTest.testGeneralMapField":282,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":232,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":313,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":60,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":210,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":178,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":280,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":17,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":65,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":150,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":247,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":84,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":302,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":350,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":62,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":71,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":7,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":16,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":335,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":187,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":248,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":353,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":169,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":75,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":110,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":96,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":105,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":237,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":172,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":251,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":48,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":168,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":122,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":21,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":254,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":367,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":109,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":136,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":306,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":124,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":287,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":82,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":351,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":30,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":233,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":307,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":42,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":356,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":67,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":115,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":139,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":88,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":127,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":142,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":57,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":337,"com.google.gson.functional.ObjectTest.testNullSerialization":299,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":176,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":64,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":167,"com.google.gson.functional.MapTest.testInterfaceTypeMap":279,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":61,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":212,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":129,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":208,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":44,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":197,"com.google.gson.functional.EnumTest.testEnumSet":193,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":298,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":215,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":143,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":151,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":271,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":349,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":303,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":141,"com.google.gson.MixedStreamTest.testWriteClosed":15,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":192,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":330,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":347,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":85,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":295,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":144,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":128,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":33,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":29,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":43,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":311,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":36,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":116,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":184,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":133,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":296,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":329,"com.google.gson.functional.MapTest.testMapSerialization":276,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":39,"com.google.gson.functional.MapTest.testSerializeMaps":270,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":322,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":49,"com.google.gson.functional.MapTest.testComplexKeysSerialization":285,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":174,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":366,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":244,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":23,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":315,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":69,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":267,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":217,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":230,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":316,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":32,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":72,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":190,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":182,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":342,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":112,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":163,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":101,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":249,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":93,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":325,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":9,"com.google.gson.functional.MapTest.testRawMapSerialization":284,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":288,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":211,"com.google.gson.functional.PrettyPrintingTest.testMap":340,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":117,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":304,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":327,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":153,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":1,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":164,"com.google.gson.functional.MapTest.testMapSerializationEmpty":286,"com.google.gson.functional.CollectionTest.testQueueSerialization":328,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":266,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":360,"com.google.gson.functional.PrimitiveTest.testByteSerialization":87,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":188,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":234,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":362,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":51,"com.google.gson.functional.MapTest.testMapOfMapSerialization":275,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":73,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":245,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":358,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":54,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":27,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":78,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":107,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":224,"com.google.gson.functional.FieldNamingTest.testIdentity":323,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":240,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":320,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":145,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":20,"com.google.gson.functional.MapTest.testMapWithQuotes":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":154,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":55,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":114,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":219,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":292,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":98,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":108,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":6,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":216,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":152,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":225,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":76,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":206,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":364,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":0,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":26,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":186,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":137,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":92,"com.google.gson.functional.MapTest.testMapSubclassSerialization":269,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":346,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":160,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":202,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":243,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":10,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":179,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":140,"com.google.gson.functional.EnumTest.testEnumSubclass":196,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":155,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":3,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":63,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":58,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":47,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":162,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":191,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":100,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":180,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":120,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":22,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":203,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":291,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":125,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":106,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":363,"com.google.gson.functional.ObjectTest.testNestedSerialization":305,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":35,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":68,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":246,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":74,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":250,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":181,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":318,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":255,"com.google.gson.MixedStreamTest.testWriteNulls":11,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":239,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":8,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":14,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":235,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":300,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":314,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":104,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":294,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":131,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":31,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":19,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":226,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":278,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":204,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":228,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":147,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":183,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":238,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":317,"com.google.gson.functional.CollectionTest.testSetSerialization":336,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":103,"com.google.gson.functional.StringTest.testStringValueSerialization":229,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":343,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":50,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":24,"com.google.gson.JsonParserTest.testParseMixedArray":357,"com.google.gson.MixedStreamTest.testWriteInvalidState":12,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":66,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":297,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":28,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":369,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":70,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":25,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":242,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":170,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":166,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":321,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":312,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":345,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":268,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":359,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":132,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":272,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":262,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":259,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":218,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":348,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":368,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":175,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":301,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":309,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":52,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":118,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":214,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":157,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":236},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"73ad2848-3e8c-11e6-a9e8-df8dc5d7b9f9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isString()) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"73ad9d79-3e8c-11e6-a9e8-9368593b15be","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373],"tindex":"73adc48a-3e8c-11e6-a9e8-511b7ff5e51f","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"73adc48b-3e8c-11e6-a9e8-c59a49115e9c","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"73adc48c-3e8c-11e6-a9e8-358201a14220","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"73adeb9d-3e8c-11e6-a9e8-8fe1983e88be","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"73adeb9e-3e8c-11e6-a9e8-6f2c7a123498","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o","b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"73adeb9f-3e8c-11e6-a9e8-cdb32c191f36","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"array","to":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:382","type":"CtBinaryOperatorImpl","sourcecode":"delta == 0"},"failures":[],"tindex":"73ae11b0-3e8c-11e6-a9e8-e7bb8bbde1d0","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:543","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"73ae11b1-3e8c-11e6-a9e8-7d07d791bd21","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"73ae11b2-3e8c-11e6-a9e8-e90faf31eea3","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"73ae38c3-3e8c-11e6-a9e8-9b7f0be89682","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if ((obj instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467268111025/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":12,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":561,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":327,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":20,"com.google.gson.functional.StringTest.testStringValueDeserialization":620,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":117,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":678,"com.google.gson.stream.JsonWriterTest.testRepeatedName":17,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":477,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":47,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":547,"com.google.gson.MixedStreamTest.testWriteLenient":341,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":422,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":660,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":302,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":639,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":410,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":70,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":80,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":527,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":509,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":46,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":266,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":201,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":484,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":652,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":393,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":451,"com.google.gson.functional.ObjectTest.testSingletonLists":168,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":298,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":328,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":472,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":10,"com.google.gson.stream.JsonWriterTest.testStrings":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":421,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":35,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":674,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":613,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":536,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":32,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":511,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":225,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":615,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":628,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":186,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":226,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":505,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":443,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":347,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":466,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":214,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":442,"com.google.gson.functional.EnumTest.testEnumCaseMapping":45,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":326,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":345,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":465,"com.google.gson.functional.JsonTreeTest.testToJsonTree":592,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":679,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":463,"com.google.gson.stream.JsonWriterTest.testNulls":15,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":636,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":653,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":281,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":222,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":573,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":605,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":671,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":125,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":644,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":77,"com.google.gson.functional.ObjectTest.testNullDeserialization":676,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":189,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":626,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":534,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":29,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":159,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":478,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":176,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":645,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":695,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":212,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":358,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":539,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":28,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":659,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":121,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":517,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":516,"com.google.gson.JsonParserTest.testParseString":649,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":612,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":151,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":223,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":637,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":363,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":677,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":180,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":297,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":492,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":423,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":438,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":502,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":604,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":271,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":0,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":415,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":115,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":152,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":429,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":503,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":367,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":370,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":11,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":319,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":531,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":349,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":360,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":445,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":683,"com.google.gson.metrics.PerformanceTest.testDummy":691,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":584,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":133,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":55,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":555,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":416,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":381,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":301,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":292,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":552,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":357,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":696,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":550,"com.google.gson.functional.CollectionTest.testSetDeserialization":407,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":202,"com.google.gson.functional.EnumTest.testEnumSet":39,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":172,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":586,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":495,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":86,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":686,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":601,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":177,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":54,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":506,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":554,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":512,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":38,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":209,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":155,"com.google.gson.functional.MapTest.testHashMapDeserialization":432,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":475,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":609,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":320,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":562,"com.google.gson.MixedStreamTest.testReadNulls":694,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":62,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":240,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":269,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":385,"com.google.gson.functional.MapTest.testSortedMap":444,"com.google.gson.functional.MapTest.testMapSerialization":107,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":242,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":500,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":557,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":575,"com.google.gson.functional.MapTest.testSerializeMaps":101,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":324,"com.google.gson.functional.MapTest.testComplexKeysSerialization":114,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":585,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":447,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":661,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":261,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":191,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":388,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":132,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":400,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":36,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":387,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":229,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":654,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":672,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":48,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":541,"com.google.gson.functional.MapTest.testStringKeyDeserialization":446,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":688,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":577,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":88,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":162,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":116,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":481,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":205,"com.google.gson.functional.PrettyPrintingTest.testMap":227,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":476,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":73,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":278,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":383,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":224,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":578,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":332,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":621,"com.google.gson.functional.CollectionTest.testQueueSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":289,"com.google.gson.functional.MapTest.testMapSerializationEmpty":353,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":655,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":22,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":496,"com.google.gson.functional.MapTest.testMapOfMapSerialization":106,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":362,"com.google.gson.JavaSerializationTest.testMapIsSerializable":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":606,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":406,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":148,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":197,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":94,"com.google.gson.functional.FieldNamingTest.testIdentity":325,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":329,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":417,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":244,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":542,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":49,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":167,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":412,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":591,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":467,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":5,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":330,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":355,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":146,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":611,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":602,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":310,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":430,"com.google.gson.functional.MapTest.testMapSubclassSerialization":100,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":364,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":237,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":396,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":587,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":207,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":312,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":339,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":490,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":424,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":597,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":382,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":53,"com.google.gson.functional.EnumTest.testEnumSubclass":42,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":149,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":33,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":535,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":138,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":354,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":685,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":508,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":87,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":468,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":185,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":376,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":493,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":549,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":457,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":7,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":572,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":647,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":497,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":533,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":145,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":391,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":305,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":526,"com.google.gson.MixedStreamTest.testWriteNulls":340,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":431,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":256,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":427,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":252,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":190,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":392,"com.google.gson.CommentsTest.testParseComments":634,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":650,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":91,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":169,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":453,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":265,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":507,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":576,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":556,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":108,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":331,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":692,"com.google.gson.MixedStreamTest.testReadInvalidState":629,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":198,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":60,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":307,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":234,"com.google.gson.JsonParserTest.testParseMixedArray":665,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":140,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":670,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":579,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":687,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":662,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":361,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":195,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":295,"com.google.gson.functional.MapTest.testMapDeserialization":437,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":571,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":291,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":232,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":99,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":344,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":450,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":103,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":136,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":127,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":124,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":401,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":658,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":272,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":596,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":175,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":181,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":64,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":208,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":282,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":394,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":69,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":184,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":228,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":351,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":309,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":464,"com.google.gson.functional.PrimitiveTest.testShortSerialization":160,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":420,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":129,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":510,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":216,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":491,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":284,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":474,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":321,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":41,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":646,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":72,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":236,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":643,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":434,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":487,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":84,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":163,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":425,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":664,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":610,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":2,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":633,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":166,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":520,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":219,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":348,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":182,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":418,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":462,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":274,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":514,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":593,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":89,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":494,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":545,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":530,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":44,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":65,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":268,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":599,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":203,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":667,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":419,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":123,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":296,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":668,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":480,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":286,"com.google.gson.stream.JsonWriterTest.testNullStringValue":13,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":608,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":402,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":469,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":515,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":147,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":164,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":97,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":40,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":126,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":565,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":558,"com.google.gson.functional.MapTest.testGeneralMapField":111,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":529,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":250,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":523,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":204,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":258,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":303,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":352,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":120,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":275,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":154,"com.google.gson.MixedStreamTest.testReadMixedStreamed":632,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":641,"com.google.gson.JsonObjectTest.testDeepCopy":656,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":143,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":600,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":6,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":81,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":589,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":583,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":498,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":215,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":378,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":294,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":440,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":317,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":92,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":165,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":247,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":315,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":16,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":488,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":663,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":293,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":684,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":428,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":245,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":594,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":96,"com.google.gson.functional.ObjectTest.testNestedDeserialization":546,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":187,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":366,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":563,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":456,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":522,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":264,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":389,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":441,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":622,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":52,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":158,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":350,"com.google.gson.JavaSerializationTest.testListIsSerializable":380,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":414,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":426,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":83,"com.google.gson.functional.ObjectTest.testNullSerialization":173,"com.google.gson.stream.JsonWriterTest.testDoubles":23,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":67,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":619,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":435,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":110,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":359,"com.google.gson.functional.MapTest.testInterfaceTypeMap":109,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":574,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":206,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":470,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":43,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":218,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":640,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":368,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":399,"com.google.gson.MixedStreamTest.testReadClosed":693,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":276,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":482,"com.google.gson.MixedStreamTest.testWriteClosed":631,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":76,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":564,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":170,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":614,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":57,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":134,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":581,"com.google.gson.stream.JsonWriterTest.testLongs":14,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":183,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":308,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":137,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":171,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":75,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":617,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":501,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":316,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":398,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":299,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":567,"com.google.gson.stream.JsonWriterTest.testNumbers":25,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":193,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":524,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":142,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":590,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":598,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":192,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":248,"com.google.gson.functional.CollectionTest.testQueueDeserialization":409,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":580,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":681,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":144,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":499,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":377,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":625,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":306,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":618,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":104,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":540,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":288,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":122,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":544,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":71,"com.google.gson.functional.MapTest.testRawMapSerialization":113,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":338,"com.google.gson.JsonParserTest.testParseReader":648,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":607,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":220,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":63,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":178,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":560,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":131,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":373,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":34,"com.google.gson.functional.PrimitiveTest.testByteSerialization":157,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":251,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":375,"com.google.gson.ObjectTypeAdapterTest.testSerialize":9,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":336,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":118,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":479,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":689,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":343,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":411,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":257,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":322,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":58,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":372,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":623,"com.google.gson.functional.MapTest.testMapWithQuotes":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":279,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":485,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":624,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":85,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":588,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":95,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":277,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":200,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":666,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":452,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":50,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":543,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":669,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":233,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":285,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":675,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":260,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":532,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":287,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":314,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":413,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":513,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":37,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":673,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":570,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":51,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":304,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":66,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":369,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":680,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":682,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":238,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":635,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":384,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":395,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":471,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":638,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":93,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":217,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":537,"com.google.gson.functional.ObjectTest.testNestedSerialization":179,"com.google.gson.JsonObjectTest.testAddingStringProperties":657,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":98,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":119,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":141,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":627,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":246,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":112,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":235,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":273,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":30,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":342,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":27,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":174,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":566,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":519,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":460,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":603,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":346,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":483,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":690,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":595,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":616,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":221,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":333,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":255,"com.google.gson.functional.CollectionTest.testSetSerialization":82,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":449,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":90,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":230,"com.google.gson.functional.StringTest.testStringValueSerialization":334,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":335,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":194,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":390,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":403,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":569,"com.google.gson.MixedStreamTest.testWriteInvalidState":630,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":365,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":486,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":259,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":489,"com.google.gson.stream.JsonWriterTest.testBooleans":12,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":318,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":283,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":323,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":642,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":188,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":651,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":568,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":1,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":210,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":300,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":337,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":436,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":19,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":253,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":551},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"11e3070c-3e6c-11e6-9fd0-7581b3ca1ec2","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"11e3552d-3e6c-11e6-9fd0-b193d91100f9","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl","sourcecode":"!charsLoaded"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346],"tindex":"11e37c3e-3e6c-11e6-9fd0-0d716b44c0e9","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"11e3a34f-3e6c-11e6-9fd0-43800aeabbba","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"11e3ca60-3e6c-11e6-9fd0-2989f29e649c","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[],"tindex":"11e3ca61-3e6c-11e6-9fd0-dbb442a27e37","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"11e3ca62-3e6c-11e6-9fd0-cf10633a0fca","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[4,347,5,6,7,8,11,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,348,49,349,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,350,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,351,108,109,352,110,111,112,113,114,353,115,116,117,354,355,356,357,358,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,359,139,140,360,141,142,361,143,144,362,145,363,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,364,162,163,164,165,166,167,168,169,170,171,365,172,173,174,175,176,177,178,179,366,367,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,368,209,210,211,212,213,214,215,216,218,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,369,246,247,248,249,250,370,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,371,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,345,346],"tindex":"11e3f173-3e6c-11e6-9fd0-91f0b09e0cdd","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"11e3f174-3e6c-11e6-9fd0-a5f0ebe10b9b","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if ((src.peek()) == src) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"src","com.google.gson.stream.JsonToken.NULL":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"11e3f175-3e6c-11e6-9fd0-4fe894bdda9a","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"11e41886-3e6c-11e6-9fd0-15512556ecb5","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[372,4,347,5,6,373,374,375,7,8,9,10,11,376,377,30,378,379,380,31,32,33,381,34,382,35,383,384,385,38,39,40,41,42,386,387,43,388,44,45,46,47,389,48,390,348,391,49,349,50,392,51,52,53,54,55,56,393,57,58,59,394,60,395,396,61,62,63,64,350,65,66,67,397,398,68,399,69,400,401,70,71,72,73,402,403,404,74,75,76,77,78,405,406,79,407,80,81,408,82,83,409,410,411,412,413,414,85,415,86,416,417,418,87,88,89,419,90,91,92,420,93,421,94,95,96,97,98,422,423,424,425,426,427,428,429,430,431,432,433,100,101,434,435,102,436,103,437,104,438,439,440,441,105,106,107,442,443,351,108,444,109,352,110,111,112,113,445,114,353,446,115,447,448,116,117,354,355,356,449,357,358,118,119,120,121,122,123,450,451,124,452,125,126,127,453,128,129,130,131,454,132,455,456,457,458,133,134,135,459,460,461,462,136,137,463,464,465,466,138,467,359,468,469,470,471,472,139,473,474,140,475,476,477,478,479,480,481,360,141,482,483,484,485,486,142,487,361,143,488,489,144,490,491,362,492,145,363,493,494,146,147,495,496,497,148,498,499,500,501,502,503,504,505,149,506,150,507,151,152,508,509,153,510,511,154,512,155,513,514,515,156,157,158,159,160,161,364,516,517,518,162,519,163,520,521,522,164,165,523,166,524,525,167,168,526,527,169,528,529,170,530,531,171,532,533,172,534,174,535,175,536,176,177,537,178,179,366,538,367,539,540,541,180,542,181,182,543,183,544,545,546,547,184,548,549,185,186,187,188,189,190,191,550,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,368,209,210,211,212,213,214,215,216,551,552,553,554,555,226,227,228,229,230,231,232,233,556,557,234,558,235,559,560,236,237,238,239,240,241,561,242,562,563,243,564,565,566,244,245,567,369,568,246,247,248,249,569,250,370,251,252,253,570,571,254,255,256,572,573,574,257,575,258,576,259,577,260,578,261,579,262,263,264,265,580,581,266,582,583,267,584,585,586,268,587,269,588,589,270,271,590,272,591,592,273,593,594,274,275,276,595,596,597,278,598,280,281,282,599,600,601,284,602,285,286,287,288,289,603,290,604,291,292,605,293,606,294,295,296,297,298,607,608,299,609,301,610,302,303,611,371,304,305,306,307,308,612,613,309,311,614,313,615,616,314,315,617,618,316,619,317,318,319,321,322,323,324,325,620,326,327,328,329,330,621,622,331,623,332,624,625,626,333,627,628,334,335,338,629,339,630,341,342,631,632,633,345,346,634,635,636,637,638,639,640],"tindex":"11e41887-3e6c-11e6-9fd0-ad4ab2f51056","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(clazz.isInterface())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"11e43f98-3e6c-11e6-9fd0-ed7854c96f8a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value != null) {\n        {\n            if (value instanceof java.lang.reflect.TypeVariable) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[641,642],"tindex":"11e43f99-3e6c-11e6-9fd0-b7cee05570c0","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[313,615,616,314,315,617,618,316,635,636],"tindex":"11e43f9a-3e6c-11e6-9fd0-abf3595b2bd1","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[643,644,645,646,647,373,641,642,648,649,650,651,652,653,654,655,656,657,395,410,411,413,414,416,417,425,433,434,435,437,440,442,445,446,456,457,458,459,460,463,186,658,234,558,235,237,238,239,561,567,580,581,271,591,659],"tindex":"11e43f9b-3e6c-11e6-9fd0-0d491d0d6064","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return key != null ? find(((K)(key)), false) : null;\n                    } catch (java.lang.ClassCastException e) {\n                        return null;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[62,66,397,401,321,324],"tindex":"11e466ac-3e6c-11e6-9fd0-b5ac9407c63e","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"11e466ad-3e6c-11e6-9fd0-2d15600be52a","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if ((typeAdapter.peek()) == typeAdapter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"typeAdapter","com.google.gson.stream.JsonToken.NULL":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"11e466ae-3e6c-11e6-9fd0-f9879e52176e","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[4,7,8,9,11,382,35,38,43,388,47,48,390,391,49,349,50,392,52,53,54,55,56,393,57,58,59,394,60,396,61,62,63,64,350,65,66,67,397,398,68,399,69,400,401,70,72,78,407,80,82,410,411,413,414,415,418,87,89,90,97,98,422,423,424,425,426,104,443,109,110,111,114,117,354,356,449,357,358,118,121,122,123,450,451,126,127,453,128,130,132,455,456,457,458,133,134,135,459,460,461,462,136,137,463,514,167,168,526,527,169,528,529,170,530,531,171,532,172,534,174,535,536,177,537,178,179,538,367,539,540,180,542,181,182,543,183,544,545,546,547,184,548,549,185,186,188,189,190,191,550,192,193,194,195,196,197,198,200,201,202,207,552,553,554,228,229,233,557,234,558,235,560,236,237,238,239,240,561,242,563,243,564,565,244,245,369,568,247,258,576,259,262,263,264,265,580,581,582,583,267,584,269,589,270,271,590,272,591,592,273,593,595,596,599,284,603,294,371,308,313,615,616,314,315,617,618,316,318,319,321,322,323,324,325,335,338,339,630,631,632,633],"tindex":"11e466af-3e6c-11e6-9fd0-85e17950a252","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[151,162,164,341],"tindex":"11e48dc0-3e6c-11e6-9fd0-258ef43e7ad9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"11e48dc1-3e6c-11e6-9fd0-33caef73c09e","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if ((typeOfT instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[660,661,0,1,662,2,663,664,3,4,347,5,6,373,374,375,7,8,11,665,666,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,348,49,349,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,410,411,412,413,414,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,351,108,109,352,110,111,112,113,114,353,115,116,117,354,355,356,357,358,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,456,457,458,133,134,135,459,460,136,137,463,138,359,139,140,360,141,142,361,143,144,362,145,363,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,364,162,163,164,165,166,167,168,169,170,171,365,172,173,174,175,176,177,178,179,366,367,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,368,209,210,211,212,213,214,215,216,218,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,561,242,243,244,245,369,246,247,248,249,250,370,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,580,581,266,267,268,269,270,271,590,272,591,592,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,371,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,630,341,342,631,343,344,345,346],"tindex":"11e48dc2-3e6c-11e6-9fd0-53073af753bc","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"11e4b4d3-3e6c-11e6-9fd0-550b39dca372","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:831","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"11e4b4d4-3e6c-11e6-9fd0-074c2e7578ca","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (i == i) {\n                {\n                    if (i == i) {\n                        {\n                            java.lang.Appendable.append(((char)(i)));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_LONG":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[667,376,377,668,320],"tindex":"11e4b4d5-3e6c-11e6-9fd0-299379cfda95","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"11e4b4d6-3e6c-11e6-9fd0-c52e03c98c37","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value != null) {\n        {\n            if (value instanceof java.lang.reflect.TypeVariable) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:793","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME)"},"failures":[],"tindex":"11e4b4d7-3e6c-11e6-9fd0-3d13d135245b","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (i == i) {\n                {\n                    if (i == i) {\n                        {\n                            java.lang.Appendable.append(((char)(i)));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"11e4dbe8-3e6c-11e6-9fd0-9f9b01931ed3","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"11e4dbe9-3e6c-11e6-9fd0-f904ae9dfd87","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"11e4dbea-3e6c-11e6-9fd0-b9d5f12fcefc","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src != src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"src","type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"11e4dbeb-3e6c-11e6-9fd0-4342f6a266ef","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:366","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 0"},"failures":[669,670,671,672],"tindex":"11e502fc-3e6c-11e6-9fd0-173273bb9810","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == 0) {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"11e502fd-3e6c-11e6-9fd0-334c368d5657","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"11e502fe-3e6c-11e6-9fd0-1f879ed17511","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"writer","value":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[4,5,6,7,8,9,11,30,31,32,33,34,382,35,383,384,38,41,42,387,43,388,45,47,389,48,390,391,49,349,50,392,51,52,53,54,55,56,393,57,58,59,394,60,395,396,61,62,63,64,350,65,66,67,397,398,68,399,69,400,401,70,72,78,673,407,80,82,674,410,411,413,414,415,416,418,87,89,419,90,421,95,97,98,422,423,424,425,426,431,104,443,109,110,111,114,117,354,356,449,357,358,118,120,121,122,123,450,451,452,126,127,453,128,130,454,132,455,456,457,458,133,134,135,459,460,461,462,136,137,463,466,467,471,472,473,474,140,481,484,485,487,489,490,491,492,495,499,500,502,503,504,505,508,509,510,512,514,515,516,517,519,521,524,167,168,526,527,169,528,529,170,530,531,171,532,172,534,174,675,535,536,177,537,178,179,538,367,539,540,541,676,180,542,181,182,543,183,544,545,546,547,184,548,549,185,186,187,188,189,190,191,550,192,193,194,195,196,197,198,200,201,202,203,204,206,207,208,209,210,211,212,213,214,215,216,552,553,554,555,228,229,233,556,557,234,558,235,559,560,236,237,238,239,240,561,242,562,563,243,564,565,244,245,567,369,568,246,247,570,571,572,574,575,258,576,259,577,578,579,262,263,264,265,580,581,582,583,267,584,585,586,587,269,589,270,271,590,272,591,592,273,593,594,275,659,595,596,597,598,677,281,599,600,601,284,602,603,604,605,606,294,295,297,678,608,299,609,610,611,371,304,306,308,612,613,679,614,313,615,616,314,315,617,618,316,680,619,318,319,321,322,323,324,325,620,327,329,621,622,623,624,625,626,627,628,335,338,339,630,631,632,633],"tindex":"11e52a0f-3e6c-11e6-9fd0-69177cb75b5b","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key == value) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"value","toResolve":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"11e52a10-3e6c-11e6-9fd0-9d78a23b42a5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[],"tindex":"11e52a11-3e6c-11e6-9fd0-ed55f732c13f","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return key != null ? find(((K)(key)), false) : null;\n                    } catch (java.lang.ClassCastException e) {\n                        return null;\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[654,425],"tindex":"11e52a12-3e6c-11e6-9fd0-99d94105dc60","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[670,681,682,683,684],"tindex":"11e55123-3e6c-11e6-9fd0-250ed0fc2d6f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:683","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE)"},"failures":[],"tindex":"11e57834-3e6c-11e6-9fd0-dfaf26488798","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (i == i) {\n                {\n                    if (i == i) {\n                        {\n                            java.lang.Appendable.append(((char)(i)));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[372,4,347,5,6,373,374,375,7,8,685,686,687,688,9,10,11,30,378,379,380,31,32,33,381,34,382,35,383,384,385,38,39,40,41,42,386,387,43,388,44,45,46,47,389,48,390,348,391,49,349,50,392,51,52,53,54,55,56,393,57,58,59,394,60,395,396,61,62,63,64,350,65,66,67,397,398,68,399,69,400,401,70,71,72,73,402,403,404,74,75,76,77,78,405,406,79,673,407,80,81,408,82,83,674,84,409,410,411,412,413,414,85,415,86,416,417,418,87,88,89,419,90,91,92,420,93,421,94,95,96,97,98,422,423,424,425,426,427,428,429,430,99,431,432,433,100,101,434,435,102,436,103,437,104,438,439,440,441,105,106,107,442,443,351,108,444,109,352,110,111,112,113,445,114,353,446,115,447,448,116,117,354,355,356,449,357,358,118,119,120,121,122,123,450,451,124,452,125,126,127,453,128,129,130,131,454,132,455,456,457,458,133,134,135,459,460,461,462,136,137,463,464,465,466,138,467,359,468,469,470,471,472,139,473,474,140,475,476,477,478,479,480,481,360,141,482,483,484,485,486,142,487,361,143,488,489,144,490,491,362,492,145,363,493,494,146,147,495,496,497,148,498,499,500,501,502,503,504,505,149,506,150,507,151,152,508,509,153,510,511,154,512,155,513,514,515,156,157,158,159,160,161,364,516,517,518,162,519,163,520,521,522,164,165,523,166,524,525,167,168,526,527,169,528,529,170,530,531,171,532,533,172,534,174,535,175,536,176,177,537,178,179,366,538,367,539,540,541,180,542,181,182,543,183,544,545,546,547,184,548,549,185,186,187,188,189,190,191,550,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,368,209,210,211,212,213,214,215,216,551,552,553,554,555,226,227,228,229,230,231,232,233,556,557,234,558,235,559,560,236,237,238,239,240,241,561,242,562,563,243,564,565,566,244,245,567,369,568,246,247,248,249,569,250,370,251,252,253,570,571,254,255,256,572,573,574,257,575,258,576,259,577,260,578,261,579,262,263,264,265,580,581,266,582,583,267,584,585,586,268,587,269,588,589,270,271,590,272,591,592,273,593,594,274,275,276,659,595,596,277,597,278,279,598,280,677,281,282,599,600,283,601,284,602,285,286,287,288,289,603,290,604,291,292,605,293,606,294,295,296,297,678,298,607,608,299,609,300,301,610,302,303,611,371,304,305,306,307,308,612,613,309,310,679,311,614,312,313,615,616,314,315,617,618,316,680,619,317,318,319,320,321,322,323,324,325,620,326,327,328,329,330,621,622,331,623,332,624,625,626,333,627,628,334,335,338,629,339,630,341,342,631,632,633,345,346,634],"tindex":"11e57835-3e6c-11e6-9fd0-91b2dbc50839","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type.equals(type)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","to":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl","sourcecode":"lowerBound != (originalLowerBound[0])"},"failures":[],"tindex":"11e59f46-3e6c-11e6-9fd0-d7058aad1b2d","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o != (o[0])) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"o","lowerBound":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"11e59f47-3e6c-11e6-9fd0-4f1994279b79","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"11e59f48-3e6c-11e6-9fd0-bd2732ce86de","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        return null;\n    } \n    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"11e5c659-3e6c-11e6-9fd0-45d384d83142","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[],"tindex":"11e5c65a-3e6c-11e6-9fd0-c3d1621d77ef","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isAssignableFrom(raw)) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"raw","classOfPrimitive":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"11e5c65b-3e6c-11e6-9fd0-1fbf56b98a00","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"11e5c65c-3e6c-11e6-9fd0-4d2b5aa08c8a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"11e5ed6d-3e6c-11e6-9fd0-a99474e11e7d","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"11e5ed6e-3e6c-11e6-9fd0-192a806a4941","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(clazz.isInterface())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"11e5ed6f-3e6c-11e6-9fd0-dba5d5c4193c","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"11e5ed70-3e6c-11e6-9fd0-e93dde7b9540","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"11e5ed71-3e6c-11e6-9fd0-73fde86a92b2","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array.isSynthetic()) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"11e61482-3e6c-11e6-9fd0-a90ff14477c7","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"11e61483-3e6c-11e6-9fd0-d317d35467be","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"11e61484-3e6c-11e6-9fd0-9963eb6e944f","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"11e61485-3e6c-11e6-9fd0-134974d447ab","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[],"tindex":"11e61486-3e6c-11e6-9fd0-2966a898877d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[686,687,688,689],"tindex":"11e63b97-3e6c-11e6-9fd0-1bc5d1380801","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == from) {\n        {\n            if (from instanceof java.lang.reflect.WildcardType) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[4,7,8,9,11,382,35,38,43,388,47,389,48,390,348,391,49,349,50,392,52,53,54,55,56,393,57,58,59,394,60,396,61,62,63,64,350,65,66,67,397,398,68,399,69,400,401,70,72,78,407,80,82,410,411,413,414,415,418,87,89,90,97,98,422,423,424,425,426,104,443,109,110,111,114,117,354,356,449,357,358,118,121,122,123,450,451,126,127,453,128,130,132,455,456,457,458,133,134,135,459,460,461,462,136,137,463,514,167,168,526,527,169,528,529,170,530,531,171,532,172,534,174,535,536,177,537,178,179,538,367,539,540,180,542,181,182,543,183,544,545,546,547,184,548,549,185,186,188,189,190,191,550,192,193,194,195,196,197,198,200,201,202,207,552,553,554,228,229,233,557,234,558,235,560,236,237,238,239,240,561,242,563,243,564,565,244,245,369,568,247,258,576,259,262,263,264,265,580,581,582,583,267,584,269,589,270,271,590,272,591,592,273,593,595,596,599,284,603,294,371,308,313,615,616,314,315,617,618,316,318,319,321,322,323,324,325,335,338,339,630,631,632,633],"tindex":"11e63b98-3e6c-11e6-9fd0-49d017e267f8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (!serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"11e63b99-3e6c-11e6-9fd0-b722721a6c3b","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != typeOfSrc) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"src","type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[372,4,347,5,6,373,374,375,7,8,9,10,11,30,378,379,380,31,32,33,381,34,382,35,383,384,385,38,39,40,41,42,386,387,43,388,44,45,46,47,389,48,390,348,391,49,349,50,392,51,52,53,54,55,56,393,57,58,59,394,60,395,396,61,62,63,64,350,65,66,67,397,398,68,399,69,400,401,70,71,72,73,402,403,404,74,75,76,77,78,405,406,79,673,407,80,81,408,82,83,674,84,409,410,411,412,413,414,85,415,86,416,417,418,87,88,89,419,90,91,92,420,93,421,94,95,96,97,98,422,423,424,425,426,427,428,429,430,99,431,432,433,100,101,434,435,102,436,103,437,104,438,439,440,441,105,106,107,442,443,351,108,444,109,352,110,111,112,113,445,114,353,446,115,447,448,116,117,354,355,356,449,357,358,118,119,120,121,122,123,450,451,124,452,125,126,127,453,128,129,130,131,454,132,455,456,457,458,133,134,135,459,460,461,462,136,137,463,464,465,466,138,467,359,468,469,470,471,472,139,473,474,140,475,476,477,478,479,480,481,360,141,482,483,484,485,486,142,487,361,143,488,489,144,490,491,362,492,145,363,493,494,146,147,495,496,497,148,498,499,500,501,502,503,504,505,149,506,150,507,151,152,508,509,153,510,511,154,512,155,513,514,515,156,157,158,159,160,161,364,516,517,518,162,519,163,520,521,522,164,165,523,166,524,525,167,168,526,527,169,528,529,170,530,531,171,532,533,172,534,174,535,175,536,176,177,537,178,179,366,538,367,539,540,541,180,542,181,182,543,183,544,545,546,547,184,548,549,185,186,187,188,189,190,191,550,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,368,209,210,211,212,213,214,215,216,551,552,553,554,555,226,227,228,229,230,231,232,233,556,557,234,558,235,559,560,236,237,238,239,240,241,561,242,562,563,243,564,565,566,244,245,567,369,568,246,247,248,249,569,250,370,251,252,253,570,571,254,255,256,572,573,574,257,575,258,576,259,577,260,578,261,579,262,263,264,265,580,581,266,582,583,267,584,585,586,268,587,269,588,589,270,271,590,272,591,592,273,593,594,274,275,276,595,596,597,278,598,280,281,282,599,600,601,284,602,285,286,287,288,289,603,290,604,291,292,605,293,606,294,295,296,297,298,607,608,299,609,301,610,302,303,611,371,304,305,306,307,308,612,613,309,311,614,312,313,615,616,314,315,617,618,316,680,619,317,318,319,320,321,322,323,324,325,620,326,327,328,329,330,621,622,331,623,332,624,625,626,333,627,628,334,335,338,629,339,630,341,342,631,632,633,345,346,634,639],"tindex":"11e662aa-3e6c-11e6-9fd0-5d7354266c61","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if ((!serialize) && (!serialize)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"serialize","deserialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[47,48,49,56,361,362,363,150,165,217,218,219,220,221,222,223,224,341],"tindex":"11e689bb-3e6c-11e6-9fd0-13e6d6a6ed4c","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[670],"tindex":"11e689bc-3e6c-11e6-9fd0-3157998e4725","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[4,347,5,6,373,374,375,7,8,11,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,348,49,349,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,410,411,412,413,414,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,351,108,109,352,110,111,112,113,114,353,115,116,117,354,355,356,357,358,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,456,457,458,133,134,135,459,460,136,137,463,138,359,139,140,360,141,142,361,143,144,362,145,363,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,364,162,163,164,165,166,167,168,169,170,171,365,172,173,174,175,176,177,178,179,366,367,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,368,209,210,211,212,213,214,215,216,218,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,561,242,243,244,245,369,246,247,248,249,250,370,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,580,581,266,267,268,269,270,271,590,272,591,592,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,371,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,630,341,342,631,345,346],"tindex":"11e6b0cd-3e6c-11e6-9fd0-2596be602a00","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[372,4,347,5,6,7,8,690,11,28,29,30,691,31,32,33,381,34,382,35,36,383,384,385,37,38,39,40,41,42,386,387,43,388,44,45,46,47,389,48,390,348,391,49,349,50,392,51,52,53,54,55,56,393,57,58,59,394,60,395,396,61,62,63,64,350,65,66,67,397,398,68,399,69,400,401,70,71,72,73,402,403,404,74,75,76,77,78,405,406,79,673,407,80,81,408,82,83,674,84,409,410,411,412,413,414,85,415,86,416,417,418,87,88,89,419,90,91,92,420,93,421,94,95,96,97,98,422,423,424,425,426,427,428,429,430,99,431,432,433,100,101,434,435,102,436,103,437,104,438,439,440,441,105,106,107,442,443,351,108,444,109,352,110,111,112,113,445,114,353,446,115,447,448,116,117,354,355,356,449,357,358,118,119,120,121,122,123,450,451,124,452,125,126,127,453,128,129,130,131,454,132,455,456,457,458,133,134,135,459,460,461,462,136,137,463,464,465,466,138,467,359,468,469,470,471,472,139,473,474,140,475,476,477,478,479,480,481,360,141,482,483,484,485,486,142,487,361,143,488,489,144,490,491,362,492,145,363,493,494,146,147,495,496,497,148,498,499,500,501,502,503,504,505,149,506,150,507,151,152,508,509,153,510,511,154,512,155,513,514,515,156,157,158,159,160,161,364,516,517,518,162,519,163,520,521,522,164,165,523,166,524,525,167,168,526,527,169,528,529,170,530,531,171,365,532,533,172,534,173,174,675,535,175,536,176,177,537,178,179,366,538,367,539,540,541,676,180,542,181,182,543,183,544,545,546,547,184,548,549,185,186,187,692,188,189,190,191,550,192,198,199,200,201,202,203,204,205,206,207,208,368,209,210,211,212,213,214,215,216,551,552,553,554,555,226,227,228,229,230,231,232,233,556,557,234,558,235,559,560,236,237,238,240,241,561,242,562,563,243,564,565,566,244,245,567,369,568,246,247,248,249,569,250,370,251,252,253,570,571,254,255,256,572,573,574,257,575,258,576,259,577,260,578,261,579,262,263,264,265,580,581,266,582,583,267,584,585,586,268,587,269,588,589,270,271,590,272,591,592,273,593,594,274,275,276,659,595,596,277,597,278,279,598,280,677,281,282,599,600,283,601,284,602,285,286,287,288,289,603,290,604,291,292,605,293,606,294,295,296,297,678,298,607,608,299,609,300,301,610,302,303,611,371,304,305,306,307,308,612,613,309,310,679,311,614,312,313,615,616,314,315,617,618,316,680,619,317,318,319,320,321,322,323,324,325,620,326,327,328,329,330,621,622,331,623,332,624,625,626,333,627,628,334,335,336,337,338,629,693,339,340,630,341,694,342,631,632,633,345,346,634],"tindex":"11e6b0ce-3e6c-11e6-9fd0-03b91dd4b4ad","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"11e6d7df-3e6c-11e6-9fd0-dd1131d42db2","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"11e6d7e0-3e6c-11e6-9fd0-eb64bd24b5ad","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if ((memberName != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"11e6d7e1-3e6c-11e6-9fd0-676068a4f79b","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == from) {\n        {\n            if (from instanceof java.lang.reflect.WildcardType) {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (java.lang.reflect.Type.equals(from)) {\n                        return true;\n                    } \n                    if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                        return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                        return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n                    } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                        return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n                    } else {\n                        throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"from","context":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"11e6d7e2-3e6c-11e6-9fd0-a9d87cbeb5c5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[677,695,696],"tindex":"11e6fef3-3e6c-11e6-9fd0-29592e1c00ac","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o.equals(o)) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o","to":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[4,6,7,8,11,22,24,26,27,28,30,31,34,35,38,39,40,41,42,43,44,45,46,51,56,62,64,65,66,68,70,71,74,76,77,78,79,80,81,84,85,86,87,91,92,96,97,98,100,101,102,103,104,105,106,109,110,111,113,114,115,117,118,119,120,121,122,124,133,134,135,136,137,139,140,142,155,168,169,170,171,174,177,179,180,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,219,220,225,229,233,234,235,237,238,239,240,242,244,245,246,247,248,249,251,252,254,255,257,258,260,262,263,266,267,268,270,271,272,273,274,275,276,278,279,280,281,282,285,287,288,289,290,291,292,295,298,299,301,302,303,304,305,306,307,309,311,314,317,318,319,326,327,328,329,330,331,332,333,334,335,336,337,338,339,342,344,345],"tindex":"11e6fef4-3e6c-11e6-9fd0-99ade333caff","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:297","type":"CtBinaryOperatorImpl","sourcecode":"(value) instanceof java.lang.Number"},"failures":[],"tindex":"11e6fef5-3e6c-11e6-9fd0-d127098714da","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"11e6fef6-3e6c-11e6-9fd0-9f4b66b62d11","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"11e6fef7-3e6c-11e6-9fd0-6b463cb8befc","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[594,601,306],"tindex":"11e72608-3e6c-11e6-9fd0-9730c5436ca0","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"11e72609-3e6c-11e6-9fd0-87a8a8473939","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter.getRawType().equals(typeAdapter.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeAdapter","to":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"11e7260a-3e6c-11e6-9fd0-ad5503432e43","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"11e7260b-3e6c-11e6-9fd0-09b14cbb764b","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"11e74d1c-3e6c-11e6-9fd0-a530429c216c","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:618","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'f') || (c == 'F')"},"failures":[],"tindex":"11e74d1d-3e6c-11e6-9fd0-832c08cf45b1","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote == 'f') || (c == 'F')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl","sourcecode":"isObject"},"failures":[],"tindex":"11e74d1e-3e6c-11e6-9fd0-4f878151bec7","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"11e74d1f-3e6c-11e6-9fd0-0fd4c05e361e","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1256","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME))"},"failures":[],"tindex":"11e74d20-3e6c-11e6-9fd0-eb5dff99146b","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if ((minimum == minimum) || (p == minimum)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467253142600/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"minimum","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":85,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
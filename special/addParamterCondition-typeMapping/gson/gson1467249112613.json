{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":3,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":466,"com.google.gson.functional.StringTest.testStringValueDeserialization":464,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":634,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":21,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":420,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":275,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":78,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":205,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":129,"com.google.gson.MixedStreamTest.testWriteLenient":245,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":429,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":4,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":218,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":174,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":222,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":323,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":456,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":512,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":125,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":284,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":637,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":99,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":153,"com.google.gson.functional.ObjectTest.testSingletonLists":172,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":421,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":268,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":467,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":364,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":116,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":437,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":187,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":234,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":326,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":59,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":480,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":0,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":315,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":583,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":162,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":240,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":260,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":593,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":539,"com.google.gson.functional.EnumTest.testEnumCaseMapping":455,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":247,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":465,"com.google.gson.functional.JsonTreeTest.testToJsonTree":20,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":259,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":586,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":440,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":15,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":607,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":638,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":399,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":499,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":414,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":515,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":646,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":572,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":207,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":477,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":184,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":335,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":276,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":555,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":647,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":591,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":71,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":194,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":441,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":138,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":340,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":339,"com.google.gson.JsonParserTest.testParseString":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":436,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":320,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":299,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":398,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":196,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":495,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":419,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":130,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":312,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":532,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":411,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":144,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":73,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":549,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":321,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":484,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":313,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":193,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":489,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":57,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":180,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":227,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":632,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":83,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":280,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":546,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":150,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":85,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":97,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":250,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":356,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":443,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":427,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":559,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":413,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":70,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":210,"com.google.gson.functional.CollectionTest.testSetDeserialization":221,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":126,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":183,"com.google.gson.functional.EnumTest.testEnumSet":448,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":597,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":304,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":98,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":355,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":601,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":403,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":528,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":188,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":25,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":96,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":317,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":34,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":328,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":117,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":588,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":329,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":273,"com.google.gson.functional.MapTest.testHashMapDeserialization":522,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":568,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":425,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":254,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":255,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":50,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":372,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":141,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":447,"com.google.gson.functional.MapTest.testSortedMap":542,"com.google.gson.functional.MapTest.testMapSerialization":538,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":51,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":212,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":310,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":631,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":622,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":502,"com.google.gson.functional.MapTest.testSerializeMaps":525,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":563,"com.google.gson.functional.MapTest.testComplexKeysSerialization":166,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":596,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":550,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":624,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":506,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":119,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":209,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":159,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":383,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":611,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":453,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":225,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":615,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":79,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":557,"com.google.gson.functional.MapTest.testStringKeyDeserialization":548,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":603,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":503,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":358,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":342,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":279,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":552,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":274,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":460,"com.google.gson.functional.PrettyPrintingTest.testMap":584,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":565,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":394,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":445,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":233,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":505,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":470,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":409,"com.google.gson.functional.MapTest.testMapSerializationEmpty":547,"com.google.gson.functional.CollectionTest.testQueueSerialization":569,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":639,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":305,"com.google.gson.functional.MapTest.testMapOfMapSerialization":537,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":296,"com.google.gson.JavaSerializationTest.testMapIsSerializable":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":416,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":574,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":43,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":307,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":365,"com.google.gson.functional.FieldNamingTest.testIdentity":217,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":468,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":357,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":35,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":197,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":6,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":19,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":82,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":171,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":262,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":241,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":9,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":469,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":168,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":431,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":404,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":439,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":519,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":338,"com.google.gson.functional.MapTest.testMapSubclassSerialization":524,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":105,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":121,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":599,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":27,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":127,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":256,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":294,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":131,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":393,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":115,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":95,"com.google.gson.functional.EnumTest.testEnumSubclass":451,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":316,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":186,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":235,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":261,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":67,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":75,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":628,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":378,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":264,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":170,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":300,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":618,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":169,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":11,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":228,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":498,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":649,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":306,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":553,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":81,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":433,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":173,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":521,"com.google.gson.MixedStreamTest.testWriteNulls":608,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":497,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":482,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":491,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":93,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":208,"com.google.gson.CommentsTest.testParseComments":600,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":635,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":156,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":175,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":360,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":47,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":319,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":558,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":472,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":541,"com.google.gson.MixedStreamTest.testReadInvalidState":244,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":123,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":104,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":435,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":213,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":272,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":507,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":602,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":620,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":44,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":605,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":289,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":41,"com.google.gson.JsonArrayTest.testRemove":604,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":417,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":494,"com.google.gson.functional.MapTest.testMapDeserialization":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":412,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":587,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":520,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":152,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":90,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":530,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":155,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":513,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":384,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":642,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":18,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":108,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":198,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":554,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":374,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":462,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":400,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":103,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":382,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":224,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":540,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":438,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":258,"com.google.gson.functional.PrimitiveTest.testShortSerialization":336,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":362,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":516,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":325,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":595,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":295,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":110,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":271,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":560,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":450,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":648,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":219,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":120,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":645,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":526,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":288,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":344,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":581,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":132,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":428,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":31,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":351,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":345,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":371,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":74,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":89,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":199,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":388,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":614,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":72,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":146,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":76,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":301,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":203,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":179,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":454,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":375,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":109,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":220,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":458,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":359,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":151,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":418,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":278,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":406,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":423,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":13,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":566,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":265,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":331,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":303,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":348,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":48,"com.google.gson.JsonPrimitiveTest.testEquals":630,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":154,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":449,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":55,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":214,"com.google.gson.functional.MapTest.testGeneralMapField":165,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":177,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":488,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":350,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":68,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":430,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":543,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":389,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":509,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":327,"com.google.gson.MixedStreamTest.testReadMixedStreamed":30,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":231,"com.google.gson.JsonObjectTest.testDeepCopy":640,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":401,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":533,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":142,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":242,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":577,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":148,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":308,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":594,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":236,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":112,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":534,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":369,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":523,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":349,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":361,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":140,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":62,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":415,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":483,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":629,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":387,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":573,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":518,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":623,"com.google.gson.functional.ObjectTest.testNestedDeserialization":204,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":367,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":385,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":556,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":52,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":10,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":592,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":347,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":46,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":370,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":471,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":535,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":94,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":334,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":84,"com.google.gson.JavaSerializationTest.testListIsSerializable":238,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":8,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":133,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":579,"com.google.gson.functional.ObjectTest.testNullSerialization":613,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":377,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":368,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":527,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":164,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":263,"com.google.gson.functional.MapTest.testInterfaceTypeMap":163,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":500,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":461,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":87,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":266,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":118,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":381,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":390,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":590,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":282,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":626,"com.google.gson.MixedStreamTest.testWriteClosed":29,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":54,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":571,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":88,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":442,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":100,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":86,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":2,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":45,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":201,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":114,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":91,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":181,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":570,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":63,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":617,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":311,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":65,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":379,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":424,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":252,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":39,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":352,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":287,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":396,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":211,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":485,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":1,"com.google.gson.functional.CollectionTest.testQueueDeserialization":582,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":293,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":309,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":476,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":253,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":434,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":161,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":408,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":139,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":202,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":564,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":26,"com.google.gson.functional.MapTest.testRawMapSerialization":545,"com.google.gson.JsonParserTest.testParseReader":643,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":422,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":190,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":373,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":216,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":517,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":22,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":24,"com.google.gson.functional.PrimitiveTest.testByteSerialization":333,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":444,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":490,"com.google.gson.ObjectTypeAdapterTest.testSerialize":230,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":609,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":137,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":277,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":619,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":5,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":616,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":501,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":625,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":561,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":101,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":239,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":473,"com.google.gson.functional.MapTest.testMapWithQuotes":536,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":395,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":475,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":354,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":511,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":366,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":128,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":392,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":124,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":514,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":92,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":200,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":226,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":405,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":182,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":397,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":7,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":407,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":330,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":612,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":576,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":493,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":432,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":486,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":376,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":37,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":627,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":257,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":122,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":606,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":446,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":267,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":386,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":363,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":189,"com.google.gson.functional.ObjectTest.testNestedSerialization":191,"com.google.gson.JsonObjectTest.testAddingStringProperties":641,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":49,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":281,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":479,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":508,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":510,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":544,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":215,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":145,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":243,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":246,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":185,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":251,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":343,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":14,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":111,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":248,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":107,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":192,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":60,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":478,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":496,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":69,"com.google.gson.functional.CollectionTest.testSetSerialization":223,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":77,"com.google.gson.functional.StringTest.testStringValueSerialization":481,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":585,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":66,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":40,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":80,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":567,"com.google.gson.MixedStreamTest.testWriteInvalidState":28,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":487,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":286,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":136,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":292,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":402,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":232,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":562,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":206,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":636,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":38,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":589,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":426,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":610,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":529,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":633,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":249,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":492},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[0],"tindex":"a1103dde-3e5f-11e6-b65b-5da70f3097e5","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,16,17,18,19,20,21,22,23,24],"tindex":"a110b30f-3e5f-11e6-b65b-0dd72106ce71","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.Class<?>) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"a110b310-3e5f-11e6-b65b-85e822c38ebf","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:309","type":"CtBinaryOperatorImpl","sourcecode":"(obj == null) || ((getClass()) != (obj.getClass()))"},"failures":[],"tindex":"a110b311-3e5f-11e6-b65b-290e9412b447","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        return true;\n    } \n    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n            return true;\n        } \n    }\n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"target","this":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,1,2,48,49,50,3,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,4,5,7,8,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,10,11,12,85,86,87,13,14,88,89,90,91,15,0,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,17,18,19,20,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,21,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230],"tindex":"a110da22-3e5f-11e6-b65b-fb5c28ae29ee","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[231,232],"tindex":"a1110133-3e5f-11e6-b65b-11d35e129b26","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:586","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 1"},"failures":[],"tindex":"a1112844-3e5f-11e6-b65b-c52f75b9c6bb","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset == 1) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a1112845-3e5f-11e6-b65b-7dc959afa616","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"a1114f56-3e5f-11e6-b65b-8968a027bae5","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n    if (node != null) {\n        removeInternal(node, true);\n    } \n    return node;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"a1117667-3e5f-11e6-b65b-a39dd8c68028","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[233,234,235,236,237,238,239,25,240,241,242,243,26,244,27,28,245,246,29,30,31,247,248,249,32,33,34,250,251,35,36,252,37,38,39,40,41,42,43,44,45,46,47,1,2,48,49,50,253,3,51,254,52,53,54,55,56,57,255,256,58,59,60,61,62,63,64,65,257,66,4,5,6,7,8,67,9,68,69,70,71,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,72,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,73,355,356,357,74,75,358,76,359,77,360,361,362,363,364,365,366,367,368,369,78,370,79,80,371,81,82,83,372,373,374,84,375,376,377,378,379,380,381,382,383,384,10,11,12,85,86,87,13,14,88,89,90,91,15,0,385,92,93,16,94,95,96,97,98,99,100,101,102,103,104,386,105,106,387,388,389,390,391,107,108,392,393,394,395,396,397,398,399,400,109,401,402,403,110,404,405,406,407,408,409,111,410,411,412,413,414,415,416,112,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,113,432,433,434,435,114,436,437,438,439,440,441,442,443,444,115,116,445,446,447,117,448,449,450,451,452,453,118,119,454,455,456,120,121,122,123,457,124,125,126,458,459,460,461,127,462,463,128,17,18,19,20,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,129,130,131,132,133,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,134,135,136,503,504,505,506,507,137,508,509,138,139,510,140,141,511,142,143,144,145,146,512,147,148,149,150,151,152,153,513,514,515,154,155,156,157,516,158,517,518,159,160,519,520,521,522,523,524,525,526,527,528,529,530,531,161,532,533,534,535,536,537,538,539,162,540,541,542,163,543,164,165,544,545,546,166,547,548,549,550,551,552,21,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,553,183,184,185,186,554,187,555,188,189,190,191,556,192,193,194,195,557,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,558,212,213,214,215,559,216,560,561,562,563,217,218,564,219,565,566,567,568,569,570,571,572,220,573,574,575,576,221,222,577,578,223,579,580,581,582,583,584,224,225,585,586,587,226,588,589,590,591,592,593,594,595,596,597,598,599,227,600,22,23,24,228,229],"tindex":"a1117668-3e5f-11e6-b65b-9ddccfdf1003","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1310","type":"CtBinaryOperatorImpl","sourcecode":"(limit) >= minimum"},"failures":[],"tindex":"a111c489-3e5f-11e6-b65b-65f955b337fb","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style >= style) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"limit":"style","minimum":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"a111eb9a-3e5f-11e6-b65b-279efa8f6c21","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"a11212ab-3e5f-11e6-b65b-87428bd3cda7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[601,602,603],"tindex":"a11212ac-3e5f-11e6-b65b-11f183e6f5f8","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.WildcardType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"a11239bd-3e5f-11e6-b65b-15b821854888","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"a11260ce-3e5f-11e6-b65b-3d7e74f10e8f","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[245,320,342,348],"tindex":"a11260cf-3e5f-11e6-b65b-391e650a7037","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"a11260d0-3e5f-11e6-b65b-3d6ba3fa87be","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[240,241,242,243,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,56,57,255,256,58,61,62,65,66,67,9,68,70,71,261,263,269,272,280,281,287,289,290,293,296,298,299,302,303,307,316,318,320,321,324,327,329,332,334,335,337,338,342,344,348,349,354,75,358,76,77,360,361,363,366,369,78,79,371,82,83,372,373,374,84,375,376,377,380,382,86,90,91,97,388,390,394,400,405,406,407,408,409,410,412,413,415,112,418,419,421,427,429,430,113,432,433,434,435,114,438,441,444,116,448,449,450,451,118,454,456,120,121,123,457,124,125,126,458,459,460,461,127,462,463,128,18,465,466,467,468,469,472,474,478,481,485,486,488,489,490,491,492,495,496,501,134,136,504,506,137,508,509,138,139,510,140,512,149,151,513,515,154,155,157,516,158,159,525,161,536,537,541,163,164,165,545,21,167,170,171,172,175,178,181,183,185,554,555,188,190,191,556,193,196,198,199,201,206,207,208,209,211,213,215,560,561,562,563,217,218,564,565,570,571,220,575,222,223,583,584,224,225,585,586,587,588,589,590,591,592,593,594,595,598,227,228,229],"tindex":"a11286e1-3e5f-11e6-b65b-01d3cbb84471","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1249","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_OBJECT)"},"failures":[],"tindex":"a11286e2-3e5f-11e6-b65b-776036e567cb","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (dateStyle == timeStyle) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_END_OBJECT":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"a112adf3-3e5f-11e6-b65b-af4716d6c67c","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:536","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_DOCUMENT)"},"failures":[604],"tindex":"a112adf4-3e5f-11e6-b65b-6d1c150a84d1","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"index","com.google.gson.stream.JsonScope.EMPTY_DOCUMENT":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[605,606,607,256,58,59,60,61,62,63,64,65,257],"tindex":"a112adf5-3e5f-11e6-b65b-11f94bd0f3cb","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"a112adf6-3e5f-11e6-b65b-0bd9ab2296f8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[608,609,610,6,426,439,611,612,515,516,517,613,614],"tindex":"a112adf7-3e5f-11e6-b65b-e978ee552a6f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"a112d508-3e5f-11e6-b65b-f7e01d7cc045","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"a112d509-3e5f-11e6-b65b-e57c3d961455","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (to != null) {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[615,391,398,440,17,20,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,604],"tindex":"a112d50a-3e5f-11e6-b65b-2fe57625767d","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[376,378,563],"tindex":"a112d50b-3e5f-11e6-b65b-fb276f341c06","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,1,2,48,49,50,3,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,4,5,7,8,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,372,373,374,84,375,376,377,378,379,380,381,382,383,384,10,11,12,85,86,87,13,14,88,89,90,91,15,0,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,17,18,19,20,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,21,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,560,561,562,563,217,218,219,220,221,222,223,224,225,226,227,228,229,230],"tindex":"a112fc1c-3e5f-11e6-b65b-e3df2c71208c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"a112fc1d-3e5f-11e6-b65b-b175ff6e1a41","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"a112fc1e-3e5f-11e6-b65b-011088b6876c","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"a113232f-3e5f-11e6-b65b-f5f55146c0d2","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls == cls) {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls","rawSupertype":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"a1132330-3e5f-11e6-b65b-e5d3f39e84fa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[604],"tindex":"a1132331-3e5f-11e6-b65b-f11a2313a643","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[633,634,27,0,525,583,584,224,225,585,586,587,226],"tindex":"a1132332-3e5f-11e6-b65b-498661220d4f","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent == null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[635,636,637,638,615,639,640,641,252,1,2,3,642,4,5,7,8,356,357,10,11,12,13,14,15,0,386,391,121,122,128,19,132,144,523,526,527,531,534,539,546,548,213,214,215,643,644,22,231,232,645,646,647,648,649],"tindex":"a1134a43-3e5f-11e6-b65b-9bcfb118045e","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"a1137154-3e5f-11e6-b65b-85a754393f06","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"a1137155-3e5f-11e6-b65b-7b83dd0cbbbe","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:574","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 1"},"failures":[],"tindex":"a1137156-3e5f-11e6-b65b-97f988642beb","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == 1) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248326379/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":41,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":157,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":60,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":202,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":43,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":195,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":86,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":109,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":46,"com.google.gson.MixedStreamTest.testWriteLenient":117,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":184,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":9,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":54,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":5,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":34,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":96,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":140,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":180,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":49,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":78,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":15,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":44,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":192,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":17,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":70,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":21,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":187,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":128,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":203,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":12,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":156,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":39,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":114,"com.google.gson.GenericArrayTypeTest.testNotEquals":204,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":106,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":88,"com.google.gson.functional.JsonTreeTest.testToJsonTree":82,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":75,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":167,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":77,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":147,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":127,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":7,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":183,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":61,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":25,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":172,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":18,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":159,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":102,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":90,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":8,"com.google.gson.JsonObjectTest.testDeepCopy":100,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":153,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":94,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":177,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":52,"com.google.gson.JsonParserTest.testParseString":3,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":120,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":38,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":33,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":130,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":47,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":152,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":29,"com.google.gson.ParameterizedTypeTest.testNotEquals":123,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":16,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":112,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":188,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":89,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":173,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":196,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":122,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":72,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":163,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":4,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":40,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":108,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":154,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":136,"com.google.gson.JavaSerializationTest.testListIsSerializable":121,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":50,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":57,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":179,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":125,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":66,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":164,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":197,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":27,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":35,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":103,"com.google.gson.functional.CollectionTest.testSetDeserialization":176,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":133,"com.google.gson.functional.EnumTest.testEnumSet":182,"com.google.gson.MixedStreamTest.testReadClosed":116,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":194,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":150,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":138,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":115,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":110,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":111,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":141,"com.google.gson.functional.MapTest.testHashMapDeserialization":149,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":169,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":63,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":87,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":198,"com.google.gson.functional.MapTest.testSortedMap":158,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":171,"com.google.gson.functional.MapTest.testMapSerialization":155,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":20,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":23,"com.google.gson.functional.MapTest.testComplexKeysSerialization":161,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":175,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":19,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":42,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":64,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":79,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":14,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":62,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":105,"com.google.gson.functional.CollectionTest.testQueueDeserialization":181,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":98,"com.google.gson.functional.MapTest.testStringKeyDeserialization":41,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":69,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":166,"com.google.gson.JsonParserTest.testParseReader":2,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":165,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":190,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":28,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":99,"com.google.gson.functional.MapTest.testMapSerializationEmpty":162,"com.google.gson.functional.CollectionTest.testQueueSerialization":170,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":92,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":83,"com.google.gson.JavaSerializationTest.testMapIsSerializable":1,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":174,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":55,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":11,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":142,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":67,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":81,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":199,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":45,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":65,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":132,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":85,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":134,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":148,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":129,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":58,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":146,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":48,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":137,"com.google.gson.functional.EnumTest.testEnumSubclass":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":189,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":56,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":68,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":31,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":107,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":59,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":32,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":73,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":113,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":71,"com.google.gson.internal.LinkedTreeMapTest.testClear":6,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":13,"com.google.gson.JsonObjectTest.testAddingStringProperties":101,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":191,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":160,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":26,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":126,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":51,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":118,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":193,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":135,"com.google.gson.CommentsTest.testParseComments":201,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":93,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":76,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":22,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":131,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":145,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":119,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":24,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":168,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":104,"com.google.gson.functional.MapTest.testMapDeserialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":53,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":91,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":95,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":151,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":30,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":80,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":186,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":143,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":84,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":36,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":74,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":124,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":144},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"8bb6fc8e-3efa-11e6-a35b-d18487b6172c","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb771bf-3efa-11e6-a35b-a14f55bf7947","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"tindex":"8bb771c0-3efa-11e6-a35b-31518e899cae","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8bb798d1-3efa-11e6-a35b-2d103a5ee569","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8bb7bfe2-3efa-11e6-a35b-35f7c0d59f55","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb7bfe3-3efa-11e6-a35b-97242fd67c1c","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.contains(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:919","type":"CtBinaryOperatorImpl"},"failures":[104,105,106,107,108,109,110,111,112,113],"tindex":"8bb7bfe4-3efa-11e6-a35b-ed444c24633c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (h != h) {\n                {\n                    h ^= (h >>> 20) ^ (h >>> 12);\n                    return (h ^ (h >>> 7)) ^ (h >>> 4);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"h"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8bb7e6f5-3efa-11e6-a35b-3d738a94f8ce","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8bb7e6f6-3efa-11e6-a35b-69c4b20d4ccf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl"},"failures":[79,80,81,82],"tindex":"8bb7e6f7-3efa-11e6-a35b-4768e4322ebf","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if ((!value) && (!value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"value","skipSerialize":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[114,115],"tindex":"8bb7e6f8-3efa-11e6-a35b-17fb65b098bc","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8bb80e09-3efa-11e6-a35b-1f9fe83382bb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb80e0a-3efa-11e6-a35b-ff416892203d","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb8351b-3efa-11e6-a35b-6ddf55adc59c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (h != h) {\n                {\n                    h ^= (h >>> 20) ^ (h >>> 12);\n                    return (h ^ (h >>> 7)) ^ (h >>> 4);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"h"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb8351c-3efa-11e6-a35b-67ec2db32c4c","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if ((src != null) && ((src.peek()) != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","obj":"src","reader":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb8351d-3efa-11e6-a35b-436e78d561f4","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb8351e-3efa-11e6-a35b-133fd26c540c","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8bb85c2f-3efa-11e6-a35b-5361d6a1d8a6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8bb85c30-3efa-11e6-a35b-b98a342406a3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:919","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb88341-3efa-11e6-a35b-87ecc3dc90f3","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style != style) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_BUFFERED":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"8bb88342-3efa-11e6-a35b-7d8067537e0f","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl"},"failures":[116,117,118,119,120,1,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,31,136,137,138,139,140,141,142,143,144,145,32,146,147,148,149,33,34,35,150,36,151,37,152,153,38,154,155,39,156,157,158,159,160,40,161,162,41,163,42,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,51,188,189,190,59,191,192,193,194,67,195,196,197,198,87,199,200,88,89,201,92,202,203,204],"tindex":"8bb88343-3efa-11e6-a35b-7540a7d16457","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isAssignableFrom(subclass)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass","rawSupertype":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb8aa54-3efa-11e6-a35b-b525456a428f","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"8bb8aa55-3efa-11e6-a35b-6d45b9896ef3","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467315175935/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":24,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":28,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":473,"com.google.gson.functional.StringTest.testStringValueDeserialization":471,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":175,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":425,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":637,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":293,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":60,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":214,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":137,"com.google.gson.MixedStreamTest.testWriteLenient":256,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":434,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":45,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":231,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":183,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":235,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":341,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":463,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":519,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":129,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":302,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":614,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":103,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":161,"com.google.gson.functional.ObjectTest.testSingletonLists":181,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":426,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":286,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":474,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":382,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":120,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":442,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":196,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":246,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":344,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":37,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":487,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":95,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":333,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":590,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":630,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":170,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":249,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":278,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":600,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":546,"com.google.gson.functional.EnumTest.testEnumCaseMapping":462,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":261,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":472,"com.google.gson.functional.JsonTreeTest.testToJsonTree":136,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":277,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":445,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":94,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":615,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":404,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":506,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":419,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":522,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":627,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":579,"com.google.gson.functional.ObjectTest.testNullDeserialization":568,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":216,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":484,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":193,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":260,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":353,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":294,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":565,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":628,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":598,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":53,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":203,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":259,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":446,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":146,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":358,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":357,"com.google.gson.JsonParserTest.testParseString":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":441,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":338,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":317,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":403,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":205,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":502,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":424,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":138,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":330,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":539,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":416,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":152,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":55,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":556,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":339,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":491,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":331,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":202,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":496,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":35,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":189,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":240,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":67,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":298,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":553,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":636,"com.google.gson.metrics.PerformanceTest.testDummy":244,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":158,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":85,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":101,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":264,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":374,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":448,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":558,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":432,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":570,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":418,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":219,"com.google.gson.functional.CollectionTest.testSetDeserialization":234,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":130,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":192,"com.google.gson.functional.EnumTest.testEnumSet":455,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":604,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":322,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":102,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":373,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":408,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":535,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":197,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":100,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":335,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":9,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":346,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":121,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":595,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":347,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":639,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":291,"com.google.gson.functional.MapTest.testHashMapDeserialization":529,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":430,"com.google.gson.MixedStreamTest.testReadNulls":257,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":268,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":269,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":27,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":68,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":149,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":453,"com.google.gson.functional.MapTest.testSortedMap":549,"com.google.gson.functional.MapTest.testMapSerialization":545,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":29,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":221,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":328,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":509,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":229,"com.google.gson.functional.MapTest.testSerializeMaps":532,"com.google.gson.functional.MapTest.testComplexKeysSerialization":174,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":603,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":557,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":513,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":123,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":218,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":167,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":80,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":450,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":460,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":238,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":616,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":62,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":567,"com.google.gson.functional.MapTest.testStringKeyDeserialization":555,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":611,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":510,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":376,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":360,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":297,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":559,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":292,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":467,"com.google.gson.functional.PrettyPrintingTest.testMap":591,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":572,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":399,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":451,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":245,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":512,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":477,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":414,"com.google.gson.functional.MapTest.testMapSerializationEmpty":554,"com.google.gson.functional.CollectionTest.testQueueSerialization":576,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":617,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":323,"com.google.gson.functional.MapTest.testMapOfMapSerialization":544,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":421,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":581,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":18,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":383,"com.google.gson.functional.FieldNamingTest.testIdentity":230,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":475,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":375,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":10,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":206,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":66,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":135,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":180,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":274,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":280,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":250,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":275,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":476,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":177,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":436,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":409,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":444,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":526,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":356,"com.google.gson.functional.MapTest.testMapSubclassSerialization":531,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":109,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":125,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":606,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":2,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":131,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":270,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":312,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":139,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":398,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":119,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":99,"com.google.gson.functional.EnumTest.testEnumSubclass":458,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":334,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":195,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":247,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":279,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":49,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":645,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":340,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":75,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":282,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":179,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":318,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":178,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":83,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":241,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":505,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":631,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":324,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":561,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":65,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":438,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":182,"com.google.gson.MixedStreamTest.testWriteNulls":255,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":528,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":504,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":489,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":498,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":97,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":217,"com.google.gson.CommentsTest.testParseComments":607,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":612,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":164,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":184,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":378,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":22,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":143,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":337,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":569,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":479,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":548,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":389,"com.google.gson.MixedStreamTest.testReadInvalidState":253,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":127,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":108,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":440,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":222,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":290,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":632,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":514,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":610,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":19,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":307,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":16,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":422,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":501,"com.google.gson.functional.MapTest.testMapDeserialization":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":417,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":594,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":527,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":160,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":92,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":537,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":163,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":520,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":81,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":620,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":134,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":459,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":112,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":207,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":564,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":70,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":469,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":405,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":107,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":79,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":176,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":237,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":443,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":276,"com.google.gson.functional.PrimitiveTest.testShortSerialization":354,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":380,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":523,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":343,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":602,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":313,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":114,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":289,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":226,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":457,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":629,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":232,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":124,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":626,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":533,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":306,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":362,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":588,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":140,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":433,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":6,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":369,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":363,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":643,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":64,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":56,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":91,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":208,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":393,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":54,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":154,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":58,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":319,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":212,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":188,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":461,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":72,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":113,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":233,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":465,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":377,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":159,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":423,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":296,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":634,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":411,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":428,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":88,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":573,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":283,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":349,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":321,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":366,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":25,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":162,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":456,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":33,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":223,"com.google.gson.functional.MapTest.testGeneralMapField":173,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":186,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":495,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":368,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":50,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":142,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":435,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":550,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":394,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":516,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":345,"com.google.gson.MixedStreamTest.testReadMixedStreamed":5,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":624,"com.google.gson.JsonObjectTest.testDeepCopy":618,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":406,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":540,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":150,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":251,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":584,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":156,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":326,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":601,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":116,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":541,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":387,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":530,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":367,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":379,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":148,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":40,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":420,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":640,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":490,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":392,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":580,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":525,"com.google.gson.functional.ObjectTest.testNestedDeserialization":213,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":385,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":388,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":566,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":30,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":82,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":599,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":365,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":21,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":61,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":478,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":542,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":98,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":352,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":71,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":48,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":141,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":586,"com.google.gson.functional.ObjectTest.testNullSerialization":562,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":74,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":386,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":534,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":172,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":281,"com.google.gson.functional.MapTest.testInterfaceTypeMap":171,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":507,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":468,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":87,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":284,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":122,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":642,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":78,"com.google.gson.MixedStreamTest.testReadClosed":254,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":395,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":597,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":300,"com.google.gson.MixedStreamTest.testWriteClosed":4,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":32,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":578,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":90,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":447,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":638,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":104,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":86,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":24,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":20,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":118,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":93,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":190,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":577,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":41,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":644,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":329,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":43,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":76,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":582,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":429,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":266,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":14,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":370,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":305,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":401,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":220,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":492,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":23,"com.google.gson.functional.CollectionTest.testQueueDeserialization":589,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":633,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":311,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":327,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":483,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":267,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":439,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":169,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":413,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":147,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":211,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":571,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":1,"com.google.gson.functional.MapTest.testRawMapSerialization":552,"com.google.gson.JsonParserTest.testParseReader":621,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":427,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":69,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":199,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":225,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":524,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":623,"com.google.gson.functional.PrimitiveTest.testByteSerialization":351,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":449,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":497,"com.google.gson.ObjectTypeAdapterTest.testSerialize":243,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":272,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":145,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":295,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":46,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":508,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":227,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":105,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":248,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":480,"com.google.gson.functional.MapTest.testMapWithQuotes":543,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":400,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":482,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":372,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":518,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":384,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":132,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":397,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":128,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":521,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":96,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":209,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":239,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":410,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":563,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":191,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":402,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":39,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":412,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":348,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":454,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":583,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":500,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":437,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":493,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":73,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":12,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":271,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":635,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":126,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":452,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":285,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":391,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":641,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":381,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":198,"com.google.gson.functional.ObjectTest.testNestedSerialization":200,"com.google.gson.JsonObjectTest.testAddingStringProperties":619,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":26,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":299,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":486,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":515,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":517,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":551,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":224,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":153,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":252,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":258,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":194,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":265,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":361,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":89,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":115,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":262,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":301,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":111,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":201,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":38,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":485,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":503,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":51,"com.google.gson.functional.CollectionTest.testSetSerialization":236,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":59,"com.google.gson.functional.StringTest.testStringValueSerialization":488,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":592,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":44,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":15,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":63,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":574,"com.google.gson.MixedStreamTest.testWriteInvalidState":3,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":494,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":560,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":304,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":144,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":310,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":407,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":228,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":625,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":215,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":613,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":13,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":596,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":431,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":273,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":536,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":263,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":499},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243],"tindex":"d7ab1ad9-3e8b-11e6-a33d-25a0f4fe3179","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (serialize) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:264","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[],"tindex":"d7ab900a-3e8b-11e6-a33d-4111cd5be8be","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d7abde2b-3e8b-11e6-a33d-09844a2db7d6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"d7abde2c-3e8b-11e6-a33d-230d57284d3f","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"d7ac053d-3e8b-11e6-a33d-e71292eaec45","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o != null) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d7ac053e-3e8b-11e6-a33d-85bdea1f2696","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d7ac053f-3e8b-11e6-a33d-d7d18bf87fe8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"d7ac2c50-3e8b-11e6-a33d-098733d3a6bb","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == o) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"o","java.util.Date.class":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[244,245,246,247,248,0,249,250,251,252,1,253,254,2,255,3,256,257,258,4,5,6,259,260,261,262,263,7,8,9,264,265,10,11,266,12,13,19,20,21,22,23,24,25,26,27,267,28,29,268,30,31,32,33,34,35,269,270,36,37,38,39,40,41,42,43,271,44,272,273,45,46,274,47,48,49,275,50,51,52,53,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,54,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,55,373,374,375,56,57,376,58,377,59,378,379,380,381,382,383,384,385,386,387,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,388,389,96,97,390,98,99,100,101,102,103,104,105,106,107,108,391,109,110,392,393,394,395,396,111,112,397,398,399,400,401,402,403,404,405,113,406,407,408,114,409,410,411,412,413,414,115,415,416,417,418,419,420,421,116,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,117,437,438,439,440,118,441,442,443,444,445,446,447,448,449,119,120,450,451,452,453,454,121,455,456,457,458,459,460,122,123,461,462,463,124,125,126,127,464,128,129,130,465,466,467,468,131,469,470,133,134,135,136,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,137,138,139,140,141,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,142,143,144,510,511,512,513,514,145,515,516,146,147,517,148,149,518,150,151,152,153,154,519,155,156,157,158,159,160,161,520,521,522,162,163,164,165,523,166,524,525,167,168,526,527,528,529,530,531,532,533,534,535,536,537,538,169,539,540,541,542,543,544,545,546,170,547,548,549,171,550,172,173,551,552,553,174,554,555,556,557,558,559,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,560,191,561,192,193,562,194,563,195,564,196,565,197,198,199,200,566,201,202,203,204,567,568,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,569,221,222,223,224,570,225,226,227,228,229,230,231,571,232,572,573,574,575,576,577,578,579,233,580,581,582,583,234,235,584,585,236,586,587,588,589,590,591,237,238,592,593,594,239,595,596,597,598,599,600,601,602,603,604,605,606,240,607,241,242,608],"tindex":"d7ac5361-3e8b-11e6-a33d-6de1047888b8","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[609,610,611],"tindex":"d7ac7a72-3e8b-11e6-a33d-ff01b58341ee","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from.getRawType().equals(to.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d7ac7a73-3e8b-11e6-a33d-61ea42e86b41","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d7ac7a74-3e8b-11e6-a33d-8f55cbf8672d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[],"tindex":"d7aca185-3e8b-11e6-a33d-adeb7f134d34","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[612,613,614,615,616,617,618,619,266,23,24,28,620,45,46,47,48,374,375,82,83,84,88,89,94,95,391,396,125,126,132,135,140,152,530,533,534,538,541,546,553,555,222,223,224,621,622,623,624,625,626,627,628,629,630,631],"tindex":"d7aca186-3e8b-11e6-a33d-8b2582181f5d","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof java.lang.Class) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:309","type":"CtBinaryOperatorImpl","sourcecode":"(obj == null) || ((getClass()) != (obj.getClass()))"},"failures":[],"tindex":"d7acc897-3e8b-11e6-a33d-637c72f51cd3","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"typeAdapter","this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"d7acc898-3e8b-11e6-a33d-43be698c72a6","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"d7acc899-3e8b-11e6-a33d-75e528b779ca","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"d7acc89a-3e8b-11e6-a33d-21e884ebd91f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o != (o[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"o","this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"d7acc89b-3e8b-11e6-a33d-83949fa2f90c","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"contextRawType","rawSupertype":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"d7acefac-3e8b-11e6-a33d-3b651acee843","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            if (memberName != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d7acefad-3e8b-11e6-a33d-532488b60c91","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"d7acefae-3e8b-11e6-a33d-0d3faf830eb8","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"d7ad16bf-3e8b-11e6-a33d-5d7064a405b1","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d7ad3dd0-3e8b-11e6-a33d-09fbd2a502be","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"d7ad3dd1-3e8b-11e6-a33d-4570390ab24c","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl","sourcecode":"type.equals(from)"},"failures":[],"tindex":"d7ad3dd2-3e8b-11e6-a33d-95bbfe1ed102","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context","type":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d7ad64e3-3e8b-11e6-a33d-d9395a826a97","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[36,37,38,40,41,43],"tindex":"d7ad64e4-3e8b-11e6-a33d-ab060f2869cc","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"d7ad64e5-3e8b-11e6-a33d-435593a0fff8","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((obj != obj) && (token != obj)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"obj","token":"obj","com.google.gson.stream.JsonToken.NUMBER":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl","sourcecode":"lowerBound != (originalLowerBound[0])"},"failures":[],"tindex":"d7ad64e6-3e8b-11e6-a33d-69bd05efe859","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o != (o[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"o","lowerBound":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"d7ad8bf7-3e8b-11e6-a33d-dd82c0ddc67b","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(jsonElement, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:364","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_ARRAY)"},"failures":[632,633,634,635,636,637,638,639,640,641],"tindex":"d7ad8bf8-3e8b-11e6-a33d-afdb6b4ee092","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_END_ARRAY":"h"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"d7ad8bf9-3e8b-11e6-a33d-7d6ba76f53d6","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            if (memberName != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"d7ad8bfa-3e8b-11e6-a33d-5b3e5435d18c","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if ((o != o) && (token != o)) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"o","token":"o","com.google.gson.stream.JsonToken.NUMBER":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"d7ad8bfb-3e8b-11e6-a33d-15939580e8ee","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[245,246,247,248,0,249,250,251,263,7,8,9,264,266,642,643,644,45,46,274,47,48,275,372,55,373,374,375,56,57,376,58,377,59,378,379,380,381,382,383,385,60,61,62,63,64,65,66,67,390,103,107,391,422,429,433,440,443,466,467,468,153,154,521,522,523,527,528,175,214,215,217,569,221,222,223,224,570,225,588,595,596,597,598,599,600,602,645],"tindex":"d7adb30c-3e8b-11e6-a33d-078c5875247d","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"d7adb30d-3e8b-11e6-a33d-dfac2fb4a697","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d7adb30e-3e8b-11e6-a33d-f7d646ec821c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"d7adda1f-3e8b-11e6-a33d-a7c20f6cbb7f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d7adda20-3e8b-11e6-a33d-f370d35ee7d8","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"d7adda21-3e8b-11e6-a33d-8dce39ae9176","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"d7adda22-3e8b-11e6-a33d-7d422bc0e9a0","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267294839/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":42,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":418,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":571,"com.google.gson.functional.StringTest.testStringValueDeserialization":569,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":177,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":524,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":235,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":39,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":354,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":129,"com.google.gson.MixedStreamTest.testWriteLenient":592,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":533,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":103,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":78,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":95,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":318,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":283,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":38,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":465,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":375,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":244,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":55,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":191,"com.google.gson.functional.ObjectTest.testSingletonLists":316,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":525,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":228,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":572,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":601,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":123,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":23,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":543,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":333,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":18,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":286,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":551,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":585,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":359,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":275,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":397,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":159,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":4,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":220,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":389,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":158,"com.google.gson.functional.EnumTest.testEnumCaseMapping":37,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":570,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":597,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":219,"com.google.gson.functional.JsonTreeTest.testToJsonTree":482,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":546,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":217,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":605,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":499,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":447,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":517,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":194,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":88,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":362,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":582,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":329,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":296,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":236,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":334,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":387,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":183,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":342,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":547,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":187,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":301,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":542,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":280,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":259,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":498,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":345,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":443,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":523,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":130,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":151,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":272,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":514,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":478,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":109,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":173,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":136,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":281,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":273,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":341,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":437,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":12,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":324,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":562,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":46,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":169,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":240,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":469,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":208,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":53,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":396,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":111,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":20,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":175,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":531,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":516,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":182,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":365,"com.google.gson.functional.CollectionTest.testSetDeserialization":94,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":376,"com.google.gson.functional.EnumTest.testEnumSet":28,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":328,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":471,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":264,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":54,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":110,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":504,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":335,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":52,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":277,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":395,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":288,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":27,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":384,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":289,"com.google.gson.functional.MapTest.testHashMapDeserialization":140,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":233,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":529,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":420,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":563,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":64,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":416,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":26,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":474,"com.google.gson.functional.MapTest.testSortedMap":162,"com.google.gson.functional.MapTest.testMapSerialization":157,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":419,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":270,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":406,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":450,"com.google.gson.functional.MapTest.testSerializeMaps":143,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":567,"com.google.gson.functional.MapTest.testComplexKeysSerialization":170,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":470,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":174,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":457,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":35,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":364,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":203,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":602,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":76,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":33,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":400,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":41,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":344,"com.google.gson.functional.MapTest.testStringKeyDeserialization":172,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":115,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":303,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":176,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":239,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":234,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":379,"com.google.gson.functional.PrettyPrintingTest.testMap":398,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":81,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":24,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":494,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":17,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":456,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":575,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":579,"com.google.gson.functional.CollectionTest.testQueueSerialization":85,"com.google.gson.functional.MapTest.testMapSerializationEmpty":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":511,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":265,"com.google.gson.functional.MapTest.testMapOfMapSerialization":156,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":256,"com.google.gson.JavaSerializationTest.testMapIsSerializable":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":519,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":91,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":267,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":371,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":124,"com.google.gson.functional.FieldNamingTest.testIdentity":568,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":573,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":112,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":426,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":346,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":45,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":105,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":315,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":481,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":222,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":5,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":179,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":574,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":262,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":535,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":506,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":545,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":137,"com.google.gson.functional.MapTest.testMapSubclassSerialization":142,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":299,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":62,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":413,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":473,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":254,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":381,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":549,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":590,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":131,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":493,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":22,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":51,"com.google.gson.functional.EnumTest.testEnumSubclass":31,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":276,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":19,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":331,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":221,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":178,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":606,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":282,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":114,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":71,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":224,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":358,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":260,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":357,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":206,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":10,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":446,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":266,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":327,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":44,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":538,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":317,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":139,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":445,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":134,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":439,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":48,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":363,"com.google.gson.CommentsTest.testParseComments":599,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":119,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":197,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":279,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":452,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":462,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":405,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":161,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":577,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":600,"com.google.gson.MixedStreamTest.testReadInvalidState":589,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":372,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":60,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":540,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":407,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":232,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":458,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":459,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":603,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":249,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":369,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":521,"com.google.gson.functional.MapTest.testMapDeserialization":149,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":515,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":403,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":138,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":190,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":148,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":215,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":196,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":192,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":77,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":32,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":491,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":332,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":66,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":382,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":500,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":59,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":75,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":355,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":160,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":399,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":544,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":121,"com.google.gson.functional.PrimitiveTest.testShortSerialization":297,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":199,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":285,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":391,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":255,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":284,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":505,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":564,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":30,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":80,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":412,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":144,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":248,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":101,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":305,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":132,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":532,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":596,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":312,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":306,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":43,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":113,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":214,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":486,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":550,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":291,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":484,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":116,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":261,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":352,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":323,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":36,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":68,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":472,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":377,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":117,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":189,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":522,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":238,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":508,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":527,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":82,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":225,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":292,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":263,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":309,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":127,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":29,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":195,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":424,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":408,"com.google.gson.functional.MapTest.testGeneralMapField":166,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":321,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":436,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":311,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":180,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":378,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":534,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":164,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":186,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":487,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":287,"com.google.gson.MixedStreamTest.testReadMixedStreamed":595,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":152,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":502,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":6,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":96,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":476,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":268,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":390,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":14,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":520,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":153,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":560,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":141,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":120,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":310,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":432,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":554,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":518,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":135,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":427,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":485,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":126,"com.google.gson.functional.ObjectTest.testNestedDeserialization":353,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":339,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":360,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":421,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":205,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":388,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":308,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":461,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":40,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":154,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":576,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":50,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":295,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":67,"com.google.gson.JavaSerializationTest.testListIsSerializable":16,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":107,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":133,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":99,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":70,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":559,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":145,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":165,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":223,"com.google.gson.functional.MapTest.testInterfaceTypeMap":163,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":448,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":380,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":210,"com.google.gson.FieldAttributesTest.testModifiers":0,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":226,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":34,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":74,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":488,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":386,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":242,"com.google.gson.MixedStreamTest.testWriteClosed":594,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":87,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":423,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":213,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":548,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":56,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":209,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":464,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":350,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":541,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":216,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":325,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":86,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":555,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":271,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":557,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":72,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":528,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":428,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":313,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":367,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":247,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":496,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":366,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":433,"com.google.gson.functional.CollectionTest.testQueueDeserialization":102,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":463,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":253,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":269,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":581,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":539,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":556,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":150,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":510,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":188,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":351,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":79,"com.google.gson.functional.MapTest.testRawMapSerialization":168,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":588,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":526,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":65,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":337,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":411,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":201,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":7,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":9,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":21,"com.google.gson.functional.PrimitiveTest.testByteSerialization":294,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":438,"com.google.gson.ObjectTypeAdapterTest.testSerialize":607,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":184,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":237,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":104,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":449,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":565,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":2,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":57,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":578,"com.google.gson.functional.MapTest.testMapWithQuotes":155,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":495,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":580,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":108,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":475,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":125,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":415,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":492,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":374,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":193,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":47,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":349,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":404,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":507,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":326,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":497,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":509,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":553,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":290,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":93,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":441,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":49,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":537,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":69,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":429,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":558,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":414,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":604,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":25,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":61,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":227,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":122,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":336,"com.google.gson.functional.ObjectTest.testNestedSerialization":338,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":128,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":185,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":241,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":584,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":431,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":167,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":409,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":483,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":13,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":593,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":330,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":425,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":304,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":212,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":512,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":243,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":598,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":490,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":552,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":583,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":444,"com.google.gson.functional.CollectionTest.testSetSerialization":98,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":118,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":401,"com.google.gson.functional.StringTest.testStringValueSerialization":586,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":587,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":42,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":83,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":368,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":435,"com.google.gson.MixedStreamTest.testWriteInvalidState":591,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":246,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":252,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":453,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":503,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":566,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":361,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":1,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":430,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":385,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":530,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":147,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":392,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":440},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1246","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_ARRAY)"},"failures":[0],"tindex":"07c03866-3e8c-11e6-b9fc-95e91148fba3","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_END_ARRAY":"modifier"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"07c08687-3e8c-11e6-b9fc-9732ab480ac7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"07c0ad98-3e8c-11e6-b9fc-5f7b8faeccc0","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"07c0ad99-3e8c-11e6-b9fc-1b10ae121fd1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[1],"tindex":"07c0ad9a-3e8c-11e6-b9fc-e3932e836b64","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"07c0d4ab-3e8c-11e6-b9fc-9fdad4a21d28","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"07c0d4ac-3e8c-11e6-b9fc-f5280c997bff","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07c0d4ad-3e8c-11e6-b9fc-2f8a42e6c130","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"07c0fbbe-3e8c-11e6-b9fc-9563f4e7a26b","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"07c0fbbf-3e8c-11e6-b9fc-29478fbeb873","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Class<?>) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:438","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599],"tindex":"07c122d0-3e8c-11e6-b9fc-d90952dd7f5b","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:506","type":"CtBinaryOperatorImpl","sourcecode":"peekStack != (com.google.gson.stream.JsonScope.NONEMPTY_OBJECT)"},"failures":[],"tindex":"07c122d1-3e8c-11e6-b9fc-adf6737bb22d","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == offset) {\n        {\n            if (offset != offset) {\n                {\n                    com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n                    java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"offset","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"07c149e2-3e8c-11e6-b9fc-f1648b3c3a70","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[],"tindex":"07c149e3-3e8c-11e6-b9fc-3b9e06d8049e","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[54,209,223,240,299,449,480],"tindex":"07c149e4-3e8c-11e6-b9fc-850e7e4793fd","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[3,30,125,334,359,360,600,389,390,391],"tindex":"07c170f5-3e8c-11e6-b9fc-cd7c3ea5af7c","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.TypeVariable) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07c170f6-3e8c-11e6-b9fc-8560dec3d9ff","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"07c170f7-3e8c-11e6-b9fc-47761ebbfc8b","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern != null) {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[348,507,509,510,539],"tindex":"07c170f8-3e8c-11e6-b9fc-b10fdfbe2f2d","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[163,166,177,478],"tindex":"07c170f9-3e8c-11e6-b9fc-054ad3bcef5d","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement instanceof com.google.gson.JsonArray) {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07c1980a-3e8c-11e6-b9fc-cb8a78bffb29","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    return (removeInternalByKey(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"07c1980b-3e8c-11e6-b9fc-5dbcebc7bb71","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"07c1980c-3e8c-11e6-b9fc-814bf27e66ca","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"07c1980d-3e8c-11e6-b9fc-9bad4d89f205","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07c1980e-3e8c-11e6-b9fc-1d06dbfc6879","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    return toJsonTree(src, src.getClass());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"07c1bf1f-3e8c-11e6-b9fc-d7d61436a5d9","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[7,8,9,601,15,20,26,112,119,126,134,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,348,398,399,413,414,459,462,463,464,474,475,476,477,478,505,529,531],"tindex":"07c1bf20-3e8c-11e6-b9fc-634fe7cc5eb3","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07c1bf21-3e8c-11e6-b9fc-89571c5b0b6d","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07c1bf22-3e8c-11e6-b9fc-fd1e03a397fd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[602],"tindex":"07c1e533-3e8c-11e6-b9fc-87c7a505a0b5","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"07c1e534-3e8c-11e6-b9fc-1d597423d913","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[549,550,551,552,554,555,557,558,603,604,605],"tindex":"07c20c45-3e8c-11e6-b9fc-3b5620efc7e2","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[294],"tindex":"07c20c46-3e8c-11e6-b9fc-93630e716d0c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"07c20c47-3e8c-11e6-b9fc-bf9abb73f9f9","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"07c20c48-3e8c-11e6-b9fc-5d43e52887e2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"07c20c49-3e8c-11e6-b9fc-4599999399a4","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07c20c4a-3e8c-11e6-b9fc-5db3d6eee713","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:795","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME)"},"failures":[],"tindex":"07c2335b-3e8c-11e6-b9fc-276135b08fcc","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == offset) {\n        {\n            if (offset != offset) {\n                {\n                    com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n                    java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"length","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1189","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"07c2335c-3e8c-11e6-b9fc-d9e63aa1acba","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if ((targetSize == targetSize) || (p == targetSize)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"targetSize","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[2,3,4,5,6,7,8,9,10,11,606,607,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599],"tindex":"07c2335d-3e8c-11e6-b9fc-5f2589224092","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"07c25a6e-3e8c-11e6-b9fc-57d5d305dc18","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if ((src != src) && (token != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[3,378,380,384,386,387,389,407,409,415,416,418,419,421,423,431,432,544],"tindex":"07c25a6f-3e8c-11e6-b9fc-57b2d616e11a","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07c25a70-3e8c-11e6-b9fc-c3bc3a1911be","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"07c28181-3e8c-11e6-b9fc-b70ec3c8d74f","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[],"tindex":"07c28182-3e8c-11e6-b9fc-d909a8f5b01f","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (!lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"07c28183-3e8c-11e6-b9fc-ebf665cd9357","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467267448305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":46,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":270,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":70,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":5,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":150,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":466,"com.google.gson.MixedStreamTest.testWriteLenient":24,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":413,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":184,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":199,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":126,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":135,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":448,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":148,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":207,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":93,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":392,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":429,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":485,"com.google.gson.functional.ObjectTest.testSingletonLists":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":180,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":208,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":71,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":308,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":412,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":456,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":28,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":398,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":78,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":61,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":432,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":359,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":42,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":380,"com.google.gson.functional.EnumTest.testEnumCaseMapping":147,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":30,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":69,"com.google.gson.functional.JsonTreeTest.testToJsonTree":320,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":66,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":306,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":393,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":164,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":344,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":368,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":6,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":313,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":407,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":454,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":255,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":357,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":219,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":369,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":40,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":286,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":459,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":356,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":384,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":332,"com.google.gson.JsonParserTest.testParseString":366,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":247,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":241,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":54,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":225,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":363,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":179,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":414,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":411,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":327,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":350,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":472,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":124,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":248,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":50,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":224,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":33,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":35,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":452,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":154,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":233,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":381,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":446,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":10,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":183,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":174,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":421,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":285,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":477,"com.google.gson.functional.CollectionTest.testSetDeserialization":433,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":94,"com.google.gson.functional.EnumTest.testEnumSet":141,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":215,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":101,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":288,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":111,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":220,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":99,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":358,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":423,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":37,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":311,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":251,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":36,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":268,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":321,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":362,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":348,"com.google.gson.functional.MapTest.testMapSerialization":115,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":271,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":408,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":426,"com.google.gson.functional.MapTest.testSerializeMaps":110,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":197,"com.google.gson.functional.MapTest.testComplexKeysSerialization":122,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":59,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":315,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":434,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":18,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":404,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":482,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":309,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":64,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":394,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":151,"com.google.gson.functional.MapTest.testStringKeyDeserialization":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":290,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":259,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":125,"com.google.gson.functional.PrettyPrintingTest.testMap":62,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":339,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":161,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":272,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":27,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":75,"com.google.gson.functional.MapTest.testMapSerializationEmpty":123,"com.google.gson.functional.CollectionTest.testQueueSerialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":171,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":395,"com.google.gson.functional.MapTest.testMapOfMapSerialization":114,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":239,"com.google.gson.JavaSerializationTest.testMapIsSerializable":401,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":244,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":267,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":296,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":72,"com.google.gson.functional.FieldNamingTest.testIdentity":198,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":387,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":279,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":461,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":153,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":201,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":209,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":319,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":360,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":73,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":283,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":242,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":438,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":192,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":266,"com.google.gson.functional.MapTest.testMapSubclassSerialization":109,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":258,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":205,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":431,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":21,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":85,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":341,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":415,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":476,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":98,"com.google.gson.functional.EnumTest.testEnumSubclass":144,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":245,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":29,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":455,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":229,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":282,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":289,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":479,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":156,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":439,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":300,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":351,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":371,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":240,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":187,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":447,"com.google.gson.MixedStreamTest.testWriteNulls":22,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":55,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":314,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":428,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":390,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":293,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":486,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":276,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":424,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":74,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":117,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":90,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":189,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":257,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":82,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":364,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":232,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":273,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":236,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":177,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":252,"com.google.gson.functional.MapTest.testMapDeserialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":173,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":67,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":108,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":484,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":112,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":305,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":16,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":14,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":373,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":483,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":441,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":218,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":226,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":323,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":342,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":165,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":430,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":155,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":328,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":63,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":116,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":191,"com.google.gson.functional.PrimitiveTest.testShortSerialization":256,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":346,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":44,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":403,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":7,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":194,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":143,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":370,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":128,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":204,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":367,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":376,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":139,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":260,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":383,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":487,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":405,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":420,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":263,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":152,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":227,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":473,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":475,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":157,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":467,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":291,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":464,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":451,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":146,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":149,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":324,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":442,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":337,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":178,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":168,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":349,"com.google.gson.stream.JsonWriterTest.testNullStringValue":19,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":347,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":303,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":243,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":261,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":45,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":15,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":142,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":417,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":372,"com.google.gson.functional.MapTest.testGeneralMapField":119,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":450,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":49,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":57,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":284,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":185,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":158,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":231,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":331,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":250,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":388,"com.google.gson.MixedStreamTest.testReadMixedStreamed":419,"com.google.gson.JsonObjectTest.testDeepCopy":396,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":237,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":136,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":361,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":488,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":445,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":43,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":176,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":379,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":107,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":375,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":262,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":294,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":81,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":88,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":175,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":280,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":298,"com.google.gson.functional.ObjectTest.testNestedDeserialization":465,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":79,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":223,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":468,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":299,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":41,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":275,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":435,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":97,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":254,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":478,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":203,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":416,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":138,"com.google.gson.functional.ObjectTest.testNullSerialization":216,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":326,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":377,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":4,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":230,"com.google.gson.functional.MapTest.testInterfaceTypeMap":3,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":340,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":11,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":418,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":84,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":145,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":343,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":159,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":39,"com.google.gson.MixedStreamTest.testWriteClosed":26,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":132,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":469,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":212,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":474,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":102,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":302,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":278,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":228,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":190,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":12,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":213,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":131,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":400,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":89,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":480,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":181,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":385,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":264,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":235,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":317,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":47,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":316,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":277,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":238,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":188,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":427,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":2,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":170,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":333,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":463,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":127,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":20,"com.google.gson.functional.MapTest.testRawMapSerialization":121,"com.google.gson.JsonParserTest.testParseReader":365,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":221,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":322,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":410,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":17,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":353,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":51,"com.google.gson.functional.PrimitiveTest.testByteSerialization":253,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":307,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":355,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":335,"com.google.gson.ObjectTypeAdapterTest.testSerialize":489,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":329,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":200,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":56,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":195,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":103,"com.google.gson.functional.MapTest.testMapWithQuotes":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":162,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":287,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":297,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":160,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":92,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":95,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":462,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":167,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":246,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":1,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":163,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":169,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":202,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":310,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":48,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":186,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":325,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":281,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":206,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":295,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":457,"com.google.gson.functional.ObjectTest.testNestedSerialization":222,"com.google.gson.JsonObjectTest.testAddingStringProperties":397,"com.google.gson.internal.LinkedTreeMapTest.testClear":402,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":46,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":234,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":330,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":80,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":120,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":83,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":60,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":25,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":32,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":217,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":304,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":443,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":440,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":458,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":399,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":76,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":0,"com.google.gson.functional.CollectionTest.testSetSerialization":137,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":471,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":65,"com.google.gson.functional.StringTest.testStringValueSerialization":77,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":292,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":334,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":9,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":436,"com.google.gson.MixedStreamTest.testWriteInvalidState":23,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":214,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":58,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":166,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":196,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":389,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":312,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":391,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":470,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":38,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":182,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":336,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":53},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c55d6a87-3f3c-11e6-9215-8130328dc42a","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.TypeVariable)) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"tindex":"c55ddfb8-3f3c-11e6-9215-497bd74d59b7","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c55e06c9-3f3c-11e6-9215-eb142cf94fc6","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if ((key instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c55e06ca-3f3c-11e6-9215-8d2aece826da","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:733","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c55e2ddb-3f3c-11e6-9215-e93c078f5421","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"index","com.google.gson.stream.JsonReader.NUMBER_CHAR_DECIMAL":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c55e2ddc-3f3c-11e6-9215-9f68f92ab676","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,0,55,56,57,58,1,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,2,113,114,115,116,117,3,118,4,119,120,121,122,123,124,125,5,126,127,128,129,130,131,132,6,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,7,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,8,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,9,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,10,302,11,303,304,305,12,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,13,14,344,15,16,345,346,347,17,18,348,349,350,351,352,353,354,355,356,357,358,359,360,361],"tindex":"c55e54ed-3f3c-11e6-9215-e586883c2f09","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[362,363,364,158,163,164,186],"tindex":"c55e7bfe-3f3c-11e6-9215-eb08b7d99db3","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c55ea30f-3f3c-11e6-9215-69776b35e73e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if ((!(b.isJsonNull())) && ((b.peek()) != a)) {\n        {\n            if (b == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c55ea310-3f3c-11e6-9215-9931a1497593","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[7],"tindex":"c55eca21-3f3c-11e6-9215-733fe9add907","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:382","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c55eca22-3f3c-11e6-9215-83e9c316d394","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"c55ef133-3f3c-11e6-9215-6bad4fa205f3","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c55ef134-3f3c-11e6-9215-a1a9b4c7ea88","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n    out.value(dateFormatAsString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[365,366,367,368,369,370,371,78,82,372,83,373,374,375,376,377,378,379,380,381,382,140,383,384,199,200,202,203,205,206,270,277,278,385,386,387,299,300,301,303,304,306,319,350,388,389,353,390,391,392,393,394,395,396,397],"tindex":"c55f1845-3f3c-11e6-9215-4d072a03ade8","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"c55f3f56-3f3c-11e6-9215-6d06edb76993","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl"},"failures":[],"tindex":"c55f3f57-3f3c-11e6-9215-57543251759c","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc.equals(typeOfSrc)) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfSrc","type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[86,398,399,88,400,89],"tindex":"c55f6668-3f3c-11e6-9215-07fea273969a","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:391","type":"CtUnaryOperatorImpl"},"failures":[401,365,366,33,367,402,368,403,371,404,405,406,407,408,78,372,409,410,411,373,378,379,380,382,412,140,413,414,415,383,416,384,166,205,270,417,277,278,386,295,300,301,303,304,306,308,317,318,319,320,335,336,348,349,350,389,393,418],"tindex":"c55f6669-3f3c-11e6-9215-2d341a688474","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[20,21,23,26,419,420,33,34,35,421,422,423,45,46,57,424,58,60,425,63,64,68,78,81,426,82,372,83,410,86,398,399,87,88,400,427,89,90,92,93,94,95,428,97,98,99,100,101,429,102,103,104,430,105,431,106,2,432,3,4,119,122,5,126,128,133,433,135,137,140,145,434,150,435,151,436,152,437,153,154,413,414,415,383,416,155,438,439,156,440,441,442,7,443,176,8,190,194,195,196,197,198,199,200,202,203,204,205,206,444,445,208,446,209,210,447,448,211,449,450,212,451,452,213,453,215,454,217,455,456,220,457,221,222,458,224,459,460,225,461,226,227,462,228,463,464,465,466,467,264,9,265,266,267,268,270,271,468,272,469,417,273,274,275,276,277,278,279,280,281,470,282,284,471,285,286,472,473,289,291,292,299,300,301,10,302,11,303,304,474,475,305,12,306,476,308,311,312,313,314,315,477,316,317,318,319,320,321,322,323,478,324,325,326,479,480,327,481,328,482,483,329,332,333,334,341,13,484,485,15,16,486,345,347,18,487,348,488,349,350,489,351,352,358],"tindex":"c55fb48a-3f3c-11e6-9215-df171fff85a6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c55fb48b-3f3c-11e6-9215-d728637c9942","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (!(token instanceof java.lang.reflect.GenericArrayType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:902","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c55fb48c-3f3c-11e6-9215-2f85aee31b9e","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_NONE":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c55fdb9d-3f3c-11e6-9215-ad9a61b8cc5f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if ((!(b.isJsonNull())) && ((b.peek()) != a)) {\n        {\n            if (b == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (a == b) || ((a != null) && (a.equals(b)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"a","jsonReader":"b","element":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c55fdb9e-3f3c-11e6-9215-9bc9e7e31ee2","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:159","type":"CtInvocationImpl"},"failures":[],"tindex":"c55fdb9f-3f3c-11e6-9215-59a6500986d1","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type.isAssignableFrom(rawType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343629305/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","java.util.Queue.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":25,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
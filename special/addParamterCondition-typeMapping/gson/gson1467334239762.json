{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":464,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":76,"com.google.gson.functional.StringTest.testStringValueDeserialization":74,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":674,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":178,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":278,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":611,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":382,"com.google.gson.stream.JsonWriterTest.testRepeatedName":667,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":219,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":364,"com.google.gson.MixedStreamTest.testWriteLenient":6,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":227,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":287,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":308,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":179,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":196,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":324,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":430,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":214,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":316,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":117,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":391,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":127,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":572,"com.google.gson.functional.ObjectTest.testSingletonLists":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":279,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":319,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":77,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":375,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":658,"com.google.gson.stream.JsonWriterTest.testStrings":685,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":504,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":524,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":297,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":342,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":13,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":433,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":106,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":651,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":90,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":92,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":66,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":422,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":679,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":628,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":160,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":367,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":599,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":33,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":159,"com.google.gson.functional.EnumTest.testEnumCaseMapping":213,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":15,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":75,"com.google.gson.GenericArrayTypeTest.testNotEquals":629,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":366,"com.google.gson.functional.JsonTreeTest.testToJsonTree":540,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":300,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":520,"com.google.gson.stream.JsonWriterTest.testNulls":665,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":253,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":639,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":271,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":377,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":575,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":189,"com.google.gson.functional.ObjectTest.testNullDeserialization":354,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":532,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":87,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":336,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":443,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":596,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":383,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":343,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":31,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":488,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":351,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":595,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":301,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":448,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":558,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":447,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":675,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":296,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":427,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":640,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":252,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":454,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":48,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":277,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":404,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":152,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":228,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":419,"com.google.gson.ParameterizedTypeTest.testNotEquals":624,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":268,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":590,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":633,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":490,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":623,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":174,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":234,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":428,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":420,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":42,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":350,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":19,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":21,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":330,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":681,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":170,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":226,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":387,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":610,"com.google.gson.metrics.PerformanceTest.testDummy":18,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":320,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":511,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":125,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":492,"com.google.gson.stream.JsonWriterTest.testEmptyArray":659,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":176,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":521,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":285,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":270,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":487,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":535,"com.google.gson.functional.CollectionTest.testSetDeserialization":195,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":118,"com.google.gson.functional.EnumTest.testEnumSet":204,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":216,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":335,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":411,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":126,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":491,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":258,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":344,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":124,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":598,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":424,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":26,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":435,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":678,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":28,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":530,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":436,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":613,"com.google.gson.functional.MapTest.testHashMapDeserialization":141,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":380,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":283,"com.google.gson.MixedStreamTest.testReadNulls":7,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":22,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":466,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":462,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":541,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":528,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":586,"com.google.gson.functional.MapTest.testSortedMap":163,"com.google.gson.functional.MapTest.testMapSerialization":158,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":465,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":98,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":417,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":55,"com.google.gson.functional.MapTest.testSerializeMaps":144,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":306,"com.google.gson.functional.MapTest.testComplexKeysSerialization":171,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":215,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":175,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":647,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":62,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":211,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":534,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":584,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":553,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":525,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":209,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":69,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":221,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":353,"com.google.gson.functional.MapTest.testStringKeyDeserialization":173,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":59,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":496,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":450,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":177,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":386,"com.google.gson.functional.PrettyPrintingTest.testMap":67,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":381,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":565,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":248,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":468,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":526,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":12,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":61,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":641,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":80,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":84,"com.google.gson.functional.MapTest.testMapSerializationEmpty":172,"com.google.gson.functional.CollectionTest.testQueueSerialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":265,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":412,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":682,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":684,"com.google.gson.functional.MapTest.testMapOfMapSerialization":157,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":403,"com.google.gson.JavaSerializationTest.testMapIsSerializable":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":273,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":192,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":661,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":414,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":656,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":505,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":78,"com.google.gson.functional.FieldNamingTest.testIdentity":307,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":493,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":478,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":669,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":356,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":225,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":310,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":321,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":539,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":664,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":369,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":600,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":79,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":484,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":236,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":289,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":299,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":655,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":138,"com.google.gson.functional.MapTest.testMapSubclassSerialization":143,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":446,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":134,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":314,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":218,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":3,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":104,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":401,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":567,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":247,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":461,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":523,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":123,"com.google.gson.functional.EnumTest.testEnumSubclass":207,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":423,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":14,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":340,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":368,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":483,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":605,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":429,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":495,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":548,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":371,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":238,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":670,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":407,"com.google.gson.stream.JsonWriterTest.testTwoNames":660,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":237,"com.google.gson.stream.JsonWriterTest.testNullName":666,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":509,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":51,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":592,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":334,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":413,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":224,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":405,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":672,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":618,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":292,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":323,"com.google.gson.MixedStreamTest.testWriteNulls":4,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":140,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":50,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":668,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":232,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":44,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":533,"com.google.gson.CommentsTest.testParseComments":591,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":500,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":578,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":426,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":474,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":97,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":82,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":162,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":94,"com.google.gson.MixedStreamTest.testReadInvalidState":1,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":294,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":445,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":619,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":99,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":657,"com.google.gson.JsonParserTest.testParseMixedArray":646,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":379,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":606,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":63,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":471,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":396,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":275,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":440,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":47,"com.google.gson.functional.MapTest.testMapDeserialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":269,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":72,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":139,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":571,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":632,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":149,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":518,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":577,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":573,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":554,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":208,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":245,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":341,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":357,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":543,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":568,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":254,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":131,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":235,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":552,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":68,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":161,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":627,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":298,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":365,"com.google.gson.functional.PrimitiveTest.testShortSerialization":444,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":502,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":580,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":432,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":35,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":402,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":259,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":378,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":303,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":206,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":181,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":313,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":145,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":395,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":202,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":452,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":230,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":649,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":286,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":585,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":11,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":635,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":453,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":603,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":223,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":358,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":494,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":517,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":240,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":650,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":438,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":65,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":408,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":497,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":362,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":329,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":212,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":217,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":545,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":255,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":563,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":498,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":625,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":276,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":579,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":385,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":262,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":589,"com.google.gson.stream.JsonWriterTest.testNullStringValue":663,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":281,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":183,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":514,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":372,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":439,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":410,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":456,"com.google.gson.stream.JsonWriterTest.testEmptyObject":677,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":36,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":205,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":576,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":470,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":100,"com.google.gson.functional.MapTest.testGeneralMapField":167,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":327,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":41,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":458,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":56,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":485,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":288,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":241,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":376,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":557,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":434,"com.google.gson.MixedStreamTest.testReadMixedStreamed":10,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":256,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":397,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":197,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":588,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":601,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":680,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":318,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":415,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":34,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":620,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":274,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":154,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":137,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":142,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":457,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":501,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":96,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":109,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":617,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":398,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":648,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":272,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":614,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":233,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":479,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":239,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":583,"com.google.gson.functional.ObjectTest.testNestedDeserialization":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":507,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":93,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":348,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":467,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":508,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":32,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":455,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":473,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":81,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":155,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":220,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":122,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":442,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":544,"com.google.gson.JavaSerializationTest.testListIsSerializable":622,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":231,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":312,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":200,"com.google.gson.functional.ObjectTest.testNullSerialization":337,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":547,"com.google.gson.stream.JsonWriterTest.testDoubles":683,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":136,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":146,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":166,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":370,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":53,"com.google.gson.functional.MapTest.testInterfaceTypeMap":164,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":644,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":566,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":513,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":373,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":210,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":602,"com.google.gson.MixedStreamTest.testReadClosed":2,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":551,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":242,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":30,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":389,"com.google.gson.MixedStreamTest.testWriteClosed":9,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":188,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":302,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":328,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":516,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":612,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":128,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":512,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":476,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":360,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":472,"com.google.gson.stream.JsonWriterTest.testLongs":616,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":295,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":331,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":519,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":187,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":110,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":604,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":418,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":112,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":549,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":282,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":480,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":460,"com.google.gson.stream.JsonWriterTest.testNumbers":645,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":652,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":394,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":250,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":38,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":536,"com.google.gson.functional.CollectionTest.testQueueDeserialization":203,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":475,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":607,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":400,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":416,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":463,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":293,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":151,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":352,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":676,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":264,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":361,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":559,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":180,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":0,"com.google.gson.functional.MapTest.testRawMapSerialization":169,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":280,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":637,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":346,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":542,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":103,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":582,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":626,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":43,"com.google.gson.functional.PrimitiveTest.testByteSerialization":441,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":522,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":561,"com.google.gson.ObjectTypeAdapterTest.testSerialize":643,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":555,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":384,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":630,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":631,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":309,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":54,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":304,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":83,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":129,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":597,"com.google.gson.functional.MapTest.testMapWithQuotes":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":249,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":392,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":85,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":489,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":587,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":506,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":642,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":246,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":116,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":671,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":574,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":119,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":359,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":261,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":339,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":425,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":60,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":251,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":263,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":311,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":437,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":529,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":194,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":46,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":291,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":546,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":481,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":113,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":609,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":315,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":527,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":133,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":374,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":615,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":503,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":636,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":345,"com.google.gson.functional.ObjectTest.testNestedSerialization":347,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":37,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":89,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":388,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":556,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":95,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":168,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":101,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":64,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":8,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":17,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":686,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":338,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":477,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":451,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":515,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":266,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":16,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":390,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":244,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":349,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":107,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":638,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":88,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":49,"com.google.gson.functional.CollectionTest.testSetSerialization":199,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":486,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":70,"com.google.gson.functional.StringTest.testStringValueSerialization":91,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":499,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":560,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":184,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":222,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":653,"com.google.gson.MixedStreamTest.testWriteInvalidState":5,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":40,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":332,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":393,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":58,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":399,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":20,"com.google.gson.stream.JsonWriterTest.testBooleans":662,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":257,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":305,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":531,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":482,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":29,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":634,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":284,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":562,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":148,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":673,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":23,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":45},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cc5778-3f25-11e6-8a4d-b955fbb61d52","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"d4cccca9-3f25-11e6-8a4d-a7be064416c0","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == longSerializationPolicy) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextLong();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cd1aca-3f25-11e6-8a4d-5558ac384522","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:520","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cd41db-3f25-11e6-8a4d-0336cac8e749","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"indexOfSubstring","com.google.gson.stream.JsonScope.DANGLING_NAME":"indexOfSubstring"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cd41dc-3f25-11e6-8a4d-e74489a0e9b1","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cd41dd-3f25-11e6-8a4d-c7bdf5f1b502","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        toJson(src, src.getClass(), writer);\n    } else {\n        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src","value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cd68ee-3f25-11e6-8a4d-5d933984a921","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cd68ef-3f25-11e6-8a4d-3deb2b3fbb6d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        {\n            if (b == b) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (b != null) {\n                        {\n                            return (a == b) || ((a != null) && (a.equals(b)));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"d4cd68f0-3f25-11e6-8a4d-63cb68383e68","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type.getRawType().equals(type.getRawType())) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","to":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cd68f1-3f25-11e6-8a4d-897d3fba1f92","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if ((typeOfSrc instanceof java.lang.reflect.ParameterizedType) && (!(typeOfSrc.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"typeOfSrc","type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cd9002-3f25-11e6-8a4d-c7827d17b6e5","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cd9003-3f25-11e6-8a4d-57a9334c801c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl"},"failures":[],"tindex":"d4cd9004-3f25-11e6-8a4d-ef7a8bb089d8","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cdb715-3f25-11e6-8a4d-2f1c2ded3db4","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cdb716-3f25-11e6-8a4d-35bc8ab8e4c1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1254","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cdb717-3f25-11e6-8a4d-e90f7c18980c","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop == newTop) || (p == newTop)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"newTop","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[12,13,14,23,24,25,26,27,28,29,30,31,32,33,35,64,65,97,98,99,100,101,102,103,602,603,604,121,127,131,133,139,140,178,202,219,220,221,222,223,224,225,226,275,282,286,294,298,308,309,310,311,312,364,480,484,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,507,531,533,564,565,566,574,575,580,605,597,598,599,600,601],"tindex":"d4cdb718-3f25-11e6-8a4d-d3bcdfd81525","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[92],"tindex":"d4cdde29-3f25-11e6-8a4d-09bcca60459d","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"src","com.google.gson.LongSerializationPolicy.DEFAULT":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cdde2a-3f25-11e6-8a4d-97875e01cdb2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4ce053b-3f25-11e6-8a4d-99aafd405635","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4ce053c-3f25-11e6-8a4d-811039ea5947","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:948","type":"CtBinaryOperatorImpl"},"failures":[606,607,608,609,610,611,612,613,614,615],"tindex":"d4ce053d-3f25-11e6-8a4d-638bb07a76cb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_NONE":"h"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[13,14,262,272,276,277,616,617,618],"tindex":"d4ce053e-3f25-11e6-8a4d-4fd9065b1d99","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4ce2c4f-3f25-11e6-8a4d-21a5a4b29e51","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == longSerializationPolicy) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextLong();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            out.value(value.toString());\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4ce2c50-3f25-11e6-8a4d-a7f832c13f18","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[2,6,8,619,620,621,622,623,624,23,27,50,52,625,73,96,114,116,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,138,141,142,145,146,147,148,149,150,152,153,154,155,158,159,160,161,163,165,168,170,171,172,173,174,175,176,177,180,183,184,185,186,187,189,191,192,193,195,197,198,200,202,203,204,205,206,207,208,212,232,233,251,280,315,334,433,477,491,493,502,507,521,528,586,587,588,589,590,591,626,627,628,629],"tindex":"d4ce2c51-3f25-11e6-8a4d-59a75fbd3d0d","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (!(subclass.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (subclass == subclass) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n                    if (superclass instanceof java.lang.Class) {\n                        throw new java.lang.RuntimeException(\"Missing type parameter.\");\n                    } \n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n                    return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass","rawSupertype":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl"},"failures":[630],"tindex":"d4ce5362-3f25-11e6-8a4d-5f46caa11f13","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isAssignableFrom(cls)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls","rawSupertype":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4ce5363-3f25-11e6-8a4d-8db2060ea12e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,3,6,631,632,16,19,633,634,635,39,45,50,54,56,62,64,66,67,68,69,70,71,72,73,92,96,636,602,603,637,638,639,640,641,105,108,109,112,114,115,116,117,118,119,121,122,123,124,125,126,128,129,130,132,135,139,144,158,167,169,177,179,181,182,187,190,196,199,200,642,219,221,225,235,238,246,249,257,274,295,303,304,305,306,307,314,315,319,321,325,335,338,344,346,347,355,357,360,368,388,405,409,410,414,423,425,427,428,431,434,436,440,441,442,443,444,445,450,452,456,457,459,462,465,468,473,474,478,479,496,497,499,503,505,506,512,518,524,530,538,542,547,552,555,558,559,560,586,589,590,643,644,645,600],"tindex":"d4ce5364-3f25-11e6-8a4d-e35077f66e8e","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            writeDeferredName();\n                            java.lang.String java.lang.String = value.toString();\n                            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                            } \n                            beforeValue(false);\n                            java.io.Writer.append(string);\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4ce7a75-3f25-11e6-8a4d-ed1de2556edf","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key != (key[0])) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"key","upperBound":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4ce7a76-3f25-11e6-8a4d-9737aab26f65","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cea187-3f25-11e6-8a4d-37089fbaf358","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.WildcardType) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[303,541,554],"tindex":"d4cea188-3f25-11e6-8a4d-d9caed02cb1e","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cec899-3f25-11e6-8a4d-51a059cdddd8","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if ((a.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cec89a-3f25-11e6-8a4d-f928e9215098","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cec89b-3f25-11e6-8a4d-89d4709a1a82","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            writeDeferredName();\n                            java.lang.String java.lang.String = value.toString();\n                            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                            } \n                            beforeValue(false);\n                            java.io.Writer.append(string);\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"d4ceefac-3f25-11e6-8a4d-d38d697f139e","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[36,222,226,376],"tindex":"d4ceefad-3f25-11e6-8a4d-49235f82e7c8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isAssignableFrom(raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4ceefae-3f25-11e6-8a4d-c70ecbf25f2a","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cf16bf-3f25-11e6-8a4d-8357778691a2","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"context","typeOfT":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:208","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cf16c0-3f25-11e6-8a4d-db1d407c6334","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key","com.google.gson.stream.JsonToken.NAME":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[0,3,5,6,8,9,15,16,19,646,647,633,634,635,648,649,650,20,21,36,37,38,39,41,42,43,44,45,48,49,50,54,56,58,60,62,64,66,67,68,69,70,71,72,73,82,92,95,96,99,101,636,602,603,637,638,639,640,641,651,105,108,109,112,114,115,116,117,118,119,121,122,123,124,125,126,128,129,130,132,135,139,143,144,147,149,151,156,157,158,161,162,164,165,166,167,168,169,171,172,174,177,178,179,180,181,182,186,187,188,189,190,193,196,197,199,200,642,204,205,206,207,210,212,219,221,223,225,226,235,238,246,251,257,262,265,272,274,276,277,285,288,290,295,303,304,305,306,307,313,314,315,319,321,322,325,328,331,332,335,338,344,346,347,348,350,355,357,358,360,376,388,397,431,445,452,457,652,653,654,655,656,462,465,468,471,472,473,474,478,479,481,483,485,487,488,489,491,495,496,497,499,500,503,507,511,512,513,518,519,524,530,531,532,533,534,536,538,541,542,543,545,546,547,550,552,555,556,557,558,559,560,561,562,563,567,570,573,576,577,579,580,581,584,586,589,590,657,643,658,659,660,661,662,663,664,616,665,666,617,667,668,618,669,670,671,672,673,674,675,676,677,678,679,680,644,681,682,683,684,645,685,686,592,593,595,596,598],"tindex":"d4cf16c1-3f25-11e6-8a4d-bdcd5a0258a7","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cf3dd2-3f25-11e6-8a4d-238163ce3217","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cf3dd3-3f25-11e6-8a4d-e563b66cfb0e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (offset == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cf3dd4-3f25-11e6-8a4d-e7d6e008bb7a","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cf3dd5-3f25-11e6-8a4d-2baf36c42222","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl"},"failures":[6,414,427,428,442,450,456],"tindex":"d4cf64e6-3f25-11e6-8a4d-09603a2e4bdf","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl"},"failures":[28,29,30,31,33,64,65,97,98,99,100,101,102,103,121,133,139,178,202,298,308,309,310,311,312,480,484,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,507,564,566,574,575,580,597,598,599,600,601],"tindex":"d4cf64e7-3f25-11e6-8a4d-cdcad41783b7","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter == typeAdapter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"typeAdapter","o":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cf64e8-3f25-11e6-8a4d-373dbc79289d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cf64e9-3f25-11e6-8a4d-937d7e834814","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cf64ea-3f25-11e6-8a4d-ad5cf81aea49","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        {\n            if (b == b) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (b != null) {\n                        {\n                            return (a == b) || ((a != null) && (a.equals(b)));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"b","java.util.Date.class":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cf8bfb-3f25-11e6-8a4d-5966cd491735","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cf8bfc-3f25-11e6-8a4d-d991b0dac980","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == null) {\n        {\n            if (b == b) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (b != null) {\n                        {\n                            return (a == b) || ((a != null) && (a.equals(b)));\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.lang.RuntimeException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"d4cf8bfd-3f25-11e6-8a4d-a756bf38a35c","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cf8bfe-3f25-11e6-8a4d-9937d7631e95","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[0,3,5,9,10,11,19,20,21,24,25,26,36,37,56,57,58,64,65,68,69,73,92,96,98,99,100,101,103,105,106,107,108,109,110,111,112,114,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,151,160,164,166,167,171,178,179,181,190,195,196,199,642,210,211,219,221,222,224,225,226,227,228,229,230,231,235,236,237,238,244,245,255,259,266,274,290,295,303,304,305,306,307,308,309,311,312,313,314,315,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,333,335,336,338,340,342,344,345,346,347,349,350,351,352,355,356,357,358,359,360,361,362,363,364,438,652,653,654,655,656,462,464,465,467,468,469,470,471,472,473,474,475,476,478,479,481,482,483,485,486,487,488,490,494,495,497,499,508,509,510,511,512,513,514,515,516,517,518,519,520,523,524,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,558,559,560,567,570,571,572,576,577,578,579,581,584,585,586,588,589,590,643,592,593,598],"tindex":"d4cfb30f-3f25-11e6-8a4d-d1c103eff4a9","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cfb310-3f25-11e6-8a4d-45498c718d95","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cfb311-3f25-11e6-8a4d-ef7ac5db9389","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if ((name != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"d4cfb312-3f25-11e6-8a4d-a19ab26e519c","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((com.google.gson.JsonPrimitive.this) == obj) {\n        return true;\n    } \n    if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n        return false;\n    } \n    com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n    if ((java.lang.Object) == null) {\n        return (other.java.lang.Object) == null;\n    } \n    if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n        return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n    } \n    if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n        double double = getAsNumber().doubleValue();\n        double double = other.getAsNumber().doubleValue();\n        return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n    } \n    return java.lang.Object.equals(other.java.lang.Object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cfda23-3f25-11e6-8a4d-7d8d2e710a06","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (!throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"d4cfda24-3f25-11e6-8a4d-2d6807c4d7e4","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (!(subclass.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (subclass == subclass) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n                    if (superclass instanceof java.lang.Class) {\n                        throw new java.lang.RuntimeException(\"Missing type parameter.\");\n                    } \n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n                    return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4cfda25-3f25-11e6-8a4d-45055b3a3f81","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4d00136-3f25-11e6-8a4d-f916620e72fa","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:218","type":"CtInvocationImpl"},"failures":[],"tindex":"d4d00137-3f25-11e6-8a4d-9d08adc2372d","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (com.google.gson.reflect.TypeToken.typeEquals(from, to, typeVarMap)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"from","typeVarMap":"typeVarMap","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"d4d00138-3f25-11e6-8a4d-2bda567714f4","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"d4d00139-3f25-11e6-8a4d-531b253d6f74","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            writeDeferredName();\n                            java.lang.String java.lang.String = value.toString();\n                            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                            } \n                            beforeValue(false);\n                            java.io.Writer.append(string);\n                            return com.google.gson.stream.JsonWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl"},"failures":[],"tindex":"d4d0013a-3f25-11e6-8a4d-c355e6d0e381","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isAssignableFrom(raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (raw.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048523/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n                    if (raw.isInterface()) {\n                        return result;\n                    } \n                    java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n                    while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                        java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                        for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                            boolean boolean = excludeField(field, true);\n                            boolean boolean = excludeField(field, false);\n                            if ((!serialize) && (!deserialize)) {\n                                continue;\n                            } \n                            field.setAccessible(true);\n                            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                            if (previous != null) {\n                                throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                            } \n                        }\n                        type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                        raw = type.getRawType();\n                    }\n                    return result;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw","rawSupertype":"raw"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":67,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":28,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":372,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":448,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":173,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":60,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":212,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":135,"com.google.gson.MixedStreamTest.testWriteLenient":263,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":252,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":45,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":229,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":181,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":233,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":363,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":396,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":127,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":101,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":159,"com.google.gson.functional.ObjectTest.testSingletonLists":179,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":344,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":373,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":118,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":194,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":256,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":37,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":245,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":93,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":430,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":168,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":258,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":440,"com.google.gson.functional.EnumTest.testEnumCaseMapping":362,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":267,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":371,"com.google.gson.functional.JsonTreeTest.testToJsonTree":134,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":433,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":92,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":251,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":398,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":425,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":214,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":191,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":266,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":303,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":418,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":438,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":53,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":201,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":265,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":353,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":144,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":295,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":289,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":203,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":248,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":343,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":136,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":75,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":150,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":55,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":413,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":296,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":200,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":383,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":35,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":187,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":238,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":65,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":281,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":156,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":83,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":347,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":339,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":217,"com.google.gson.functional.CollectionTest.testSetDeserialization":232,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":128,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":190,"com.google.gson.functional.EnumTest.testEnumSet":357,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":313,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":404,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":195,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":98,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":9,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":119,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":435,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":299,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":270,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":27,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":66,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":147,"com.google.gson.functional.MapTest.testMapSerialization":408,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":29,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":219,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":227,"com.google.gson.functional.MapTest.testSerializeMaps":403,"com.google.gson.functional.MapTest.testComplexKeysSerialization":172,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":392,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":121,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":216,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":165,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":78,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":355,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":236,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":61,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":314,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":307,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":414,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":367,"com.google.gson.functional.PrettyPrintingTest.testMap":431,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":421,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":328,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":255,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":336,"com.google.gson.functional.MapTest.testMapSerializationEmpty":412,"com.google.gson.functional.CollectionTest.testQueueSerialization":422,"com.google.gson.functional.MapTest.testMapOfMapSerialization":407,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":287,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":18,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":292,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":318,"com.google.gson.functional.FieldNamingTest.testIdentity":228,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":374,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":10,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":204,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":64,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":133,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":178,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":275,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":259,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":276,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":375,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":175,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":290,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":240,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":352,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":306,"com.google.gson.functional.MapTest.testMapSubclassSerialization":402,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":107,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":123,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":2,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":129,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":272,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":137,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":117,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":97,"com.google.gson.functional.EnumTest.testEnumSubclass":360,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":293,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":193,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":257,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":277,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":49,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":73,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":177,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":176,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":81,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":239,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":63,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":349,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":180,"com.google.gson.MixedStreamTest.testWriteNulls":262,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":389,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":385,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":95,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":215,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":162,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":182,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":315,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":22,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":141,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":376,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":409,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":125,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":106,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":351,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":220,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":280,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":19,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":284,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":16,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":338,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":434,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":401,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":158,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":90,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":405,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":161,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":397,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":79,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":110,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":205,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":417,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":68,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":369,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":330,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":105,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":77,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":174,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":235,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":242,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":254,"com.google.gson.functional.PrimitiveTest.testShortSerialization":304,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":399,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":442,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":112,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":224,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":359,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":230,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":122,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":308,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":429,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":138,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":247,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":166,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":6,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":452,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":311,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":56,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":89,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":206,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":325,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":54,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":152,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":58,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":210,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":186,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":361,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":70,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":111,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":231,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":365,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":157,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":342,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":149,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":333,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":164,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":86,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":291,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":309,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":25,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":160,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":358,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":33,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":221,"com.google.gson.functional.MapTest.testGeneralMapField":171,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":184,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":382,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":50,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":140,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":244,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":348,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":249,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":279,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":394,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":298,"com.google.gson.MixedStreamTest.testReadMixedStreamed":5,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":285,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":148,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":260,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":427,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":449,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":154,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":441,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":114,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":321,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":316,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":146,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":340,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":11,"com.google.gson.functional.ObjectTest.testNestedDeserialization":211,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":320,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":323,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":419,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":30,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":80,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":439,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":21,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":96,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":302,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":69,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":48,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":139,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":428,"com.google.gson.functional.ObjectTest.testNullSerialization":416,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":72,"com.google.gson.stream.JsonWriterTest.testDoubles":450,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":170,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":278,"com.google.gson.functional.MapTest.testInterfaceTypeMap":169,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":368,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":85,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":120,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":271,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":76,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":326,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":437,"com.google.gson.MixedStreamTest.testWriteClosed":4,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":32,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":424,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":88,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":185,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":102,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":84,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":24,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":20,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":116,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":91,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":188,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":423,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":41,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":43,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":74,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":426,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":345,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":14,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":283,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":131,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":218,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":380,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":23,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":286,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":269,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":350,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":167,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":335,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":145,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":209,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":420,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":1,"com.google.gson.functional.MapTest.testRawMapSerialization":411,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":67,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":197,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":223,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":400,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":444,"com.google.gson.functional.PrimitiveTest.testByteSerialization":301,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":354,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":384,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":446,"com.google.gson.ObjectTypeAdapterTest.testSerialize":241,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":273,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":143,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":46,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":390,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":225,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":103,"com.google.gson.functional.MapTest.testMapWithQuotes":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":329,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":312,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":319,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":327,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":126,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":94,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":207,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":237,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":332,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":189,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":250,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":39,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":334,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":253,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":324,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":381,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":71,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":12,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":124,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":317,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":196,"com.google.gson.functional.ObjectTest.testNestedSerialization":198,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":26,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":282,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":393,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":395,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":243,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":222,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":151,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":261,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":264,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":192,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":87,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":113,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":109,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":199,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":38,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":378,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":388,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":51,"com.google.gson.functional.CollectionTest.testSetSerialization":234,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":59,"com.google.gson.functional.StringTest.testStringValueSerialization":379,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":432,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":44,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":15,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":62,"com.google.gson.MixedStreamTest.testWriteInvalidState":3,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":415,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":142,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":331,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":226,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":213,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":13,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":436,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":451,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":346,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":274,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":447,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":386},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:342","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"d844232d-3e62-11e6-86fb-d5170ca791e2","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (end == end) {\n        {\n            if (end == end) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new java.lang.String(char[] , start , (end - start));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"end","com.google.gson.stream.JsonReader.PEEKED_NONE":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"d844985e-3e62-11e6-86fb-4509625a8613","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"d844bf6f-3e62-11e6-86fb-f19a1e631528","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.Class) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241],"tindex":"d844bf70-3e62-11e6-86fb-f3ea57e6666f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[],"tindex":"d8450d91-3e62-11e6-86fb-8f5e755e434c","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter > ignoreVersionsAfter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"d84534a2-3e62-11e6-86fb-8f8076614bb6","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"d84534a3-3e62-11e6-86fb-fb42bd0f4027","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"d84534a4-3e62-11e6-86fb-c9df644682c2","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            if (factory == factory) {\n                {\n                    java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"d8455bb5-3e62-11e6-86fb-7d9c4039f410","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            if (key.isNumber()) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n                    if (node != null) {\n                        removeInternal(node, true);\n                    } \n                    return node;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:824","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)"},"failures":[],"tindex":"d84582c6-3e62-11e6-86fb-81eb5a8f1169","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (end == end) {\n        {\n            if (end == end) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new java.lang.String(char[] , start , (end - start));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"end","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[60,64,94,98,103,104,112,163,242,243],"tindex":"d84582c7-3e62-11e6-86fb-9beafc556410","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d845a9d8-3e62-11e6-86fb-d377e38d10f7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d845a9d9-3e62-11e6-86fb-81da386b3329","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d845d0ea-3e62-11e6-86fb-5918da863698","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[244,245,246,247,248,249,250,251,252,253,254],"tindex":"d845d0eb-3e62-11e6-86fb-0302c27b3ef5","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d845f7fc-3e62-11e6-86fb-9b0c011ce4c2","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"d8461f0d-3e62-11e6-86fb-4f7d752b1f1f","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"d846461e-3e62-11e6-86fb-2578c7906ff9","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d846461f-3e62-11e6-86fb-9949480eca0d","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d8464620-3e62-11e6-86fb-9f8a47a31a7f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"d8464621-3e62-11e6-86fb-c75454aa8741","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            if (key.isNumber()) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n                    if (node != null) {\n                        removeInternal(node, true);\n                    } \n                    return node;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[255,256,257,0,258,259,260,261,1,2,262,3,263,264,4,265,266,267,268,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,269,28,29,31,34,35,270,271,272,36,39,40,43,44,273,274,45,46,275,47,48,49,276,50,52,53,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,57,314,58,59,315,316,317,318,319,320,321,60,61,322,64,65,66,67,68,70,71,72,75,77,80,81,82,83,84,85,86,87,90,91,92,93,323,94,324,96,97,98,99,100,102,103,104,106,108,325,249,326,327,328,329,250,251,330,331,112,332,333,334,335,336,337,338,339,340,114,341,342,343,344,345,346,347,252,348,115,253,349,350,351,116,254,352,353,354,118,355,356,119,357,358,359,360,120,361,362,363,122,123,124,125,364,126,127,128,365,366,367,368,129,369,370,130,131,132,133,134,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,140,142,391,392,143,393,394,144,145,395,146,147,149,150,151,396,155,157,397,398,160,161,163,399,164,400,165,401,402,403,404,405,167,406,407,408,242,409,169,410,170,171,243,411,172,412,413,414,173,174,177,178,179,182,185,188,415,190,416,192,417,418,195,197,198,419,200,203,205,206,208,213,214,215,216,218,220,222,224,225,226,227,228,229,420,230,421,422,423,424,425,231,426,233,427,234,428,429,430,431,235,236,432,433,434,237,435,436,437,438,439,440,441,442,443,238,444,445,446,239,240],"tindex":"d8466d32-3e62-11e6-86fb-0533ad3520ca","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d8466d33-3e62-11e6-86fb-01160ad02b4f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d8466d34-3e62-11e6-86fb-8bdc81bf7085","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[447,448,449,450],"tindex":"d8466d35-3e62-11e6-86fb-3d75987dbd06","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value <= value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl","sourcecode":"!(rawType.isInterface())"},"failures":[],"tindex":"d8469446-3e62-11e6-86fb-758b37a238b8","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"d8469447-3e62-11e6-86fb-0b9e8a461b5d","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[451,452],"tindex":"d8469448-3e62-11e6-86fb-49fe61d77e3e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"d8469449-3e62-11e6-86fb-f1df546770f6","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            if (factory == factory) {\n                {\n                    java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"d846bb5a-3e62-11e6-86fb-a77506583e37","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1304","type":"CtBinaryOperatorImpl","sourcecode":"((((lineNumber) == 0) && ((lineStart) == 0)) && ((limit) > 0)) && ((buffer[0]) == '\\ufeff')"},"failures":[],"tindex":"d846bb5b-3e62-11e6-86fb-8d12ab99de02","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if ((((length == 0) && (offset == 0)) && (offset > 0)) && ((chars[0]) == '\\ufeff')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lineStart":"offset","limit":"offset","buffer":"chars","lineNumber":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d846bb5c-3e62-11e6-86fb-732eba4bb8ac","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[93],"tindex":"d846bb5d-3e62-11e6-86fb-61b783ffc40f","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof com.google.gson.JsonObject) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d846e26e-3e62-11e6-86fb-db7bed5b0459","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1256","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME))"},"failures":[],"tindex":"d846e26f-3e62-11e6-86fb-ddf213548800","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop == newTop) || (p == newTop)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"newTop","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"d846e270-3e62-11e6-86fb-c3f24c07bc5b","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"d846e271-3e62-11e6-86fb-238ef3b48b2f","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"d8470982-3e62-11e6-86fb-7ff12e1ec016","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:824","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)"},"failures":[],"tindex":"d8470983-3e62-11e6-86fb-0dfda0b23aec","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"d8470984-3e62-11e6-86fb-b5e23c4cc654","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"d8470985-3e62-11e6-86fb-a3605119341a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            if (key.isNumber()) {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n                    if (node != null) {\n                        removeInternal(node, true);\n                    } \n                    return node;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249740195/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":41,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
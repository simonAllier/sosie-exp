{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":425,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":578,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":27,"com.google.gson.functional.StringTest.testStringValueDeserialization":576,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":197,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":531,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":249,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":67,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":367,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":149,"com.google.gson.MixedStreamTest.testWriteLenient":602,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":540,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":7,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":99,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":116,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":331,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":297,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":66,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":472,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":384,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":258,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":79,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":209,"com.google.gson.functional.ObjectTest.testSingletonLists":329,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":532,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":242,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":579,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":143,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":49,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":550,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":347,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":44,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":300,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":558,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":592,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":372,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":289,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":406,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":179,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":32,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":234,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":398,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":178,"com.google.gson.functional.EnumTest.testEnumCaseMapping":65,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":577,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":608,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":233,"com.google.gson.functional.JsonTreeTest.testToJsonTree":489,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":553,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":231,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":506,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":454,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":524,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":613,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":212,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":109,"com.google.gson.functional.ObjectTest.testNullDeserialization":357,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":376,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":589,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":342,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":40,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":310,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":250,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":348,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":396,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":202,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":354,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":39,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":496,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":554,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":206,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":315,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":549,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":294,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":273,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":505,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":358,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":450,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":530,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":150,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":171,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":286,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":521,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":485,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":129,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":193,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":156,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":295,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":287,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":353,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":444,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":38,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":336,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":569,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":74,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":189,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":254,"com.google.gson.metrics.PerformanceTest.testDummy":42,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":476,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":223,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":77,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":405,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":131,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":46,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":195,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":538,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":523,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":8,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":379,"com.google.gson.functional.CollectionTest.testSetDeserialization":115,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":385,"com.google.gson.functional.EnumTest.testEnumSet":56,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":341,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":478,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":278,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":78,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":130,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":511,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":17,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":3,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":31,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":291,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":404,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":302,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":55,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":393,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":303,"com.google.gson.functional.MapTest.testHashMapDeserialization":160,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":247,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":536,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":427,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":570,"com.google.gson.MixedStreamTest.testReadNulls":603,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":85,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":423,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":53,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":481,"com.google.gson.functional.MapTest.testSortedMap":182,"com.google.gson.functional.MapTest.testMapSerialization":177,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":426,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":284,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":414,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":457,"com.google.gson.functional.MapTest.testSerializeMaps":163,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":574,"com.google.gson.functional.MapTest.testComplexKeysSerialization":190,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":477,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":194,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":464,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":63,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":378,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":12,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":97,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":50,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":61,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":24,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":614,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":69,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":356,"com.google.gson.functional.MapTest.testStringKeyDeserialization":192,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":461,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":135,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":317,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":196,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":253,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":248,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":388,"com.google.gson.functional.PrettyPrintingTest.testMap":407,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":102,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":51,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":501,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":43,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":463,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":582,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":586,"com.google.gson.functional.CollectionTest.testQueueSerialization":106,"com.google.gson.functional.MapTest.testMapSerializationEmpty":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":518,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":279,"com.google.gson.functional.MapTest.testMapOfMapSerialization":176,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":526,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":112,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":23,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":281,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":144,"com.google.gson.functional.FieldNamingTest.testIdentity":575,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":580,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":132,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":433,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":359,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":14,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":73,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":125,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":488,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":236,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":33,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":199,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":581,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":276,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":542,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":513,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":520,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":552,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":157,"com.google.gson.functional.MapTest.testMapSubclassSerialization":162,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":313,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":83,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":421,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":480,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":268,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":390,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":556,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":599,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":151,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":500,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":48,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":2,"com.google.gson.functional.EnumTest.testEnumSubclass":59,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":290,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":45,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":345,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":235,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":198,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":296,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":134,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":92,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":238,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":371,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":274,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":370,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":221,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":35,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":453,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":280,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":340,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":72,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":545,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":330,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":159,"com.google.gson.MixedStreamTest.testWriteNulls":600,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":452,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":154,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":446,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":75,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":377,"com.google.gson.CommentsTest.testParseComments":610,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":15,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":139,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":293,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":459,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":469,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":413,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":181,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":584,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":374,"com.google.gson.MixedStreamTest.testReadInvalidState":597,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":381,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":81,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":547,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":415,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":246,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":612,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":465,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":466,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":615,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":263,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":21,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":528,"com.google.gson.functional.MapTest.testMapDeserialization":169,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":522,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":411,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":158,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":208,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":168,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":229,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":11,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":210,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":98,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":60,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":498,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":346,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":360,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":87,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":391,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":507,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":80,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":96,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":368,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":180,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":551,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":232,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":141,"com.google.gson.functional.PrimitiveTest.testShortSerialization":311,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":215,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":299,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":400,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":269,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":298,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":512,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":571,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":58,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":101,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":420,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":164,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":262,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":122,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":319,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":152,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":539,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":607,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":326,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":320,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":71,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":133,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":228,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":493,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":557,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":305,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":491,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":136,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":275,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":365,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":335,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":64,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":89,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":479,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":508,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":386,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":137,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":9,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":214,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":529,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":252,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":515,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":534,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":13,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":103,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":239,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":306,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":277,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":323,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":147,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":10,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":57,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":431,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":416,"com.google.gson.functional.MapTest.testGeneralMapField":186,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":333,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":443,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":325,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":200,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":387,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":541,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":184,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":205,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":494,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":301,"com.google.gson.MixedStreamTest.testReadMixedStreamed":606,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":509,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":34,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":117,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":483,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":474,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":282,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":399,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":527,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":173,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":567,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":140,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":324,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":439,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":561,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":525,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":155,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":434,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":492,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":146,"com.google.gson.functional.ObjectTest.testNestedDeserialization":366,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":351,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":373,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":428,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":220,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":322,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":468,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":68,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":174,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":583,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":1,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":309,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":88,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":127,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":153,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":120,"com.google.gson.functional.ObjectTest.testNullSerialization":343,"com.google.gson.stream.JsonWriterTest.testDoubles":28,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":91,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":566,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":165,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":185,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":237,"com.google.gson.functional.MapTest.testInterfaceTypeMap":183,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":455,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":389,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":225,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":240,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":62,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":95,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":392,"com.google.gson.MixedStreamTest.testReadClosed":598,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":495,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":395,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":256,"com.google.gson.MixedStreamTest.testWriteClosed":605,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":108,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":430,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":227,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":555,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":4,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":471,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":363,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":548,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":230,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":337,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":107,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":562,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":285,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":564,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":93,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":535,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":435,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":19,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":327,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":261,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":503,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":380,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":440,"com.google.gson.functional.CollectionTest.testQueueDeserialization":123,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":470,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":267,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":283,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":588,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":546,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":563,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":170,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":517,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":207,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":364,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":100,"com.google.gson.functional.MapTest.testRawMapSerialization":188,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":596,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":533,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":18,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":86,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":419,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":217,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":616,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":47,"com.google.gson.functional.PrimitiveTest.testByteSerialization":308,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":445,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":594,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":203,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":251,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":124,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":456,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":572,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":5,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":30,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":585,"com.google.gson.functional.MapTest.testMapWithQuotes":175,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":502,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":587,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":128,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":482,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":145,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":499,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":383,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":211,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":0,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":362,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":611,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":412,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":292,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":514,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":339,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":504,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":516,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":560,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":304,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":54,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":114,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":448,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":76,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":544,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":90,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":436,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":565,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":422,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":52,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":82,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":241,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":29,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":142,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":349,"com.google.gson.functional.ObjectTest.testNestedSerialization":350,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":148,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":204,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":255,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":591,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":438,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":187,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":417,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":490,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":41,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":604,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":16,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":432,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":318,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":226,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":519,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":37,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":257,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":609,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":497,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":559,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":590,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":451,"com.google.gson.functional.CollectionTest.testSetSerialization":119,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":138,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":409,"com.google.gson.functional.StringTest.testStringValueSerialization":593,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":25,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":20,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":70,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":104,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":442,"com.google.gson.MixedStreamTest.testWriteInvalidState":601,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":338,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":260,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":266,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":460,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":568,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":510,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":573,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":375,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":437,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":394,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":537,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":595,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":167,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":26,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":401,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":447},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"f442c01d-3e5b-11e6-9603-a9ad3348d16d","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"f4430e3e-3e5b-11e6-9603-af4cb762688b","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"f443354f-3e5b-11e6-9603-a79af4aab323","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.ParameterizedType) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f4433550-3e5b-11e6-9603-13eb0b34739e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f4435c61-3e5b-11e6-9603-45c218097fee","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"f4435c62-3e5b-11e6-9603-afd92ac3ec9d","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"array","context":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"tindex":"f4438373-3e5b-11e6-9603-3f56b5dbff13","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"f4438374-3e5b-11e6-9603-59c07c54de27","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"f4438375-3e5b-11e6-9603-7de4b2fd5a22","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"f443aa86-3e5b-11e6-9603-b389beeb739c","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl","sourcecode":"declaredByRaw == null"},"failures":[],"tindex":"f443aa87-3e5b-11e6-9603-a936a1b3dfcc","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:428","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"f443aa88-3e5b-11e6-9603-a303f801448d","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (offset == length) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"f443d199-3e5b-11e6-9603-41ae90422bc5","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f443d19a-3e5b-11e6-9603-b1d13e7b47a6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f443d19b-3e5b-11e6-9603-27b231a7c016","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[26,27,28],"tindex":"f443f8ac-3e5b-11e6-9603-39d1ad0d080f","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f443f8ad-3e5b-11e6-9603-a7b17d05976f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl","sourcecode":"!changed"},"failures":[29],"tindex":"f443f8ae-3e5b-11e6-9603-13e382159656","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f4446ddf-3e5b-11e6-9603-ab95555b4567","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,0,75,76,1,2,3,77,78,79,4,5,6,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,7,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,8,202,203,204,205,206,207,9,208,209,210,211,212,10,11,213,214,215,216,217,218,12,219,220,221,222,223,224,225,13,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,14,329,330,331,15,332,333,334,335,336,337,338,339,340,341,342,343,16,344,345,346,347,348,17,349,18,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,24,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,25,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610],"tindex":"f44494f0-3e5b-11e6-9603-0927583f255c","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"f444bc01-3e5b-11e6-9603-bfd47233c32e","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:309","type":"CtBinaryOperatorImpl","sourcecode":"(obj == null) || ((getClass()) != (obj.getClass()))"},"failures":[],"tindex":"f444bc02-3e5b-11e6-9603-954c015e7185","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.util.Map.Entry) {\n        java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n        return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"o","this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f444e313-3e5b-11e6-9603-f3d9975b0175","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"f444e314-3e5b-11e6-9603-d386b38c39ef","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:709","type":"CtBinaryOperatorImpl","sourcecode":"last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT)"},"failures":[611,612,613,614],"tindex":"f444e315-3e5b-11e6-9603-7932492be48b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"targetSize","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"targetSize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"f4450a26-3e5b-11e6-9603-d967d7a60268","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT.getRawType().equals(typeOfT.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT","to":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:261","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[],"tindex":"f4450a27-3e5b-11e6-9603-0bfbd36df167","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"f4453138-3e5b-11e6-9603-1f7777ccd2ce","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f4455849-3e5b-11e6-9603-fba77e50f5a5","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[615,616,76,7,124,126,127,183,186,197,220,221,222,13,226,231,372,425,470,485,486,487,489],"tindex":"f445584a-3e5b-11e6-9603-179e58f2569b","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f445584b-3e5b-11e6-9603-2717ca941bd1","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"f4457f5c-3e5b-11e6-9603-3fbc61809cae","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"f4457f5d-3e5b-11e6-9603-857d5fee37da","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"f445a66e-3e5b-11e6-9603-89e3126fd0d5","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (src == null) {\n                        return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n                    } \n                    return toJsonTree(src, src.getClass());\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f445a66f-3e5b-11e6-9603-8bbdf67af815","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949026/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
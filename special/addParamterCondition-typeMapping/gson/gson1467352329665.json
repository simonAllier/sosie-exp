{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":372,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":56,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":414,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":113,"com.google.gson.stream.JsonWriterTest.testRepeatedName":411,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":139,"com.google.gson.MixedStreamTest.testWriteLenient":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":174,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":190,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":114,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":124,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":137,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":198,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":79,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":378,"com.google.gson.functional.ObjectTest.testSingletonLists":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":170,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":199,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":57,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":408,"com.google.gson.stream.JsonWriterTest.testStrings":416,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":299,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":12,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":395,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":64,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":47,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":348,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":27,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":368,"com.google.gson.functional.EnumTest.testEnumCaseMapping":136,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":14,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":55,"com.google.gson.functional.JsonTreeTest.testToJsonTree":310,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":52,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":297,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":153,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":392,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":335,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":356,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":121,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":303,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":245,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":346,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":209,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":357,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":25,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":274,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":345,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":184,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":323,"com.google.gson.JsonParserTest.testParseString":354,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":237,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":393,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":231,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":39,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":169,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":318,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":339,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":421,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":111,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":238,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":35,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":214,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":17,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":20,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":143,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":223,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":369,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":290,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":86,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":164,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":273,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":1,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":418,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":80,"com.google.gson.functional.EnumTest.testEnumSet":130,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":205,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":87,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":276,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":384,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":97,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":210,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":85,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":347,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":22,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":301,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":241,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":21,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":311,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":398,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":337,"com.google.gson.functional.MapTest.testMapSerialization":101,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":260,"com.google.gson.functional.MapTest.testSerializeMaps":96,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":188,"com.google.gson.functional.MapTest.testComplexKeysSerialization":109,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":18,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":305,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":336,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":300,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":50,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":379,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":140,"com.google.gson.functional.MapTest.testStringKeyDeserialization":370,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":278,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":249,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":112,"com.google.gson.functional.PrettyPrintingTest.testMap":48,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":329,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":150,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":399,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":11,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":394,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":61,"com.google.gson.functional.MapTest.testMapSerializationEmpty":110,"com.google.gson.functional.CollectionTest.testQueueSerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":161,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":380,"com.google.gson.functional.MapTest.testMapOfMapSerialization":100,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":229,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":234,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":258,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":284,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":58,"com.google.gson.functional.FieldNamingTest.testIdentity":189,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":375,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":267,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":142,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":192,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":200,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":309,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":349,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":59,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":271,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":232,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":183,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":257,"com.google.gson.functional.MapTest.testMapSubclassSerialization":95,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":248,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":196,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":5,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":71,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":331,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":84,"com.google.gson.functional.EnumTest.testEnumSubclass":133,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":235,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":13,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":219,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":270,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":277,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":145,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":288,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":340,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":359,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":230,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":178,"com.google.gson.MixedStreamTest.testWriteNulls":6,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":40,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":304,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":376,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":281,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":264,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":60,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":103,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":76,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":180,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":247,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":68,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":222,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":261,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":226,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":256,"com.google.gson.JsonArrayTest.testRemove":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":167,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":242,"com.google.gson.functional.MapTest.testMapDeserialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":163,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":53,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":94,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":385,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":98,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":295,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":403,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":334,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":361,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":383,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":308,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":208,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":216,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":313,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":332,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":154,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":144,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":319,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":49,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":102,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":182,"com.google.gson.functional.PrimitiveTest.testShortSerialization":246,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":405,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":29,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":156,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":185,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":132,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":358,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":116,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":195,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":355,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":364,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":128,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":250,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":371,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":386,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":253,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":390,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":141,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":217,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":146,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":388,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":279,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":135,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":138,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":315,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":122,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":327,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":168,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":158,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":338,"com.google.gson.stream.JsonWriterTest.testNullStringValue":409,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":406,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":293,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":233,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":251,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":30,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":131,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":402,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":360,"com.google.gson.functional.MapTest.testGeneralMapField":107,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":34,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":42,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":272,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":175,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":147,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":221,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":322,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":240,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":351,"com.google.gson.JsonObjectTest.testDeepCopy":381,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":227,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":125,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":350,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":166,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":367,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":93,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":363,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":252,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":282,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":67,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":74,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":410,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":165,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":268,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":286,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":65,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":213,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":287,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":26,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":263,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":83,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":244,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":314,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":194,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":127,"com.google.gson.functional.ObjectTest.testNullSerialization":206,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":317,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":365,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":106,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":220,"com.google.gson.functional.MapTest.testInterfaceTypeMap":104,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":425,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":330,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":292,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":70,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":148,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":24,"com.google.gson.MixedStreamTest.testWriteClosed":10,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":120,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":203,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":88,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":291,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":266,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":218,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":181,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":204,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":296,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":119,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":75,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":171,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":373,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":254,"com.google.gson.stream.JsonWriterTest.testNumbers":426,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":225,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":307,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":32,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":306,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":265,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":228,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":179,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":396,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":160,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":324,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":115,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":4,"com.google.gson.functional.MapTest.testRawMapSerialization":108,"com.google.gson.JsonParserTest.testParseReader":353,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":391,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":211,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":312,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":342,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":36,"com.google.gson.functional.PrimitiveTest.testByteSerialization":243,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":298,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":344,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":400,"com.google.gson.ObjectTypeAdapterTest.testSerialize":407,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":320,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":420,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":191,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":41,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":186,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":89,"com.google.gson.functional.MapTest.testMapWithQuotes":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":151,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":275,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":2,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":285,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":149,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":78,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":81,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":157,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":236,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":152,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":159,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":193,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":33,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":177,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":316,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":269,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":197,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":362,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":283,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":423,"com.google.gson.functional.ObjectTest.testNestedSerialization":212,"com.google.gson.JsonObjectTest.testAddingStringProperties":382,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":31,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":224,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":321,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":66,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":397,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":69,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":46,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":9,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":16,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":417,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":207,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":294,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":15,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":424,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":62,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":389,"com.google.gson.functional.CollectionTest.testSetSerialization":126,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":51,"com.google.gson.functional.StringTest.testStringValueSerialization":63,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":280,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":325,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":255,"com.google.gson.MixedStreamTest.testWriteInvalidState":7,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":43,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":155,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":187,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":352,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":302,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":377,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":23,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":422,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":172,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":326,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":413,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":38},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3387b9c-3f4f-11e6-ba54-6f231b5b62b2","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3],"tindex":"f338f0cd-3f4f-11e6-ba54-c348c3113eb3","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350],"tindex":"f33917de-3f4f-11e6-ba54-0b20350edcdf","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[351,352],"tindex":"f3393eef-3f4f-11e6-ba54-cfeb150d399d","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f3393ef0-3f4f-11e6-ba54-394682a96ceb","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl"},"failures":[353,354,355,356,357,358,359,64,68,360,69,361,362,363,364,365,366,367,368,369,370,129,371,0,190,191,193,194,196,197,372,265,266,373,374,375,287,288,289,293,294,297,309,339,351,352,342,376,377,378,3,379,380,381,382],"tindex":"f3396601-3f4f-11e6-ba54-29c2f35d60e6","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[185,311,383],"tindex":"f3398d12-3f4f-11e6-ba54-1796bcad6f9c","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[384],"tindex":"f339b423-3f4f-11e6-ba54-ef00884c560a","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.Class<?>) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f339b424-3f4f-11e6-ba54-b3be0c955dcc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[156],"tindex":"f339b425-3f4f-11e6-ba54-5f11601f5884","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f339b426-3f4f-11e6-ba54-3dcd719b8001","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f339db37-3f4f-11e6-ba54-21ddc83dd076","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[156],"tindex":"f339db38-3f4f-11e6-ba54-ff5395006377","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f339db39-3f4f-11e6-ba54-251b73bdf2b5","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f339db3a-3f4f-11e6-ba54-2df806c6101a","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[371,379],"tindex":"f33a024b-3f4f-11e6-ba54-7335a932e44e","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[4,5,9,11,385,14,16,17,386,387,388,19,20,22,23,24,25,26,27,28,29,30,31,32,33,36,37,39,389,41,42,44,46,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,390,391,392,393,394,395,72,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,396,99,100,101,103,104,106,107,397,108,109,111,112,113,114,115,116,118,120,121,122,123,124,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,159,160,161,162,163,164,165,166,167,168,170,171,173,174,175,177,178,179,180,181,182,184,185,186,187,188,189,195,196,197,198,199,200,201,202,203,204,205,207,210,211,212,214,215,216,217,218,221,222,225,241,254,255,256,257,258,398,260,399,261,262,263,264,267,268,269,270,273,274,275,276,277,278,279,280,281,282,283,286,290,291,292,295,296,298,299,301,302,303,304,305,306,308,311,312,313,315,316,317,318,319,320,321,322,323,324,325,400,326,327,328,329,330,331,332,401,334,402,403,404,405,406,336,337,338,339,407,408,409,410,411,412,413,414,415,416,417,340,341,345,346,347,350],"tindex":"f33a024c-3f4f-11e6-ba54-27ebcfaca966","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[129,303,304,305,418,306,327,328,330,332,333],"tindex":"f33a295d-3f4f-11e6-ba54-259deb694671","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f33a506e-3f4f-11e6-ba54-b1f9a824adf9","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"componentType","typeOfT":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f33a506f-3f4f-11e6-ba54-47f0da5e2948","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f33a5070-3f4f-11e6-ba54-fd40f64f6a10","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f33a5071-3f4f-11e6-ba54-63d8e8c1cb6c","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if ((key instanceof java.lang.reflect.ParameterizedType) && (!(key.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"key","type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f33a7682-3f4f-11e6-ba54-abf801dad127","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:139","type":"CtBinaryOperatorImpl"},"failures":[419],"tindex":"f33a7683-3f4f-11e6-ba54-73c87d808546","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == 0) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f33a7684-3f4f-11e6-ba54-25422e9c252d","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"f33a9d95-3f4f-11e6-ba54-e72870fb3a28","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"f33a9d96-3f4f-11e6-ba54-d17371594708","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f33a9d97-3f4f-11e6-ba54-91f8a39e8b74","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (in == null) {\n                {\n                    com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n                    return read(reader);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[4,5,8,420,385,15,17,421,422,386,33,38,40,41,42,45,46,47,48,49,50,51,52,53,54,64,67,423,70,390,391,424,392,393,394,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,96,101,107,108,112,114,116,117,119,122,124,126,127,129,139,140,142,144,145,149,151,155,166,181,185,186,187,188,189,196,197,199,200,202,205,207,210,211,212,215,216,218,219,224,230,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,249,250,251,252,253,398,260,399,263,264,267,268,278,279,280,283,284,285,291,295,299,301,308,312,317,319,320,323,324,325,337,338,339,407,425,426,349],"tindex":"f33ac4a8-3f4f-11e6-ba54-fb8d2ba5579d","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f33ac4a9-3f4f-11e6-ba54-259ce87b786f","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter != null) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f33ac4aa-3f4f-11e6-ba54-13037a1b90db","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key","value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f33aebbb-3f4f-11e6-ba54-ebd491d15ac7","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            if (typeAdapter != null) {\n                {\n                    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n                    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:540","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"f33aebbc-3f4f-11e6-ba54-7ff7440ba3a7","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if (quote < 128) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467351700315/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":33,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
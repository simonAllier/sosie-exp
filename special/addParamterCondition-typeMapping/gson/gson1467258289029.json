{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":474,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":595,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":196,"com.google.gson.functional.StringTest.testStringValueDeserialization":593,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":114,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":558,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":190,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":323,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":224,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":434,"com.google.gson.MixedStreamTest.testWriteLenient":180,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":269,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":566,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":249,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":45,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":61,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":404,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":371,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":223,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":509,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":142,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":332,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":36,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":285,"com.google.gson.functional.ObjectTest.testSingletonLists":127,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":512,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":559,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":316,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":596,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":17,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":264,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":215,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":575,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":417,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":211,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":126,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":1,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":609,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":197,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":146,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":363,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":96,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":203,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":308,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":458,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":95,"com.google.gson.functional.EnumTest.testEnumCaseMapping":222,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":594,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":617,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":307,"com.google.gson.functional.JsonTreeTest.testToJsonTree":521,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":578,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":305,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":9,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":535,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":160,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":551,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":288,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":55,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":441,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":606,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":413,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":383,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":620,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":324,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":418,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":456,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":117,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":425,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":619,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":140,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":579,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":282,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":388,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":574,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":368,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":347,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":534,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":428,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":495,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":557,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":88,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":270,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":360,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":548,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":171,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":254,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":110,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":274,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":369,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":361,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":130,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":491,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":208,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":409,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":586,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":106,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":189,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":231,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":328,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":513,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":298,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":232,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":145,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":255,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":21,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":112,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":564,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":550,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":279,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":444,"com.google.gson.functional.CollectionTest.testSetDeserialization":60,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":143,"com.google.gson.functional.EnumTest.testEnumSet":23,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":412,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":515,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":352,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":35,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":69,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":13,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":540,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":419,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":34,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":202,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":365,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":463,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":375,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":218,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":453,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":376,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":192,"com.google.gson.functional.MapTest.testHashMapDeserialization":78,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":321,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":562,"com.google.gson.MixedStreamTest.testReadNulls":181,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":476,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":587,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":233,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":472,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":22,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":167,"com.google.gson.functional.MapTest.testSortedMap":99,"com.google.gson.functional.MapTest.testMapSerialization":94,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":475,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":358,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":465,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":500,"com.google.gson.functional.MapTest.testSerializeMaps":80,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":591,"com.google.gson.functional.MapTest.testComplexKeysSerialization":107,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":514,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":111,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":506,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":443,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":122,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":245,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":621,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":219,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":198,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":226,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":427,"com.google.gson.functional.MapTest.testStringKeyDeserialization":109,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":15,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":504,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":258,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":390,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":113,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":327,"com.google.gson.functional.PrettyPrintingTest.testMap":147,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":322,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":448,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":48,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":216,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":531,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":161,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":210,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":599,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":603,"com.google.gson.functional.CollectionTest.testQueueSerialization":52,"com.google.gson.functional.MapTest.testMapSerializationEmpty":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":353,"com.google.gson.functional.MapTest.testMapOfMapSerialization":93,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":344,"com.google.gson.JavaSerializationTest.testMapIsSerializable":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":553,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":58,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":138,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":355,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":265,"com.google.gson.functional.FieldNamingTest.testIdentity":592,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":597,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":70,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":481,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":131,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":230,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":251,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":402,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":520,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":310,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":204,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":277,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":598,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":350,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":567,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":541,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":577,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":76,"com.google.gson.functional.MapTest.testMapSubclassSerialization":276,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":386,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":43,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":153,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":517,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":200,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":342,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":450,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":581,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":271,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":530,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":214,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":33,"com.google.gson.functional.EnumTest.testEnumSubclass":26,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":364,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":212,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":415,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":309,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":115,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":370,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":257,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":240,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":312,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":438,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":348,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":437,"com.google.gson.stream.JsonWriterTest.testNullName":185,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":123,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":206,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":497,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":129,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":354,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":229,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":570,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":403,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":275,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":159,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":74,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":492,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":30,"com.google.gson.CommentsTest.testParseComments":183,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":442,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":71,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":128,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":289,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":164,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":367,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":502,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":464,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":98,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":601,"com.google.gson.MixedStreamTest.testReadInvalidState":612,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":139,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":41,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":572,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":466,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":320,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":184,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":507,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":14,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":162,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":629,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":337,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":136,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":555,"com.google.gson.functional.MapTest.testMapDeserialization":86,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":549,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":150,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":77,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":284,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":85,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":303,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":121,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":286,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":246,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":27,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":528,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":416,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":429,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":235,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":451,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":536,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":40,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":244,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":435,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":97,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":148,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":576,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":306,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":72,"com.google.gson.functional.PrimitiveTest.testShortSerialization":384,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":291,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":373,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":460,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":343,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":175,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":319,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":588,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":25,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":47,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":152,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":81,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":336,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":66,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":392,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":272,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":565,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":616,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":399,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":393,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":228,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":132,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":256,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":302,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":0,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":523,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":378,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":173,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":259,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":349,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":432,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":408,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":28,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":237,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":516,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":537,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":446,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":260,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":119,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":556,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":326,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":187,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":543,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":560,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":49,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":300,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":313,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":379,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":351,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":396,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":267,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":24,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":120,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":480,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":467,"com.google.gson.functional.MapTest.testGeneralMapField":103,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":406,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":490,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":398,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":278,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":447,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":178,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":101,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":281,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":524,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":374,"com.google.gson.MixedStreamTest.testReadMixedStreamed":615,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":630,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":89,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":538,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":62,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":169,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":205,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":511,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":356,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":459,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":18,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":554,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":90,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":584,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":262,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":397,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":156,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":4,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":339,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":552,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":75,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":482,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":522,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":294,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":73,"com.google.gson.functional.ObjectTest.testNestedDeserialization":433,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":423,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":439,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":477,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":296,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":457,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":395,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":508,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":91,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":225,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":600,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":32,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":382,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":236,"com.google.gson.JavaSerializationTest.testListIsSerializable":20,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":253,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":273,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":65,"com.google.gson.functional.ObjectTest.testNullSerialization":624,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":239,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":583,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":82,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":102,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":311,"com.google.gson.functional.MapTest.testInterfaceTypeMap":100,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":498,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":449,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":299,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":314,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":220,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":625,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":243,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":525,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":455,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":330,"com.google.gson.MixedStreamTest.testWriteClosed":614,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":54,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":479,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":125,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":580,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":191,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":37,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":124,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":166,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":163,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":573,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":304,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":410,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":53,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":359,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":7,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":241,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":561,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":483,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":134,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":400,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":335,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":533,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":445,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":487,"com.google.gson.functional.CollectionTest.testQueueDeserialization":67,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":165,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":186,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":341,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":357,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":605,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":473,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":571,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":87,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":545,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":133,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":283,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":46,"com.google.gson.functional.MapTest.testRawMapSerialization":105,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":611,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":63,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":177,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":234,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":421,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":470,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":293,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":10,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":12,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":157,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":213,"com.google.gson.functional.PrimitiveTest.testByteSerialization":381,"com.google.gson.ObjectTypeAdapterTest.testSerialize":16,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":626,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":280,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":325,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":250,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":499,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":589,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":38,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":201,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":602,"com.google.gson.functional.MapTest.testMapWithQuotes":92,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":532,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":604,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":68,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":168,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":266,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":471,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":529,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":141,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":287,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":29,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":430,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":151,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":542,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":411,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":568,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":174,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":3,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":544,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":377,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":622,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":247,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":493,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":31,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":569,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":238,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":484,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":188,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":582,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":8,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":154,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":217,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":42,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":315,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":194,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":263,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":420,"com.google.gson.functional.ObjectTest.testNestedSerialization":422,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":268,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":118,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":329,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":608,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":486,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":104,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":468,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":172,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":182,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":209,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":155,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":414,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":391,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":301,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":546,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":331,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":618,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":527,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":2,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":607,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":496,"com.google.gson.functional.CollectionTest.testSetSerialization":64,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":116,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":149,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":261,"com.google.gson.functional.StringTest.testStringValueSerialization":610,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":179,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":50,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":135,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":227,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":489,"com.google.gson.MixedStreamTest.testWriteInvalidState":613,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":623,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":334,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":340,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":503,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":585,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":539,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":590,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":631,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":440,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":628,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":485,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":454,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":563,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":627,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":84,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":195,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":144,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":158},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"fea0861d-3e74-11e6-bb20-d9979411d715","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"fea0d43e-3e74-11e6-bb20-0d06200daaed","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"primitive","this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1175","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"fea0d43f-3e74-11e6-bb20-21ee46e8d409","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_LONG":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"fea0fb50-3e74-11e6-bb20-c131263c25b4","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"fea0fb51-3e74-11e6-bb20-67b81b1bea28","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[0,1,2,3,4,5,6,7,8,9],"tindex":"fea0fb52-3e74-11e6-bb20-b50c5d6ca4de","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"fea12263-3e74-11e6-bb20-01dfe717e45d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"fea12264-3e74-11e6-bb20-e190de46b572","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"fea12265-3e74-11e6-bb20-f3af6a194510","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"fea12266-3e74-11e6-bb20-7fcdf45136f4","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(src instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183],"tindex":"fea14977-3e74-11e6-bb20-897c9b4ffeee","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"fea14978-3e74-11e6-bb20-3bb93f4ced10","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"fea17089-3e74-11e6-bb20-2196a390aa79","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[184],"tindex":"fea1708a-3e74-11e6-bb20-05f0397d545e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"fea1979b-3e74-11e6-bb20-e9faee855fb5","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"bound","typeOfT":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"fea1979c-3e74-11e6-bb20-25b5fe7d4467","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"fea1979d-3e74-11e6-bb20-f5d32471e3b3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[185],"tindex":"fea1979e-3e74-11e6-bb20-296737379282","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:208","type":"CtBinaryOperatorImpl","sourcecode":"(peek()) == (com.google.gson.stream.JsonToken.NAME)"},"failures":[],"tindex":"fea1beaf-3e74-11e6-bb20-f920be07186c","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    return toJsonTree(src, typeOfSrc);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src","com.google.gson.stream.JsonToken.NAME":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"fea1beb0-3e74-11e6-bb20-ed96c3f7765d","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json.isBoolean()) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"fea1beb1-3e74-11e6-bb20-597c473e3180","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"fea1beb2-3e74-11e6-bb20-cd47a5fe4683","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    return (removeInternalByKey(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"fea1e5c3-3e74-11e6-bb20-d9f22aef61d2","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1236","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[184,186,187,188,189,190,191,192,193,194],"tindex":"fea1e5c4-3e74-11e6-bb20-d97a20c63cb6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_NONE":"h"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[195,196,80,197,146,147,148,198,149,199,150,151,200],"tindex":"fea20cd5-3e74-11e6-bb20-2902eaff84f6","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent.length()) == 0) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"fea20cd6-3e74-11e6-bb20-79cc4fe2b544","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"fea20cd7-3e74-11e6-bb20-07ef433a2850","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"fea20cd8-3e74-11e6-bb20-d182588b926d","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[201,202,203,204,205,10,11,12,206,207,208,209,18,19,20,210,211,212,21,213,214,215,216,217,22,218,23,24,25,26,27,219,220,221,28,222,223,224,225,226,227,228,229,230,231,29,30,31,32,33,34,232,35,36,37,38,39,40,41,42,43,44,233,234,235,236,237,238,239,240,241,242,243,244,245,246,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,247,60,61,62,63,64,65,248,66,67,249,250,251,252,253,68,254,69,255,70,256,257,258,259,260,261,71,262,72,263,264,265,266,73,267,268,269,270,271,272,273,74,75,274,76,77,275,78,79,276,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,277,278,116,279,117,280,118,281,282,283,119,284,285,286,287,288,120,121,289,290,291,292,293,294,122,295,296,123,297,298,124,299,300,301,125,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,126,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,127,403,404,128,405,406,407,408,409,410,411,129,412,413,414,415,416,417,418,419,420,421,422,423,424,130,425,426,427,428,131,429,132,430,431,133,432,433,434,435,436,437,438,197,439,440,441,442,443,444,445,134,135,136,137,138,139,140,141,142,143,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,144,461,462,463,145,146,147,148,198,149,199,150,151,464,465,466,467,468,469,470,152,153,154,471,472,473,474,475,476,477,478,479,480,155,481,482,483,484,485,486,156,487,488,489,490,491,157,492,158,493,494,495,496,159,497,160,498,499,500,501,502,503,504,505,161,506,507,162,163,508,164,165,166,509,510,511,512,513,514,515,516,517,167,168,169,170,171,518,519,520,521,172,173,522,523,524,525,526,527,528,529,530,531,532,533,174,534,535,536,537,538,539,540,175,541,542,543,544,545,176,546,547,548,549,550,551,552,553,554,555,556,557,558,559,177,560,561,562,563,564,565,566,178,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,0,1,2,3,4,5,6,7,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,179,611,612,200,613,180,182,614,615,616,617,618,183],"tindex":"fea233e9-3e74-11e6-bb20-39aa3e3bda3d","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"fea233ea-3e74-11e6-bb20-d1023b51555d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[381],"tindex":"fea25afb-3e74-11e6-bb20-df92ce87eef4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[202,203,204,205,206,207,208,619,620,209,210,211,212,213,215,621,622,218,23,24,25,26,220,28,222,223,224,226,228,230,231,29,31,32,33,34,232,35,37,38,39,41,44,233,234,235,236,237,238,239,242,244,45,46,47,48,52,53,54,55,56,59,61,62,64,65,66,68,69,257,258,259,261,71,262,263,265,266,73,267,268,77,276,80,83,85,87,92,93,94,97,98,100,101,102,103,104,105,107,108,110,113,114,115,277,278,279,117,280,118,281,282,283,119,286,288,120,121,290,291,292,293,122,298,124,299,303,304,309,311,317,320,328,329,335,337,338,341,344,346,347,350,351,355,364,366,368,369,372,374,376,380,381,382,383,384,385,386,390,392,396,397,399,402,127,128,407,410,623,412,624,414,416,418,419,421,422,423,130,428,429,132,431,435,438,197,439,440,441,442,443,445,134,135,136,137,138,139,140,141,142,143,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,625,146,147,148,198,149,199,150,151,466,468,152,153,154,471,472,473,475,478,481,482,484,486,156,487,488,490,491,157,492,158,495,496,159,499,501,503,505,506,162,163,508,164,509,512,516,167,170,171,519,172,523,524,525,529,531,532,174,535,536,539,175,542,543,544,545,176,547,549,550,552,554,555,556,557,559,561,563,564,566,178,568,569,570,571,572,573,576,577,579,581,0,3,4,7,584,585,586,587,588,589,590,591,592,594,595,596,597,598,601,603,607,610,179,626,627,617,618],"tindex":"fea2a91c-3e74-11e6-bb20-594b46e6b2db","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"fea2a91d-3e74-11e6-bb20-374f3b3f9562","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"fea2a91e-3e74-11e6-bb20-0ff4edc163c8","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[0,1,2,4,5,7],"tindex":"fea2d02f-3e74-11e6-bb20-85155f3ca4e8","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"until"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"fea2d030-3e74-11e6-bb20-2173f7f41f9d","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    if (json == null) {\n                        return null;\n                    } \n                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                    T T = ((T)(fromJson(reader, typeOfT)));\n                    return target;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"fea2d031-3e74-11e6-bb20-0f78941c9fbb","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[628],"tindex":"fea2d032-3e74-11e6-bb20-e33a04d1ee53","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"fea2d033-3e74-11e6-bb20-8fae62946a17","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[31,249,250,251,252,253,277,123,300,301,305,474,165,166,521],"tindex":"fea2f644-3e74-11e6-bb20-ed3d58eef058","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl","sourcecode":"!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[],"tindex":"fea2f645-3e74-11e6-bb20-2922ed073ba9","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(src instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src == null) {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[629,10,31,249,250,252,253,100,103,114,296,123,297,300,301,305,197,474,165,171,518,519,521],"tindex":"fea2f646-3e74-11e6-bb20-55215e7af14e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:137","type":"CtInvocationImpl","sourcecode":"java.util.EnumSet.class.isAssignableFrom(rawType)"},"failures":[],"tindex":"fea2f647-3e74-11e6-bb20-bd8a286b2254","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type.isAssignableFrom(rawType)) {\n        {\n            if (type.isAssignableFrom(rawType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.EnumSet.class":"type","rawType":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[630,631],"tindex":"fea31d58-3e74-11e6-bb20-2945e5599d1f","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"fea31d59-3e74-11e6-bb20-a31f18409313","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonArray) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"fea31d5a-3e74-11e6-bb20-a3707a853ffd","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"fea31d5b-3e74-11e6-bb20-b7d3ecb12847","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token == token) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"token","typeOfT":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"fea3446c-3e74-11e6-bb20-eb236bcef815","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"fea3446d-3e74-11e6-bb20-fbaec578eab2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[],"tindex":"fea3446e-3e74-11e6-bb20-0dcf281099f5","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node == node) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"fea3446f-3e74-11e6-bb20-f1091b4ee6a6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[202,203,204,205,206,207,208,209,210,211,212,213,215,23,24,25,26,220,28,222,223,224,226,228,230,231,29,31,32,33,34,232,35,37,38,39,41,233,234,235,236,237,238,239,242,244,45,46,47,48,52,53,54,55,56,59,61,62,64,65,66,68,69,257,258,259,261,71,262,263,265,266,73,267,268,77,276,80,83,85,87,92,93,94,97,98,100,101,102,103,104,105,107,108,110,113,114,115,277,278,279,117,280,118,281,282,283,119,286,288,120,121,290,291,292,293,122,298,124,299,303,304,309,311,317,320,328,329,335,337,338,341,344,346,347,350,351,355,364,366,368,369,372,374,376,380,381,382,383,384,385,386,390,392,396,397,399,402,127,128,407,410,412,414,416,418,419,421,422,423,130,428,429,132,431,435,438,197,439,440,441,442,443,445,134,135,136,137,138,139,140,141,142,143,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,625,146,147,148,198,149,199,150,151,466,468,152,153,154,471,472,473,475,478,481,482,484,486,156,487,488,490,491,157,492,158,495,496,159,499,501,503,505,506,162,163,508,164,509,512,516,167,170,171,519,172,523,524,525,529,531,532,174,535,536,539,175,542,543,544,545,176,547,549,550,552,554,555,556,557,559,561,563,564,566,178,568,569,570,571,572,573,576,577,579,581,0,3,4,7,584,585,586,587,588,589,590,591,592,594,595,596,597,598,601,603,607,610,179,617,618],"tindex":"fea36b80-3e74-11e6-bb20-03c1ea3e3888","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src != typeOfSrc) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"src","type":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:137","type":"CtInvocationImpl","sourcecode":"java.util.EnumSet.class.isAssignableFrom(rawType)"},"failures":[],"tindex":"fea36b81-3e74-11e6-bb20-abd02b56f386","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type.isAssignableFrom(rawType)) {\n        {\n            if (type.isAssignableFrom(rawType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                        @java.lang.SuppressWarnings(value = \"unchecked\")\n                        public T construct() {\n                            try {\n                                java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                                return ((T)(newInstance));\n                            } catch (java.lang.Exception e) {\n                                throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                            }\n                        }\n                    };\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.EnumSet.class":"type","rawType":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"fea36b82-3e74-11e6-bb20-4321657ed291","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:292","type":"CtBinaryOperatorImpl","sourcecode":"(parent.left) == node"},"failures":[],"tindex":"fea39293-3e74-11e6-bb20-234065cd5527","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node == node) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (node != null) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                    if (replacement != null) {\n                        replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n                    } \n                    if (parent != null) {\n                        if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        } else {\n                            assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                            parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                        }\n                    } else {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"node","node":"node","left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:622","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'n') || (c == 'N')"},"failures":[],"tindex":"fea39294-3e74-11e6-bb20-1de38406de8e","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote == 'n') || (c == 'N')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"fea3b9a5-3e74-11e6-bb20-5767d663b4f0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404415/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":57,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":299,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":160,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":5,"com.google.gson.functional.StringTest.testStringValueDeserialization":579,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":215,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":559,"com.google.gson.stream.JsonWriterTest.testRepeatedName":2,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":471,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":70,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":654,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":279,"com.google.gson.MixedStreamTest.testWriteLenient":371,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":124,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":335,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":245,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":253,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":635,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":507,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":143,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":188,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":149,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":479,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":356,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":542,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":610,"com.google.gson.functional.ObjectTest.testSingletonLists":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":121,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":189,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":161,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":466,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":275,"com.google.gson.stream.JsonWriterTest.testStrings":7,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":530,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":134,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":567,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":644,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":285,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":354,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":509,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":44,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":446,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":587,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":87,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":421,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":503,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":624,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":429,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":459,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":266,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":316,"com.google.gson.functional.EnumTest.testEnumCaseMapping":142,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":18,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":159,"com.google.gson.functional.JsonTreeTest.testToJsonTree":312,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":458,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":568,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":308,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":295,"com.google.gson.stream.JsonWriterTest.testNulls":364,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":680,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":107,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":41,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":596,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":557,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":413,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":327,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":250,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":234,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":331,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":585,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":642,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":17,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":394,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":472,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":417,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":352,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":264,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":54,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":647,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":16,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":309,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":180,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":516,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":515,"com.google.gson.JsonParserTest.testParseString":323,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":566,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":42,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":387,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":337,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":520,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":172,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":288,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":489,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":280,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":500,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":621,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":301,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":556,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":186,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":346,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":525,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":213,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":388,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":590,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":501,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":228,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":592,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":37,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":270,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":639,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":73,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":476,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":628,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":608,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":82,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":94,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":439,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":303,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":570,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":123,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":319,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":116,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":436,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":53,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":345,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":655,"com.google.gson.functional.CollectionTest.testSetDeserialization":664,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":150,"com.google.gson.functional.EnumTest.testEnumSet":136,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":223,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":668,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":493,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":60,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":553,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":225,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":93,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":504,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":438,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":510,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":135,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":261,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":58,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":469,"com.google.gson.functional.MapTest.testHashMapDeserialization":617,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":660,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":562,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":374,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":443,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":33,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":74,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":184,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":574,"com.google.gson.functional.MapTest.testSortedMap":626,"com.google.gson.functional.MapTest.testMapSerialization":205,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":34,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":332,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":498,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":657,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":598,"com.google.gson.functional.MapTest.testSerializeMaps":199,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":243,"com.google.gson.functional.MapTest.testComplexKeysSerialization":212,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":667,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":630,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":412,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":236,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":577,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":197,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":330,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":283,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":405,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":576,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":259,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":357,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":71,"com.google.gson.functional.MapTest.testStringKeyDeserialization":317,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":600,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":62,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":396,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":214,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":475,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":153,"com.google.gson.functional.PrettyPrintingTest.testMap":257,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":470,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":418,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":104,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":572,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":9,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":43,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":601,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":165,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":580,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":113,"com.google.gson.functional.CollectionTest.testQueueSerialization":248,"com.google.gson.functional.MapTest.testMapSerializationEmpty":629,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":365,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":494,"com.google.gson.functional.MapTest.testMapOfMapSerialization":204,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":488,"com.google.gson.JavaSerializationTest.testMapIsSerializable":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":558,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":662,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":26,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":384,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":293,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":162,"com.google.gson.functional.FieldNamingTest.testIdentity":244,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":526,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":19,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":649,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":360,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":72,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":218,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":311,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":452,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":460,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":369,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":163,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":455,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":382,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":564,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":554,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":404,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":615,"com.google.gson.functional.MapTest.testMapSubclassSerialization":198,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":514,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":145,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":545,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":669,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":14,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":155,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":377,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":486,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":281,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":549,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":571,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":92,"com.google.gson.functional.EnumTest.testEnumSubclass":139,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":385,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":286,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":643,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":378,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":52,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":353,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":506,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":534,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":462,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":217,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":675,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":491,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":633,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":304,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":272,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":595,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":329,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":495,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":641,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":381,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":532,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":127,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":634,"com.google.gson.MixedStreamTest.testWriteNulls":370,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":616,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":410,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":588,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":171,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":235,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":541,"com.google.gson.CommentsTest.testParseComments":670,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":65,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":220,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":612,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":30,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":505,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":599,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":656,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":164,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":206,"com.google.gson.MixedStreamTest.testReadInvalidState":430,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":147,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":129,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":395,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":238,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":355,"com.google.gson.JsonParserTest.testParseMixedArray":339,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":56,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":602,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":27,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":678,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":348,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":483,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":24,"com.google.gson.JsonArrayTest.testRemove":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":119,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":391,"com.google.gson.functional.MapTest.testMapDeserialization":314,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":115,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":424,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":338,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":271,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":359,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":609,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":85,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":201,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":193,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":191,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":302,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":537,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":158,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":548,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":230,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":416,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":76,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":156,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":108,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":543,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":358,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":81,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":216,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":258,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":625,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":672,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":131,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":457,"com.google.gson.functional.PrimitiveTest.testShortSerialization":289,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":529,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":195,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":508,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":268,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":487,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":328,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":402,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":468,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":240,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":138,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":247,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":144,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":325,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":618,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":482,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":256,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":397,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":313,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":563,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":614,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":276,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":434,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":400,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":519,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":39,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":231,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":527,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":540,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":101,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":278,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":512,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":605,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":63,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":492,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":652,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":638,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":141,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":77,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":269,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":551,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":151,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":674,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":528,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":120,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":194,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":677,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":474,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":287,"com.google.gson.stream.JsonWriterTest.testNullStringValue":0,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":561,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":306,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":658,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":463,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":513,"com.google.gson.JsonArrayTest.testSet":342,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":383,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":398,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":31,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":137,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":192,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":300,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":318,"com.google.gson.functional.MapTest.testGeneralMapField":209,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":637,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":361,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":408,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":522,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":152,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":175,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":125,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":627,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":102,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":179,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":390,"com.google.gson.MixedStreamTest.testReadMixedStreamed":433,"com.google.gson.JsonObjectTest.testDeepCopy":334,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":350,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":552,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":622,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":11,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":254,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":604,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":607,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":496,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":267,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":426,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":118,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":315,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":69,"com.google.gson.JsonArrayTest.testDeepCopy":343,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":333,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":66,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":399,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":183,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":47,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":1,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":484,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":117,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":589,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":546,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":661,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":613,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":68,"com.google.gson.functional.ObjectTest.testNestedDeserialization":653,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":88,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":444,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":538,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":265,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":521,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":29,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":340,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":581,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":623,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":91,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":393,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":533,"com.google.gson.JavaSerializationTest.testListIsSerializable":427,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":282,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":454,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":420,"com.google.gson.functional.ObjectTest.testNullSerialization":415,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":79,"com.google.gson.stream.JsonWriterTest.testDoubles":366,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":531,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":619,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":208,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":461,"com.google.gson.functional.MapTest.testInterfaceTypeMap":207,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":597,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":154,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":84,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":296,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":464,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":38,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":536,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":578,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":103,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":263,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":477,"com.google.gson.MixedStreamTest.testWriteClosed":432,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":249,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":445,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":221,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":569,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":96,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":83,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":298,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":28,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":232,"com.google.gson.stream.JsonWriterTest.testLongs":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":130,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":86,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":222,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":419,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":448,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":499,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":48,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":535,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":252,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":351,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":122,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":441,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":22,"com.google.gson.stream.JsonWriterTest.testNumbers":368,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":523,"com.google.gson.JsonParserTest.testParseInvalidJson":341,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":57,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":550,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":168,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":237,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":297,"com.google.gson.functional.CollectionTest.testQueueDeserialization":666,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":292,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":497,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":584,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":676,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":128,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":449,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":202,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":648,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":112,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":181,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":651,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":246,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":13,"com.google.gson.functional.MapTest.testRawMapSerialization":211,"com.google.gson.JsonParserTest.testParseReader":322,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":665,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":560,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":40,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":75,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":226,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":320,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":414,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":671,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":133,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":170,"com.google.gson.functional.PrimitiveTest.testByteSerialization":392,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":673,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":50,"com.google.gson.ObjectTypeAdapterTest.testSerialize":274,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":177,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":473,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":425,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":451,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":174,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":241,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":97,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":428,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":582,"com.google.gson.functional.MapTest.testMapWithQuotes":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":105,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":480,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":583,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":59,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":603,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":401,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":157,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":336,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":148,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":611,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":89,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":650,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":110,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":386,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":176,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":106,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":111,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":453,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":511,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":406,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":663,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":593,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":126,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":169,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":78,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":21,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":450,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":146,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":679,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":573,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":465,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":544,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":67,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":375,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":645,"com.google.gson.functional.ObjectTest.testNestedSerialization":227,"com.google.gson.internal.LinkedTreeMapTest.testClear":326,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":32,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":178,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":379,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":586,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":182,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":210,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":239,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":187,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":12,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":15,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":8,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":224,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":440,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":518,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":307,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":555,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":372,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":547,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":646,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":447,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":376,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":166,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":173,"com.google.gson.functional.CollectionTest.testSetSerialization":255,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":456,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":64,"com.google.gson.functional.StringTest.testStringValueSerialization":167,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":422,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":49,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":23,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":659,"com.google.gson.MixedStreamTest.testWriteInvalidState":431,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":591,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":481,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":411,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":485,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":36,"com.google.gson.stream.JsonWriterTest.testBooleans":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":109,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":367,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":242,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":324,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":233,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":442,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":347,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":403,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":51,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":620,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":4,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":409,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":435},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"cfedd3af-3e59-11e6-810c-8bcf0cbc13c3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"cfee21d0-3e59-11e6-810c-5d4861b9b66d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],"tindex":"cfee48e1-3e59-11e6-810c-67871155fdf8","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"cfee48e2-3e59-11e6-810c-e52c62f3dfe7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"cfee6ff3-3e59-11e6-810c-059d58dde22b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"cfee6ff4-3e59-11e6-810c-c3aa912bd5cb","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    synchronized(java.text.DateFormat) {\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException ignored) {\n        }\n        try {\n            return java.text.DateFormat.parse(json.getAsString());\n        } catch (java.text.ParseException e) {\n            throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"json","this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"cfee6ff5-3e59-11e6-810c-17b5b188484f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[62,63,67,279,280,281,282],"tindex":"cfee9706-3e59-11e6-810c-953fa71a235d","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[124,126],"tindex":"cfee9707-3e59-11e6-810c-1f5880353e27","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"cfee9708-3e59-11e6-810c-af3a4f898a29","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"cfee9709-3e59-11e6-810c-cb23eb00374d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"cfeebe1a-3e59-11e6-810c-f39e8436bdf8","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(jsonElement, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"jsonElement","this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"cfeebe1b-3e59-11e6-810c-5774ff3690af","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"cfeebe1c-3e59-11e6-810c-1534adcc06ba","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:75","type":"CtBinaryOperatorImpl","sourcecode":"(value != null) && (((type == (java.lang.Object.class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))"},"failures":[],"tindex":"cfeee52d-3e59-11e6-810c-eb131f55fbf1","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o != null) && (((o == o) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o","value":"o","java.lang.Object.class":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"cfeee52e-3e59-11e6-810c-8df728f9be4f","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[76,283,242],"tindex":"cfeee52f-3e59-11e6-810c-79444f496919","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[284,1,3,285,286,287,117,120,288],"tindex":"cfef0c40-3e59-11e6-810c-5de3ccc808e4","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"cfef0c41-3e59-11e6-810c-850870075f0b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"cfef0c42-3e59-11e6-810c-4ba79b7fb770","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[289],"tindex":"cfef0c43-3e59-11e6-810c-db37a1e6ac3f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[],"tindex":"cfef3354-3e59-11e6-810c-37da11cce098","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cfef3355-3e59-11e6-810c-3becc2749391","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[290,1,2,3,4,5,291,285,286,17,292,293,85,105,134,144,145,177,180,181,183,186,206,227,245,253,270],"tindex":"cfef3356-3e59-11e6-810c-7746ab87024c","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if ((!value) && (!value)) {\n        {\n            if (!value) {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write((value ? \"true\" : \"false\"));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl","sourcecode":"isObject"},"failures":[294,295,296,297,298,299,300,301,302,50,51,303,67,304,305,306,307,308,87,309,109,134,145,157,310,158,311,312,279,280,281,313,282,184,185,186,314,315,316,317,318,319,320,321,322,323,270,324,325,326,327,328,329,330,276,277,331,332],"tindex":"cfef5a67-3e59-11e6-810c-e3ff75b2fc3f","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"cfef8178-3e59-11e6-810c-eb5db5172350","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"cfef8179-3e59-11e6-810c-1565e48de5fb","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"cfefa88a-3e59-11e6-810c-b5220ccc0d0f","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[333],"tindex":"cfefa88b-3e59-11e6-810c-8ba213363b1a","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"cfefa88c-3e59-11e6-810c-cdc5498225cd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"cfefa88d-3e59-11e6-810c-7548f311f2e0","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[],"tindex":"cfefcf9e-3e59-11e6-810c-ad0f6561755b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if ((!unlink) && (!unlink)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"unlink","deserialize":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"cfefcf9f-3e59-11e6-810c-15b21255f4cb","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"cfeff6b0-3e59-11e6-810c-b1ae94f62fc0","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"cfeff6b1-3e59-11e6-810c-bde47ab4428e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"cfeff6b2-3e59-11e6-810c-1bfd1067b15b","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[334,301,335,304,306,87,336,337,279,281,282,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362],"tindex":"cfeff6b3-3e59-11e6-810c-fb8ce23a0c04","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element == null) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1291","type":"CtBinaryOperatorImpl","sourcecode":"(limit) != (pos)"},"failures":[],"tindex":"cfeff6b4-3e59-11e6-810c-0d46c4f25791","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize != targetSize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"targetSize","limit":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"cff01dc5-3e59-11e6-810c-918525ee4bb5","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:961","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"cff01dc6-3e59-11e6-810c-016419b883a5","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if ((dateStyle == timeStyle) || (p == dateStyle)) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[363],"tindex":"cff01dc7-3e59-11e6-810c-952acc7bb8af","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if ((replacement != null) && (replacement != null)) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"replacement","right":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[290,0,284,364,1,2,3,4,5,291,365,366,367,368,7,8,9,285,286,10,369,11,12,13,14,370,371,15,16,17,18,372,19,20,22,23,24,25,26,27,28,29,30,31,32,33,373,34,35,36,37,374,375,38,39,40,376,41,42,43,44,377,45,46,47,48,49,50,51,378,55,56,379,57,380,292,381,382,383,384,385,386,387,388,389,390,58,391,392,393,394,289,395,396,397,398,399,400,59,60,61,62,63,64,65,66,67,293,401,68,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,336,104,105,106,107,108,109,402,110,287,111,112,113,114,115,116,117,118,119,120,288,121,122,403,123,124,125,126,127,128,129,130,131,404,132,133,134,405,406,135,136,137,138,139,140,141,142,143,144,145,146,147,407,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,408,170,171,409,172,173,410,174,175,411,176,412,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,413,192,193,194,195,196,414,197,338,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,415,224,416,417,225,226,227,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,418,248,419,249,250,251,252,253,254,255,420,256,421,257,258,259,422,423,424,260,261,262,263,264,265,266,267,268,269,270,425,271,272,273,274,275,346,347,276,278],"tindex":"cff044d8-3e59-11e6-810c-55afa3a624c4","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (!root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"cff044d9-3e59-11e6-810c-eb077c036c6c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:59","type":"CtUnaryOperatorImpl","sourcecode":"!((delegate) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[9,285,286,426,294,427,428,10,429,369,11,12,13,430,14,431,371,15,432,433,434,18,372,435,436,437,438,439,440,19,20,441,442,22,23,24,25,26,27,28,29,30,297,298,31,32,33,373,299,34,443,444,35,445,300,36,37,374,377,45,446,447,46,47,448,449,48,450,49,335,451,452,453,454,52,455,456,53,54,457,458,459,378,460,461,462,463,464,465,466,55,467,468,56,469,470,471,472,473,474,475,476,379,477,478,479,480,481,57,482,483,380,484,485,292,486,487,488,489,381,490,491,492,382,383,493,494,495,384,496,497,498,499,500,501,502,503,385,504,386,505,387,388,506,507,389,508,509,390,510,58,511,512,513,391,392,393,394,289,395,514,515,516,517,396,518,397,519,520,521,398,399,522,400,523,524,59,525,60,303,526,527,61,62,63,528,64,65,66,529,67,530,293,401,68,531,69,70,71,532,72,74,75,76,533,77,78,79,534,535,80,536,81,283,537,538,304,305,82,83,84,306,307,539,540,85,86,308,87,88,89,541,90,91,92,93,94,95,542,96,97,98,543,99,544,545,100,546,101,102,103,309,547,548,336,549,104,105,550,106,337,107,108,551,552,109,553,402,554,110,287,111,112,113,555,114,556,115,116,557,117,558,118,119,120,288,559,121,560,561,122,562,403,123,563,124,125,564,565,126,127,128,129,130,566,567,131,404,568,132,569,570,133,571,134,572,573,574,135,136,137,138,139,575,576,140,577,141,142,143,144,145,146,147,407,148,149,150,151,152,153,154,155,156,578,157,310,158,311,312,579,159,160,161,162,163,580,581,164,582,165,583,584,585,166,586,587,167,279,280,281,313,282,588,589,590,168,169,591,408,592,170,171,409,593,594,172,173,410,595,596,597,174,598,175,599,411,600,176,601,412,602,177,178,179,180,181,182,183,184,603,604,185,186,187,605,188,606,607,189,608,190,609,610,191,611,413,192,193,612,194,195,196,414,613,197,614,615,338,616,617,333,198,199,618,619,200,620,201,314,202,621,622,315,623,203,204,205,316,624,625,206,626,207,627,208,209,210,211,628,212,629,317,213,630,631,214,215,216,632,633,217,218,219,634,635,220,636,637,221,638,639,222,640,641,223,642,224,643,416,644,417,225,645,226,227,646,228,647,648,229,649,230,231,650,232,651,652,653,654,233,236,655,656,657,238,318,239,319,320,240,241,242,243,244,245,246,247,418,658,659,660,248,419,249,250,251,661,662,252,663,664,253,254,665,255,420,321,256,666,421,257,258,259,422,423,424,260,261,262,263,264,265,266,267,268,667,668,269,669,270,670,671,672,673,272,273],"tindex":"cff06bea-3e59-11e6-810c-771e0ab9c712","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (!(typeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[],"tindex":"cff092fb-3e59-11e6-810c-a3a2ea4761e4","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if ((!value) && (!value)) {\n        {\n            if (!value) {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write((value ? \"true\" : \"false\"));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"value","skipSerialize":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:382","type":"CtBinaryOperatorImpl","sourcecode":"delta == 0"},"failures":[],"tindex":"cff092fc-3e59-11e6-810c-ffe8d028d39a","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (nonempty == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"nonempty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[674,675,676,677,374],"tindex":"cff092fd-3e59-11e6-810c-598474aea697","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:306","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.this) == obj"},"failures":[],"tindex":"cff092fe-3e59-11e6-810c-8d048a13ef54","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return containsKey(o);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"o","this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"cff092ff-3e59-11e6-810c-c3599e129be6","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[678,679,680,377,45,446,447,46,47,448,449,48,450],"tindex":"cff0b910-3e59-11e6-810c-67d39a1f99b9","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"until"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[455,90],"tindex":"cff0b911-3e59-11e6-810c-f3553f11a37b","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"cff0b912-3e59-11e6-810c-078dec16759b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"cff0b913-3e59-11e6-810c-2741ead4fc55","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"cff0b914-3e59-11e6-810c-9b1cc16bb2c1","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"cff0b915-3e59-11e6-810c-bbf1497ed22f","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value != null) && ((value.peek()) != value)) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"value","obj":"value","reader":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1435","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\n'"},"failures":[],"tindex":"cff0e026-3e59-11e6-810c-25013cb1e063","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if (quote == '\\n') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"cff0e027-3e59-11e6-810c-99a09d080472","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"cff0e028-3e59-11e6-810c-33f738b81321","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"cff0e029-3e59-11e6-810c-57dd62e05659","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl","sourcecode":"declaredByRaw == null"},"failures":[],"tindex":"cff0e02a-3e59-11e6-810c-4b118e587ec7","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == null) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467245521273/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":60,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
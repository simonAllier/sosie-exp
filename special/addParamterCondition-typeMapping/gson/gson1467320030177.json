{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":155,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":162,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":110,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":15,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":206,"com.google.gson.functional.PrimitiveTest.testShortSerialization":49,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":152,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":42,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":195,"com.google.gson.MixedStreamTest.testWriteLenient":20,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":237,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":65,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":245,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":13,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":215,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":144,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":145,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":149,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":186,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":244,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":131,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":220,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":299,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":52,"com.google.gson.functional.ObjectTest.testSingletonLists":242,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":8,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":240,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":71,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":106,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":306,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":24,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":176,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":55,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":254,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":165,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":290,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":230,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":261,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":284,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":135,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":271,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":187,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":236,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":97,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":264,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":248,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":6,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":157,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":108,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":314,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":194,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":297,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":202,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":303,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":140,"com.google.gson.functional.JsonTreeTest.testToJsonTree":234,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":304,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":113,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":281,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":12,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":36,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":95,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":168,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":53,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":307,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":300,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":191,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":209,"com.google.gson.functional.MapTest.testGeneralMapField":75,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":246,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":224,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":5,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":82,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":330,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":252,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":10,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":48,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":43,"com.google.gson.MixedStreamTest.testReadMixedStreamed":175,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":333,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":258,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":275,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":129,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":104,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":199,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":184,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":63,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":169,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":179,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":9,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":54,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":124,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":59,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":238,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":137,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":4,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":318,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":159,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":141,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":22,"com.google.gson.functional.ObjectTest.testNestedDeserialization":265,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":229,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":189,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":276,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":41,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":133,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":257,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":21,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":249,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":310,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":3,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":288,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":292,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":86,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":47,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":200,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":313,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":279,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":89,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":218,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":241,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":151,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":161,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":204,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":25,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":183,"com.google.gson.functional.MapTest.testInterfaceTypeMap":203,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":332,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":227,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":280,"com.google.gson.functional.CollectionTest.testSetDeserialization":287,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":132,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":164,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":322,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":119,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":181,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":319,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":90,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":121,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":88,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":177,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":185,"com.google.gson.MixedStreamTest.testWriteClosed":174,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":107,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":190,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":44,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":247,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":283,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":91,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":142,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":270,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":126,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":268,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":56,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":311,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":64,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":250,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":285,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":147,"com.google.gson.functional.MapTest.testMapSerialization":74,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":273,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":57,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":207,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":68,"com.google.gson.functional.MapTest.testSerializeMaps":73,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":138,"com.google.gson.functional.MapTest.testComplexKeysSerialization":205,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":317,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":7,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":83,"com.google.gson.stream.JsonWriterTest.testNumbers":26,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":324,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":226,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":323,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":305,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":232,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":228,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":320,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":2,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":269,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":111,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":274,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":153,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":201,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":259,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":96,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":105,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":263,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":51,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":18,"com.google.gson.functional.MapTest.testRawMapSerialization":76,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":77,"com.google.gson.functional.PrettyPrintingTest.testMap":109,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":166,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":122,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":146,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":160,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":58,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":170,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":211,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":0,"com.google.gson.functional.PrimitiveTest.testByteSerialization":46,"com.google.gson.ObjectTypeAdapterTest.testSerialize":17,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":103,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":28,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":216,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":37,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":100,"com.google.gson.functional.FieldNamingTest.testIdentity":69,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":81,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":66,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":92,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":158,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":61,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":117,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":154,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":233,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":101,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":27,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":127,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":60,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":35,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":293,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":130,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":172,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":327,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":84,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":262,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":115,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":30,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":39,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":222,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":251,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":19,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":214,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":197,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":235,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":11,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":38,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":253,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":32,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":329,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":136,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":217,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":14,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":78,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":85,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":316,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":315,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":295,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":31,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":156,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":294,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":180,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":277,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":99,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":163,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":171,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":255,"com.google.gson.functional.ObjectTest.testNestedSerialization":123,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":308,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":33,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":34,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":291,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":210,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":116,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":243,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":80,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":120,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":219,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":225,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":118,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":302,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":282,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":198,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":134,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":196,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":192,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":256,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":272,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":167,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":128,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":94,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":50,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":208,"com.google.gson.functional.CollectionTest.testSetSerialization":150,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":331,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":98,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":112,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":70,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":289,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":325,"com.google.gson.MixedStreamTest.testWriteInvalidState":173,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":267,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":213,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":326,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":45,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":62,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":67,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":114,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":223,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":72,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":29,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":298,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":143,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":301,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":296,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":321,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":102,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":23,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":193,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":93,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":125,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":312,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":278,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":79,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":221},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"bf3c0752-3f04-11e6-a15c-89d0b19f4880","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if ((property.length()) == 0) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3ccaa3-3f04-11e6-a15c-834ae74b2e9d","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1451","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3cf1b4-3f04-11e6-a15c-2797370f943e","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if ((buffer[count]) == '\\n') {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"count","buffer":"buffer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[1,2,3,4],"tindex":"bf3d18c5-3f04-11e6-a15c-9fac76beb012","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.TypeVariable) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3d18c6-3f04-11e6-a15c-5d3fe0a42f42","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter != null) && ((typeAdapter.peek()) != typeAdapter)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"typeAdapter","obj":"typeAdapter","reader":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3d3fd7-3f04-11e6-a15c-5f8a3f4cb8bc","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.WildcardType) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3d66e8-3f04-11e6-a15c-c5a41a29ca1d","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.WildcardType) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[5,6,7,8,9,10,11,12,13,14,15],"tindex":"bf3d66e9-3f04-11e6-a15c-134231b3dd0e","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3e785a-3f04-11e6-a15c-fb2a4bfc44fc","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bf3e785b-3f04-11e6-a15c-7d6c7bb82e21","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:409","type":"CtBinaryOperatorImpl"},"failures":[1],"tindex":"bf3e9f6c-3f04-11e6-a15c-636b0eb128e4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170],"tindex":"bf3eed8d-3f04-11e6-a15c-75406d252289","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3f149e-3f04-11e6-a15c-8d81a394c4af","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"bf3f149f-3f04-11e6-a15c-ad6ae5625467","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3f3bb0-3f04-11e6-a15c-39cb1ee6f446","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n        java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n        return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n    } \n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"primitive","this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[171,172,17,18,19,173,174,175,176,21,177,178,179,180,181,182,183,184,185,186,30,31,187,56,188,57,189,58,190,191,59,192,193,194,195,196,63,197,64,65,66,67,68,69,70,198,199,71,200,201,202,203,204,75,205,206,207,208,209,210,211,82,212,213,214,215,216,217,218,84,219,86,87,88,89,90,220,91,92,93,221,94,222,95,223,224,225,226,227,228,229,230,231,97,98,232,102,233,234,103,104,105,235,106,107,110,111,115,116,236,237,238,239,240,241,117,242,243,244,118,245,246,247,248,249,250,251,119,252,120,253,254,121,255,122,123,256,257,258,259,124,260,125,261,262,126,263,264,265,266,127,128,130,131,132,267,268,133,134,269,270,135,271,272,136,137,273,274,138,139,275,140,141,276,277,278,279,142,280,281,282,283,284,143,285,286,144,145,148,287,149,150,152,288,153,289,290,291,154,292,155,293,294,156,157,158,159,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,160,312,313,314,315,161,316,317,318,319,162,320,321,322,323,324,325,326,327,328,329,330,331,332,333],"tindex":"bf3f3bb1-3f04-11e6-a15c-73c1b2683072","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bf3f89d2-3f04-11e6-a15c-bd8b27792d94","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467319708583/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":17,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":352,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":213,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":12,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":276,"com.google.gson.stream.JsonWriterTest.testRepeatedName":9,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":115,"com.google.gson.MixedStreamTest.testWriteLenient":30,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":173,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":361,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":308,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":318,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":195,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":246,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":202,"com.google.gson.functional.ObjectTest.testSingletonLists":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":169,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":247,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":214,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":346,"com.google.gson.stream.JsonWriterTest.testStrings":18,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":184,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":421,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":21,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":64,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":131,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":323,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":355,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":336,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":416,"com.google.gson.functional.EnumTest.testEnumCaseMapping":194,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":34,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":212,"com.google.gson.functional.JsonTreeTest.testToJsonTree":390,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":328,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":385,"com.google.gson.stream.JsonWriterTest.testNulls":7,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":403,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":152,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":61,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":250,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":427,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":315,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":297,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":432,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":94,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":288,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":334,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":370,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":32,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":408,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":238,"com.google.gson.JsonParserTest.testParseString":423,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":13,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":62,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":86,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":375,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":227,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":168,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":410,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":405,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":124,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":244,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":347,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":274,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":87,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":391,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":396,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":54,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":340,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":2,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":372,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":378,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":126,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":138,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":172,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":163,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":369,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":203,"com.google.gson.functional.EnumTest.testEnumSet":188,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":284,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":103,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":261,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":289,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":23,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":137,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":187,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":331,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":90,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":55,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":353,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":49,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":118,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":242,"com.google.gson.functional.MapTest.testMapSerialization":266,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":51,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":433,"com.google.gson.functional.MapTest.testSerializeMaps":260,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":306,"com.google.gson.functional.MapTest.testComplexKeysSerialization":273,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":400,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":234,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":299,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":257,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":430,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":185,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":326,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":116,"com.google.gson.functional.MapTest.testStringKeyDeserialization":417,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":105,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":97,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":275,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":206,"com.google.gson.functional.PrettyPrintingTest.testMap":324,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":311,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":149,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":20,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":63,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":160,"com.google.gson.functional.CollectionTest.testQueueSerialization":312,"com.google.gson.functional.MapTest.testMapSerializationEmpty":394,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":14,"com.google.gson.functional.MapTest.testMapOfMapSerialization":265,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":374,"com.google.gson.JavaSerializationTest.testMapIsSerializable":402,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":42,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":83,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":111,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":215,"com.google.gson.functional.FieldNamingTest.testIdentity":307,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":36,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":117,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":279,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":363,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":389,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":24,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":216,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":367,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":81,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":344,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":181,"com.google.gson.functional.MapTest.testMapSubclassSerialization":259,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":376,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":197,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":28,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":65,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":208,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":411,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":136,"com.google.gson.functional.EnumTest.testEnumSubclass":191,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":84,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":22,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":73,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":366,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":104,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":278,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":381,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":343,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":429,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":80,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":176,"com.google.gson.MixedStreamTest.testWriteNulls":29,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":229,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":225,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":298,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":108,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":281,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":46,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":217,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":267,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":199,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":143,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":178,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":301,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":75,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":43,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":373,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":40,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":166,"com.google.gson.functional.MapTest.testMapDeserialization":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":162,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":329,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":258,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":342,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":129,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":262,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":252,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":249,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":406,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":211,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":287,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":293,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":153,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":125,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":277,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":325,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":392,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":180,"com.google.gson.functional.PrimitiveTest.testShortSerialization":95,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":254,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":338,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":428,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":155,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":303,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":190,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":310,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":196,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":425,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":98,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":322,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":412,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":349,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":101,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":58,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":377,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":294,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":145,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":350,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":106,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":193,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":121,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":339,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":316,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":204,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":167,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":157,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":243,"com.google.gson.stream.JsonWriterTest.testNullStringValue":5,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":255,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":383,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":82,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":99,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":47,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":189,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":251,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":354,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":418,"com.google.gson.functional.MapTest.testGeneralMapField":270,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":223,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":205,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":231,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":174,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":393,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":146,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":237,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":89,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":78,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":25,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":319,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":165,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":415,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":114,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":109,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":241,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":68,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":8,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":431,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":164,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":113,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":132,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":395,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":380,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":335,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":45,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":135,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":93,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":379,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":365,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":413,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":321,"com.google.gson.functional.ObjectTest.testNullSerialization":285,"com.google.gson.stream.JsonWriterTest.testDoubles":15,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":123,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":269,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":371,"com.google.gson.functional.MapTest.testInterfaceTypeMap":268,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":351,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":207,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":128,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":404,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":57,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":192,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":147,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":333,"com.google.gson.MixedStreamTest.testWriteClosed":357,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":314,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":282,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":140,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":127,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":360,"com.google.gson.stream.JsonWriterTest.testLongs":6,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":44,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":179,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":130,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":283,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":313,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":69,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":170,"com.google.gson.stream.JsonWriterTest.testNumbers":17,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":38,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":77,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":388,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":300,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":359,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":79,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":177,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":159,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":239,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":309,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":27,"com.google.gson.functional.MapTest.testRawMapSerialization":272,"com.google.gson.JsonParserTest.testParseReader":422,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":59,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":119,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":290,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":420,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":256,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":397,"com.google.gson.functional.PrimitiveTest.testByteSerialization":92,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":183,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":224,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":399,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":71,"com.google.gson.ObjectTypeAdapterTest.testSerialize":345,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":235,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":401,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":341,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":362,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":230,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":304,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":141,"com.google.gson.functional.MapTest.testMapWithQuotes":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":150,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":102,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":112,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":148,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":201,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":133,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":330,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":156,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":151,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":158,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":364,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":186,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":175,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":122,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":358,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":198,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":110,"com.google.gson.functional.ObjectTest.testNestedSerialization":291,"com.google.gson.internal.LinkedTreeMapTest.testClear":426,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":48,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":76,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":236,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":240,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":271,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":302,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":245,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":26,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":31,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":19,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":286,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":384,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":35,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":60,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":219,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":228,"com.google.gson.functional.CollectionTest.testSetSerialization":320,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":107,"com.google.gson.functional.StringTest.testStringValueSerialization":220,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":327,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":70,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":39,"com.google.gson.MixedStreamTest.testWriteInvalidState":356,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":232,"com.google.gson.stream.JsonWriterTest.testBooleans":4,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":53,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":154,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":305,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":424,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":296,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":332,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":348,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":142,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":171,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":72,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":11,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":226},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"c8c63869-3e48-11e6-977b-8fd5eaba8ebc","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (!(typeAdapter instanceof com.google.gson.JsonPrimitive)) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonStreamParser:82","type":"CtUnaryOperatorImpl","sourcecode":"!(hasNext())"},"failures":[],"tindex":"c8c6ad9a-3e48-11e6-977b-41e78252df68","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (!(boolean))\n        return false;\n    \n    java.lang.Object java.lang.Object = field.get(value);\n    return fieldValue != value;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8c6ad9b-3e48-11e6-977b-ebae1b3b7245","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8c6d4ac-3e48-11e6-977b-c182838a7e55","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"c8c6d4ad-3e48-11e6-977b-bfa6accb65c8","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[0,1,2,3],"tindex":"c8c6fbbe-3e48-11e6-977b-c7851860edcf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:583","type":"CtBinaryOperatorImpl","sourcecode":"context != (com.google.gson.stream.JsonScope.EMPTY_OBJECT)"},"failures":[],"tindex":"c8c6fbbf-3e48-11e6-977b-f35e422e50e6","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length != offset) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.EMPTY_OBJECT":"offset","context":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:51","type":"CtBinaryOperatorImpl","sourcecode":"(in.peek()) == (com.google.gson.stream.JsonToken.NULL)"},"failures":[],"tindex":"c8c722d0-3e48-11e6-977b-ff2af6ddbc52","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src.peek()) == src) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"src","com.google.gson.stream.JsonToken.NULL":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"c8c749e1-3e48-11e6-977b-6110f3a321da","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350],"tindex":"c8c749e2-3e48-11e6-977b-390a3c8faac7","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[351,17,24,27,28,30,35,36,37,45,46,49,51,52,56,57,58,59,60,61,62,63,66,67,68,69,70,73,76,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,105,106,107,110,111,112,115,116,117,119,123,125,127,129,131,133,134,135,136,137,138,139,140,141,142,143,144,148,150,154,165,179,184,187,197,198,199,200,201,202,203,210,211,222,226,229,230,231,234,235,238,239,241,242,243,244,245,247,258,260,266,270,272,275,277,278,279,281,284,286,289,290,291,292,293,295,303,304,305,306,307,308,310,311,313,316,318,320,321,323,324,325,326,327,328,329,330,340,341,342,345,347,348,349],"tindex":"c8c79803-3e48-11e6-977b-ff4b5fb2c523","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:556","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[],"tindex":"c8c7e624-3e48-11e6-977b-45313ee113c3","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"modifier","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"c8c7e625-3e48-11e6-977b-35facc5b85f1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"c8c7e626-3e48-11e6-977b-451165b6ae97","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"c8c80d37-3e48-11e6-977b-df16f172e229","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    try {\n        return key != null ? find(((K)(key)), false) : null;\n    } catch (java.lang.ClassCastException e) {\n        return null;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.STRING)) && (token != (com.google.gson.stream.JsonToken.NUMBER))"},"failures":[],"tindex":"c8c80d38-3e48-11e6-977b-75f56bf85d88","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if ((key != key) && (token != key)) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"key","token":"key","com.google.gson.stream.JsonToken.NUMBER":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:208","type":"CtBinaryOperatorImpl","sourcecode":"(peek()) == (com.google.gson.stream.JsonToken.NAME)"},"failures":[],"tindex":"c8c83449-3e48-11e6-977b-b3f0ddfe500a","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    return (removeInternalByKey(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key","com.google.gson.stream.JsonToken.NAME":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"c8c8344a-3e48-11e6-977b-53c8458b088d","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl","sourcecode":"(!(lenient)) && (!root)"},"failures":[49,352,51,353,354],"tindex":"c8c85b5b-3e48-11e6-977b-2d1e17c19dd2","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if ((!serialization) && (!serialization)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"serialization","lenient":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"c8c8826c-3e48-11e6-977b-e1be2a336970","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"c8c8826d-3e48-11e6-977b-b39e81ddf473","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"c8c8826e-3e48-11e6-977b-414fed26814a","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            return java.lang.String.valueOf(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            return java.lang.Boolean.toString(primitive.getAsBoolean());\n        } else if (primitive.isString()) {\n            return primitive.getAsString();\n        } else {\n            throw new java.lang.AssertionError();\n        }\n    } else if (keyElement.isJsonNull()) {\n        return \"null\";\n    } else {\n        throw new java.lang.AssertionError();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"keyElement","this":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"c8c8a97f-3e48-11e6-977b-197b8911485c","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[20,21,22,23,355,24,25,26,27,28,29,356,30,31,357,32,33,34,35,36,37,358,38,39,40,41,42,43,44,45,46,359,360,47,48,50,51,53,54,55,57,65,66,67,68,69,70,72,361,362,363,364,365,366,367,368,369,370,73,371,74,75,372,76,77,373,78,79,374,80,375,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,376,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,377,117,378,118,119,120,379,121,122,123,124,125,380,381,382,126,127,128,383,384,129,130,385,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,386,175,176,177,178,179,180,181,182,183,184,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,387,210,388,211,389,390,212,213,214,215,216,217,218,219,220,221,222,223,391,224,225,226,227,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,249,250,257,258,259,260,261,262,264,265,266,392,267,268,393,269,270,272,273,394,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,395,396,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,397,398,399,343,344,400],"tindex":"c8c8a980-3e48-11e6-977b-19b2e1d9ff89","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[401],"tindex":"c8c8d091-3e48-11e6-977b-9f5f2752e3c5","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[],"tindex":"c8c8d092-3e48-11e6-977b-6da44ea8edf1","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:306","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.this) == obj"},"failures":[],"tindex":"c8c8f7a3-3e48-11e6-977b-d95cae43a0fb","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"o","this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[402,403,404,359,360,352,354,405,406,71,72,407,110,381,382,383,384,385,131,408,154,184,197,210,388,211,389,390,409,410,411,412,413,242,243,244,414,415,416,417,418,419,420,421,422,423,340,424,425,426,427,428,429,430,349,431,432,433],"tindex":"c8c8f7a4-3e48-11e6-977b-07e6b1d81553","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"c8c91eb5-3e48-11e6-977b-7bdb4e38606e","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if ((memberName != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:183","type":"CtBinaryOperatorImpl","sourcecode":"comparison < 0"},"failures":[],"tindex":"c8c91eb6-3e48-11e6-977b-cbe2ff042243","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize < 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"comparison":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"c8c91eb7-3e48-11e6-977b-41cf2768003f","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    writeDeferredName();\n                    java.lang.String java.lang.String = value.toString();\n                    if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                        throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n                    } \n                    beforeValue(false);\n                    java.io.Writer.append(string);\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:793","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME)"},"failures":[],"tindex":"c8c91eb8-3e48-11e6-977b-e911d7e43be5","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467238681934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":32,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
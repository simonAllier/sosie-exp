{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":286,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":225,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":426,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":92,"com.google.gson.stream.JsonWriterTest.testRepeatedName":418,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":200,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":353,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":259,"com.google.gson.MixedStreamTest.testWriteLenient":272,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":65,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":267,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":191,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":198,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":335,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":80,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":248,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":169,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":314,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":380,"com.google.gson.functional.ObjectTest.testSingletonLists":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":63,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":81,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":226,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":397,"com.google.gson.stream.JsonWriterTest.testStrings":439,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":138,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":343,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":390,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":356,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":496,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":270,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":140,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":431,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":299,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":6,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":176,"com.google.gson.functional.EnumTest.testEnumCaseMapping":487,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":224,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":392,"com.google.gson.functional.JsonTreeTest.testToJsonTree":327,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":145,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":371,"com.google.gson.stream.JsonWriterTest.testNulls":415,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":451,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":493,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":212,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":481,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":118,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":341,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":36,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":395,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":155,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":174,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":258,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":346,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":394,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":73,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":135,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":427,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":29,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":494,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":23,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":102,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":62,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":260,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":271,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":240,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":363,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":403,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":323,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":469,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":30,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":98,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":160,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":4,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":222,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":339,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":434,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":15,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":204,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":298,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":366,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":116,"com.google.gson.stream.JsonWriterTest.testEmptyArray":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":58,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":281,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":257,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":266,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":322,"com.google.gson.functional.CollectionTest.testSetDeserialization":373,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":170,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":152,"com.google.gson.functional.EnumTest.testEnumSet":242,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":313,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":473,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":462,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":156,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":280,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":312,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":283,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":430,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":171,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":329,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":33,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":223,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":43,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":233,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":360,"com.google.gson.functional.MapTest.testMapSerialization":464,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":287,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":301,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":77,"com.google.gson.functional.MapTest.testSerializeMaps":83,"com.google.gson.functional.MapTest.testComplexKeysSerialization":300,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":402,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":108,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":120,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":388,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":386,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":476,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":143,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":201,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":1,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":124,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":39,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":470,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":111,"com.google.gson.functional.PrettyPrintingTest.testMap":141,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":193,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":49,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":400,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":495,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":55,"com.google.gson.functional.MapTest.testMapSerializationEmpty":468,"com.google.gson.functional.CollectionTest.testQueueSerialization":480,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":435,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":437,"com.google.gson.functional.MapTest.testMapOfMapSerialization":86,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":21,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":411,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":26,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":253,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":474,"com.google.gson.functional.FieldNamingTest.testIdentity":78,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":227,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":207,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":421,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":348,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":147,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":203,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":326,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":414,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":7,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":228,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":255,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":24,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":376,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":56,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":457,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":38,"com.google.gson.functional.MapTest.testMapSubclassSerialization":461,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":10,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":320,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":113,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":183,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":275,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":261,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":328,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":311,"com.google.gson.functional.EnumTest.testEnumSubclass":245,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":27,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":342,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":401,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":11,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":254,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":123,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":383,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":206,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":422,"com.google.gson.stream.JsonWriterTest.testTwoNames":410,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":377,"com.google.gson.stream.JsonWriterTest.testNullName":416,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":268,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":2,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":22,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":375,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":424,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":69,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":334,"com.google.gson.MixedStreamTest.testWriteNulls":398,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":471,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":419,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":100,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":119,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":309,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":127,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":149,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":381,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":182,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":304,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":87,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":229,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":166,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":319,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":456,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":93,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":396,"com.google.gson.JsonParserTest.testParseMixedArray":264,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":14,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":0,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":179,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":18,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":251,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":57,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":146,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":460,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":379,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":442,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":189,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":463,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":214,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":211,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":387,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":292,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":154,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":162,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":235,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":114,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":50,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":318,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":205,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":241,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":142,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":72,"com.google.gson.functional.PrimitiveTest.testShortSerialization":444,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":216,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":178,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":294,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":74,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":244,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":372,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":9,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":40,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":484,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":333,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":407,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":382,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":279,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":405,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":445,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":490,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":202,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":163,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":324,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":47,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":184,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":408,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":285,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":332,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":125,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":351,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":338,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":247,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":139,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":237,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":293,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":109,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":61,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":52,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":362,"com.google.gson.stream.JsonWriterTest.testNullStringValue":413,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":217,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":269,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":25,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":41,"com.google.gson.stream.JsonWriterTest.testEmptyObject":429,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":219,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":213,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":243,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":290,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":302,"com.google.gson.functional.MapTest.testGeneralMapField":90,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":337,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":97,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":105,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":110,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":66,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":466,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":13,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":447,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":32,"com.google.gson.MixedStreamTest.testReadMixedStreamed":278,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":19,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":8,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":361,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":482,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":432,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":297,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":177,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":60,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":82,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":42,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":128,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":46,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":186,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":417,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":59,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":208,"com.google.gson.functional.ObjectTest.testNestedDeserialization":352,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":475,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":159,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":485,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":288,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":364,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":175,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":181,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":310,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":35,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":236,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":262,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":307,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":483,"com.google.gson.functional.ObjectTest.testNullSerialization":479,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":239,"com.google.gson.stream.JsonWriterTest.testDoubles":436,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":12,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":89,"com.google.gson.functional.MapTest.testInterfaceTypeMap":88,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":433,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":112,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":367,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":246,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":489,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":115,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":48,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":173,"com.google.gson.MixedStreamTest.testWriteClosed":277,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":195,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":289,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":150,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":369,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":315,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":188,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":355,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":164,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":180,"com.google.gson.stream.JsonWriterTest.testLongs":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":71,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":151,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":190,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":194,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":358,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":187,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":384,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":197,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":454,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":249,"com.google.gson.stream.JsonWriterTest.testNumbers":438,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":17,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":325,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":95,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":121,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":354,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":20,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":70,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":359,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":84,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":347,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":54,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":136,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":350,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":192,"com.google.gson.functional.MapTest.testRawMapSerialization":91,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":274,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":491,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":157,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":234,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":303,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":486,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":99,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":137,"com.google.gson.functional.PrimitiveTest.testByteSerialization":443,"com.google.gson.ObjectTypeAdapterTest.testSerialize":273,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":458,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":132,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":263,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":441,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":305,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":104,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":75,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":316,"com.google.gson.functional.MapTest.testMapWithQuotes":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":449,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":122,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":130,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":448,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":168,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":423,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":308,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":349,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":330,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":51,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":107,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":340,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":53,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":185,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":306,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":68,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":96,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":472,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":238,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":209,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":284,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":129,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":488,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":344,"com.google.gson.functional.ObjectTest.testNestedSerialization":158,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":220,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":16,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":133,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":45,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":467,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":94,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":331,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":5,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":399,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":440,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":153,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":368,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":295,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":291,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":345,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":357,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":492,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":231,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":103,"com.google.gson.functional.CollectionTest.testSetSerialization":199,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":389,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":126,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":144,"com.google.gson.functional.StringTest.testStringValueSerialization":232,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":79,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":250,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":374,"com.google.gson.MixedStreamTest.testWriteInvalidState":276,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":478,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":106,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":221,"com.google.gson.stream.JsonWriterTest.testBooleans":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":452,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":76,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":117,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":378,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":172,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":404,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":455,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":459,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":425,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":101},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d273ca-3f12-11e6-ba4e-39a36e2a1157","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d3371b-3f12-11e6-ba4e-b17673e8e58d","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d35e2c-3f12-11e6-ba4e-7560b4802c7d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d3853d-3f12-11e6-ba4e-93776b3d495d","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"toResolve"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d559fe-3f12-11e6-ba4e-1340e052f9de","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d5810f-3f12-11e6-ba4e-0315aae2864f","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[0,1],"tindex":"94d58110-3f12-11e6-ba4e-0bcab39b90c5","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258],"tindex":"94d5a821-3f12-11e6-ba4e-7994b7e6fb62","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.WildcardType) {\n        {\n            if (src instanceof java.lang.Class<?>) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d5cf32-3f12-11e6-ba4e-332b189b6508","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d5cf33-3f12-11e6-ba4e-2bf156418b48","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d5cf34-3f12-11e6-ba4e-a3bc31ce0a29","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d5f645-3f12-11e6-ba4e-ed9c8258d0c3","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc == typeOfSrc) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"typeOfSrc","java.util.Date.class":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[124,125,129,259,260,261,262],"tindex":"94d5f646-3f12-11e6-ba4e-012b220efe63","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl"},"failures":[],"tindex":"94d5f647-3f12-11e6-ba4e-c50bde0f3866","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[263],"tindex":"94d64468-3f12-11e6-ba4e-7f1da51ba439","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d64469-3f12-11e6-ba4e-596704eb73ca","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d66b7a-3f12-11e6-ba4e-67484c9b58a1","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"other","obj":"other","reader":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d66b7b-3f12-11e6-ba4e-3135519149ff","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[264,265,266,267,262,268,269,270,271],"tindex":"94d66b7c-3f12-11e6-ba4e-a792e9df97f4","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[272,26,29,30,35,39,41],"tindex":"94d6928d-3f12-11e6-ba4e-a1fcfe35cc3a","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d7a3fe-3f12-11e6-ba4e-e7088987872b","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d7cb0f-3f12-11e6-ba4e-b35c907e0a97","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d7cb10-3f12-11e6-ba4e-51978960e53a","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[2,3,273,274,275,276,277,278,279,4,280,281,282,283,9,10,284,285,43,286,287,288,44,289,290,46,291,292,293,294,295,60,67,71,74,75,76,77,78,79,296,297,81,298,84,299,88,89,90,300,92,301,93,302,94,303,105,304,106,113,267,305,306,307,308,309,310,311,312,116,313,314,315,316,317,318,319,320,321,117,118,119,120,322,121,323,324,123,125,126,325,131,326,327,132,135,136,328,138,329,142,143,330,331,332,259,260,261,333,262,147,148,334,335,149,336,337,150,338,339,151,340,152,341,153,342,343,156,344,157,158,345,160,346,347,161,348,162,163,349,164,350,351,352,353,165,166,168,169,170,179,180,181,182,354,355,184,356,357,185,186,358,359,187,360,361,362,363,364,268,365,366,188,367,269,368,369,370,189,190,371,191,372,196,373,198,199,200,201,374,375,203,204,205,376,377,206,270,207,208,209,378,210,379,380,213,214,381,215,217,218,382,219,220,221,222,233,234,235,236,237,238,239,383,384,240,385,241,386,387,246,388,249,250,251,252,253,254,256,389,257,258],"tindex":"94d7f221-3f12-11e6-ba4e-d39a11dfb5a0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d81932-3f12-11e6-ba4e-07b025b49acc","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d81933-3f12-11e6-ba4e-afafabf016ff","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d81934-3f12-11e6-ba4e-6b9927fd9789","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.WildcardType) {\n        {\n            if (src instanceof java.lang.Class<?>) {\n                {\n                    if (src == null) {\n                        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n                    } \n                    return toJson(src, src.getClass());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:861","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d84045-3f12-11e6-ba4e-7171810c3c4d","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"indexOfSubstring","com.google.gson.stream.JsonReader.PEEKED_FALSE":"indexOfSubstring"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d84046-3f12-11e6-ba4e-ad09487d12ce","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d84047-3f12-11e6-ba4e-4512b331046c","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d86758-3f12-11e6-ba4e-3dcafd1498e2","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d86759-3f12-11e6-ba4e-9b95f130bb86","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[390,391,52,62],"tindex":"94d8675a-3f12-11e6-ba4e-5f14381d8733","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d88e6b-3f12-11e6-ba4e-8928278c45b4","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:191","type":"CtBinaryOperatorImpl"},"failures":[392,393,394,395,2,3,396,273,397,274,275,398,276,272,399,277,4,264,400,390,401,402,403,404,405,406,407,408,5,409,410,411,412,413,414,391,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,280,7,8,441,442,9,10,284,11,13,14,16,17,19,20,22,24,25,26,27,28,29,30,31,32,33,34,443,35,36,444,37,39,40,41,42,445,43,446,287,44,45,46,47,447,48,448,49,449,450,451,50,452,294,51,52,53,54,55,56,57,58,59,60,453,61,62,63,454,455,64,65,66,67,68,69,70,456,71,72,457,73,74,75,76,77,78,79,458,459,80,81,82,460,461,83,462,463,84,85,86,464,465,87,88,466,89,90,467,91,300,468,469,470,92,93,94,95,96,97,98,99,100,101,102,103,471,104,105,106,107,108,109,110,111,112,113,114,308,472,310,311,312,116,313,315,316,317,319,321,117,118,119,120,121,122,473,123,124,125,126,127,128,129,474,130,475,131,132,133,134,135,136,137,138,476,477,329,139,140,141,142,143,144,145,146,330,331,147,148,149,150,151,478,152,479,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,360,362,363,366,188,367,189,190,191,192,372,193,480,194,195,481,196,197,198,482,199,483,484,200,201,202,203,204,205,206,270,485,207,208,209,210,211,212,213,214,215,216,217,486,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,237,238,239,240,241,242,243,244,245,246,247,487,248,249,250,251,252,253,488,489,490,491,492,493,494,495,496,254,256,257,258],"tindex":"94d88e6c-3f12-11e6-ba4e-5df220e9a0aa","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if ((topOfStack++) > topOfStack) {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"topOfStack","threshold":"topOfStack"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d8b57d-3f12-11e6-ba4e-2bd23394c381","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d8dc8e-3f12-11e6-ba4e-5b37d1756167","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"94d8dc8f-3f12-11e6-ba4e-d9383a701a07","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl"},"failures":[],"tindex":"94d8dc90-3f12-11e6-ba4e-6be50addb577","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94d903a1-3f12-11e6-ba4e-3330a2adcc4e","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94db74a2-3f12-11e6-ba4e-1b79d586ced7","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94dbc2c3-3f12-11e6-ba4e-f7d5fee00039","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94dbc2c4-3f12-11e6-ba4e-33841c493420","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94dbc2c5-3f12-11e6-ba4e-8b5a1e4e25c8","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94dbe9d6-3f12-11e6-ba4e-97aa46734ca9","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl"},"failures":[],"tindex":"94dc10e7-3f12-11e6-ba4e-0dd55fe7bd73","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value.isAssignableFrom(key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"value","classOfPrimitive":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"94dc10e8-3f12-11e6-ba4e-5dc8a9a488ac","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467325081293/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":47,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
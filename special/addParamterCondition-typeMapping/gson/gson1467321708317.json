{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":381,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":290,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":352,"com.google.gson.functional.StringTest.testStringValueDeserialization":631,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":127,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":470,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":334,"com.google.gson.stream.JsonWriterTest.testRepeatedName":349,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":443,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":262,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":598,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":395,"com.google.gson.MixedStreamTest.testWriteLenient":414,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":86,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":424,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":548,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":247,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":257,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":578,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":475,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":103,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":314,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":220,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":450,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":554,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":626,"com.google.gson.functional.ObjectTest.testSingletonLists":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":82,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":104,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":291,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":438,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":329,"com.google.gson.stream.JsonWriterTest.testStrings":354,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":564,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":187,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":514,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":587,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":7,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":477,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":366,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":599,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":639,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":269,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":189,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":471,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":530,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":11,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":432,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":227,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":386,"com.google.gson.functional.EnumTest.testEnumCaseMapping":313,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":1,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":289,"com.google.gson.functional.JsonTreeTest.testToJsonTree":394,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":431,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":194,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":406,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":65,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":359,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":363,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":541,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":506,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":276,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":376,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":254,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":164,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":372,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":637,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":585,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":43,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":340,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":444,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":206,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":225,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":325,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":590,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":339,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":383,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":184,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":483,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":482,"com.google.gson.JsonParserTest.testParseString":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":513,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":35,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":364,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":29,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":487,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":137,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":81,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":458,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":396,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":468,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":527,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":408,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":505,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":241,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":559,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":125,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":36,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":576,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":469,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":133,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":211,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":5,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":287,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":582,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":21,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":266,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":333,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":532,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":518,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":242,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":157,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":429,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":391,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":534,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":565,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":85,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":76,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":426,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":324,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":558,"com.google.gson.functional.CollectionTest.testSetDeserialization":614,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":221,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":203,"com.google.gson.functional.EnumTest.testEnumSet":307,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":571,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":461,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":158,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":169,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":502,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":207,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":156,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":472,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":428,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":478,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":222,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":360,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":39,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":336,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":441,"com.google.gson.functional.MapTest.testHashMapDeserialization":522,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":610,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":510,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":288,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":492,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":52,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":298,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":239,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":569,"com.google.gson.functional.MapTest.testSortedMap":531,"com.google.gson.functional.MapTest.testMapSerialization":114,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":54,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":373,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":466,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":536,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":543,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":100,"com.google.gson.functional.MapTest.testSerializeMaps":108,"com.google.gson.functional.MapTest.testComplexKeysSerialization":123,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":570,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":533,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":144,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":166,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":647,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":283,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":379,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":643,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":646,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":192,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":263,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":592,"com.google.gson.functional.MapTest.testStringKeyDeserialization":387,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":545,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":171,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":47,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":126,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":447,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":147,"com.google.gson.functional.PrettyPrintingTest.testMap":190,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":442,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":250,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":62,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":567,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":6,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":365,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":546,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":295,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":632,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":73,"com.google.gson.functional.MapTest.testMapSerializationEmpty":124,"com.google.gson.functional.CollectionTest.testQueueSerialization":251,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":462,"com.google.gson.functional.MapTest.testMapOfMapSerialization":113,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":27,"com.google.gson.JavaSerializationTest.testMapIsSerializable":380,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":507,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":612,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":32,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":319,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":177,"com.google.gson.functional.FieldNamingTest.testIdentity":101,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":292,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":560,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":271,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":593,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":198,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":265,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":393,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":550,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":433,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":12,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":293,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":322,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":30,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":512,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":95,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":318,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":520,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":46,"com.google.gson.functional.MapTest.testMapSubclassSerialization":107,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":15,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":557,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":572,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":149,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":234,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":342,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":456,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":498,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":566,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":155,"com.google.gson.functional.EnumTest.testEnumSubclass":310,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":33,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":8,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":586,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":17,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":321,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":474,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":170,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":640,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":434,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":268,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":459,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":621,"com.google.gson.stream.JsonWriterTest.testNullName":326,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":402,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":3,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":540,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":378,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":463,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":584,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":28,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":619,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":90,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":577,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":521,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":139,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":574,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":135,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":165,"com.google.gson.CommentsTest.testParseComments":411,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":553,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":174,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":200,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":628,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":233,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":473,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":544,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":535,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":116,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":294,"com.google.gson.MixedStreamTest.testReadInvalidState":412,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":217,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":162,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":92,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":128,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":327,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":20,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":547,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":230,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":24,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":317,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":79,"com.google.gson.functional.MapTest.testMapDeserialization":384,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":75,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":195,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":106,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":356,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":625,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":110,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":245,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":278,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":275,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":409,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":644,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":180,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":645,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":497,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":205,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":213,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":300,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":150,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":66,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":555,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":267,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":306,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":115,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":191,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":94,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":430,"com.google.gson.functional.PrimitiveTest.testShortSerialization":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":563,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":280,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":476,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":229,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":457,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":377,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":68,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":440,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":97,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":309,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":249,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":14,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":374,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":524,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":453,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":48,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":261,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":511,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":630,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":344,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":417,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":51,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":486,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":361,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":264,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":214,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":561,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":58,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":235,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":346,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":480,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":573,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":172,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":460,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":596,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":581,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":312,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":188,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":302,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":500,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":145,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":562,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":80,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":279,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":446,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":70,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":240,"com.google.gson.stream.JsonWriterTest.testNullStringValue":347,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":509,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":404,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":608,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":435,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":481,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":31,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":49,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":284,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":277,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":308,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":382,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":388,"com.google.gson.functional.MapTest.testGeneralMapField":120,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":580,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":132,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":489,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":141,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":146,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":87,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":118,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":59,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":183,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":38,"com.google.gson.MixedStreamTest.testReadMixedStreamed":416,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":501,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":528,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":13,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":258,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":605,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":517,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":464,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":228,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":422,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":78,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":385,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":105,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":523,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":50,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":175,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":57,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":237,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":348,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":454,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":77,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":337,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":575,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":495,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":611,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":629,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":179,"com.google.gson.functional.ObjectTest.testNestedDeserialization":597,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":210,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":270,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":493,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":410,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":226,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":488,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":232,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":529,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":617,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":633,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":154,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":42,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":301,"com.google.gson.JavaSerializationTest.testListIsSerializable":423,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":399,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":552,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":260,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":304,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":519,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":525,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":18,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":119,"com.google.gson.functional.MapTest.testInterfaceTypeMap":117,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":542,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":148,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":244,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":368,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":436,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":311,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":320,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":151,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":642,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":60,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":224,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":448,"com.google.gson.MixedStreamTest.testWriteClosed":415,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":253,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":494,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":515,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":606,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":335,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":159,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":243,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":401,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":215,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":93,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":202,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":246,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":252,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":601,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":467,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":238,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":641,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":83,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":623,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":315,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":490,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":23,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":499,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":130,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":167,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":330,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":400,"com.google.gson.functional.CollectionTest.testQueueDeserialization":616,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":26,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":465,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":636,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":91,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":602,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":111,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":591,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":72,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":185,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":595,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":248,"com.google.gson.functional.MapTest.testRawMapSerialization":122,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":341,"com.google.gson.JsonParserTest.testParseReader":370,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":615,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":508,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":362,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":208,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":299,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":390,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":282,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":418,"com.google.gson.functional.PrimitiveTest.testByteSerialization":41,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":134,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":186,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":420,"com.google.gson.ObjectTypeAdapterTest.testSerialize":328,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":357,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":181,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":445,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":549,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":140,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":98,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":160,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":421,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":634,"com.google.gson.functional.MapTest.testMapWithQuotes":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":63,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":451,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":168,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":604,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":178,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":216,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":61,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":219,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":627,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":152,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":594,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":196,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":69,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":143,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":71,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":236,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":551,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":479,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":613,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":89,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":131,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":153,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":303,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":273,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":332,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":603,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":16,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":568,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":437,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":556,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":338,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":176,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":588,"com.google.gson.functional.ObjectTest.testNestedSerialization":209,"com.google.gson.internal.LinkedTreeMapTest.testClear":375,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":285,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":22,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":182,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":638,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":56,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":121,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":129,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":197,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":9,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":343,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":355,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":204,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":622,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":485,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":405,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":516,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":504,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":2,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":496,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":589,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":600,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":296,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":138,"com.google.gson.functional.CollectionTest.testSetSerialization":259,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":648,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":173,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":193,"com.google.gson.functional.StringTest.testStringValueSerialization":297,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":102,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":316,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":609,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":618,"com.google.gson.MixedStreamTest.testWriteInvalidState":413,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":537,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":452,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":142,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":455,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":67,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":99,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":369,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":163,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":624,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":223,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":84,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":358,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":526,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":351,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":136,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":425},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a77b90e3-3f08-11e6-bfe5-3f05771e8ae6","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    return toJsonTree(src);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:174","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"a77c5434-3f08-11e6-bfe5-ff50bf67495d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced == null) {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"unbalanced"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325],"tindex":"a77d1785-3f08-11e6-bfe5-cbbd2290dd8a","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a77d3e96-3f08-11e6-bfe5-d98cbc5bfeb6","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if ((src != src) && (token != src)) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"src","token":"src","com.google.gson.stream.JsonToken.NUMBER":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a77d65a7-3f08-11e6-bfe5-c506283ad792","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a77d65a8-3f08-11e6-bfe5-2770717ec845","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"a77d8cb9-3f08-11e6-bfe5-e1e253ab3671","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a77db3ca-3f08-11e6-bfe5-19ae4dd8a43a","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[326],"tindex":"a77e28fb-3f08-11e6-bfe5-65e76b09eaa1","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl"},"failures":[327,328,329,102,108,132,141,204,217,219,220,221,248,255,257,259],"tindex":"a77e500c-3f08-11e6-bfe5-479a226d5261","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (!(value instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:833","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a77e771d-3f08-11e6-bfe5-5ba0ea138f99","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (offset == counter) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"counter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a77e9e2e-3f08-11e6-bfe5-ab68c687aba1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:906","type":"CtBinaryOperatorImpl"},"failures":[0,330,331,332,333,334,335,336,337,338],"tindex":"a77e9e2f-3f08-11e6-bfe5-3bdabaf77c46","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:233","type":"CtMethodImpl","sourcecode":"private static int secondaryHash(int h) {\n    if (h == h) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            h ^= (h >>> 20) ^ (h >>> 12);\n            return (h ^ (h >>> 7)) ^ (h >>> 4);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"h","com.google.gson.stream.JsonReader.PEEKED_LONG":"h"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[1,339,340,3,4,328,329,341,342,343,5,6,344,345,346,9,347,348,349,350,351,352,353,354,355,10,13,356,14,15,16,19,20,23,39,52,54,55,56,57,58,59,60,62,63,64,65,66,67,69,71,72,73,74,75,76,77,78,79,80,82,83,85,86,87,89,90,91,92,93,94,96,97,98,99,100,101,102,357,358,103,104,105,107,108,109,110,111,112,113,114,116,117,119,120,121,122,123,125,126,127,128,129,130,131,134,135,137,138,140,141,143,145,146,147,148,149,150,152,153,154,155,156,157,158,159,160,161,162,359,163,164,165,166,167,168,169,170,171,172,173,174,175,176,179,180,181,182,183,184,185,186,187,360,188,190,191,192,196,197,198,199,200,201,202,203,204,207,208,209,211,212,213,214,215,216,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,251,253,254,255,256,257,258,259,261,262,263,265,266,267,268,269,270,271,272,273,274,275,277,278,279,280,281,283,284,285,286,287,289,290,291,292,293,294,295,296,297,298,299,300,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,361,362,363,364,365,366,321,324,325],"tindex":"a77ec540-3f08-11e6-bfe5-2feae7d27813","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:482","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a77f1361-3f08-11e6-bfe5-6997523859ed","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if ((start == start) || (peekStack == end)) {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"start","com.google.gson.stream.JsonScope.EMPTY_OBJECT":"start","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"a77f3a72-3f08-11e6-bfe5-5f213949beb0","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a77f3a73-3f08-11e6-bfe5-91e95789aa7e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:174","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a77f6184-3f08-11e6-bfe5-3f816fbed6e5","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            if (root != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n                    if (pivotLeft != null) {\n                        pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    } \n                    replaceInParent(root, pivot);\n                    pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n                    root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n                    root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n                    pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a7813645-3f08-11e6-bfe5-ef2d1d081d93","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[367,368,369,370,371,5,372,373,344,345,374,375,376,377,378,379,380,15,381,382,383,67,357,358,384,385,386,387,388,389,390,391,176,392,180,393,394,187,395,396,397,398,399,216,400,401,239,240,241,402,403,404,405,406,407,269,408,409],"tindex":"a7815d56-3f08-11e6-bfe5-295d7dceccaf","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a7818467-3f08-11e6-bfe5-4b8881cb3476","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a781ab78-3f08-11e6-bfe5-ddafa011754b","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[328,329,88,102,108,111,115,117,118,119,121,127,132,138,142,143,152,155,156,160,161,393,197,212,230,233,400,401,410,402,403,242,244,404,405,246,406,248,254,262,265,273,274,275,277,278,279,281,283,304,316,320,363,364,366],"tindex":"a781d289-3f08-11e6-bfe5-452baf07f922","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value != null) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[411,1,2,3,4,328,329,341,412,342,413,414,343,415,416,417,5,6,7,8,418,419,420,9,421,10,11,12,13,422,380,423,424,425,426,427,428,429,14,15,16,430,431,432,17,433,18,434,435,436,437,438,19,439,440,20,441,442,443,444,445,446,447,21,22,448,449,450,451,452,23,453,24,25,454,455,26,456,457,27,458,28,29,459,460,30,31,461,462,463,32,464,465,466,467,468,469,470,471,33,472,34,473,35,36,474,475,37,476,477,38,478,39,479,480,481,40,41,42,43,44,45,46,482,483,484,47,485,48,486,487,488,49,50,489,51,490,491,52,53,381,54,492,493,55,494,382,56,57,495,58,59,60,496,497,498,62,499,64,65,66,500,501,502,68,503,69,70,71,72,73,504,74,505,75,76,506,77,507,78,79,80,81,82,508,509,83,510,85,511,86,87,512,88,89,90,91,92,93,513,514,94,96,515,97,98,99,100,101,102,103,516,517,104,518,519,105,520,106,521,522,523,107,108,524,525,109,526,110,384,111,527,528,385,529,112,113,114,386,530,115,116,531,117,118,119,120,121,122,532,123,124,387,125,533,534,126,127,535,536,128,388,129,389,390,130,131,537,132,133,134,135,136,538,539,137,138,139,540,541,542,140,543,141,544,142,545,143,546,144,547,145,146,147,148,149,150,151,548,549,550,551,552,152,553,153,154,155,156,157,158,554,159,160,161,555,162,556,557,359,163,164,165,166,558,167,168,559,169,391,560,561,170,171,172,562,173,174,175,563,176,564,177,178,179,392,180,393,394,181,182,183,184,185,565,186,566,187,567,568,569,360,570,571,188,572,189,190,191,192,193,194,195,196,197,573,395,396,397,398,399,574,575,576,198,199,577,578,200,579,580,201,581,582,202,583,584,203,585,204,586,205,587,206,207,588,208,209,210,589,211,590,591,592,212,593,213,214,594,215,595,596,597,598,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,400,401,234,235,599,600,236,237,601,602,238,603,239,604,605,240,241,410,402,403,242,243,244,404,405,606,607,245,246,406,247,248,249,250,608,609,610,251,252,253,254,255,611,612,256,613,614,257,258,615,259,260,407,261,616,262,617,263,618,264,619,265,266,267,620,621,268,269,270,622,271,272,623,273,624,274,625,626,275,627,276,277,278,628,279,280,281,282,629,283,630,284,285,286,287,288,631,289,290,291,292,293,632,633,294,634,295,635,636,637,296,638,639,297,298,299,300,301,302,303,304,640,641,305,642,306,643,644,307,308,309,310,645,646,311,647,312,313,314,315,316,317,318,319,321,322,323,648,324,325],"tindex":"a781f99a-3f08-11e6-bfe5-b965e57180b4","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a78220ab-3f08-11e6-bfe5-3131bedc2cd9","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a78247bc-3f08-11e6-bfe5-cb4bc90e3894","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467321199176/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
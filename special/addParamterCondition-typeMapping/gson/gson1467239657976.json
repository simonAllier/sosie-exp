{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":61,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":581,"com.google.gson.functional.StringTest.testStringValueDeserialization":579,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":32,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":536,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":272,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":109,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":394,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":173,"com.google.gson.MixedStreamTest.testWriteLenient":606,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":545,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":8,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":146,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":163,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":354,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":320,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":108,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":480,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":411,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":281,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":124,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":231,"com.google.gson.functional.ObjectTest.testSingletonLists":352,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":537,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":265,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":582,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":28,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":91,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":555,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":372,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":86,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":323,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":562,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":595,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":399,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":312,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":426,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":201,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":2,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":257,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":43,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":200,"com.google.gson.functional.EnumTest.testEnumCaseMapping":107,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":69,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":580,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":256,"com.google.gson.functional.JsonTreeTest.testToJsonTree":497,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":557,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":254,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":71,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":511,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":462,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":529,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":35,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":156,"com.google.gson.functional.ObjectTest.testNullDeserialization":384,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":403,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":592,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":366,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":82,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":332,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":273,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":373,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":42,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":223,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":381,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":81,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":558,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":227,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":337,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":554,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":317,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":296,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":510,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":385,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":458,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":535,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":174,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":193,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":309,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":526,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":493,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":14,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":215,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":179,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":318,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":310,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":380,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":452,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":80,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":360,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":573,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":116,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":211,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":277,"com.google.gson.metrics.PerformanceTest.testDummy":84,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":484,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":245,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":122,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":425,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":16,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":88,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":217,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":543,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":528,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":222,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":73,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":406,"com.google.gson.functional.CollectionTest.testSetDeserialization":162,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":412,"com.google.gson.functional.EnumTest.testEnumSet":98,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":365,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":486,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":301,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":123,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":15,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":74,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":516,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":374,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":1,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":121,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":314,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":424,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":325,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":39,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":97,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":68,"com.google.gson.functional.MapTest.testHashMapDeserialization":182,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":270,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":541,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":63,"com.google.gson.MixedStreamTest.testReadNulls":607,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":60,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":132,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":95,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":489,"com.google.gson.functional.MapTest.testSortedMap":204,"com.google.gson.functional.MapTest.testMapSerialization":199,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":62,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":45,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":307,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":465,"com.google.gson.functional.MapTest.testSerializeMaps":185,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":577,"com.google.gson.functional.MapTest.testComplexKeysSerialization":212,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":485,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":216,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":472,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":105,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":405,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":240,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":65,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":144,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":92,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":103,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":66,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":429,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":111,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":383,"com.google.gson.functional.MapTest.testStringKeyDeserialization":214,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":76,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":469,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":20,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":339,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":218,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":276,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":271,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":414,"com.google.gson.functional.PrettyPrintingTest.testMap":427,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":149,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":93,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":439,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":506,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":85,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":471,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":585,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":589,"com.google.gson.functional.CollectionTest.testQueueSerialization":153,"com.google.gson.functional.MapTest.testMapSerializationEmpty":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":523,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":302,"com.google.gson.functional.MapTest.testMapOfMapSerialization":198,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":531,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":159,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":304,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":29,"com.google.gson.functional.FieldNamingTest.testIdentity":578,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":583,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":17,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":442,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":386,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":10,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":115,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":351,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":496,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":259,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":3,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":33,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":584,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":299,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":547,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":556,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":180,"com.google.gson.functional.MapTest.testMapSubclassSerialization":184,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":335,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":130,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":435,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":488,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":291,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":415,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":560,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":603,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":175,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":505,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":90,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":120,"com.google.gson.functional.EnumTest.testEnumSubclass":101,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":313,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":87,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":370,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":258,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":219,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":319,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":19,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":139,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":261,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":398,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":56,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":297,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":397,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":243,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":77,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":461,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":303,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":364,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":114,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":550,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":353,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":181,"com.google.gson.MixedStreamTest.testWriteNulls":604,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":460,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":177,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":454,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":118,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":404,"com.google.gson.CommentsTest.testParseComments":613,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":24,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":235,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":355,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":316,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":467,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":477,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":44,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":203,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":587,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":401,"com.google.gson.MixedStreamTest.testReadInvalidState":601,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":408,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":129,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":552,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":46,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":269,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":473,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":75,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":474,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":286,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":533,"com.google.gson.functional.MapTest.testMapDeserialization":191,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":527,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":432,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":31,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":230,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":190,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":252,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":234,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":232,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":145,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":102,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":503,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":371,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":387,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":416,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":512,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":128,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":143,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":395,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":202,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":54,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":255,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":26,"com.google.gson.functional.PrimitiveTest.testShortSerialization":333,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":36,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":322,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":420,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":292,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":321,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":517,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":574,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":100,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":148,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":434,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":186,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":285,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":7,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":341,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":67,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":544,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":611,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":348,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":342,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":113,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":18,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":251,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":499,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":561,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":327,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":53,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":21,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":298,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":392,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":359,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":106,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":136,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":487,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":513,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":413,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":55,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":22,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":229,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":534,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":58,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":275,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":520,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":539,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":150,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":262,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":328,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":300,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":345,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":171,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":99,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":233,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":64,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":47,"com.google.gson.functional.MapTest.testGeneralMapField":208,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":357,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":451,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":347,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":37,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":220,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":546,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":206,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":226,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":266,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":500,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":324,"com.google.gson.MixedStreamTest.testReadMixedStreamed":610,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":194,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":514,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":4,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":164,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":491,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":482,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":305,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":419,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":532,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":195,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":571,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":183,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":25,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":346,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":447,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":288,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":530,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":178,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":443,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":498,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":239,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":30,"com.google.gson.functional.ObjectTest.testNestedDeserialization":393,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":378,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":400,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":438,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":242,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":418,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":344,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":476,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":110,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":196,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":586,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":119,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":331,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":135,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":12,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":176,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":167,"com.google.gson.functional.ObjectTest.testNullSerialization":367,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":138,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":570,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":187,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":207,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":260,"com.google.gson.functional.MapTest.testInterfaceTypeMap":205,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":463,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":38,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":247,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":263,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":104,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":142,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":417,"com.google.gson.MixedStreamTest.testReadClosed":602,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":501,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":41,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":279,"com.google.gson.MixedStreamTest.testWriteClosed":609,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":155,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":440,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":250,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":358,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":559,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":125,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":246,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":479,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":390,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":553,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":253,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":361,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":154,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":566,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":308,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":568,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":140,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":540,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":51,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":349,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":284,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":508,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":407,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":448,"com.google.gson.functional.CollectionTest.testQueueDeserialization":169,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":478,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":290,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":306,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":57,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":591,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":437,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":551,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":567,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":192,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":522,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":228,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":391,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":147,"com.google.gson.functional.MapTest.testRawMapSerialization":210,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":600,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":538,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":133,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":376,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":50,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":238,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":89,"com.google.gson.functional.PrimitiveTest.testByteSerialization":330,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":453,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":598,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":224,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":274,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":9,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":464,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":575,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":126,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":588,"com.google.gson.functional.MapTest.testMapWithQuotes":197,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":507,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":590,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":13,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":70,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":490,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":170,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":504,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":410,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":34,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":117,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":389,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":433,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":315,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":519,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":363,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":509,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":521,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":564,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":326,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":96,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":161,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":456,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":5,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":549,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":137,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":444,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":569,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":436,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":94,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":6,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":264,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":27,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":375,"com.google.gson.functional.ObjectTest.testNestedSerialization":377,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":172,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":225,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":278,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":594,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":446,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":209,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":48,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":52,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":83,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":608,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":368,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":441,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":340,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":249,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":524,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":79,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":280,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":612,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":502,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":563,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":593,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":459,"com.google.gson.functional.CollectionTest.testSetSerialization":166,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":221,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":23,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":430,"com.google.gson.functional.StringTest.testStringValueSerialization":596,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":597,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":112,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":151,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":450,"com.google.gson.MixedStreamTest.testWriteInvalidState":605,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":362,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":283,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":289,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":468,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":515,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":576,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":402,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":445,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":40,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":542,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":599,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":189,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":421,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":455},"transformations":[{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9da79912-3e49-11e6-a325-cb7a6b73c309","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9da7e733-3e49-11e6-a325-ffd16e25c34e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"9da7e734-3e49-11e6-a325-c9c37b04fa06","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"9da7e735-3e49-11e6-a325-7b017fde057c","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"9da80e46-3e49-11e6-a325-a7d1bd94940b","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"tindex":"9da80e47-3e49-11e6-a325-1384ba30bdd7","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"9da83558-3e49-11e6-a325-8d1b470668df","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property != null) {\n        {\n            if (property != null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[55,56,57,58,59],"tindex":"9da83559-3e49-11e6-a325-73d207298f06","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"clazz","classOfPrimitive":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9da8355a-3e49-11e6-a325-4bdb3e977dec","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[60,61,62,63,64],"tindex":"9da85c6b-3e49-11e6-a325-c5611c567690","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[65,66,67],"tindex":"9da85c6c-3e49-11e6-a325-5b204c6c3df2","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[68,69],"tindex":"9da8837d-3e49-11e6-a325-b17d936d9b08","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[35],"tindex":"9da8837e-3e49-11e6-a325-c766ec016294","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"9da8837f-3e49-11e6-a325-4bd9acfdcfbf","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property != null) {\n        {\n            if (property != null) {\n                {\n                    add(property, createJsonElement(value));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"9da8aa90-3e49-11e6-a325-abc73169d9d9","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[70,71,72,73],"tindex":"9da8aa91-3e49-11e6-a325-8b375b8ddb2b","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof com.google.gson.JsonNull) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:501","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"9da8aa92-3e49-11e6-a325-2fd380b275ca","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:218","type":"CtInvocationImpl","sourcecode":"com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)"},"failures":[74,75,76],"tindex":"9da8d1a3-3e49-11e6-a325-bf351e52857f","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (com.google.gson.reflect.TypeToken.typeEquals(to, from, typeVarMap)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"to","typeVarMap":"typeVarMap","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[0,1,2,3,4,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,5,119,120,121,122,123,124,125,126,127,128,129,6,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,7,169,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,170,30,171,172,173,174,175,67,176,177,178,179,180,31,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,32,219,33,220,221,222,223,224,225,226,227,228,229,230,231,232,34,35,233,234,235,236,36,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,68,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,37,414,38,415,416,417,39,40,41,42,418,43,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,44,45,46,47,48,49,50,434,435,436,60,437,61,62,63,438,439,440,64,441,442,443,51,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,52,53,498,499,500,501,72,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,54,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,59,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,69,612,613],"tindex":"9da8d1a4-3e49-11e6-a325-43e7f8bff3af","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"9da8f8b5-3e49-11e6-a325-dff1786abebf","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (json.isBoolean()) {\n        {\n            if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n            } \n            java.util.Date java.util.Date = deserializeToDate(json);\n            if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                return date;\n            } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                return new java.sql.Timestamp(date.getTime());\n            } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                return new java.sql.Date(date.getTime());\n            } else {\n                throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"9da91fc6-3e49-11e6-a325-4751d095c254","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[],"tindex":"9da91fc7-3e49-11e6-a325-cf894021a5e7","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (!throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239294831/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":22,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
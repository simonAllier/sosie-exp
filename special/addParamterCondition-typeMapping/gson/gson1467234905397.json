{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":69,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":212,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":250,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":265,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":365,"com.google.gson.functional.StringTest.testStringValueDeserialization":364,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":2,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":161,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":333,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":165,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":245,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":154,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":35,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":211,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":324,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":95,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":179,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":359,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":29,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":80,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":72,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":73,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":77,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":177,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":260,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":164,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":231,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":149,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":151,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":49,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":118,"com.google.gson.functional.ObjectTest.testSingletonLists":175,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":98,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":298,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":144,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":91,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":25,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":337,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":79,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":344,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":191,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":86,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":137,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":205,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":347,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":348,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":167,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":311,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":88,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":209,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":374,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":182,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":216,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":162,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":62,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":321,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":233,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":89,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":116,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":102,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":141,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":123,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":243,"com.google.gson.functional.EnumTest.testEnumCaseMapping":34,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":305,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":124,"com.google.gson.functional.JsonTreeTest.testToJsonTree":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":334,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":345,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":140,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":168,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":320,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":328,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":93,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":11,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":120,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":271,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":256,"com.google.gson.functional.ObjectTest.testNullDeserialization":201,"com.google.gson.functional.MapTest.testGeneralMapField":105,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":180,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":219,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":108,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":234,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":284,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":372,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":187,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":1,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":313,"com.google.gson.MixedStreamTest.testReadMixedStreamed":380,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":241,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":111,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":322,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":0,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":14,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":304,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":314,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":114,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":170,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":297,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":169,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":343,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":330,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":319,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":202,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":332,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":278,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":96,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":159,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":351,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":67,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":273,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":327,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":312,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":125,"com.google.gson.functional.ObjectTest.testNestedDeserialization":210,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":84,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":217,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":268,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":128,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":242,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":160,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":292,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":197,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":18,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":183,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":358,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":36,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":41,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":368,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":44,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":299,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":61,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":131,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":47,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":83,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":99,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":249,"com.google.gson.functional.ObjectTest.testNullSerialization":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":85,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":64,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":258,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":356,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":104,"com.google.gson.functional.MapTest.testInterfaceTypeMap":103,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":246,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":282,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":110,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":235,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":222,"com.google.gson.functional.CollectionTest.testSetDeserialization":76,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":232,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":32,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":186,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":301,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":68,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":156,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":48,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":323,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":192,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":12,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":46,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":248,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":166,"com.google.gson.MixedStreamTest.testWriteClosed":379,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":28,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":238,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":270,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":136,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":346,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":50,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":336,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":295,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":207,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":267,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":291,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":58,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":264,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":342,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":139,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":184,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":352,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":266,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":158,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":254,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":283,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":362,"com.google.gson.functional.MapTest.testComplexKeysSerialization":106,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":354,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":66,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":335,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":274,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":173,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":224,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":33,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":221,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":126,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":318,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":70,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":223,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":294,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":157,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":371,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":31,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":341,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":353,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":37,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":101,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":199,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":200,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":287,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":115,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":208,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":376,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":148,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":59,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":194,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":26,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":269,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":20,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":259,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":288,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":367,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":3,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":23,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":7,"com.google.gson.ObjectTypeAdapterTest.testSerialize":17,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":329,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":81,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":228,"com.google.gson.functional.FieldNamingTest.testIdentity":363,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":366,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":360,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":51,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":369,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":272,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":203,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":150,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":370,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":40,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":174,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":308,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":92,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":142,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":13,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":263,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":10,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":213,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":338,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":325,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":119,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":227,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":42,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":206,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":252,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":56,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":189,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":261,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":185,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":302,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":153,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":236,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":377,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":339,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":24,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":45,"com.google.gson.functional.EnumTest.testEnumSubclass":30,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":22,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":190,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":107,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":82,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":350,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":75,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":163,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":87,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":279,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":9,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":340,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":63,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":275,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":355,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":215,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":262,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":214,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":27,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":55,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":143,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":129,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":15,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":193,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":281,"com.google.gson.functional.ObjectTest.testNestedSerialization":195,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":94,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":373,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":39,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":277,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":257,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":176,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":310,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":100,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":19,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":188,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":171,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":43,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":220,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":122,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":178,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":135,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":296,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":285,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":293,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":326,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":315,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":349,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":229,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":54,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":255,"com.google.gson.functional.CollectionTest.testSetSerialization":78,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":109,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":90,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":375,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":38,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":225,"com.google.gson.MixedStreamTest.testWriteInvalidState":378,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":147,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":4,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":289,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":290,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":152,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":226,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":331,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":280,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":357,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":361,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":218,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":117,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":138,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":121,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":276,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":71,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":6,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":316,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":52,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":204,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":8,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":60,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":237,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":130,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":53},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[0,1,2,3,4,5,6,7,8],"tindex":"8ce5bea0-3e3e-11e6-b7b1-55c70bc8bb24","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isJsonNull()) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[9,10,11],"tindex":"8ce5e5b1-3e3e-11e6-b7b1-49d00d74eb65","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,9,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,2,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,6,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381],"tindex":"8ce60cc2-3e3e-11e6-b7b1-47ca152938b3","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value == key) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"key","toResolve":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[123,324],"tindex":"8ce633d3-3e3e-11e6-b7b1-23a96fa90c96","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"8ce633d4-3e3e-11e6-b7b1-afb0c2a79a79","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if ((memberName.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[58,63,65,71,359,362],"tindex":"8ce633d5-3e3e-11e6-b7b1-1f8639a3536e","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[],"tindex":"8ce65ae6-3e3e-11e6-b7b1-dddbb0d70c82","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"8ce65ae7-3e3e-11e6-b7b1-a32524f4b189","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"8ce65ae8-3e3e-11e6-b7b1-edc34736c382","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"8ce6a909-3e3e-11e6-b7b1-0b852b1dfec6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.GenericArrayType) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"8ce6d01a-3e3e-11e6-b7b1-971fe79d1dd9","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"8ce6d01b-3e3e-11e6-b7b1-c5eb50911f5b","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"8ce6d01c-3e3e-11e6-b7b1-0b310ef0baf5","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if ((typeAdapter != typeAdapter) && (token != typeAdapter)) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"typeAdapter","token":"typeAdapter","com.google.gson.stream.JsonToken.NUMBER":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"8ce6f72d-3e3e-11e6-b7b1-9f13bbbb0e00","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"8ce7454e-3e3e-11e6-b7b1-23cfbf1441d2","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl","sourcecode":"(c < '0') || (c > '9')"},"failures":[],"tindex":"8ce76c5f-3e3e-11e6-b7b1-d93d52a771a1","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c < '0') || (c > '9')) {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"8ce79370-3e3e-11e6-b7b1-2d0be2fcf659","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[],"tindex":"8ce79371-3e3e-11e6-b7b1-593048096a2e","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585982/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":18,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
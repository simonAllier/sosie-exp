{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":19,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":587,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":239,"com.google.gson.functional.StringTest.testStringValueDeserialization":585,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":46,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":629,"com.google.gson.stream.JsonWriterTest.testRepeatedName":236,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":329,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":183,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":140,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":101,"com.google.gson.MixedStreamTest.testWriteLenient":293,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":111,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":443,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":56,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":177,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":109,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":181,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":377,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":455,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":616,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":144,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":338,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":67,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":200,"com.google.gson.functional.ObjectTest.testSingletonLists":107,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":437,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":322,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":588,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":228,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":517,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":94,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":571,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":451,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":122,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":296,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":380,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":153,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":288,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":601,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":193,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":369,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":531,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":41,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":303,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":314,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":549,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":471,"com.google.gson.functional.EnumTest.testEnumCaseMapping":615,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":290,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":586,"com.google.gson.functional.JsonTreeTest.testToJsonTree":89,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":313,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":632,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":176,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":419,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":285,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":494,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":433,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":581,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":563,"com.google.gson.functional.ObjectTest.testNullDeserialization":638,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":76,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":598,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":119,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":227,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":389,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":330,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":540,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":547,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":224,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":129,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":226,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":543,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":625,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":91,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":394,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":450,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":286,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":374,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":353,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":628,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":131,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":490,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":436,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":102,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":366,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":467,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":280,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":430,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":163,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":81,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":264,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":375,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":537,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":367,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":128,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":484,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":9,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":115,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":211,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":188,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":334,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":473,"com.google.gson.metrics.PerformanceTest.testDummy":620,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":39,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":167,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":65,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":311,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":512,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":477,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":245,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":479,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":432,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":223,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":79,"com.google.gson.functional.CollectionTest.testSetDeserialization":180,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":145,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":118,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":528,"com.google.gson.functional.EnumTest.testEnumSet":608,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":358,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":66,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":511,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":422,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":123,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":64,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":371,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":13,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":382,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":95,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":544,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":383,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":327,"com.google.gson.functional.MapTest.testHashMapDeserialization":461,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":441,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":409,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":584,"com.google.gson.MixedStreamTest.testReadNulls":624,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":18,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":274,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":160,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":526,"com.google.gson.functional.MapTest.testSortedMap":472,"com.google.gson.functional.MapTest.testMapSerialization":258,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":20,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":47,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":364,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":497,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":249,"com.google.gson.functional.MapTest.testSerializeMaps":253,"com.google.gson.functional.MapTest.testComplexKeysSerialization":45,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":527,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":476,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":78,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":214,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":206,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":606,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":633,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":613,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":97,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":184,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":542,"com.google.gson.functional.MapTest.testStringKeyDeserialization":475,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":619,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":498,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":268,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":396,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":265,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":333,"com.google.gson.functional.PrettyPrintingTest.testMap":272,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":328,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":504,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":556,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":416,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":524,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":287,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":295,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":500,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":591,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":428,"com.google.gson.functional.MapTest.testMapSerializationEmpty":474,"com.google.gson.functional.CollectionTest.testQueueSerialization":560,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":359,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":241,"com.google.gson.functional.MapTest.testMapOfMapSerialization":257,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":350,"com.google.gson.JavaSerializationTest.testMapIsSerializable":307,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":434,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":565,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":233,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":219,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":361,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":518,"com.google.gson.functional.FieldNamingTest.testIdentity":34,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":589,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":513,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":194,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":132,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":88,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":106,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":187,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":508,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":316,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":304,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":590,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":617,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":190,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":445,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":423,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":631,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":458,"com.google.gson.functional.MapTest.testMapSubclassSerialization":252,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":392,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":15,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":73,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":530,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":4,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":55,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":348,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":552,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":103,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":415,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":93,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":63,"com.google.gson.functional.EnumTest.testEnumSubclass":611,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":370,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":121,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":297,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":315,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":220,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":376,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":83,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":603,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":318,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":192,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":354,"com.google.gson.stream.JsonWriterTest.testTwoNames":232,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":191,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":165,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":493,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":360,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":538,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":186,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":352,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":447,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":108,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":460,"com.google.gson.MixedStreamTest.testWriteNulls":623,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":492,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":535,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":486,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":61,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":77,"com.google.gson.CommentsTest.testParseComments":289,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":110,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":203,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":269,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":53,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":149,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":373,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":478,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":260,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":593,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":639,"com.google.gson.MixedStreamTest.testReadInvalidState":292,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":142,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":72,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":449,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":48,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":326,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":502,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":618,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":146,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":343,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":217,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":435,"com.google.gson.functional.MapTest.testMapDeserialization":466,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":431,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":534,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":459,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":199,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":174,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":255,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":202,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":579,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":607,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":87,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":27,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":133,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":539,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":276,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":506,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":420,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":71,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":189,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":281,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":96,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":259,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":452,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":312,"com.google.gson.functional.PrimitiveTest.testShortSerialization":390,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":516,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":273,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":379,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":551,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":349,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":29,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":325,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":246,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":610,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":178,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":14,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":463,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":342,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":398,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":572,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":104,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":442,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":8,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":229,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":405,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":399,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":283,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":575,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":82,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":134,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":173,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":152,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":412,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":17,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":84,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":355,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":138,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":114,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":614,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":277,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":529,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":28,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":179,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":266,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":514,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":198,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":244,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":332,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":425,"com.google.gson.stream.JsonWriterTest.testNullStringValue":234,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":439,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":170,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":557,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":319,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":385,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":357,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":402,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":208,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":201,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":609,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":24,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":49,"com.google.gson.functional.MapTest.testGeneralMapField":44,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":112,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":483,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":404,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":52,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":444,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":261,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":413,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":521,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":381,"com.google.gson.MixedStreamTest.testReadMixedStreamed":7,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":421,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":468,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":161,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":305,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":568,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":37,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":362,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":550,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":306,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":31,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":469,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":457,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":462,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":403,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":515,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":25,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":156,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":235,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":345,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":243,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":536,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":411,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":564,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":583,"com.google.gson.functional.ObjectTest.testNestedDeserialization":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":271,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":541,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":576,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":21,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":164,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":548,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":401,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":148,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":470,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":574,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":592,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":62,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":388,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":212,"com.google.gson.JavaSerializationTest.testListIsSerializable":308,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":59,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":105,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":570,"com.google.gson.functional.ObjectTest.testNullSerialization":636,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":279,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":456,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":464,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":43,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":317,"com.google.gson.functional.MapTest.testInterfaceTypeMap":42,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":495,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":505,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":169,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":320,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":213,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":282,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":507,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":605,"com.google.gson.MixedStreamTest.testReadClosed":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":414,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":546,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":336,"com.google.gson.MixedStreamTest.testWriteClosed":6,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":23,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":562,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":113,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":454,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":68,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":168,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":151,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":136,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":33,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":116,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":175,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":561,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":157,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":365,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":159,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":604,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":566,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":440,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":578,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":215,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":406,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":341,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":417,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":80,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":480,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":150,"com.google.gson.functional.CollectionTest.testQueueDeserialization":573,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":347,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":363,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":597,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":408,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":448,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":40,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":130,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":427,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":92,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":137,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":555,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":3,"com.google.gson.functional.MapTest.testRawMapSerialization":263,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":438,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":284,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":125,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":275,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":51,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":582,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":298,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":300,"com.google.gson.functional.PrimitiveTest.testByteSerialization":387,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":485,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":523,"com.google.gson.ObjectTypeAdapterTest.testSerialize":2,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":250,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":90,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":331,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":57,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":496,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":247,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":69,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":302,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":594,"com.google.gson.functional.MapTest.testMapWithQuotes":256,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":627,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":510,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":554,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":519,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":141,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":626,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":143,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":580,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":60,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":135,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":98,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":424,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":637,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":117,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":418,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":58,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":426,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":384,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":634,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":567,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":488,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":446,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":481,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":278,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":196,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":553,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":16,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":525,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":321,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":509,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":270,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":124,"com.google.gson.functional.ObjectTest.testNestedSerialization":126,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":209,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":335,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":520,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":600,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":410,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":262,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":50,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":99,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":294,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":301,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":120,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":577,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":397,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":171,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":30,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":291,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":337,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":26,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":127,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":154,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":599,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":491,"com.google.gson.functional.CollectionTest.testSetSerialization":182,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":85,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":532,"com.google.gson.functional.StringTest.testStringValueSerialization":602,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":35,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":185,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":216,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":558,"com.google.gson.MixedStreamTest.testWriteInvalidState":5,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":482,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":635,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":340,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":54,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":346,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":242,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":248,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":75,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":197,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":545,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":640,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":630,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":251,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":465,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":238,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":310,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":487},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224],"tindex":"bdd625d2-3f3a-11e6-9ef6-4b8d901f9729","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdd6e923-3f3a-11e6-9ef6-7fe2b07c6a91","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl"},"failures":[225],"tindex":"bdd71034-3f3a-11e6-9ef6-b5d185028cca","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (!insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[226,227,0,1,2,228,3,4,9,229,230,231,232,233,234,235,236,237,238,239,240,241,10,14,15,16,18,20,22,25,242,243,31,244,245,32,33,246,247,248,249,34,35,250,251,38,252,253,254,255,40,256,257,258,259,260,42,261,43,44,262,263,45,264,265,46,48,50,52,266,55,60,267,62,63,64,65,66,68,69,70,72,74,75,76,77,78,80,83,268,84,85,269,270,271,87,90,91,92,94,95,272,96,97,98,99,106,107,110,113,116,118,120,123,125,126,128,131,133,134,136,141,142,143,144,145,146,147,148,149,152,155,156,159,160,162,163,167,168,169,174,175,177,178,179,181,182,183,184,187,188,189,192,193,194,195,196,198,201,202,204,273,205,206,208,209,210,211,274,275,276,277,278,279,280,281,213,215,216,217,218,219,282,283,284,285,286,287,288,220,223,224],"tindex":"bdd78565-3f3a-11e6-9ef6-cf58c212c0a0","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl"},"failures":[289,290,291,0,1,2,228,3,292,4,5,293,294,6,7,8,9,295,296,297,298,299,300,301,302,10,303,304,305,306,307,308,309,310,11,12,13,311,14,15,16,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,17,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,18,408,19,20,409,21,22,23,24,410,25,411,412,413,414,26,27,415,416,417,418,419,420,28,421,422,29,423,424,425,426,427,428,30,429,430,431,432,433,243,434,31,435,244,436,437,438,439,440,441,245,442,443,444,445,32,446,447,448,449,33,450,451,452,453,454,246,247,248,249,34,35,455,36,37,38,39,456,457,458,459,460,461,462,252,253,463,464,254,465,255,466,40,467,468,469,470,256,257,258,471,41,259,260,472,42,261,43,44,262,263,473,45,474,475,264,476,477,265,46,478,47,48,49,50,479,51,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,52,53,54,498,499,500,501,502,266,503,504,505,55,506,507,56,57,508,58,59,60,61,267,62,63,64,65,66,67,68,69,70,71,72,509,73,74,75,76,77,78,79,80,510,81,511,512,513,82,83,268,84,514,85,269,515,516,270,517,518,519,271,86,87,88,89,90,520,521,91,92,522,523,93,94,524,525,526,95,527,528,529,530,531,272,96,97,532,533,534,98,99,100,101,102,103,104,105,535,536,537,106,107,108,109,110,111,112,113,114,115,116,117,538,118,119,120,121,539,122,540,123,124,125,126,541,127,128,129,130,542,131,132,133,134,135,136,137,138,139,140,141,142,543,143,144,145,544,545,546,547,548,549,550,551,146,147,148,149,150,151,552,152,153,154,155,156,157,158,159,553,160,554,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,555,178,556,557,558,559,560,561,562,563,179,564,565,566,567,180,181,568,569,182,570,571,572,573,183,574,184,185,575,186,187,188,189,190,191,192,193,576,577,194,195,578,196,197,198,199,200,579,580,581,201,202,203,204,273,205,582,583,206,207,208,209,210,211,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,274,275,276,212,277,278,279,603,604,280,605,281,606,607,608,609,610,611,612,613,213,214,614,615,616,215,216,217,218,219,220,617,221,222,223,224],"tindex":"bdd86fc6-3f3a-11e6-9ef6-4729dc88c658","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[618,619],"tindex":"bdd8e4f7-3f3a-11e6-9ef6-f3a584cc3a27","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl"},"failures":[289,290,291,620,226,227,0,1,621,3,292,622,4,623,5,293,624,294,6,7,8,9,295,296,297,301,302,10,303,304,305,310,11,12,13,311,14,15,16,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,17,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,18,408,19,20,409,21,22,23,24,410,25,411,412,413,414,625,26,27,626,415,416,627,417,418,628,419,420,28,421,242,422,29,423,424,425,426,427,428,30,429,430,431,432,433,243,434,31,435,244,436,629,437,438,439,440,441,630,245,442,443,444,445,32,446,447,448,449,33,450,451,452,631,632,453,454,246,247,248,249,34,35,250,251,455,36,37,38,39,456,457,458,459,460,461,462,252,253,463,464,254,465,255,466,40,467,468,469,470,256,257,258,471,41,259,260,472,42,261,43,44,262,263,473,45,474,475,264,476,477,265,46,478,47,48,49,50,479,51,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,52,53,54,498,499,500,501,502,266,503,504,505,55,506,507,56,57,508,58,59,60,61,267,62,63,64,65,66,67,68,69,70,71,72,509,73,74,75,76,77,78,79,80,510,81,511,512,513,82,83,268,84,514,85,269,515,516,270,517,518,519,271,86,87,88,89,90,520,521,91,92,522,523,93,94,633,524,525,526,634,95,527,528,529,530,531,272,96,97,532,533,534,98,99,100,101,102,103,104,105,535,536,537,106,107,108,109,110,111,112,113,114,115,116,635,117,538,118,119,636,120,637,121,539,122,540,123,124,125,126,541,127,128,129,130,542,638,131,132,133,134,135,136,137,138,139,140,142,543,143,144,145,544,545,546,547,548,549,550,551,146,147,148,149,150,151,552,152,153,154,155,156,157,158,159,553,160,554,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,555,178,556,557,558,559,560,561,562,563,179,564,565,566,567,180,181,568,569,182,570,571,572,573,183,574,184,185,575,186,187,188,189,190,191,192,193,576,639,577,194,195,578,196,197,198,199,200,579,580,581,201,202,203,204,273,205,582,583,206,207,208,209,210,211,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,274,275,276,212,277,278,279,603,604,280,605,281,606,607,608,609,610,611,612,613,213,214,614,615,616,220,617,221,222,223,224],"tindex":"bdd90c08-3f3a-11e6-9ef6-3f04a202e62c","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bdd95a29-3f3a-11e6-9ef6-e1da1c805feb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdd9813a-3f3a-11e6-9ef6-0dc199f4e4f8","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    boolean boolean = true;\n                    boolean boolean = reader.isLenient();\n                    reader.setLenient(true);\n                    try {\n                        reader.peek();\n                        isEmpty = false;\n                        com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                        T T = typeAdapter.read(reader);\n                        return object;\n                    } catch (java.io.EOFException e) {\n                        if (isEmpty) {\n                            return null;\n                        } \n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.lang.IllegalStateException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } finally {\n                        reader.setLenient(oldLenient);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdd9a84b-3f3a-11e6-9ef6-3755bcecf0ae","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[581],"tindex":"bddb07dc-3f3a-11e6-9ef6-137fb8ffe289","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bddb55fd-3f3a-11e6-9ef6-f315cf861d74","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bddb7d0e-3f3a-11e6-9ef6-bb20e1093a7d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[290,291,0,1,9,295,296,297,301,10,303,304,305,14,15,16,315,317,323,326,334,335,341,343,344,347,350,352,353,356,357,361,370,372,374,375,378,381,383,386,387,388,389,390,391,392,396,398,402,403,405,18,408,20,22,410,25,412,413,414,626,416,627,418,419,420,242,29,424,425,426,427,428,429,431,432,243,31,435,244,436,437,440,630,245,443,444,32,446,447,448,449,33,452,631,453,246,247,248,249,34,35,455,38,457,459,252,253,254,255,40,256,257,258,259,260,42,261,43,44,262,263,45,474,264,265,46,48,50,480,481,483,484,485,486,487,490,491,492,496,52,54,499,501,266,503,504,505,55,506,507,60,267,62,63,64,65,66,68,69,70,72,75,76,77,78,80,510,511,83,268,84,85,269,515,270,518,519,271,87,90,520,521,91,92,523,94,529,531,272,96,97,532,533,534,98,99,106,107,110,113,116,118,120,539,540,123,125,126,541,128,131,133,134,136,141,142,543,143,144,145,544,545,546,547,548,549,550,551,146,147,148,149,552,152,155,156,159,160,162,163,167,168,169,174,175,177,555,178,556,560,561,562,563,179,566,181,568,182,570,572,183,184,575,187,188,189,192,193,576,194,195,196,198,579,581,201,202,204,273,205,582,206,208,209,210,211,584,586,587,588,589,590,593,595,599,602,274,275,276,212,277,278,279,280,281,608,609,610,611,213,614,615,616,215,216,217,218,219,282,220,617,221,223,224],"tindex":"bddb7d0f-3f3a-11e6-9ef6-ff3dbc1e617e","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddba420-3f3a-11e6-9ef6-4b94dfeb0fb1","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddc1951-3f3a-11e6-9ef6-5d5c0d1a0758","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((expected != expected) && (token != expected)) {\n                {\n                    if ((peek()) != expected) {\n                        throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[290,291,226,227,0,1,9,295,296,297,301,10,303,304,305,14,15,16,315,317,323,326,334,335,341,343,344,347,350,352,353,356,357,361,370,372,374,375,378,381,383,386,387,388,389,390,391,392,396,398,402,403,405,18,408,20,22,410,25,412,413,414,626,416,627,418,419,420,242,29,424,425,426,427,428,429,431,432,243,31,435,244,436,437,440,630,245,443,444,32,446,447,448,449,33,452,631,453,246,247,248,249,34,35,250,251,455,38,457,459,252,253,254,255,40,256,257,258,259,260,42,261,43,44,262,263,45,474,264,265,46,48,50,480,481,483,484,485,486,487,490,491,492,496,52,54,499,501,266,503,504,505,55,506,507,60,267,62,63,64,65,66,68,69,70,72,74,75,76,77,78,80,510,511,83,268,84,85,269,515,270,518,519,271,87,90,520,521,91,92,523,94,633,634,95,529,531,272,96,97,532,533,534,98,99,106,107,110,113,116,635,118,636,120,539,540,123,125,126,541,128,131,133,134,136,141,142,543,143,144,145,544,545,546,547,548,549,550,551,146,147,148,149,552,152,155,156,159,160,162,163,167,168,169,174,175,177,555,178,556,560,561,562,563,179,566,181,568,182,570,572,183,184,575,187,188,189,192,193,576,194,195,196,198,579,581,201,202,204,273,205,582,206,208,209,210,211,584,586,587,588,589,590,593,595,599,602,274,275,276,212,277,278,279,280,281,608,609,610,611,213,614,615,616,215,216,217,218,219,282,220,617,221,223,224],"tindex":"bddc4062-3f3a-11e6-9ef6-fbb9f2c39f03","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[640,229],"tindex":"bddc6773-3f3a-11e6-9ef6-833fcb0efa64","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,246,247,248,249,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,274,275,276,212,277,278,279,603,604,280,605,281,606,607,213,214,215,216,217,218,219,220,221,222,223,224],"tindex":"bddc6774-3f3a-11e6-9ef6-8d069e81f64c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (!serialize) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl"},"failures":[250,251],"tindex":"bddc8e85-3f3a-11e6-9ef6-017485755836","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value != null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddcb596-3f3a-11e6-9ef6-9dc1ee4ca717","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                {\n                    boolean boolean = true;\n                    boolean boolean = reader.isLenient();\n                    reader.setLenient(true);\n                    try {\n                        reader.peek();\n                        isEmpty = false;\n                        com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                        T T = typeAdapter.read(reader);\n                        return object;\n                    } catch (java.io.EOFException e) {\n                        if (isEmpty) {\n                            return null;\n                        } \n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.lang.IllegalStateException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonSyntaxException(e);\n                    } finally {\n                        reader.setLenient(oldLenient);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddcb597-3f3a-11e6-9ef6-3ffc615910a3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if ((key != key) && (token != key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"key","token":"key","com.google.gson.stream.JsonToken.NUMBER":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bddcdca8-3f3a-11e6-9ef6-cd01f318227a","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (!(src instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl"},"failures":[],"tindex":"bddcdca9-3f3a-11e6-9ef6-795dd6f38c8c","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddcdcaa-3f3a-11e6-9ef6-7b87a7bdf52e","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter != null) && ((typeAdapter.peek()) != typeAdapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"typeAdapter","obj":"typeAdapter","reader":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddd78eb-3f3a-11e6-9ef6-bb94f1266fdb","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"bddd78ec-3f3a-11e6-9ef6-c3a91e6daa2c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key.getRawType().equals(key.getRawType())) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key","to":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[413,418,419,443,446,452],"tindex":"bddd78ed-3f3a-11e6-9ef6-b146e95bcb64","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"pattern"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddd9ffe-3f3a-11e6-9ef6-09fb533f6f98","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdde634f-3f3a-11e6-9ef6-17a32e6ee931","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:797","type":"CtBinaryOperatorImpl"},"failures":[246,249,274,278,603,607],"tindex":"bdde8a60-3f3a-11e6-9ef6-51698c3d04dc","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"indexOfSubstring","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"indexOfSubstring"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"bdde8a61-3f3a-11e6-9ef6-55555fddaa20","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n    } \n    java.util.Date java.util.Date = deserializeToDate(json);\n    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n        return date;\n    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n        return new java.sql.Timestamp(date.getTime());\n    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n        return new java.sql.Date(date.getTime());\n    } else {\n        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddeb172-3f3a-11e6-9ef6-6b4f74692952","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((expected != expected) && (token != expected)) {\n                {\n                    if ((peek()) != expected) {\n                        throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:556","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bddeb173-3f3a-11e6-9ef6-2f7581f8047a","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if ((newTop != newTop) && (newTop != (java.text.DateFormat.java.text.DateFormat.int))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dateStyle":"newTop","timeStyle":"newTop","java.text.DateFormat.DEFAULT":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdded884-3f3a-11e6-9ef6-a36ac26681b3","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bdded885-3f3a-11e6-9ef6-354668e6181f","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467342510357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":36,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
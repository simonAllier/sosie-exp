{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":416,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":569,"com.google.gson.functional.StringTest.testStringValueDeserialization":567,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":175,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":272,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":522,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":233,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":37,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":352,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":127,"com.google.gson.MixedStreamTest.testWriteLenient":590,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":531,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":642,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":101,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":76,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":93,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":316,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":281,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":36,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":463,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":373,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":242,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":621,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":53,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":189,"com.google.gson.functional.ObjectTest.testSingletonLists":314,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":523,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":226,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":570,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":636,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":121,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":21,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":541,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":331,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":16,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":284,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":549,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":583,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":357,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":273,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":395,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":605,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":157,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":2,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":218,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":387,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":156,"com.google.gson.functional.EnumTest.testEnumCaseMapping":35,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":568,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":595,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":217,"com.google.gson.functional.JsonTreeTest.testToJsonTree":480,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":400,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":544,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":215,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":622,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":641,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":497,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":445,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":515,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":192,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":600,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":86,"com.google.gson.functional.ObjectTest.testNullDeserialization":635,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":360,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":580,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":611,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":327,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":294,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":627,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":234,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":332,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":601,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":385,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":181,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":340,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":619,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":487,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":545,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":185,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":299,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":298,"com.google.gson.JsonParserTest.testParseString":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":540,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":278,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":257,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":496,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":343,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":441,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":521,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":128,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":149,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":270,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":629,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":512,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":476,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":107,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":171,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":134,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":279,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":271,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":339,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":435,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":10,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":322,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":560,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":44,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":167,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":238,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":467,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":206,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":51,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":394,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":109,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":18,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":173,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":529,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":514,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":180,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":363,"com.google.gson.functional.CollectionTest.testSetDeserialization":92,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":374,"com.google.gson.functional.EnumTest.testEnumSet":26,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":326,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":469,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":262,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":52,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":108,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":502,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":333,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":1,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":50,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":275,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":393,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":286,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":25,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":382,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":287,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":643,"com.google.gson.functional.MapTest.testHashMapDeserialization":138,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":231,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":527,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":418,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":561,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":62,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":414,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":24,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":472,"com.google.gson.functional.MapTest.testSortedMap":160,"com.google.gson.functional.MapTest.testMapSerialization":155,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":417,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":613,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":268,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":404,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":448,"com.google.gson.functional.MapTest.testSerializeMaps":141,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":565,"com.google.gson.functional.MapTest.testComplexKeysSerialization":168,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":468,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":172,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":455,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":33,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":362,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":201,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":607,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":74,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":31,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":398,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":623,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":39,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":342,"com.google.gson.functional.MapTest.testStringKeyDeserialization":170,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":452,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":113,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":301,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":174,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":237,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":232,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":377,"com.google.gson.functional.PrettyPrintingTest.testMap":396,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":79,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":22,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":492,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":15,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":454,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":573,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":577,"com.google.gson.functional.CollectionTest.testQueueSerialization":83,"com.google.gson.functional.MapTest.testMapSerializationEmpty":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":509,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":624,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":263,"com.google.gson.functional.MapTest.testMapOfMapSerialization":154,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":254,"com.google.gson.JavaSerializationTest.testMapIsSerializable":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":517,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":89,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":265,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":369,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":604,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":122,"com.google.gson.functional.FieldNamingTest.testIdentity":566,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":571,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":110,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":424,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":344,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":43,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":103,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":313,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":479,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":220,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":3,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":177,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":572,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":260,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":533,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":504,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":511,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":543,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":135,"com.google.gson.functional.MapTest.testMapSubclassSerialization":140,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":297,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":60,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":411,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":471,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":252,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":379,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":547,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":588,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":129,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":491,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":20,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":49,"com.google.gson.functional.EnumTest.testEnumSubclass":29,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":274,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":17,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":329,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":219,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":176,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":280,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":112,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":69,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":222,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":356,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":637,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":258,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":355,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":204,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":8,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":444,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":606,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":264,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":325,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":42,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":536,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":315,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":137,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":443,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":132,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":437,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":46,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":361,"com.google.gson.CommentsTest.testParseComments":597,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":618,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":117,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":195,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":317,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":277,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":450,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":460,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":403,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":159,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":575,"com.google.gson.MixedStreamTest.testReadInvalidState":587,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":370,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":58,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":538,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":405,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":230,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":456,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":457,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":639,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":247,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":367,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":519,"com.google.gson.functional.MapTest.testMapDeserialization":147,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":513,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":401,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":136,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":188,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":146,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":213,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":194,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":190,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":75,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":630,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":30,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":489,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":330,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":345,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":64,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":380,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":498,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":73,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":353,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":158,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":397,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":6,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":542,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":216,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":119,"com.google.gson.functional.PrimitiveTest.testShortSerialization":295,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":197,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":283,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":389,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":253,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":603,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":282,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":503,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":562,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":28,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":602,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":78,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":410,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":598,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":142,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":246,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":99,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":303,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":130,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":530,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":594,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":608,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":310,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":304,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":41,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":111,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":212,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":484,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":548,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":610,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":289,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":482,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":114,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":259,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":350,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":321,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":34,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":66,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":470,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":499,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":375,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":115,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":187,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":196,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":520,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":638,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":236,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":506,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":525,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":80,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":209,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":223,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":290,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":261,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":307,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":125,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":27,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":193,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":422,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":406,"com.google.gson.functional.MapTest.testGeneralMapField":164,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":319,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":434,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":309,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":178,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":376,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":532,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":162,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":184,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":485,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":285,"com.google.gson.MixedStreamTest.testReadMixedStreamed":593,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":614,"com.google.gson.JsonObjectTest.testDeepCopy":625,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":150,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":500,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":4,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":94,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":474,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":465,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":266,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":388,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":12,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":518,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":151,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":558,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":118,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":308,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":430,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":552,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":249,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":609,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":516,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":133,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":425,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":483,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":200,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":124,"com.google.gson.functional.ObjectTest.testNestedDeserialization":351,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":337,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":358,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":419,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":203,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":386,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":306,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":459,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":38,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":152,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":574,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":48,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":293,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":65,"com.google.gson.JavaSerializationTest.testListIsSerializable":14,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":105,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":131,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":97,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":68,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":557,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":143,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":163,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":221,"com.google.gson.functional.MapTest.testInterfaceTypeMap":161,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":446,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":378,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":208,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":628,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":224,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":32,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":644,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":72,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":486,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":384,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":240,"com.google.gson.MixedStreamTest.testWriteClosed":592,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":85,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":421,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":211,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":546,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":54,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":207,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":462,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":348,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":539,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":214,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":323,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":84,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":553,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":269,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":555,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":70,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":90,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":526,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":426,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":311,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":365,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":245,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":494,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":364,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":431,"com.google.gson.functional.CollectionTest.testQueueDeserialization":100,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":461,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":251,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":267,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":579,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":415,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":537,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":554,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":148,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":508,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":186,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":349,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":77,"com.google.gson.functional.MapTest.testRawMapSerialization":166,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":586,"com.google.gson.JsonParserTest.testParseReader":616,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":524,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":63,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":335,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":409,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":199,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":5,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":7,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":19,"com.google.gson.functional.PrimitiveTest.testByteSerialization":292,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":436,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":631,"com.google.gson.ObjectTypeAdapterTest.testSerialize":633,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":182,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":235,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":102,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":447,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":563,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":55,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":576,"com.google.gson.functional.MapTest.testMapWithQuotes":153,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":493,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":578,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":106,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":473,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":123,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":413,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":490,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":372,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":191,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":45,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":347,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":402,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":505,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":634,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":324,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":495,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":507,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":551,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":288,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":91,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":439,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":47,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":535,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":67,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":427,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":556,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":412,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":640,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":23,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":59,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":225,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":120,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":334,"com.google.gson.functional.ObjectTest.testNestedSerialization":336,"com.google.gson.internal.LinkedTreeMapTest.testClear":599,"com.google.gson.JsonObjectTest.testAddingStringProperties":626,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":126,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":183,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":239,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":582,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":429,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":165,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":407,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":481,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":11,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":591,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":328,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":423,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":302,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":210,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":464,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":510,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":241,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":596,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":488,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":550,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":581,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":442,"com.google.gson.functional.CollectionTest.testSetSerialization":96,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":116,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":399,"com.google.gson.functional.StringTest.testStringValueSerialization":584,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":585,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":40,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":81,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":366,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":433,"com.google.gson.MixedStreamTest.testWriteInvalidState":589,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":244,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":250,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":451,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":559,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":501,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":564,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":615,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":359,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":620,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":428,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":383,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":528,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":632,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":145,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":390,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":438},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"d148372c-3e77-11e6-81fb-315559f71659","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o.getRawType().equals(o.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o","to":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d148854d-3e77-11e6-81fb-112bb4715201","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597],"tindex":"d148ac5e-3e77-11e6-81fb-91a977f179e9","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[],"tindex":"d148d36f-3e77-11e6-81fb-3f3e64706bad","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls == cls) {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"cls","toResolve":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"d148d370-3e77-11e6-81fb-3937eb517c4b","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"d148fa81-3e77-11e6-81fb-4b035ea8f4cc","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,5,614,615,616,617,10,618,619,620,621,622,623,624,625,626,627,628,13,21,47,59,98,101,102,104,105,109,110,112,113,114,120,127,128,129,130,131,132,139,142,143,145,147,151,156,167,170,172,175,177,191,197,203,204,205,209,210,215,357,629,630,403,404,405,406,407,408,409,411,412,413,416,422,426,461,462,472,475,476,477,478,479,480,487,501,631,632],"tindex":"d148fa82-3e77-11e6-81fb-63c539731000","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d14948a3-3e77-11e6-81fb-ff92a57552ac","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[1,3,4,8,9,633,10,11,15,16,17,19,20,21,22,23,25,28,29,31,32,33,35,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,87,91,92,93,96,98,101,102,104,105,107,109,111,112,114,115,116,121,123,125,126,127,128,129,130,131,137,148,157,161,163,164,168,175,176,178,179,180,181,182,184,185,186,187,188,189,191,193,194,195,196,198,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,220,225,226,228,229,230,237,242,243,246,250,252,253,255,262,267,268,270,271,272,273,280,281,283,286,289,290,298,299,302,305,311,313,314,315,316,317,318,319,320,321,322,323,324,326,327,328,634,329,331,333,334,335,336,338,339,340,341,342,635,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,372,373,374,375,376,378,379,380,382,383,384,385,386,387,388,389,391,392,393,394,397,398,402,403,404,405,406,407,408,409,410,411,412,413,414,416,417,418,419,420,421,422,424,425,426,427,428,429,430,439,440,444,446,448,449,450,451,452,454,456,457,458,459,460,461,462,464,465,466,467,468,469,471,472,474,475,476,477,478,479,480,481,482,483,485,487,488,489,491,494,496,497,499,500,502,503,504,510,512,515,517,518,519,521,522,525,526,527,530,533,534,535,537,539,540,541,544,546,548,549,550,551,552,553,554,555,556,557,559,560,562,563,564,565,566,567,569,571,573,574,576,578,579,580,582,583,585,586,588,589,592,593,594],"tindex":"d1496fb4-3e77-11e6-81fb-150880e81983","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value.isInterface()) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d149bdd5-3e77-11e6-81fb-7939e70b9074","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:363","type":"CtUnaryOperatorImpl","sourcecode":"!insert"},"failures":[0,1,2,3,4,5,6,7,8,9,633,636,10,637,638,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,488,489,491,492,494,495,497,498,499,500,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,523,524,525,526,527,529,530,531,532,533,534,535,536,537,538,539,540,541,542,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,639,640,641,642],"tindex":"d149e4e6-3e77-11e6-81fb-73969f1e6052","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (!serialize) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d149e4e7-3e77-11e6-81fb-b7c1cfb1143d","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d149e4e8-3e77-11e6-81fb-73cb14b85416","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"d14a0bf9-3e77-11e6-81fb-9fdaa5095947","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"d14a0bfa-3e77-11e6-81fb-f7870176ea3a","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d14a0bfb-3e77-11e6-81fb-378acf6b7d86","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d14a0bfc-3e77-11e6-81fb-4140d7a1843b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:428","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[62,67,69,75,562,565],"tindex":"d14a0bfd-3e77-11e6-81fb-b5262b0b9a19","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == indexOfSubstring) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"indexOfSubstring","com.google.gson.stream.JsonReader.PEEKED_NONE":"indexOfSubstring"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"d14a330e-3e77-11e6-81fb-c3b12c111d06","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"d14a330f-3e77-11e6-81fb-a7bd949b36dd","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d14a3310-3e77-11e6-81fb-eff9b70f2578","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl","sourcecode":"lowerBound != (originalLowerBound[0])"},"failures":[],"tindex":"d14a3311-3e77-11e6-81fb-637deeea0a01","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive != (primitive[0])) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"primitive","lowerBound":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"d14a5a22-3e77-11e6-81fb-432023d196a2","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"d14a5a23-3e77-11e6-81fb-ddc2e00e101a","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"d14a5a24-3e77-11e6-81fb-1908eeb73aa6","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1258","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"d14a5a25-3e77-11e6-81fb-3df224cc3384","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (counter == offset) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"counter","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:242","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[599,600,603,607,10,21,98,129,130,357,416,422,477,478,479,480],"tindex":"d14a5a26-3e77-11e6-81fb-69c3e2d4b825","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[643],"tindex":"d14a8137-3e77-11e6-81fb-89dae7212a41","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"d14a8138-3e77-11e6-81fb-7d827c4c4523","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance == null) {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"d14a8139-3e77-11e6-81fb-7f3c63a15cbd","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d14aa84a-3e77-11e6-81fb-9d1bb04a940c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d14aa84b-3e77-11e6-81fb-c94195ccfcf1","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[1,8,9,633,10,20,21,25,32,33,37,38,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,87,92,93,96,101,102,104,105,107,111,112,114,116,125,126,127,128,129,130,131,148,157,161,163,164,168,175,176,178,179,180,181,182,185,186,187,188,189,193,194,195,196,198,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,289,313,314,315,316,317,318,319,320,321,322,323,324,326,327,328,329,331,333,334,335,336,338,339,340,341,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,359,360,361,362,363,364,365,366,367,368,369,370,372,373,374,379,391,392,393,397,398,402,404,405,406,407,409,410,411,412,413,414,416,417,419,420,421,422,424,425,427,428,430,449,450,451,457,458,459,460,461,462,464,465,466,467,472,474,475,476,477,478,479,480,481,482,488,489,499,503,510,518,534,539,548,549,550,551,552,553,554,555,559,560,562,563,564,565,566,585,586,588,589,592,593,594],"tindex":"d14aa84c-3e77-11e6-81fb-f32a77a26f39","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"d14aa84d-3e77-11e6-81fb-637608ac444d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name != null) {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d14acf5e-3e77-11e6-81fb-7fcf2cdc5760","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:452","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.InstanceCreator<?>"},"failures":[3,4,11,12,13,14,15,16,17,20,22,23,26,27,28,29,30,31,33,35,38,40,42,45,46,49,53,54,55,56,57,59,60,63,69,70,72,74,75,76,78,80,81,82,88,89,91,92,95,98,100,107,109,110,111,115,119,121,123,133,135,137,138,139,142,143,147,149,150,151,152,156,160,167,170,173,179,182,184,185,186,188,189,191,195,200,202,211,212,218,220,225,226,228,229,230,237,242,243,246,250,252,253,255,262,267,268,270,271,272,273,280,281,283,284,286,289,290,298,299,302,305,311,314,315,316,318,319,321,322,324,327,634,329,331,334,338,340,341,342,344,347,349,350,351,352,354,355,357,358,359,360,361,362,363,364,365,367,368,369,375,376,378,380,382,383,384,385,386,387,388,389,644,390,391,392,393,394,403,404,405,406,407,408,409,410,411,412,413,418,419,421,423,424,426,429,430,439,440,444,445,446,448,450,452,454,456,464,465,467,468,469,471,474,475,476,482,483,485,487,488,491,494,495,496,497,499,500,502,503,504,510,512,515,517,519,521,522,524,525,526,527,530,533,535,537,540,541,544,546,549,550,553,554,556,557,567,569,571,573,574,576,578,579,580,582,583,597],"tindex":"d14acf5f-3e77-11e6-81fb-9f7c60b62bf7","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj instanceof com.google.gson.InstanceCreator<?>) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d14acf60-3e77-11e6-81fb-83c35db88bc4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d14af671-3e77-11e6-81fb-9b71da4108a3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"d14af672-3e77-11e6-81fb-d902e3536553","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"d14af673-3e77-11e6-81fb-45d30c1a090d","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:338","type":"CtBinaryOperatorImpl","sourcecode":"(context != nonempty) && (context != empty)"},"failures":[],"tindex":"d14b1d84-3e77-11e6-81fb-ad18693ff0ae","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if ((style != style) && (context != style)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"style","nonempty":"style","empty":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d14b1d85-3e77-11e6-81fb-69e81fdb9c7a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"d14b1d86-3e77-11e6-81fb-352586541463","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"d14b4497-3e77-11e6-81fb-1d0d4ddedb45","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d14b4498-3e77-11e6-81fb-7b7ad9fefc23","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:793","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME)"},"failures":[],"tindex":"d14b4499-3e77-11e6-81fb-8b7295df0cb6","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"d14b6baa-3e77-11e6-81fb-416c5df57152","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:174","type":"CtBinaryOperatorImpl","sourcecode":"nearest == null"},"failures":[],"tindex":"d14b6bab-3e77-11e6-81fb-edabfa4b6d7f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"d14b6bac-3e77-11e6-81fb-cb0301ecb215","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value == null) {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"d14b92bd-3e77-11e6-81fb-cd668122e315","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"d14b92be-3e77-11e6-81fb-bdf796138018","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"d14b92bf-3e77-11e6-81fb-950f31410016","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651390/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":52,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
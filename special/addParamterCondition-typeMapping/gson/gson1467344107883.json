{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":336,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":299,"com.google.gson.functional.StringTest.testStringValueDeserialization":602,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":130,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":505,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":440,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":271,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":575,"com.google.gson.MixedStreamTest.testWriteLenient":346,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":548,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":87,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":353,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":256,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":266,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":556,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":472,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":106,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":323,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":229,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":447,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":340,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":597,"com.google.gson.functional.ObjectTest.testSingletonLists":206,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":83,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":107,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":300,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":435,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":366,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":540,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":191,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":588,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":511,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":564,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":8,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":474,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":576,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":610,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":278,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":196,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":468,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":382,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":12,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":335,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":236,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":381,"com.google.gson.functional.EnumTest.testEnumCaseMapping":322,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":0,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":298,"com.google.gson.functional.JsonTreeTest.testToJsonTree":339,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":429,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":512,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":66,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":166,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":526,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":503,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":285,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":263,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":168,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":608,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":562,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":3,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":44,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":441,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":215,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":234,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":334,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":567,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":2,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":494,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":188,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":480,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":510,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":36,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":30,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":497,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":140,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":82,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":455,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":377,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":465,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":549,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":314,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":502,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":250,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":405,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":128,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":37,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":554,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":466,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":136,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":220,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":6,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":296,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":560,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":22,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":275,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":384,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":516,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":251,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":160,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":427,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":536,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":387,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":86,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":77,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":399,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":333,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":404,"com.google.gson.functional.CollectionTest.testSetDeserialization":409,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":230,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":211,"com.google.gson.functional.EnumTest.testEnumSet":316,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":545,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":458,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":173,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":395,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":500,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":216,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":11,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":159,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":469,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":426,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":475,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":194,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":231,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":40,"com.google.gson.functional.MapTest.testHashMapDeserialization":371,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":438,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":368,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":297,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":489,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":53,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":307,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":248,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":390,"com.google.gson.functional.MapTest.testSortedMap":383,"com.google.gson.functional.MapTest.testMapSerialization":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":55,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":463,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":519,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":528,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":101,"com.google.gson.functional.MapTest.testSerializeMaps":111,"com.google.gson.functional.MapTest.testComplexKeysSerialization":126,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":544,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":386,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":147,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":170,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":614,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":292,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":414,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":192,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":613,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":199,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":272,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":569,"com.google.gson.functional.MapTest.testStringKeyDeserialization":385,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":397,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":530,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":175,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":48,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":129,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":444,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":150,"com.google.gson.functional.PrettyPrintingTest.testMap":197,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":439,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":259,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":63,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":542,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":7,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":531,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":304,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":603,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":74,"com.google.gson.functional.MapTest.testMapSerializationEmpty":127,"com.google.gson.functional.CollectionTest.testQueueSerialization":260,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":459,"com.google.gson.functional.MapTest.testMapOfMapSerialization":116,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":28,"com.google.gson.JavaSerializationTest.testMapIsSerializable":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":504,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":585,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":33,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":181,"com.google.gson.functional.FieldNamingTest.testIdentity":102,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":301,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":388,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":280,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":570,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":205,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":274,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":338,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":355,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":430,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":13,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":302,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":331,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":31,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":591,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":509,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":501,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":96,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":327,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":369,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":47,"com.google.gson.functional.MapTest.testMapSubclassSerialization":110,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":16,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":535,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":546,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":152,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":243,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":343,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":453,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":495,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":550,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":541,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":158,"com.google.gson.functional.EnumTest.testEnumSubclass":319,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":34,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":9,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":563,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":18,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":330,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":417,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":471,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":412,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":431,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":277,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":456,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":592,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":361,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":4,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":525,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":460,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":561,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":29,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":91,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":555,"com.google.gson.MixedStreamTest.testWriteNulls":344,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":370,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":142,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":391,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":138,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":169,"com.google.gson.CommentsTest.testParseComments":416,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":533,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":178,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":207,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":599,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":242,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":470,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":529,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":518,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":119,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":303,"com.google.gson.MixedStreamTest.testReadInvalidState":418,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":226,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":165,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":46,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":93,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":131,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":21,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":394,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":532,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":396,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":239,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":25,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":326,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":80,"com.google.gson.functional.MapTest.testMapDeserialization":376,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":76,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":202,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":109,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":596,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":113,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":254,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":287,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":415,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":184,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":401,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":214,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":309,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":153,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":67,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":341,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":276,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":315,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":118,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":198,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":95,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":428,"com.google.gson.functional.PrimitiveTest.testShortSerialization":45,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":539,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":289,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":473,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":238,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":454,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":69,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":437,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":98,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":318,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":258,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":15,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":373,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":450,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":49,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":270,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":508,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":601,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":420,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":52,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":483,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":273,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":223,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":408,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":59,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":244,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":349,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":477,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":547,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":176,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":457,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":573,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":559,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":321,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":195,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":311,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":498,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":148,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":538,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":81,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":288,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":71,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":249,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":507,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":363,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":581,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":432,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":478,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":32,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":50,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":293,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":286,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":317,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":492,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":520,"com.google.gson.functional.MapTest.testGeneralMapField":123,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":558,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":135,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":486,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":144,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":149,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":88,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":121,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":60,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":187,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":39,"com.google.gson.MixedStreamTest.testReadMixedStreamed":419,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":26,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":499,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":14,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":267,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":393,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":515,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":461,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":237,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":422,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":79,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":379,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":108,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":372,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":179,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":58,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":246,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":78,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":553,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":493,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":584,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":600,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":183,"com.google.gson.functional.ObjectTest.testNestedDeserialization":574,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":219,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":279,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":490,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":360,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":235,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":485,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":241,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":380,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":590,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":604,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":157,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":43,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":310,"com.google.gson.JavaSerializationTest.testListIsSerializable":423,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":357,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":552,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":269,"com.google.gson.functional.ObjectTest.testNullSerialization":212,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":313,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":517,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":374,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":19,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":122,"com.google.gson.functional.MapTest.testInterfaceTypeMap":120,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":527,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":151,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":253,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":433,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":320,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":329,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":154,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":611,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":61,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":233,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":445,"com.google.gson.MixedStreamTest.testWriteClosed":348,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":262,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":491,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":208,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":513,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":162,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":252,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":359,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":94,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":255,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":261,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":578,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":464,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":247,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":413,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":265,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":84,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":594,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":324,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":487,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":24,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":496,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":171,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":358,"com.google.gson.functional.CollectionTest.testQueueDeserialization":589,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":27,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":462,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":607,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":92,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":579,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":114,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":568,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":73,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":189,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":572,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":257,"com.google.gson.functional.MapTest.testRawMapSerialization":125,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":342,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":587,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":506,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":217,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":308,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":403,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":291,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":350,"com.google.gson.functional.PrimitiveTest.testByteSerialization":42,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":137,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":190,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":352,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":104,"com.google.gson.ObjectTypeAdapterTest.testSerialize":398,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":185,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":442,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":354,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":143,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":99,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":163,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":421,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":605,"com.google.gson.functional.MapTest.testMapWithQuotes":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":64,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":448,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":606,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":172,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":392,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":182,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":225,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":62,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":228,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":598,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":155,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":571,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":203,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":70,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":146,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":65,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":72,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":245,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":356,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":476,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":193,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":586,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":523,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":90,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":134,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":156,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":312,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":282,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":580,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":17,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":543,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":434,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":534,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":180,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":565,"com.google.gson.functional.ObjectTest.testNestedSerialization":218,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":294,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":23,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":186,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":609,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":57,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":124,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":132,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":204,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":10,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":347,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":213,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":593,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":482,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":364,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":514,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":402,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":1,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":400,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":566,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":577,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":305,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":141,"com.google.gson.functional.CollectionTest.testSetSerialization":268,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":615,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":177,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":200,"com.google.gson.functional.StringTest.testStringValueSerialization":306,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":103,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":325,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":410,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":582,"com.google.gson.MixedStreamTest.testWriteInvalidState":345,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":522,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":210,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":449,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":145,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":452,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":68,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":100,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":167,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":595,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":232,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":85,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":105,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":375,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":139,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":424},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:338","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceaa17b1-3f3c-11e6-a483-f361824a643a","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if ((i != i) && (context != i)) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"i","nonempty":"i","empty":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceaadb02-3f3c-11e6-a483-5ff500b308d7","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334],"tindex":"ceab2923-3f3c-11e6-a483-55397367aceb","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (writer == null) {\n                {\n                    if (boolean) {\n                        writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n                    } \n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n                    if (boolean) {\n                        jsonWriter.setIndent(\"  \");\n                    } \n                    jsonWriter.setSerializeNulls(boolean);\n                    return jsonWriter;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceab9e54-3f3c-11e6-a483-074a63820be3","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceabc565-3f3c-11e6-a483-ed60ae65acc4","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceabec76-3f3c-11e6-a483-65399bce05f5","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:961","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceabec77-3f3c-11e6-a483-356457747a50","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if ((targetSize == targetSize) || (p == targetSize)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"targetSize","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[0,1,335,40],"tindex":"ceac1388-3f3c-11e6-a483-b31b3a696d17","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ceac3a99-3f3c-11e6-a483-fd57ffd99eab","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[1,6,32,34,49,52,53,336,55,56,58,103,107,123,143,144,161,337,184,338,339,185,188,189,191,194,199,203,205,207,213,216,217,218,221,222,224,245,252,254,256,258,264,266,278,280,281,308],"tindex":"ceac61aa-3f3c-11e6-a483-bf1e440d2cdf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"ceac61ab-3f3c-11e6-a483-2be9217edbdb","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        toJson(src, src.getClass(), writer);\n    } else {\n        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"ceac88bc-3f3c-11e6-a483-09adc2ed168c","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc instanceof java.lang.Class) {\n        {\n            if (src.equals(src)) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src","to":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[278],"tindex":"ceac88bd-3f3c-11e6-a483-eb0837ce7f44","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"src","com.google.gson.LongSerializationPolicy.DEFAULT":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[340,341,165,166],"tindex":"ceacafce-3f3c-11e6-a483-c742b1a98721","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type == type) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type","b":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl"},"failures":[342,343,344,345,346,347,348,349,350,351,352,53,336,56,104,111,114,124,130,141,353,354,355,356,357,156,337,184,338,339,193,210,358,359,360,361,362,363,364,365,278,283,284,286,287,288,289,290,291,292,331],"tindex":"ceacd6df-3f3c-11e6-a483-5fd4d704f914","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ceacd6e0-3f3c-11e6-a483-739af177c23a","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl"},"failures":[366,350,351,352,367,16,17,69,368,86,369,370,371,372,110,111,373,374,112,375,113,376,114,377,378,379,380,115,116,117,381,382,118,119,383,120,121,122,123,124,125,384,126,127,385,128,386,387,129,130,388,178,183,389,390,197,198,391,223,239,242,358,359,248,392,393,249,250],"tindex":"ceacfdf1-3f3c-11e6-a483-257a783afe42","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.Class<?>) {\n        {\n            if (keyType.equals(keyType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"keyType","type":"keyType"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"cead2502-3f3c-11e6-a483-6d0dda3e2f9d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if ((name.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"cead9a33-3f3c-11e6-a483-0fe089c45477","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceadc144-3f3c-11e6-a483-ffd005d177a0","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc instanceof java.lang.Class) {\n        {\n            if (src.equals(src)) {\n                {\n                    try {\n                        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                        toJson(src, typeOfSrc, jsonWriter);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceadc145-3f3c-11e6-a483-5d2b2d63299e","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (writer == null) {\n                {\n                    if (boolean) {\n                        writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n                    } \n                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n                    if (boolean) {\n                        jsonWriter.setIndent(\"  \");\n                    } \n                    jsonWriter.setSerializeNulls(boolean);\n                    return jsonWriter;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceade856-3f3c-11e6-a483-a930c23c8f86","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl"},"failures":[346,33,36,37,43,48,50],"tindex":"ceade857-3f3c-11e6-a483-3dcaac9d481e","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ceae0f68-3f3c-11e6-a483-4d9e2cbd99c1","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:271","type":"CtBinaryOperatorImpl"},"failures":[394],"tindex":"ceae5d89-3f3c-11e6-a483-ed3714ec4e89","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[395,396,397],"tindex":"ceae849a-3f3c-11e6-a483-d5a418ff3539","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.WildcardType) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ceaeabab-3f3c-11e6-a483-6f14d0463deb","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ceaed2bc-3f3c-11e6-a483-1f30901eb918","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ceaed2bd-3f3c-11e6-a483-7fd901c39d87","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ceaf20de-3f3c-11e6-a483-5f0631f22f03","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceaf47ef-3f3c-11e6-a483-dbc535d7e108","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceaf47f0-3f3c-11e6-a483-27075c879c67","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"ceaf47f1-3f3c-11e6-a483-f56ce65c72f5","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.get();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl"},"failures":[398,399,20,400,401,69,402,79,94,382,126,403,152,353,354,356,357,167,168,169,170,404,171,405,174,184,406,211,222,223,225,226,228,229,230,239,240,241,242,358,359,361,252,363,407,408,254,365,256,409,268,271,272,410,411,274,275,293,294,295,296,307,308,309,310,311,312,313,412,413,414,415,324,325,326,327,328],"tindex":"ceaf6f02-3f3c-11e6-a483-01acae28a43b","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceaf9613-3f3c-11e6-a483-41776ba39d7a","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.Class<?>) {\n        {\n            if (keyType.equals(keyType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl"},"failures":[416,0,1,4,5,417,398,366,342,418,343,345,346,347,348,419,420,6,7,8,9,350,351,352,10,421,11,12,13,14,422,367,423,395,396,397,424,399,425,426,427,15,16,17,428,429,335,18,430,19,431,432,433,434,435,20,436,437,21,438,439,440,441,442,443,444,22,23,445,446,447,448,449,24,450,25,26,451,452,27,453,454,28,455,29,30,456,457,31,32,458,459,460,33,461,462,463,464,465,466,467,468,34,469,35,470,36,37,471,472,38,473,474,39,475,40,476,477,478,41,42,43,44,45,46,47,479,480,481,48,482,49,483,484,485,50,51,486,52,487,488,53,54,336,55,489,490,56,491,492,57,58,493,59,60,61,494,400,401,62,495,63,64,496,65,497,66,67,498,499,68,500,69,501,70,71,72,73,74,402,75,502,76,77,503,78,504,79,80,81,82,505,83,506,507,84,368,85,86,508,87,88,509,89,90,91,92,93,94,510,511,95,96,512,97,513,98,99,100,101,102,103,106,514,515,107,516,517,108,369,109,370,371,372,110,111,373,374,112,375,113,376,114,377,378,379,380,115,116,117,381,382,118,119,383,120,121,122,123,124,125,384,126,127,385,128,386,387,129,130,518,519,131,520,132,521,403,133,134,522,135,136,137,138,139,523,524,140,141,142,525,526,527,143,528,144,529,145,530,146,531,147,532,148,149,150,151,152,153,154,353,354,355,356,357,155,533,156,157,158,159,160,161,340,162,163,164,341,165,534,535,166,167,168,169,170,404,171,172,405,173,536,388,537,174,175,176,538,177,178,179,539,180,540,181,182,183,337,184,338,339,185,186,187,188,189,389,190,541,191,542,543,390,194,544,545,195,546,196,197,198,199,200,201,202,203,204,547,548,549,550,551,552,391,553,554,205,206,555,556,207,557,558,208,559,560,209,406,561,211,562,213,563,214,564,215,216,565,217,218,219,566,220,567,568,569,221,570,222,223,571,224,572,573,574,575,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,358,359,243,244,576,577,245,246,578,579,247,580,248,392,393,249,250,360,361,362,251,252,253,363,364,407,408,254,255,365,256,257,258,259,581,582,583,260,261,262,263,264,584,585,265,586,409,266,267,587,268,269,588,270,589,271,590,272,410,273,411,274,275,276,591,592,277,278,279,593,280,281,594,282,595,283,596,597,284,598,285,286,287,599,288,289,290,291,600,292,601,293,294,295,296,297,602,298,299,300,301,302,603,604,303,605,304,606,607,608,305,609,610,306,307,308,309,310,311,312,313,412,413,314,611,315,414,415,316,317,318,319,612,613,320,614,321,322,323,324,325,326,327,328,330,331,332,615,333,334],"tindex":"ceaf9614-3f3c-11e6-a483-39c813644700","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type.equals(type)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceafbd25-3f3c-11e6-a483-df4347b5781c","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[],"tindex":"ceafe436-3f3c-11e6-a483-c35493b05269","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceb00b47-3f3c-11e6-a483-9fab6fd6ae94","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if ((!root) && (!root)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"root","deserialize":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"ceb00b48-3f3c-11e6-a483-8d350b6a7241","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467343388267/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":40,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
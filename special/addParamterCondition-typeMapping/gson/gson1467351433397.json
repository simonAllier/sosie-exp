{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":432,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":19,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":117,"com.google.gson.functional.StringTest.testStringValueDeserialization":386,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":42,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":210,"com.google.gson.JsonPrimitiveTest.testDeepCopy":497,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":361,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":326,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":293,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":453,"com.google.gson.MixedStreamTest.testWriteLenient":527,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":301,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":506,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":254,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":97,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":104,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":300,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":174,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":27,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":330,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":159,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":446,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":0,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":376,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":434,"com.google.gson.functional.ObjectTest.testSingletonLists":72,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":28,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":118,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":155,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":282,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":66,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":360,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":221,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":310,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":143,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":136,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":344,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":394,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":471,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":108,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":172,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":234,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":152,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":477,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":337,"com.google.gson.functional.EnumTest.testEnumCaseMapping":409,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":116,"com.google.gson.functional.JsonTreeTest.testToJsonTree":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":222,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":96,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":197,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":205,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":101,"com.google.gson.functional.ObjectTest.testNullDeserialization":318,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":270,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":392,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":307,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":486,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":428,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":443,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":335,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":414,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":315,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":191,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":63,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":180,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":179,"com.google.gson.JsonParserTest.testParseString":436,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":220,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":532,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":196,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":49,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":79,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":475,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":209,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":169,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":294,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":524,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":204,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":86,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":455,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":275,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":41,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":417,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":170,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":314,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":9,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":115,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":304,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":501,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":367,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":529,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":231,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":90,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":263,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":150,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":24,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":238,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":147,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":413,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":273,"com.google.gson.functional.CollectionTest.testSetDeserialization":358,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":331,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":289,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":306,"com.google.gson.JsonStreamParserTest.testIterator":433,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":166,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":514,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":200,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":77,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":11,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":262,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":149,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":176,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":67,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":213,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":184,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":18,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":125,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":473,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":351,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":20,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":450,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":168,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":236,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":498,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":487,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":244,"com.google.gson.functional.MapTest.testSerializeMaps":30,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":227,"com.google.gson.functional.MapTest.testComplexKeysSerialization":40,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":288,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":454,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":489,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":511,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":272,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":408,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":384,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":402,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":406,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":69,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":424,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":447,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":363,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":317,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":247,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":516,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":158,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":186,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":286,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":142,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":248,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":122,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":23,"com.google.gson.functional.CollectionTest.testQueueSerialization":99,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":425,"com.google.gson.functional.MapTest.testMapOfMapSerialization":35,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":531,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":206,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":134,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":416,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":521,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":459,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":119,"com.google.gson.functional.FieldNamingTest.testIdentity":228,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":430,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":515,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":109,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":319,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":284,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":298,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":366,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":512,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":153,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":146,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":120,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":525,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":215,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":202,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":133,"com.google.gson.functional.MapTest.testMapSubclassSerialization":29,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":533,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":13,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":268,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":290,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":7,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":54,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":194,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":295,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":285,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":261,"com.google.gson.functional.EnumTest.testEnumSubclass":405,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":144,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":309,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":410,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":444,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":173,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":278,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":493,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":398,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":107,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":480,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":369,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":88,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":4,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":242,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":365,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":299,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":233,"com.google.gson.MixedStreamTest.testWriteNulls":429,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":48,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":259,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":271,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":421,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":73,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":380,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":517,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":245,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":341,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":235,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":121,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":328,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":2,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":43,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":445,"com.google.gson.JsonParserTest.testParseMixedArray":438,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":476,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":16,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":415,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":249,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":482,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":81,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":460,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":530,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":132,"com.google.gson.JsonArrayTest.testRemove":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":208,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":241,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":510,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":375,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":449,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":485,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":32,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":94,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":379,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":111,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":403,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":193,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":320,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":126,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":253,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":89,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":1,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":448,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":106,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":401,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":291,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":507,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":519,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":175,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":339,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":457,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":164,"com.google.gson.JsonParserTest.testParseEmptyString":439,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":157,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":201,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":224,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":404,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":356,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":151,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":161,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":523,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":296,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":474,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":214,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":385,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":141,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":461,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":277,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":321,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":355,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":343,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":464,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":494,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":177,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":292,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":279,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":324,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":303,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":68,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":127,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":198,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":250,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":280,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":374,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":381,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":85,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":211,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":92,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":178,"com.google.gson.JsonArrayTest.testSet":467,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":112,"com.google.gson.JsonPrimitiveTest.testEquals":496,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":378,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":188,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":237,"com.google.gson.functional.MapTest.testGeneralMapField":38,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":302,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":451,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":251,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":411,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":25,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":15,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":190,"com.google.gson.MixedStreamTest.testReadMixedStreamed":140,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":534,"com.google.gson.JsonObjectTest.testDeepCopy":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":199,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":441,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":12,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":105,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":352,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":230,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":338,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":458,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":207,"com.google.gson.JsonArrayTest.testDeepCopy":468,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":518,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":22,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":346,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":462,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":495,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":189,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":383,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":488,"com.google.gson.functional.ObjectTest.testNestedDeserialization":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":522,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":370,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":185,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":87,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":336,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":340,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":362,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":388,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":440,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":260,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":418,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":396,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":257,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":297,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":397,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization":420,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":232,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":37,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":528,"com.google.gson.functional.MapTest.testInterfaceTypeMap":36,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":243,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":252,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":91,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":407,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":400,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":526,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":334,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":491,"com.google.gson.MixedStreamTest.testWriteClosed":139,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":100,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":187,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":223,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":354,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":264,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":353,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":342,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":80,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":82,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":419,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":219,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":75,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":95,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":347,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":479,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":349,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":399,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":103,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":442,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":452,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":212,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":371,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":130,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":183,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":500,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":17,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":57,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":195,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":274,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":83,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":167,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":218,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":348,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":33,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":316,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":64,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":323,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":98,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":6,"com.google.gson.functional.MapTest.testRawMapSerialization":39,"com.google.gson.JsonParserTest.testParseReader":435,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":135,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":312,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":395,"com.google.gson.JsonPrimitiveTest.testExponential":499,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":239,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":10,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":47,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":65,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":466,"com.google.gson.ObjectTypeAdapterTest.testSerialize":137,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":508,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":60,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":481,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":255,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":478,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":51,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":490,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":225,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":265,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":389,"com.google.gson.functional.MapTest.testMapWithQuotes":34,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":503,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":390,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":513,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":283,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":502,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":329,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":377,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":258,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":322,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":70,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":308,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":53,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":305,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":504,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":84,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":256,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":357,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":240,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":46,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":217,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":128,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":372,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":492,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":350,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":14,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":287,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":154,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":267,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":520,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":311,"com.google.gson.functional.ObjectTest.testNestedSerialization":78,"com.google.gson.JsonObjectTest.testAddingStringProperties":427,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":113,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":61,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":393,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":21,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":44,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":71,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":437,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":8,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":145,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":76,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":181,"com.google.gson.JsonPrimitiveTest.testBoolean":483,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":93,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":192,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":313,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":345,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":123,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":50,"com.google.gson.functional.CollectionTest.testSetSerialization":359,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":412,"com.google.gson.functional.StringTest.testStringValueSerialization":124,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":281,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":26,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":131,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":364,"com.google.gson.MixedStreamTest.testWriteInvalidState":138,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":162,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":246,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":505,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":226,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":535,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":269,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":423,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":373,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":431,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":333,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":456,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":266,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":509},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl"},"failures":[0,1,2,3],"tindex":"dd047fa5-3f4d-11e6-b51c-139f05dfea2d","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (!(type instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd0542f6-3f4d-11e6-b51c-b1be991d1bab","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"dd056a07-3f4d-11e6-b51c-7950c76b66cb","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from.getRawType().equals(from.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"from","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136],"tindex":"dd059118-3f4d-11e6-b51c-f9cfab096efa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1189","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd062d59-3f4d-11e6-b51c-47c50cd4e713","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if ((modifier == modifier) || (p == modifier)) {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"modifier","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl"},"failures":[4,5,137,6,7,138,139,140,141,9,142,143,144,145,11,146,12,147,148,149,150,151,13,14,152,153,154,155,156,157,16,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,18,19,20,184,185,186,187,188,21,22,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,26,229,230,28,231,232,233,33,234,36,37,38,40,42,235,236,43,237,44,238,239,240,241,242,243,244,52,245,246,247,248,249,250,251,252,54,253,254,255,256,257,258,259,55,260,261,262,263,56,0,264,265,266,1,2,267,268,3,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,57,58,284,59,60,62,63,64,65,285,66,286,287,67,288,289,290,291,69,70,71,292,293,294,295,296,297,298,72,299,300,73,301,302,74,303,304,75,305,306,307,76,308,309,310,77,311,312,78,313,314,315,316,317,318,79,319,320,321,322,80,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,81,82,340,341,83,342,343,344,345,84,346,347,348,349,350,351,352,85,86,87,88,89,90,353,91,92,93,354,355,94,95,96,97,356,102,357,358,104,359,360,361,362,363,364,365,366,367,106,368,369,107,108,370,109,110,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,112,113,114,115,386,117,119,387,388,389,390,391,392,393,394,125,395,126,396,127,128,397,398,399,129,400,401,402,403,404,405,406,407,408,409,130,131,132,133,134,410,411,412,413,414],"tindex":"dd06546a-3f4d-11e6-b51c-adbbc6f54b38","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value.isAssignableFrom(key)) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"value","classOfPrimitive":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd06a28b-3f4d-11e6-b51c-a1d169b8014e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd06a28c-3f4d-11e6-b51c-dfffc5000bc6","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd06a28d-3f4d-11e6-b51c-67d6add897eb","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:318","type":"CtBinaryOperatorImpl"},"failures":[415],"tindex":"dd06c99e-3f4d-11e6-b51c-7dccee70bf1a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[416,417,418],"tindex":"dd08503f-3f4d-11e6-b51c-b91dda726848","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,9,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,10,465,466,467,468,469,470,471,472,473,474,475,476,477,146,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,178,19,188,190,191,502,503,504,196,197,505,506,217,507,222,508,509,510,36,38,511,42,235,236,43,237,44,238,239,251,252,254,255,512,256,257,55,267,513,514,276,515,277,278,516,279,280,281,517,518,519,520,282,521,283,522,57,58,284,59,65,66,71,292,293,294,295,296,297,327,332,334,335,337,83,342,351,85,86,87,88,89,92,93,96,523,108,370,371,377,404,524,525],"tindex":"dd085040-3f4d-11e6-b51c-5111dc721edf","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive == null) {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd087751-3f4d-11e6-b51c-8153566239e1","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd089e62-3f4d-11e6-b51c-3b6b442173da","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd089e63-3f4d-11e6-b51c-6b101ee67679","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd08c574-3f4d-11e6-b51c-8788f999d64a","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd08c575-3f4d-11e6-b51c-ef99187b6c02","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl"},"failures":[250,251,252,253,526,270,271,272,273,274,327],"tindex":"dd08ec86-3f4d-11e6-b51c-bd5700957e03","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd08ec87-3f4d-11e6-b51c-ef420c951b7e","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd091398-3f4d-11e6-b51c-3f8a219e1d75","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd091399-3f4d-11e6-b51c-6935700e912d","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[527,528,529,530,531,532,533],"tindex":"dd093aaa-3f4d-11e6-b51c-8fac097b64e4","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd093aab-3f4d-11e6-b51c-61ee1110f9df","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"dd093aac-3f4d-11e6-b51c-93741403f470","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[534,535],"tindex":"dd0961bd-3f4d-11e6-b51c-69d9798bc28f","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json == null) {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:191","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd0961be-3f4d-11e6-b51c-b5eb578e8432","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if ((i++) > i) {\n        {\n            return char[][i];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"size":"i","threshold":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd0a732f-3f4d-11e6-b51c-af1e17017b3d","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd0a9a40-3f4d-11e6-b51c-7fecff457044","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"dd0ac151-3f4d-11e6-b51c-6fc484f47ab3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd0ae862-3f4d-11e6-b51c-b907ed1feb37","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (memberName == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"dd0ae863-3f4d-11e6-b51c-c7170168ccd7","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd0ae864-3f4d-11e6-b51c-a56eccb9a16b","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (memberName == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd0b0f75-3f4d-11e6-b51c-67e6f30a96e7","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd0b0f76-3f4d-11e6-b51c-03781e4f8f8f","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"dd0b3687-3f4d-11e6-b51c-2d0eec55ae01","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467350733320/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
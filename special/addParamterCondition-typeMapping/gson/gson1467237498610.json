{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":166,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":593,"com.google.gson.functional.StringTest.testStringValueDeserialization":591,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":61,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":559,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":379,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":11,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":128,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":50,"com.google.gson.MixedStreamTest.testWriteLenient":614,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":568,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":39,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":33,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":37,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":97,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":427,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":264,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":520,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":147,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":388,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":232,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":24,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":72,"com.google.gson.functional.ObjectTest.testSingletonLists":95,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":560,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":372,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":594,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":312,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":7,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":576,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":110,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":247,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":430,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":208,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":607,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":133,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":419,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":485,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":56,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":238,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":364,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":480,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":339,"com.google.gson.functional.EnumTest.testEnumCaseMapping":263,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":236,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":592,"com.google.gson.functional.JsonTreeTest.testToJsonTree":197,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":363,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":579,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":92,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":31,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":538,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":634,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":511,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":228,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":553,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":358,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":290,"com.google.gson.functional.ObjectTest.testNullDeserialization":465,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":135,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":604,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":107,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":243,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":438,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":380,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":462,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":478,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":66,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":117,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":242,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":530,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":580,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":68,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":443,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":575,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":424,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":635,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":403,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":537,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":119,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":507,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":401,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":558,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":51,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":332,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":416,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":550,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":193,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":624,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":43,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":349,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":318,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":425,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":417,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":116,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":501,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":5,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":103,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":216,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":16,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":346,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":384,"com.google.gson.metrics.PerformanceTest.testDummy":245,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":189,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":83,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":22,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":484,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":304,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":249,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":351,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":566,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":552,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":65,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":138,"com.google.gson.functional.CollectionTest.testSetDeserialization":36,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":148,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":106,"com.google.gson.functional.EnumTest.testEnumSet":256,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":522,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":408,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":23,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":303,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":328,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":542,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":111,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":1,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":21,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":421,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":152,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":432,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":8,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":475,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":235,"com.google.gson.functional.MapTest.testHashMapDeserialization":322,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":377,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":286,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":564,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":493,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":586,"com.google.gson.MixedStreamTest.testReadNulls":615,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":165,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":269,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":190,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":254,"com.google.gson.functional.MapTest.testSortedMap":342,"com.google.gson.functional.MapTest.testMapSerialization":338,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":167,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":156,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":414,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":514,"com.google.gson.functional.MapTest.testSerializeMaps":325,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":590,"com.google.gson.functional.MapTest.testComplexKeysSerialization":60,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":521,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":350,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":518,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":10,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":137,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":78,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":280,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":251,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":261,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":154,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":225,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":229,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":12,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":464,"com.google.gson.functional.MapTest.testStringKeyDeserialization":348,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":515,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":306,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":445,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":352,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":383,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":378,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":471,"com.google.gson.functional.PrettyPrintingTest.testMap":486,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":283,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":169,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":533,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":246,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":517,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":636,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":597,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":601,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":233,"com.google.gson.functional.CollectionTest.testQueueSerialization":287,"com.google.gson.functional.MapTest.testMapSerializationEmpty":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":548,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":409,"com.google.gson.functional.MapTest.testMapOfMapSerialization":337,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":400,"com.google.gson.JavaSerializationTest.testMapIsSerializable":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":555,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":292,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":144,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":411,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":313,"com.google.gson.functional.FieldNamingTest.testIdentity":217,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":595,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":305,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":172,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":120,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":15,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":94,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":196,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":301,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":366,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":239,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":353,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":596,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":130,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":570,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":543,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":549,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":578,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":319,"com.google.gson.functional.MapTest.testMapSubclassSerialization":324,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":441,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":30,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":162,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":524,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":149,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":220,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":398,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":582,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":52,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":456,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":532,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":6,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":20,"com.google.gson.functional.EnumTest.testEnumSubclass":259,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":420,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":109,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":248,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":365,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":62,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":426,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":45,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":275,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":368,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":132,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":404,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":131,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":81,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":2,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":510,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":410,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":458,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":14,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":402,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":572,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":96,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":321,"com.google.gson.MixedStreamTest.testWriteNulls":613,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":509,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":316,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":503,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":18,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":136,"com.google.gson.CommentsTest.testParseComments":618,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":75,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":98,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":308,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":178,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":183,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":423,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":490,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":341,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":599,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":467,"com.google.gson.MixedStreamTest.testReadInvalidState":611,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":145,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":29,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":574,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":157,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":376,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":227,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":519,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":180,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":393,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":142,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":556,"com.google.gson.functional.MapTest.testMapDeserialization":331,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":551,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":489,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":320,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":71,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":638,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":90,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":330,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":74,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":356,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":281,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":195,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":201,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":121,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":461,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":271,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":473,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":539,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":28,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":129,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":279,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":153,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":340,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":619,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":577,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":362,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":310,"com.google.gson.functional.PrimitiveTest.testShortSerialization":439,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":359,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":429,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":482,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":399,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":0,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":375,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":587,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":258,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":34,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":161,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":326,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":392,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":299,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":447,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":53,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":79,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":567,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":224,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":626,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":454,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":448,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":631,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":266,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":44,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":89,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":122,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":527,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":93,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":199,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":46,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":405,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":126,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":102,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":262,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":272,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":523,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":202,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":469,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":307,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":70,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":557,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":382,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":545,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":77,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":562,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":86,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":284,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":369,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":434,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":407,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":451,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":48,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":73,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":257,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":171,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":158,"com.google.gson.functional.MapTest.testGeneralMapField":59,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":100,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":500,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":453,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":63,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":177,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":470,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":569,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":343,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":355,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":528,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":431,"com.google.gson.MixedStreamTest.testReadMixedStreamed":223,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":333,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":540,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":191,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":240,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":295,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":187,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":412,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":481,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":621,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":204,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":334,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":585,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":323,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":309,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":452,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":176,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":554,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":317,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":173,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":526,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":361,"com.google.gson.functional.ObjectTest.testNestedDeserialization":127,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":315,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":463,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":466,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":168,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":80,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":479,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":450,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":182,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":265,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":335,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":598,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":19,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":437,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":32,"com.google.gson.JavaSerializationTest.testListIsSerializable":623,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":42,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":54,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":297,"com.google.gson.functional.ObjectTest.testNullSerialization":459,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":274,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":584,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":327,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":58,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":367,"com.google.gson.functional.MapTest.testInterfaceTypeMap":57,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":512,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":627,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":472,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":85,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":370,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":9,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":630,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":278,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":474,"com.google.gson.MixedStreamTest.testReadClosed":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":529,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":477,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":386,"com.google.gson.MixedStreamTest.testWriteClosed":222,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":170,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":289,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":88,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":581,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":25,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":84,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":185,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":124,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":206,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":91,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":104,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":288,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":212,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":415,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":214,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":276,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":563,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":495,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":140,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":455,"com.google.gson.stream.JsonWriterTest.testNumbers":628,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":391,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":535,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":139,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":497,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":184,"com.google.gson.functional.CollectionTest.testQueueDeserialization":300,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":397,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":413,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":603,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":492,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":573,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":55,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":547,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":69,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":125,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":282,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":219,"com.google.gson.functional.MapTest.testRawMapSerialization":345,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":561,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":632,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":113,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":270,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":160,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":360,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":230,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":250,"com.google.gson.functional.PrimitiveTest.testByteSerialization":436,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":502,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":620,"com.google.gson.ObjectTypeAdapterTest.testSerialize":4,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":609,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":67,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":381,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":637,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":40,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":513,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":588,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":26,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":237,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":600,"com.google.gson.functional.MapTest.testMapWithQuotes":336,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":534,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":602,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":302,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":525,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":314,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":164,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":531,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":146,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":357,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":17,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":123,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":226,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":155,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":422,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":544,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":105,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":516,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":536,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":41,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":546,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":433,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":255,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":294,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":505,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":267,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":571,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":273,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":174,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":583,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":163,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":253,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":268,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":371,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":311,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":629,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":112,"com.google.gson.functional.ObjectTest.testNestedSerialization":114,"com.google.gson.JsonObjectTest.testAddingStringProperties":234,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":49,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":354,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":385,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":606,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":496,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":344,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":159,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":198,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":244,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":616,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":108,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":494,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":446,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":87,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":203,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":241,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":387,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":617,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":200,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":209,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":633,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":605,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":508,"com.google.gson.functional.CollectionTest.testSetSerialization":38,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":64,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":47,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":487,"com.google.gson.functional.StringTest.testStringValueSerialization":608,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":218,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":13,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":141,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":285,"com.google.gson.MixedStreamTest.testWriteInvalidState":221,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":499,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":457,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":390,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":179,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":396,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":541,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":589,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":134,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":231,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":175,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":476,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":625,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":565,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":610,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":329,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":483,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":504},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[],"tindex":"969257a3-3e44-11e6-a880-a56b658ca17d","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"9692a5c4-3e44-11e6-a880-7d5836cf97a7","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"typeOfT","context":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9692ccd5-3e44-11e6-a880-f122fa482bf7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0],"tindex":"9692ccd6-3e44-11e6-a880-1360f1efb061","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,0,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224],"tindex":"9692ccd7-3e44-11e6-a880-d7004c6f2076","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return f.getName();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[225,53],"tindex":"9692f3e8-3e44-11e6-a880-35863e6df7fd","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"9692f3e9-3e44-11e6-a880-0383b7bde679","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"96931afa-3e44-11e6-a880-6528da20d803","method":{"position":"com.google.gson.DefaultDateTypeAdapter:77","type":"CtMethodImpl","sourcecode":"public java.util.Date deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT, com.google.gson.JsonDeserializationContext context) throws com.google.gson.JsonParseException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            if (typeOfT instanceof java.lang.reflect.WildcardType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    if (!(json instanceof com.google.gson.JsonPrimitive)) {\n                        throw new com.google.gson.JsonParseException(\"The date should be a string value\");\n                    } \n                    java.util.Date java.util.Date = deserializeToDate(json);\n                    if (typeOfT == (java.util.Date.java.util.Date.java.lang.Class)) {\n                        return date;\n                    } else if (typeOfT == (java.sql.Timestamp.java.sql.Timestamp.java.lang.Class)) {\n                        return new java.sql.Timestamp(date.getTime());\n                    } else if (typeOfT == (java.sql.Date.java.sql.Date.java.lang.Class)) {\n                        return new java.sql.Date(date.getTime());\n                    } else {\n                        throw new java.lang.IllegalArgumentException((((getClass()) + \" cannot deserialize to \") + typeOfT));\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT","b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"96931afb-3e44-11e6-a880-d37805d88493","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9693420c-3e44-11e6-a880-197d9d2072cc","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9693420d-3e44-11e6-a880-059b268e2ac6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"9693420e-3e44-11e6-a880-a17ee9e53939","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[226,227,228,229],"tindex":"9693420f-3e44-11e6-a880-35af1ee5e0b1","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node == null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"96939030-3e44-11e6-a880-a73a0eef0a19","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        return null;\n    } \n    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"96939031-3e44-11e6-a880-d57949f61032","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"96939032-3e44-11e6-a880-39702763bb33","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            return java.lang.String.valueOf(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            return java.lang.Boolean.toString(primitive.getAsBoolean());\n        } else if (primitive.isString()) {\n            return primitive.getAsString();\n        } else {\n            throw new java.lang.AssertionError();\n        }\n    } else if (keyElement.isJsonNull()) {\n        return \"null\";\n    } else {\n        throw new java.lang.AssertionError();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[230,231,232,225,233,234,196],"tindex":"96939033-3e44-11e6-a880-9b6a46b1266d","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[235,236],"tindex":"9693b744-3e44-11e6-a880-1b5f8d8c7de3","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"9693b745-3e44-11e6-a880-a7ddf0094ea7","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9693b746-3e44-11e6-a880-3368c5d4dcf9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"9693b747-3e44-11e6-a880-0d2a946f993e","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if ((json.length()) == 0) {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"9693b748-3e44-11e6-a880-27beeac93fba","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9693b749-3e44-11e6-a880-ed13205b9343","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9693de5a-3e44-11e6-a880-4b6fd4b13d90","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[237,1,238,239,240,2,3,241,5,242,243,244,245,246,247,248,249,250,6,7,251,252,253,254,255,8,256,257,258,259,260,261,9,10,262,263,264,11,265,12,13,266,14,15,16,17,18,267,19,20,21,22,23,24,25,26,27,28,29,268,30,31,269,270,271,32,272,273,274,275,276,277,278,279,280,281,33,282,34,283,284,285,286,287,288,289,290,35,291,292,293,294,36,37,295,296,38,297,298,299,300,39,40,301,41,42,302,43,303,304,305,44,45,306,46,307,47,308,309,310,311,312,313,314,315,48,49,50,51,52,53,54,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,55,332,333,334,335,336,337,338,339,56,340,341,342,57,343,58,59,344,345,346,60,347,348,349,350,351,352,61,62,353,63,64,65,66,67,354,355,68,69,70,71,72,356,357,358,73,74,75,76,359,77,360,361,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,235,433,93,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,94,95,96,97,98,99,100,101,102,103,104,457,105,458,106,107,459,108,460,109,461,110,462,111,112,113,114,463,115,116,117,118,464,465,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,466,467,134,135,136,137,138,139,145,468,146,147,148,469,470,471,472,149,473,474,475,476,477,478,479,480,481,482,483,150,151,152,484,485,486,153,154,487,488,489,155,490,156,157,158,159,491,160,161,162,163,165,492,166,167,493,168,169,170,171,494,172,173,495,174,175,496,176,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,177,178,179,515,516,517,518,519,180,181,182,183,184,185,520,186,187,188,189,521,522,523,524,190,525,191,192,193,194,195,196,197,198,199,526,527,528,529,530,200,201,531,532,533,534,535,536,537,538,539,202,540,541,542,0,543,544,545,546,547,548,203,549,550,551,552,553,554,555,204,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,205,571,572,573,574,206,575,576,577,578,579,580,581,582,207,208,209,210,211,212,213,214,583,584,585,215,216,586,587,588,589,590,217,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,218,609,610,219,611,612,220,613,221,614,615,616,222,223,224,236,617,618],"tindex":"9693de5b-3e44-11e6-a880-8b41882c545b","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if ((!serializeSpecialFloatingPointValues) && (!serializeSpecialFloatingPointValues)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"serializeSpecialFloatingPointValues","deserialize":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9694056c-3e44-11e6-a880-6dc266ddcdb9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"9694056d-3e44-11e6-a880-f5a75f112e9c","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.WildcardType)) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"96942c7e-3e44-11e6-a880-45b29be36bc8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"96942c7f-3e44-11e6-a880-bd586c8a79f7","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((typeOfSrc instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:596","type":"CtBinaryOperatorImpl","sourcecode":"result != (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"96942c80-3e44-11e6-a880-4da72819de69","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty != empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"empty","com.google.gson.stream.JsonReader.PEEKED_NONE":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"96942c81-3e44-11e6-a880-c7c2a167a20e","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return f.getName();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"96942c82-3e44-11e6-a880-f9c3be3541b9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"96945393-3e44-11e6-a880-fb7a0bf370a5","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"96945394-3e44-11e6-a880-d7159e5aab54","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if ((from instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:556","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[],"tindex":"96945395-3e44-11e6-a880-ad319124dc7a","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            if (modifier == modifier) {\n                {\n                    return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"modifier","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"96947aa6-3e44-11e6-a880-df8cdf200b8b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"96947aa7-3e44-11e6-a880-4f6f45c62c96","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"96947aa8-3e44-11e6-a880-4fa347c08ce5","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            if ((json.length()) == 0) {\n                {\n                    return parse(new java.io.StringReader(json));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:831","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"96947aa9-3e44-11e6-a880-392ee8bc013b","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            if (modifier == modifier) {\n                {\n                    return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_LONG":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"96947aaa-3e44-11e6-a880-bd9ac17b15a7","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9694a1bb-3e44-11e6-a880-fdf237507430","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"9694a1bc-3e44-11e6-a880-17603092d47b","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc.getRawType().equals(typeOfSrc.getRawType())) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfSrc","to":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"9694a1bd-3e44-11e6-a880-0fff0b9c9f3c","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9694a1be-3e44-11e6-a880-0f1846d9cd38","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"9694c8cf-3e44-11e6-a880-9d1eca153b40","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if ((token instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[237,1,238,239,240,230,619,620,2,3,5,244,621,622,623,246,247,248,249,250,6,7,252,253,254,8,256,257,258,259,260,261,9,10,262,263,264,11,265,12,13,266,14,15,16,17,18,267,19,20,21,22,23,24,25,26,27,28,29,268,30,31,269,270,271,32,272,273,274,275,276,277,278,279,280,281,33,282,34,283,284,285,286,287,288,289,290,35,291,292,293,294,36,37,295,296,38,297,298,299,300,39,40,301,41,42,302,43,303,304,305,44,45,306,46,307,47,308,309,310,311,312,313,314,315,48,49,50,51,52,53,54,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,55,332,333,334,335,336,337,338,339,56,340,341,342,57,343,58,59,344,345,346,60,347,348,349,350,351,352,61,62,353,63,64,65,66,67,354,355,68,69,70,71,72,356,357,358,73,74,75,76,359,77,360,361,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,235,433,93,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,94,95,96,97,98,99,100,101,102,103,104,105,458,106,107,108,109,461,110,462,111,112,113,114,463,115,116,117,118,464,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,466,134,135,136,137,138,139,140,141,142,143,144,145,468,146,147,148,469,470,471,472,149,473,474,475,476,477,478,479,480,481,482,483,150,151,152,484,485,486,153,154,487,488,489,155,490,156,157,158,159,491,160,161,162,163,164,165,492,166,167,493,168,169,170,171,494,172,173,495,174,175,496,176,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,177,178,179,515,516,517,518,519,180,181,182,183,184,185,520,186,187,188,189,521,522,523,524,190,525,191,192,193,194,195,196,197,198,199,526,527,528,529,530,200,201,531,532,533,534,535,536,537,538,539,202,540,541,542,0,543,544,545,546,547,548,203,549,550,551,552,553,554,555,204,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,205,571,572,573,574,206,575,576,577,578,579,580,581,582,207,208,209,210,211,212,213,214,583,584,585,215,216,586,587,588,589,590,217,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,218,219,611,220,221,614,616,222,223,224,236,617,618],"tindex":"9694c8d0-3e44-11e6-a880-ed5fa6ab288a","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"9694efe1-3e44-11e6-a880-6dc35c5e2371","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"9694efe2-3e44-11e6-a880-ff3a8326ac5d","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (!(from instanceof java.lang.reflect.GenericArrayType)) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[],"tindex":"9694efe3-3e44-11e6-a880-8192003c327b","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o != null) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"969516f4-3e44-11e6-a880-5b6aa4108602","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a instanceof com.google.gson.JsonArray) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1362","type":"CtBinaryOperatorImpl","sourcecode":"c == '/'"},"failures":[],"tindex":"969516f5-3e44-11e6-a880-7bd480dae01b","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == '/') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[624,625,626,239,4,5,627,628,7,8,11,12,15,17,267,19,20,21,22,23,25,26,27,29,31,270,274,279,33,34,283,288,35,37,38,297,306,46,47,311,313,314,320,325,338,59,345,352,67,68,69,84,90,365,385,402,406,407,411,420,422,424,425,428,431,235,435,436,437,438,439,440,445,447,451,452,454,94,98,106,108,111,113,114,119,121,124,129,132,133,145,468,146,147,148,629,630,631,632,633,634,635,636,485,486,153,154,487,488,489,155,162,163,164,165,167,169,172,173,176,498,504,509,513,177,518,182,183,188,190,192,193,195,198,531,534,541,204,206,207,210,211,214,587,588,589,590,217,218,219,220,614,637,638,617],"tindex":"969516f6-3e44-11e6-a880-c3825e09a2d2","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"969516f7-3e44-11e6-a880-51b11d3e5161","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"96953e08-3e44-11e6-a880-bf2ff3e08ab9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"96953e09-3e44-11e6-a880-5fb7d0f33c70","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[],"tindex":"96953e0a-3e44-11e6-a880-e7dbc0ae4e23","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"96953e0b-3e44-11e6-a880-7320c5d8c8e7","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467236604085/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":57,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
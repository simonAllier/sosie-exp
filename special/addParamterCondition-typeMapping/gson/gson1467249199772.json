{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":418,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":571,"com.google.gson.functional.StringTest.testStringValueDeserialization":569,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":178,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":524,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":236,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":40,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":359,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":130,"com.google.gson.MixedStreamTest.testWriteLenient":596,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":625,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":533,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":104,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":79,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":96,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":319,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":284,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":39,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":465,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":376,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":245,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":56,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":192,"com.google.gson.functional.ObjectTest.testSingletonLists":317,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":525,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":229,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":572,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":124,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":22,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":101,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":543,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":337,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":17,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":287,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":551,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":585,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":364,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":276,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":398,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":160,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":5,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":221,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":390,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":159,"com.google.gson.functional.EnumTest.testEnumCaseMapping":38,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":570,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":602,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":220,"com.google.gson.functional.JsonTreeTest.testToJsonTree":482,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":403,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":546,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":218,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":618,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":64,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":499,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":447,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":231,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":517,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":195,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":607,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":89,"com.google.gson.functional.ObjectTest.testNullDeserialization":349,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":368,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":582,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":613,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":331,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":13,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":297,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":237,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":338,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":388,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":184,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":346,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":12,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":489,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":547,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":188,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":302,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":301,"com.google.gson.JsonParserTest.testParseString":617,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":542,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":281,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":260,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":498,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":350,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":443,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":523,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":131,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":152,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":273,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":621,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":514,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":478,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":627,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":110,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":174,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":137,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":282,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":274,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":345,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":437,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":11,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":325,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":562,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":47,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":170,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":241,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":654,"com.google.gson.metrics.PerformanceTest.testDummy":15,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":469,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":209,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":54,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":112,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":19,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":176,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":411,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":531,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":394,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":516,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":183,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":371,"com.google.gson.functional.CollectionTest.testSetDeserialization":95,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":377,"com.google.gson.functional.EnumTest.testEnumSet":29,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":330,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":471,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":265,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":55,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":111,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":0,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":504,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":339,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":53,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":278,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":396,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":289,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":28,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":385,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":290,"com.google.gson.functional.MapTest.testHashMapDeserialization":141,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":234,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":529,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":420,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":563,"com.google.gson.MixedStreamTest.testReadNulls":597,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":65,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":416,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":26,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":474,"com.google.gson.functional.MapTest.testSortedMap":163,"com.google.gson.functional.MapTest.testMapSerialization":158,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":419,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":614,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":271,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":407,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":450,"com.google.gson.functional.MapTest.testSerializeMaps":144,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":567,"com.google.gson.functional.MapTest.testComplexKeysSerialization":171,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":470,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":175,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":626,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":457,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":36,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":370,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":204,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":610,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":77,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":23,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":34,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":401,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":648,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":42,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":348,"com.google.gson.functional.MapTest.testStringKeyDeserialization":173,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":2,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":116,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":304,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":177,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":240,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":235,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":380,"com.google.gson.functional.PrettyPrintingTest.testMap":399,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":82,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":24,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":494,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":16,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":456,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":575,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":579,"com.google.gson.functional.CollectionTest.testQueueSerialization":86,"com.google.gson.functional.MapTest.testMapSerializationEmpty":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":511,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":649,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":266,"com.google.gson.functional.MapTest.testMapOfMapSerialization":157,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":257,"com.google.gson.JavaSerializationTest.testMapIsSerializable":620,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":519,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":92,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":268,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":641,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":125,"com.google.gson.functional.FieldNamingTest.testIdentity":568,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":573,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":113,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":426,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":351,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":46,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":106,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":316,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":481,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":223,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":6,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":180,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":574,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":263,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":535,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":506,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":545,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":640,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":138,"com.google.gson.functional.MapTest.testMapSubclassSerialization":143,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":300,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":63,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":414,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":473,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":255,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":382,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":549,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":593,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":132,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":493,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":21,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":52,"com.google.gson.functional.EnumTest.testEnumSubclass":32,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":277,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":18,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":335,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":222,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":179,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":283,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":115,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":72,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":225,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":363,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":261,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":362,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":207,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":8,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":446,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":609,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":267,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":329,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":45,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":538,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":318,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":140,"com.google.gson.MixedStreamTest.testWriteNulls":594,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":445,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":135,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":439,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":49,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":369,"com.google.gson.CommentsTest.testParseComments":604,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":646,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":120,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":198,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":320,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":280,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":452,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":462,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":406,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":162,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":577,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":366,"com.google.gson.MixedStreamTest.testReadInvalidState":591,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":373,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":61,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":540,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":408,"com.google.gson.JsonParserTest.testParseMixedArray":635,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":233,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":624,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":458,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":459,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":629,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":250,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":639,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":521,"com.google.gson.functional.MapTest.testMapDeserialization":150,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":515,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":404,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":139,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":191,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":644,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":149,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":216,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":197,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":193,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":78,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":622,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":33,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":491,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":336,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":352,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":67,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":383,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":500,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":60,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":76,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":360,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":161,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":400,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":544,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":219,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":122,"com.google.gson.functional.PrimitiveTest.testShortSerialization":298,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":200,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":286,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":392,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":256,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":608,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":285,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":505,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":564,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":31,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":81,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":413,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":605,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":145,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":249,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":102,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":306,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":133,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":630,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":532,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":601,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":611,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":313,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":307,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":114,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":215,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":486,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":550,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":631,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":292,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":484,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":117,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":262,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":357,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":324,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":37,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":69,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":472,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":90,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":501,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":378,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":118,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":190,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":522,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":239,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":477,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":508,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":527,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":83,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":212,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":226,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":293,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":264,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":310,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":128,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":30,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":196,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":424,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":409,"com.google.gson.functional.MapTest.testGeneralMapField":167,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":322,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":436,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":312,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":181,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":379,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":534,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":165,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":187,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":487,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":288,"com.google.gson.MixedStreamTest.testReadMixedStreamed":600,"com.google.gson.JsonObjectTest.testDeepCopy":650,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":153,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":251,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":502,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":7,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":97,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":476,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":467,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":269,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":391,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":520,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":154,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":560,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":142,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":121,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":311,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":432,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":554,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":252,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":612,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":518,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":655,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":136,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":427,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":485,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":203,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":127,"com.google.gson.functional.ObjectTest.testNestedDeserialization":358,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":343,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":365,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":421,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":206,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":309,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":461,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":41,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":155,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":576,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":51,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":296,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":68,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":108,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":134,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":100,"com.google.gson.functional.ObjectTest.testNullSerialization":332,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":71,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":559,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":146,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":166,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":224,"com.google.gson.functional.MapTest.testInterfaceTypeMap":164,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":448,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":381,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":211,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":619,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":227,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":35,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":642,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":75,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":384,"com.google.gson.MixedStreamTest.testReadClosed":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":488,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":387,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":243,"com.google.gson.MixedStreamTest.testWriteClosed":599,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":88,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":423,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":214,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":548,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":57,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":210,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":464,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":355,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":460,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":541,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":217,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":326,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":87,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":555,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":272,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":557,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":73,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":93,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":645,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":528,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":428,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":314,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":637,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":248,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":496,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":372,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":433,"com.google.gson.functional.CollectionTest.testQueueDeserialization":103,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":463,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":652,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":254,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":270,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":581,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":539,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":556,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":151,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":510,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":189,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":356,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":80,"com.google.gson.functional.MapTest.testRawMapSerialization":169,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":590,"com.google.gson.JsonParserTest.testParseReader":616,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":526,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":66,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":341,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":412,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":202,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":632,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":20,"com.google.gson.functional.PrimitiveTest.testByteSerialization":295,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":438,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":634,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":588,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":185,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":238,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":643,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":105,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":449,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":565,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":3,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":58,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":578,"com.google.gson.functional.MapTest.testMapWithQuotes":156,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":495,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":580,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":109,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":475,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":126,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":623,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":492,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":375,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":636,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":194,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":48,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":354,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":405,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":279,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":507,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":328,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":497,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":509,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":553,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":291,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":27,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":94,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":441,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":50,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":537,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":70,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":429,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":558,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":653,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":415,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":25,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":62,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":228,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":123,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":340,"com.google.gson.functional.ObjectTest.testNestedSerialization":342,"com.google.gson.internal.LinkedTreeMapTest.testClear":606,"com.google.gson.JsonObjectTest.testAddingStringProperties":651,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":129,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":186,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":242,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":584,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":431,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":168,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":410,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":483,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":14,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":598,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":333,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":425,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":305,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":213,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":512,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":10,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":244,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":603,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":490,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":552,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":583,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":444,"com.google.gson.functional.CollectionTest.testSetSerialization":99,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":182,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":119,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":402,"com.google.gson.functional.StringTest.testStringValueSerialization":586,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":587,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":43,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":84,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":638,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":435,"com.google.gson.MixedStreamTest.testWriteInvalidState":595,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":327,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":247,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":253,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":453,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":561,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":503,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":566,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":615,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":367,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":647,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":430,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":386,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":628,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":530,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":589,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":148,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":393,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":440},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[0,1,2],"tindex":"d50245de-3e5f-11e6-adb7-1f475dd7457c","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604],"tindex":"d502bb0f-3e5f-11e6-adb7-97611422ac29","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl","sourcecode":"requireExpose"},"failures":[605,606,607,608,609,610,611,612,613,614,615,616,617,11,618,619,620,22,101,112,123,130,131,132,133,134,150,154,159,173,207,208,212,213,218,364,621,622,409,411,412,414,623,418,424,463,464,474,477,478,479,480,481,482,489,503,588,589],"tindex":"d5030930-3e5f-11e6-adb7-fb72a8ade5a9","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1291","type":"CtBinaryOperatorImpl","sourcecode":"(limit) != (pos)"},"failures":[],"tindex":"d5037e61-3e5f-11e6-adb7-014c893d46ca","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i != i) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pos":"i","limit":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d5037e62-3e5f-11e6-adb7-c13416b0a3b8","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:274","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[417,421,422,423],"tindex":"d5037e63-3e5f-11e6-adb7-9b035bd5e8ff","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d503a574-3e5f-11e6-adb7-d3d2edb9f1e0","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d503a575-3e5f-11e6-adb7-3db70bb3e764","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d503cc86-3e5f-11e6-adb7-7d0820c6e15b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.JsonPrimitive:319","type":"CtBinaryOperatorImpl","sourcecode":"((value) instanceof java.lang.Number) && ((other.value) instanceof java.lang.Number)"},"failures":[],"tindex":"d503cc87-3e5f-11e6-adb7-6907c1dd259e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value instanceof java.lang.Number) && ((value.java.lang.Object) instanceof java.lang.Number)) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"value","value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"d503cc88-3e5f-11e6-adb7-8147dbab4cf8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:789","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"d503f399-3e5f-11e6-adb7-dbd4cdf66a3c","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_NONE":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"d503f39a-3e5f-11e6-adb7-9fd13f303afc","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"d503f39b-3e5f-11e6-adb7-2319bcfa264d","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d5041aac-3e5f-11e6-adb7-b7657c81f8f4","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"d5041aad-3e5f-11e6-adb7-7101de9808ce","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"d5041aae-3e5f-11e6-adb7-e9c8381c1e43","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (from == null) {\n                        return false;\n                    } \n                    if (to.equals(from)) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n                    if (from instanceof java.lang.reflect.ParameterizedType) {\n                        ptype = ((java.lang.reflect.ParameterizedType)(from));\n                    } \n                    if (ptype != null) {\n                        java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                        java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                        for (int int = 0 ; i < (tArgs.int) ; i++) {\n                            java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                            while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                                java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                                arg = typeVarMap.get(v.getName());\n                            }\n                            typeVarMap.put(var.getName(), arg);\n                        }\n                        if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                            return true;\n                        } \n                    } \n                    for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                        if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                            return true;\n                        } \n                    }\n                    java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n                    return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d5041aaf-3e5f-11e6-adb7-1d014f2c81b8","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"d50441c0-3e5f-11e6-adb7-d90377bc522a","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[40,42,45,46,422,423],"tindex":"d50441c1-3e5f-11e6-adb7-c1cfeb710725","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"d50441c2-3e5f-11e6-adb7-2fa74a104b01","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[55,210,224,241,300,449,480],"tindex":"d50441c3-3e5f-11e6-adb7-4b5291fc2995","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[624],"tindex":"d50468d4-3e5f-11e6-adb7-c31fd1e1fc8c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[625,626,627,628,629,611,612,630,631,4,5,6,7,632,633,634,8,9,11,635,636,12,13,14,16,17,18,20,22,23,27,28,29,30,31,32,35,37,38,39,40,42,44,46,47,48,50,51,52,53,54,55,57,58,59,61,64,65,66,67,69,70,71,74,76,79,80,81,82,86,87,88,89,90,93,96,97,99,100,102,104,105,106,107,108,109,111,115,116,117,119,120,121,123,125,126,127,128,129,139,143,144,147,149,151,156,157,158,161,162,164,165,166,167,168,169,171,172,174,177,178,179,180,181,183,184,185,186,187,188,189,190,193,195,196,197,199,200,201,202,204,206,207,208,209,210,211,212,213,216,217,218,222,224,230,233,241,242,248,250,251,254,257,259,260,263,264,268,277,279,281,282,285,288,290,294,295,296,297,298,299,300,304,306,310,311,313,316,317,320,323,326,327,330,332,333,336,338,339,341,342,343,345,350,352,353,355,360,363,364,365,367,368,369,370,372,637,638,639,640,641,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,642,398,399,400,401,402,403,404,405,408,410,413,414,415,623,416,417,418,419,422,426,427,429,431,432,433,434,436,437,438,439,440,443,444,445,449,451,453,455,457,459,460,461,462,463,464,465,468,472,474,477,478,479,480,481,482,483,486,487,488,492,494,495,497,499,500,503,505,507,508,509,510,511,513,515,516,518,520,521,522,523,525,528,530,531,533,534,536,537,538,539,540,541,544,545,547,549,550,553,554,557,560,561,562,563,564,565,566,567,568,570,571,572,573,574,577,579,583,586,587,588,589,590,593,594,595,596,598,599,643,644,602,603],"tindex":"d5048fe5-3e5f-11e6-adb7-afd23f2767c2","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:596","type":"CtBinaryOperatorImpl","sourcecode":"result != (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"d5048fe6-3e5f-11e6-adb7-419e350279ad","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index != index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"index","com.google.gson.stream.JsonReader.PEEKED_NONE":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d5048fe7-3e5f-11e6-adb7-870659a3e392","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d5048fe8-3e5f-11e6-adb7-89796b8574a5","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"d504b6f9-3e5f-11e6-adb7-57f00bbb12ce","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isString()) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d504b6fa-3e5f-11e6-adb7-8dbcb2848109","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"d504b6fb-3e5f-11e6-adb7-9933b7de990e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if ((key != null) && ((key.peek()) != key)) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"key","obj":"key","reader":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d504b6fc-3e5f-11e6-adb7-235f38279cde","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"d504b6fd-3e5f-11e6-adb7-8d0be2f211e7","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[611,612,631,613,645,614,632,616,617,11,646,12,647,618,648,649,650,651,13,619,22,50,62,104,105,107,108,112,115,116,117,123,130,131,132,133,134,175,178,180,194,200,206,207,208,212,213,218,364,621,406,407,408,409,410,411,412,623,418,424,428,463,464,474,477,478,479,480,481,482,489,503,588,589],"tindex":"d504de0e-3e5f-11e6-adb7-4de58767b525","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d504de0f-3e5f-11e6-adb7-e9287c40785b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:382","type":"CtBinaryOperatorImpl","sourcecode":"delta == 0"},"failures":[],"tindex":"d504de10-3e5f-11e6-adb7-c7eded32deef","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[624,652,653,654,655],"tindex":"d504de11-3e5f-11e6-adb7-03f9db5d1633","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[],"tindex":"d5050522-3e5f-11e6-adb7-b3006e3d5b31","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n                {\n                    com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"d5050523-3e5f-11e6-adb7-ff2695cbb265","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d5052c34-3e5f-11e6-adb7-b7f10e7a74bc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[648,133],"tindex":"d5052c35-3e5f-11e6-adb7-09480ebd9a5a","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d5052c36-3e5f-11e6-adb7-290da07cc377","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[631,23,27,106,195,200,202,332,530,545,588,589,594],"tindex":"d5052c37-3e5f-11e6-adb7-e7c29a44e7ac","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl","sourcecode":"(!serialize) && (!deserialize)"},"failures":[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604],"tindex":"d5055348-3e5f-11e6-adb7-0ffc1396152b","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if ((!serializeSpecialFloatingPointValues) && (!serializeSpecialFloatingPointValues)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"serializeSpecialFloatingPointValues","deserialize":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:271","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[],"tindex":"d5055349-3e5f-11e6-adb7-413271063e8a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d5057a5a-3e5f-11e6-adb7-f761fa159f01","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:287","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"d505a16b-3e5f-11e6-adb7-61d689ceabc4","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"d505a16c-3e5f-11e6-adb7-4ddd81d6809f","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[364],"tindex":"d505a16d-3e5f-11e6-adb7-578e439588d5","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"d505c87e-3e5f-11e6-adb7-8bdbd12b46df","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if (ignoreVersionsAfter <= ignoreVersionsAfter) {\n                {\n                    com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n                    return com.google.gson.GsonBuilder.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391209/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":49,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
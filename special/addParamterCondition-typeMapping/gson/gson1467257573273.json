{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":19,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":50,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":60,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":70,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":22,"com.google.gson.functional.MapTest.testMapSerialization":30,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":71,"com.google.gson.functional.MapTest.testSerializeMaps":29,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":100,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":96,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":80,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":97,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":20,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":24,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":88,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":55,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":61,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":4,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":84,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":36,"com.google.gson.functional.MapTest.testRawMapSerialization":32,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":103,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":2,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":33,"com.google.gson.functional.PrettyPrintingTest.testMap":59,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":57,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":21,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":93,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":27,"com.google.gson.ObjectTypeAdapterTest.testSerialize":0,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":34,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":58,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":23,"com.google.gson.functional.FieldNamingTest.testIdentity":101,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":78,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":98,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":14,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":72,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":86,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":5,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":90,"com.google.gson.functional.JsonTreeTest.testToJsonTree":91,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":63,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":68,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":17,"com.google.gson.JsonArrayTest.testSet":107,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":54,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":6,"com.google.gson.functional.MapTest.testGeneralMapField":31,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":79,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":65,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":66,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":40,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":104,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":9,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":94,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":53,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":35,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":7,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":75,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":51,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":67,"com.google.gson.JsonArrayTest.testDeepCopy":108,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":47,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":74,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":95,"com.google.gson.functional.ObjectTest.testNestedSerialization":46,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":73,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":87,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":92,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":77,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":44,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":81,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":42,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":82,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":106,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":8,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":11,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":52,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":16,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":41,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":26,"com.google.gson.functional.CollectionTest.testSetSerialization":25,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":18,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":28,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":62,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":102,"com.google.gson.JsonParserTest.testParseMixedArray":105,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":56,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":43,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":12,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":99,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":64,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":45,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":10,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":38,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":3,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":39,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":13,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":89,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":37,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":15,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":48,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":83,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":49,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":69,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":76,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":85},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:109","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonPrimitive"},"failures":[],"tindex":"5400fa54-3e73-11e6-b2f8-d1e87e0929ef","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof com.google.gson.JsonPrimitive) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404404/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104],"tindex":"54016f85-3e73-11e6-b2f8-45ff9450aa30","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404404/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:826","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED)"},"failures":[105,106,107,108],"tindex":"54016f86-3e73-11e6-b2f8-d1120158951f","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404404/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"54016f87-3e73-11e6-b2f8-c984c91854d9","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.Class<?>) {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404404/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2029'"},"failures":[],"tindex":"54019698-3e73-11e6-b2f8-0d988922570a","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if (quote == '\\u2029') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404404/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"54019699-3e73-11e6-b2f8-c55a9fde98bc","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404404/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[],"tindex":"5401bdaa-3e73-11e6-b2f8-bb73eac75b27","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404404/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"cls"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:305","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"5401bdab-3e73-11e6-b2f8-4fa98461e920","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404404/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"5401e4bc-3e73-11e6-b2f8-75c2dec94b23","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:162","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(d))) {\n        {\n            if ((!(isLenient())) && ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value)))) {\n                throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467257404404/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":9,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
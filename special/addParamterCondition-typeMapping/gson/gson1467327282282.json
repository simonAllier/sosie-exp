{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":470,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":86,"com.google.gson.functional.StringTest.testStringValueDeserialization":84,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":187,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":283,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":383,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":229,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":365,"com.google.gson.MixedStreamTest.testWriteLenient":17,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":237,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":292,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":313,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":188,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":205,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":329,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":431,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":224,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":321,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":126,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":392,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":136,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":574,"com.google.gson.functional.ObjectTest.testSingletonLists":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":284,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":324,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":87,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":376,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":510,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":530,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":302,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":344,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":0,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":434,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":115,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":100,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":102,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":76,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":423,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":609,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":169,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":368,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":601,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":43,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":168,"com.google.gson.functional.EnumTest.testEnumCaseMapping":223,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":26,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":85,"com.google.gson.GenericArrayTypeTest.testNotEquals":610,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":367,"com.google.gson.functional.JsonTreeTest.testToJsonTree":544,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":305,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":526,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":263,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":62,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":279,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":378,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":577,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":198,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":536,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":97,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":340,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":444,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":384,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":345,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":41,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":494,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":353,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":306,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":449,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":562,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":301,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":428,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":262,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":455,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":58,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":5,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":405,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":161,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":238,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":420,"com.google.gson.ParameterizedTypeTest.testNotEquals":607,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":276,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":592,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":496,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":606,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":183,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":244,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":429,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":421,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":52,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":352,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":29,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":31,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":335,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":12,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":179,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":236,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":388,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":325,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":517,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":134,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":498,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":185,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":527,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":290,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":278,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":493,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":539,"com.google.gson.functional.CollectionTest.testSetDeserialization":204,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":127,"com.google.gson.functional.EnumTest.testEnumSet":214,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":226,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":339,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":412,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":135,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":497,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":612,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":268,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":346,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":133,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":600,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":425,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":36,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":436,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":38,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":534,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":437,"com.google.gson.functional.MapTest.testHashMapDeserialization":150,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":381,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":288,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":32,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":472,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":468,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":545,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":533,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":588,"com.google.gson.functional.MapTest.testSortedMap":172,"com.google.gson.functional.MapTest.testMapSerialization":167,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":471,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":107,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":418,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":65,"com.google.gson.functional.MapTest.testSerializeMaps":153,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":311,"com.google.gson.functional.MapTest.testComplexKeysSerialization":180,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":225,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":184,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":72,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":221,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":538,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":586,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":557,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":219,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":79,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":231,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":355,"com.google.gson.functional.MapTest.testStringKeyDeserialization":182,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":614,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":69,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":502,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":451,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":186,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":387,"com.google.gson.functional.PrettyPrintingTest.testMap":77,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":382,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":567,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":258,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":474,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":531,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":22,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":71,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":90,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":94,"com.google.gson.functional.MapTest.testMapSerializationEmpty":181,"com.google.gson.functional.CollectionTest.testQueueSerialization":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":273,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":413,"com.google.gson.functional.MapTest.testMapOfMapSerialization":166,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":404,"com.google.gson.JavaSerializationTest.testMapIsSerializable":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":280,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":201,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":415,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":467,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":511,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":88,"com.google.gson.functional.FieldNamingTest.testIdentity":312,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":499,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":484,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":357,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":235,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":315,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":326,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":543,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":370,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":602,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":89,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":490,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":246,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":410,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":294,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":595,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":304,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":466,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":147,"com.google.gson.functional.MapTest.testMapSubclassSerialization":152,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":447,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":143,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":319,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":228,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":15,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":113,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":402,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":569,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":257,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":462,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":529,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":132,"com.google.gson.functional.EnumTest.testEnumSubclass":217,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":424,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":1,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":342,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":369,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":489,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":430,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":501,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":552,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":372,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":248,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":408,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":247,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":515,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":61,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":594,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":338,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":414,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":234,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":406,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":297,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":328,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":149,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":60,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":242,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":54,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":129,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":537,"com.google.gson.CommentsTest.testParseComments":593,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":330,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":506,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":580,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":67,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":427,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":480,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":106,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":92,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":171,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":611,"com.google.gson.MixedStreamTest.testReadInvalidState":14,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":123,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":299,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":446,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":605,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":108,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":380,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":10,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":73,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":613,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":477,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":397,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":282,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":441,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":57,"com.google.gson.functional.MapTest.testMapDeserialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":277,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":82,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":148,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":573,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":158,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":524,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":579,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":575,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":558,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":218,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":542,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":255,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":343,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":358,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":547,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":570,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":516,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":264,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":140,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":245,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":556,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":78,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":170,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":303,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":366,"com.google.gson.functional.PrimitiveTest.testShortSerialization":445,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":508,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":582,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":433,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":45,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":403,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":9,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":379,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":308,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":216,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":190,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":318,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":154,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":396,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":211,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":453,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":240,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":291,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":587,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":21,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":460,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":454,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":233,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":359,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":500,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":523,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":250,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":439,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":75,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":409,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":503,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":363,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":334,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":222,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":227,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":549,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":265,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":565,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":504,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":608,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":572,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":4,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":581,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":386,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":2,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":591,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":583,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":286,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":192,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":520,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":373,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":440,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":411,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":457,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":46,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":215,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":578,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":476,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":109,"com.google.gson.functional.MapTest.testGeneralMapField":176,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":332,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":51,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":459,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":66,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":491,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":566,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":293,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":251,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":377,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":561,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":435,"com.google.gson.MixedStreamTest.testReadMixedStreamed":20,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":266,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":398,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":206,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":590,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":603,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":323,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":416,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":44,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":23,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":281,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":163,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":146,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":151,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":458,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":507,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":105,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":118,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":7,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":3,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":243,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":485,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":200,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":249,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":585,"com.google.gson.functional.ObjectTest.testNestedDeserialization":364,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":513,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":103,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":350,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":473,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":514,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":42,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":456,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":479,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":91,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":164,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":230,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":131,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":443,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":548,"com.google.gson.JavaSerializationTest.testListIsSerializable":25,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":241,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":317,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":209,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":551,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":145,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":155,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":175,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":371,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":63,"com.google.gson.functional.MapTest.testInterfaceTypeMap":173,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":568,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":519,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":374,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":220,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":555,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":571,"com.google.gson.MixedStreamTest.testReadClosed":604,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":252,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":40,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":390,"com.google.gson.MixedStreamTest.testWriteClosed":19,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":197,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":307,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":333,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":522,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":137,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":518,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":482,"com.google.gson.stream.JsonWriterTest.testLongs":6,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":361,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":300,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":336,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":525,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":196,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":119,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":419,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":121,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":553,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":287,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":486,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":461,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":463,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":395,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":541,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":260,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":48,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":540,"com.google.gson.functional.CollectionTest.testQueueDeserialization":212,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":481,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":401,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":417,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":96,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":469,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":298,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":160,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":272,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":362,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":563,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":189,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":13,"com.google.gson.functional.MapTest.testRawMapSerialization":178,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":285,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":348,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":546,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":112,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":584,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":596,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":53,"com.google.gson.functional.PrimitiveTest.testByteSerialization":442,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":528,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":598,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":559,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":385,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":314,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":64,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":309,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":138,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":599,"com.google.gson.functional.MapTest.testMapWithQuotes":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":259,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":393,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":95,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":495,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":589,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":512,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":256,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":125,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":576,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":128,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":360,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":270,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":426,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":70,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":261,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":271,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":316,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":438,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":203,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":56,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":49,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":296,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":550,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":487,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":11,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":122,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":320,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":532,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":142,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":375,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":509,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":347,"com.google.gson.functional.ObjectTest.testNestedSerialization":349,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":47,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":99,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":389,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":560,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":104,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":177,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":110,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":74,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":18,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":28,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":341,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":483,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":452,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":521,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":274,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":27,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":254,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":351,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":116,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":98,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":59,"com.google.gson.functional.CollectionTest.testSetSerialization":208,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":492,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":80,"com.google.gson.functional.StringTest.testStringValueSerialization":101,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":505,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":564,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":193,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":232,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":464,"com.google.gson.MixedStreamTest.testWriteInvalidState":16,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":50,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":394,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":68,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":400,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":267,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":310,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":535,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":488,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":289,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":157,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":33,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":55},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl"},"failures":[],"tindex":"a1d14bc0-3f15-11e6-a261-59d359e63658","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    return java.util.List<com.google.gson.JsonElement>.contains(element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d1c0f1-3f15-11e6-a261-65d615b957c2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d1c0f2-3f15-11e6-a261-574982f2c951","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8],"tindex":"a1d1e803-3f15-11e6-a261-ab962248e491","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d1e804-3f15-11e6-a261-21c0fc131cbe","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"typeArguments","lowerBound":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d20f15-3f15-11e6-a261-f73e86a4e2db","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"a","type":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d20f16-3f15-11e6-a261-dbfe7d9e69d4","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d23627-3f15-11e6-a261-53cfef2b81b2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d23628-3f15-11e6-a261-859d5c4f9a70","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[9],"tindex":"a1d23629-3f15-11e6-a261-4b5ef46779dd","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            java.lang.String java.lang.String = java.text.DateFormat.format(value);\n            out.value(dateFormatAsString);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[10,11,12],"tindex":"a1d25d3a-3f15-11e6-a261-5b8f31245263","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            return (findByObject(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:438","type":"CtBinaryOperatorImpl"},"failures":[13,14,15,16,17,18,19,20,21,22,0,1,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,9,269,270,2,271,272,273,274,275,276,277,278,279,3,280,281,282,4,5,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603],"tindex":"a1d25d3b-3f15-11e6-a261-195d25db7d48","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d2844c-3f15-11e6-a261-61dcc97162a7","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d2844d-3f15-11e6-a261-4fee8d76ad70","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl"},"failures":[604,17,18,605,23,24,25,606,607,33,37,60,62,608,83,105,123,125,127,128,129,130,131,132,133,135,136,137,138,139,140,141,142,143,144,147,150,151,154,155,156,157,158,159,161,162,163,164,167,168,169,170,172,174,177,179,180,181,182,183,184,185,186,189,192,193,194,195,196,198,200,201,202,204,206,207,209,211,212,214,215,216,217,218,222,242,243,261,285,320,338,434,483,497,499,508,513,527,533,588,589,590,591,592,593,596,597,609,610],"tindex":"a1d2ab5e-3f15-11e6-a261-31e23289a5e8","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == subclass) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass","toResolve":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d2ab5f-3f15-11e6-a261-234b87f17339","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d2ab60-3f15-11e6-a261-13a0a3b1f5e8","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:126","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d2d271-3f15-11e6-a261-6f5889aa2913","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d2d272-3f15-11e6-a261-a5d384cfd184","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d2d273-3f15-11e6-a261-2dcf57ac90fd","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d2d274-3f15-11e6-a261-03e760ad0d04","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b != null) {\n                {\n                    return a.compareTo(b);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d2f985-3f15-11e6-a261-e1b8ac69ed62","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d2f986-3f15-11e6-a261-6b61582c3323","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"writer","value":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d2f987-3f15-11e6-a261-95c062b47991","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[41,43,44,45,102,103,611,216,345,512,600],"tindex":"a1d32098-3f15-11e6-a261-ab8bdc2980ef","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d32099-3f15-11e6-a261-3972d5afe364","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d3209a-3f15-11e6-a261-455e242c1ca8","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[28,29,30,31,32,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,58,59,64,66,68,70,72,76,77,78,79,80,81,82,85,86,87,88,89,92,94,98,101,104,105,108,110,113,114,117,118,121,123,124,125,126,127,134,146,153,160,165,166,171,173,175,176,178,187,188,189,191,196,197,199,202,205,208,213,214,215,216,217,220,222,224,227,229,231,233,235,236,245,248,250,252,258,264,270,2,271,272,273,275,277,278,3,281,4,5,284,290,292,293,295,296,297,298,299,300,303,306,308,309,310,311,312,318,319,321,324,326,327,330,333,336,339,341,343,345,346,348,349,350,352,356,358,359,361,369,371,377,380,388,389,395,397,398,401,404,406,407,410,411,415,424,426,428,429,432,435,437,441,443,444,446,447,451,453,457,458,463,464,465,466,467,468,474,477,478,479,480,484,485,487,489,490,491,493,494,495,501,502,503,505,506,507,509,512,518,524,525,528,530,535,536,537,538,540,542,545,546,547,548,549,550,551,554,556,559,560,561,562,563,564,565,566,567,568,569,570,571,572,575,577,578,579,581,582,583,586,594,595,601,602,603],"tindex":"a1d347ab-3f15-11e6-a261-3b60339b45a2","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"a1d347ac-3f15-11e6-a261-a173c985267c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[612,613,614],"tindex":"a1d347ad-3f15-11e6-a261-e7783d1eae18","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d347ae-3f15-11e6-a261-f9b164ef3af3","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d36ebf-3f15-11e6-a261-4725b207b7ea","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:430","type":"CtFieldReadImpl"},"failures":[],"tindex":"a1d36ec0-3f15-11e6-a261-9552034f6245","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeNulls":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d36ec1-3f15-11e6-a261-e1f26368fecc","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (b != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (b != null) {\n                {\n                    return a.compareTo(b);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"a1d36ec2-3f15-11e6-a261-2bbdea0ac74c","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326635768/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":88,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":332,"com.google.gson.functional.StringTest.testStringValueDeserialization":331,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":65,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":312,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":349,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":235,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":49,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":216,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":39,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":141,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":215,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":368,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":202,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":413,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":187,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":26,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":129,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":173,"com.google.gson.functional.ObjectTest.testSingletonLists":213,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":431,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":182,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":156,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":35,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":322,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":224,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":110,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":204,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":325,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":341,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":75,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":200,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":8,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":374,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":179,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":258,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":61,"com.google.gson.functional.EnumTest.testEnumCaseMapping":122,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":456,"com.google.gson.functional.JsonTreeTest.testToJsonTree":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":323,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":74,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":27,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":300,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":358,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":278,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":308,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":461,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":3,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":240,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":14,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":339,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":221,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":32,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":4,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":256,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":382,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":227,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":100,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":170,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":209,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":208,"com.google.gson.JsonParserTest.testParseString":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":321,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":211,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":299,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":404,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":311,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":50,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":162,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":197,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":76,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":307,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":95,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":152,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":198,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":403,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":22,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":219,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":442,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":62,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":352,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":287,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":389,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":355,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":266,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":43,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":166,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":83,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":263,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":381,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":243,"com.google.gson.functional.CollectionTest.testSetDeserialization":149,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":414,"com.google.gson.functional.EnumTest.testEnumSet":115,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":289,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":398,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":194,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":356,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":303,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":400,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":343,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":354,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":265,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":205,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":253,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":347,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":455,"com.google.gson.functional.MapTest.testHashMapDeserialization":161,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":316,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":268,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":359,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":419,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":93,"com.google.gson.functional.MapTest.testSortedMap":165,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":16,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":420,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":79,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":196,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":280,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":446,"com.google.gson.functional.MapTest.testComplexKeysSerialization":378,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":288,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":64,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":121,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":242,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":388,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":10,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":139,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":120,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":28,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":417,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":462,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":350,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":229,"com.google.gson.functional.MapTest.testStringKeyDeserialization":63,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":458,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":282,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":46,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":186,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":113,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":421,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":109,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":283,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":334,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":29,"com.google.gson.JavaSerializationTest.testMapIsSerializable":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":309,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":147,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":7,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":248,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":333,"com.google.gson.functional.FieldNamingTest.testIdentity":447,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":44,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":272,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":230,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":98,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":351,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":394,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":180,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":104,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":66,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":318,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":345,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":305,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":247,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":159,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":85,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":134,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":290,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":191,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":415,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":450,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":296,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":112,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":128,"com.google.gson.functional.EnumTest.testEnumSubclass":118,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":111,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":223,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":379,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":201,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":45,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":136,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":409,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":237,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":70,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":277,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":344,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":9,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":125,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":214,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":160,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":54,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":127,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":241,"com.google.gson.CommentsTest.testParseComments":342,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":23,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":174,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":395,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":281,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":430,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":78,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":411,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":357,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":80,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":185,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":460,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":284,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":457,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":427,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":246,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":310,"com.google.gson.functional.MapTest.testMapDeserialization":59,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":276,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":172,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":392,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":385,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":77,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":140,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":97,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":433,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":405,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":360,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":252,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":71,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":133,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":366,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":408,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":416,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":155,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":68,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":203,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":260,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":192,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":6,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":304,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":443,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":117,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":5,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":142,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":1,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":267,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":56,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":189,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":52,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":317,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":11,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":153,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":178,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":406,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":13,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":437,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":206,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":292,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":47,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":233,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":301,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":367,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":249,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":154,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":383,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":386,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":94,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":387,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":314,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":72,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":143,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":207,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":371,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":116,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":384,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":89,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":81,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":217,"com.google.gson.functional.MapTest.testGeneralMapField":377,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":250,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":380,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":425,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":169,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":294,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":18,"com.google.gson.MixedStreamTest.testReadMixedStreamed":453,"com.google.gson.JsonObjectTest.testDeepCopy":30,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":302,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":105,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":291,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":286,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":259,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":107,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":434,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":60,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":55,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":274,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":439,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":12,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":158,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":422,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":293,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":175,"com.google.gson.functional.ObjectTest.testNestedDeserialization":234,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":238,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":269,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":69,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":257,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":429,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":123,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":164,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":335,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":353,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":361,"com.google.gson.JavaSerializationTest.testListIsSerializable":108,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":42,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":53,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":364,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":330,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":57,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":376,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":279,"com.google.gson.functional.MapTest.testInterfaceTypeMap":375,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":251,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":391,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":33,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":261,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":348,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":138,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":255,"com.google.gson.MixedStreamTest.testWriteClosed":452,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":270,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":324,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":396,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":130,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":390,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":92,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":407,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":428,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":436,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":393,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":397,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":327,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":440,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":137,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":315,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":90,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":212,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":245,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":297,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":244,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":91,"com.google.gson.functional.CollectionTest.testQueueDeserialization":151,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":195,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":338,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":320,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":328,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":228,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":373,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":171,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":232,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":449,"com.google.gson.JsonParserTest.testParseReader":20,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":313,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":135,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":401,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":84,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":17,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":102,"com.google.gson.ObjectTypeAdapterTest.testSerialize":346,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":168,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":0,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":40,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":444,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":131,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":336,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":188,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":337,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":157,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":87,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":412,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":67,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":126,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":231,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":459,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":418,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":222,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":298,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":41,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":438,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":148,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":275,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":319,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":363,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":423,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":329,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":86,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":37,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":48,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":225,"com.google.gson.internal.LinkedTreeMapTest.testClear":2,"com.google.gson.JsonObjectTest.testAddingStringProperties":31,"com.google.gson.functional.ObjectTest.testNestedSerialization":402,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":372,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":340,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":273,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":82,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":432,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":106,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":271,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":399,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":210,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":73,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":306,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":226,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":295,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":326,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":167,"com.google.gson.functional.CollectionTest.testSetSerialization":369,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":370,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":448,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":124,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":144,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":410,"com.google.gson.MixedStreamTest.testWriteInvalidState":451,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":190,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":426,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":101,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":19,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":445,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":239,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":25,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":424,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":254,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":132,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":103,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":58,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":262},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[0],"tindex":"f671d537-3e5b-11e6-8b64-65f0b9ee7594","method":{"position":"com.google.gson.reflect.TypeToken:111","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.Class<?> cls) {\n    if (cls == cls) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return isAssignableFrom(((java.lang.reflect.Type)(cls)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"cls","toResolve":"cls"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl","sourcecode":"(!(lenient)) && (!root)"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"tindex":"f6722358-3e5b-11e6-8b64-7b85f4c47f64","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if ((!create) && (!create)) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"create","lenient":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"f6727179-3e5b-11e6-8b64-17a2e7b7d7fd","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(jsonElement, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"f672717a-3e5b-11e6-8b64-1bacdb833bdc","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"f672988b-3e5b-11e6-8b64-659872002532","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"array","java.util.Date.class":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl","sourcecode":"o == (com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED)"},"failures":[104,105,106,107,34,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,37,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,38,151,152,43,44,153,154,155,156,157,158,159,160,161,55,56,57,59,162,163,60,164,61,165,62,63,166,167,168,169,170,171,172,173,67,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,75,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,78,79,80,81,82,83,84,267,85,86,87,268,269,270,271,272,90,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,94,95,292,293,294,100,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342],"tindex":"f672988c-3e5b-11e6-8b64-e70fb20836ae","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == obj) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"obj","o":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[343,344,345,346,22,112,35,347,348,121,349,350,124,125,351,352,126,127,353,128,354,355,356,129,130,131,132,133,357,134,358,359,135,360,361,362,363,364,136,137,365,138,366,139,140,141,142,367,149,368,369,39,40,41,42,152,153,45,47,370,371,372,49,50,51,52,53,373,374,375,376,377,378,65,379,380,167,381,382,168,170,171,383,172,173,384,385,174,386,387,388,176,69,70,71,389,390,391,72,73,177,178,392,393,74,206,394,213,214,215,395,216,217,396,218,219,397,220,398,221,399,223,224,400,225,401,402,226,403,227,228,404,230,405,406,231,407,232,233,234,235,408,236,237,409,75,239,240,241,242,243,244,245,410,246,247,248,411,412,413,414,415,263,264,265,416,417,418,79,80,81,82,84,267,85,86,87,419,88,420,269,421,270,89,272,422,423,424,274,425,281,426,427,428,429,430,91,92,285,286,431,287,93,291,94,95,96,97,98,99,432,292,295,433,301,304,306,434,435,436,437,325,326,438,439,327,328,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454],"tindex":"f672bf9d-3e5b-11e6-8b64-c3bebb8e02af","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[455,456],"tindex":"f67334ce-3e5b-11e6-8b64-adb380a377ff","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:797","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME)"},"failures":[],"tindex":"f67334cf-3e5b-11e6-8b64-631acecfd27c","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            if (modifier == modifier) {\n                {\n                    return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"f6735be0-3e5b-11e6-8b64-5d9a78ec7ce4","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1186","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"f6735be1-3e5b-11e6-8b64-fbb76d566474","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            if (modifier == modifier) {\n                {\n                    return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[46,47,48,49,50,51,53],"tindex":"f6735be2-3e5b-11e6-8b64-b1ba2d691bdb","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if ((property.length()) == 0) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[102,103],"tindex":"f6735be3-3e5b-11e6-8b64-d72abe0f7975","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f6735be4-3e5b-11e6-8b64-b336b11a0388","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"f67382f5-3e5b-11e6-8b64-43f7925f7640","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[457,458],"tindex":"f67382f6-3e5b-11e6-8b64-351bbbb6d4be","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:161","type":"CtBinaryOperatorImpl","sourcecode":"nearest == null"},"failures":[],"tindex":"f673aa07-3e5b-11e6-8b64-d386eef1b833","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[459,460,461,462],"tindex":"f673aa08-3e5b-11e6-8b64-b73aa0ed5619","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"f673d119-3e5b-11e6-8b64-ef5d7abe3859","method":{"position":"com.google.gson.JsonObject:181","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonObject getAsJsonObject(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonObject)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"f673d11a-3e5b-11e6-8b64-1367ac911cc9","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"f673f82b-3e5b-11e6-8b64-1d8b132f36b7","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.TypeVariable) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f673f82c-3e5b-11e6-8b64-0f9fdb97d4e7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"f673f82d-3e5b-11e6-8b64-5186c4b407b2","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(src instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src instanceof java.lang.reflect.TypeVariable) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f673f82e-3e5b-11e6-8b64-4f880d78cad0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:306","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.this) == obj"},"failures":[],"tindex":"f673f82f-3e5b-11e6-8b64-f14145392839","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"obj":"key","this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f6741f40-3e5b-11e6-8b64-4ba87f94ad5e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f6741f41-3e5b-11e6-8b64-49d6e71adbe3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:581","type":"CtBinaryOperatorImpl","sourcecode":"context == (com.google.gson.stream.JsonScope.NONEMPTY_OBJECT)"},"failures":[],"tindex":"f6741f42-3e5b-11e6-8b64-c1d3dc9a5d90","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"style","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"f6741f43-3e5b-11e6-8b64-355bacd0db0f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[],"tindex":"f6744654-3e5b-11e6-8b64-af3efd88d33c","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(src instanceof com.google.gson.JsonPrimitive)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src instanceof java.lang.reflect.TypeVariable) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            } else {\n                {\n                    if (src != null) {\n                        toJson(src, src.getClass(), writer);\n                    } else {\n                        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n                    }\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f6744655-3e5b-11e6-8b64-f3e30912e424","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"f6744656-3e5b-11e6-8b64-87a3ba292efb","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f6744657-3e5b-11e6-8b64-1df6629529b4","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"f6744658-3e5b-11e6-8b64-bfffafd8ddfe","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"f6746d69-3e5b-11e6-8b64-499ae72755de","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467246949215/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":35,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":175,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":52,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":133,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":107,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":240,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":111,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":155,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":96,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":164,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":182,"com.google.gson.MixedStreamTest.testWriteLenient":2,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":170,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":203,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":82,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":188,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":156,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":157,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":159,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":192,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":201,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":39,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":149,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":27,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":300,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":78,"com.google.gson.functional.ObjectTest.testSingletonLists":199,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":173,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":196,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":280,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":307,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":119,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":214,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":92,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":262,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":275,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":141,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":142,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":233,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":132,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":264,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":230,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":206,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":135,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":85,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":181,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":14,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":108,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":298,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":51,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":304,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":50,"com.google.gson.GenericArrayTypeTest.testNotEquals":109,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":103,"com.google.gson.functional.JsonTreeTest.testToJsonTree":291,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":305,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":65,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":272,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":278,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":35,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":13,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":126,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":81,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":301,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":245,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":70,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":138,"com.google.gson.functional.MapTest.testGeneralMapField":154,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":204,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":283,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":128,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":257,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":211,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":54,"com.google.gson.MixedStreamTest.testReadMixedStreamed":118,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":260,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":221,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":46,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":75,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":102,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":112,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":195,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":294,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":5,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":124,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":184,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":47,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":38,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":223,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":16,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":45,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":171,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":145,"com.google.gson.ParameterizedTypeTest.testNotEquals":9,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":87,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":253,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":71,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":104,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":97,"com.google.gson.functional.ObjectTest.testNestedDeserialization":231,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":261,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":8,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":242,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":60,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":266,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":248,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":220,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":120,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":122,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":207,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":48,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":56,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":169,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":23,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":197,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":292,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":269,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":150,"com.google.gson.JavaSerializationTest.testListIsSerializable":7,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":174,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":191,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":77,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":11,"com.google.gson.stream.JsonWriterTest.testDoubles":113,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":62,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":98,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":40,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":153,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":123,"com.google.gson.functional.MapTest.testInterfaceTypeMap":152,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":259,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":271,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":286,"com.google.gson.functional.CollectionTest.testSetDeserialization":74,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":19,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":162,"com.google.gson.functional.EnumTest.testEnumSet":80,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":210,"com.google.gson.MixedStreamTest.testReadClosed":1,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":94,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":41,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":215,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":25,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":311,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":125,"com.google.gson.MixedStreamTest.testWriteClosed":117,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":244,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":281,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":205,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":274,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":28,"com.google.gson.functional.MapTest.testHashMapDeserialization":37,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":67,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":270,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":251,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":228,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":247,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":239,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":99,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":186,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":208,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":277,"com.google.gson.functional.MapTest.testSortedMap":53,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":69,"com.google.gson.functional.MapTest.testMapSerialization":49,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":146,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":241,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":136,"com.google.gson.functional.MapTest.testComplexKeysSerialization":57,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":148,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":73,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":61,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":234,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":163,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":285,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":306,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":288,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":287,"com.google.gson.functional.CollectionTest.testQueueDeserialization":79,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":250,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":134,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":147,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":165,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":151,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":222,"com.google.gson.functional.MapTest.testStringKeyDeserialization":59,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":229,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":295,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":64,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":114,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":63,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":89,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":217,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":243,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":140,"com.google.gson.functional.MapTest.testMapSerializationEmpty":58,"com.google.gson.functional.CollectionTest.testQueueSerialization":68,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":106,"com.google.gson.ObjectTypeAdapterTest.testSerialize":308,"com.google.gson.JavaSerializationTest.testMapIsSerializable":6,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":293,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":72,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":189,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":238,"com.google.gson.functional.FieldNamingTest.testIdentity":187,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":29,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":95,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":252,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":224,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":168,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":198,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":290,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":101,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":161,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":176,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":18,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":310,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":237,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":20,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":36,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":227,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":15,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":34,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":193,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":209,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":115,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":297,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":185,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":279,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":24,"com.google.gson.functional.EnumTest.testEnumSubclass":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":88,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":213,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":256,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":144,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":190,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":263,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":22,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":254,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":90,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":178,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":177,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":33,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":267,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":216,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":309,"com.google.gson.functional.ObjectTest.testNestedSerialization":218,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":91,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":127,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":167,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":55,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":139,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":131,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":200,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":12,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":3,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":86,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":93,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":212,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":21,"com.google.gson.CommentsTest.testParseComments":105,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":284,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":202,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":303,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":273,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":194,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":129,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":179,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":219,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":143,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":17,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":32,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":4,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":137,"com.google.gson.functional.CollectionTest.testSetSerialization":160,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":258,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":265,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":296,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":66,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":166,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":235,"com.google.gson.MixedStreamTest.testWriteInvalidState":116,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":246,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":130,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":236,"com.google.gson.functional.MapTest.testMapDeserialization":44,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":121,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":282,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":299,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":43,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":276,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":302,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":255,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":84,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":180,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":30,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":225,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":42,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":110,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":268,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":31},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"028c9f71-3f07-11e6-a510-b3836a081231","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"028d14a2-3f07-11e6-a510-fd485f7f2936","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"028d3bb3-3f07-11e6-a510-a1d2aee4692e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"028d3bb4-3f07-11e6-a510-fbcf1aecc4a5","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == from) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"from","context":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1189","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"028d62c5-3f07-11e6-a510-d702a62503e4","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if ((i == i) || (p == i)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"i","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"028d62c6-3f07-11e6-a510-d3b031b1d03d","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if ((memberName != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"028d62c7-3f07-11e6-a510-01c986893e77","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl"},"failures":[],"tindex":"028d89d8-3f07-11e6-a510-a9f7cd12e4c8","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109],"tindex":"028d89d9-3f07-11e6-a510-43519b26aa41","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isInterface()) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"028db0ea-3f07-11e6-a510-e75433e3ede2","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == key) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"key","java.sql.Timestamp.class":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"028db0eb-3f07-11e6-a510-b30bb9e529ee","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl"},"failures":[],"tindex":"028db0ec-3f07-11e6-a510-f95e3eee2327","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o.equals(o)) {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o","type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:948","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"028db0ed-3f07-11e6-a510-598c4d34f08f","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == start) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"start","com.google.gson.stream.JsonReader.PEEKED_NONE":"start"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"028dd7fe-3f07-11e6-a510-8b6235834a42","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"028dd7ff-3f07-11e6-a510-27c7893eeb9a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl"},"failures":[110,111,112,113],"tindex":"028dd800-3f07-11e6-a510-23973c0ba421","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value <= value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"028dd801-3f07-11e6-a510-1ff489a46c93","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,15,135,16,136,137,138,139,140,141,142,143,144,145,146,147,148,17,18,149,19,20,21,23,24,25,150,26,27,28,29,30,31,32,34,35,151,51,152,153,154,57,155,156,157,158,74,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,90,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,100,102,103,104,308,309,310,311],"tindex":"028dff12-3f07-11e6-a510-b539c678177c","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return f.getName();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"028dff13-3f07-11e6-a510-73fb882ebda3","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:88","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Collection<E> collection) throws java.io.IOException {\n    if (collection == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (E E : collection) {\n        com.google.gson.TypeAdapter<E>.write(out, element);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[],"tindex":"028dff14-3f07-11e6-a510-a79dc9236218","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"028e2625-3f07-11e6-a510-c5154db7d804","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467320600386/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":21,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":25,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":405,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":35,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":207,"com.google.gson.stream.JsonWriterTest.testRepeatedName":32,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":0,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":481,"com.google.gson.MixedStreamTest.testWriteLenient":23,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":63,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":447,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":463,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":380,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":167,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":38,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":40,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":462,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":132,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":344,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":292,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":436,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":455,"com.google.gson.functional.ObjectTest.testSingletonLists":263,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":376,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":406,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":86,"com.google.gson.stream.JsonWriterTest.testStrings":114,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":36,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":568,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":470,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":120,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":547,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":309,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":504,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":277,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":310,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":105,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":510,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":452,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":76,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":306,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":541,"com.google.gson.functional.EnumTest.testEnumCaseMapping":131,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":404,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":423,"com.google.gson.GenericArrayTypeTest.testNotEquals":511,"com.google.gson.functional.JsonTreeTest.testToJsonTree":350,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":314,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":236,"com.google.gson.stream.JsonWriterTest.testNulls":94,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":359,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":18,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":552,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":220,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":563,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":161,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":280,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":468,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":117,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":255,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":270,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":304,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":212,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":473,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":116,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":390,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":216,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":101,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":19,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":247,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":9,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":48,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":375,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":448,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":537,"com.google.gson.ParameterizedTypeTest.testNotEquals":560,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":153,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":59,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":65,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":445,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":559,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":205,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":248,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":273,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":328,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":29,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":108,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":397,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":466,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":6,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":134,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":543,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":497,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":231,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":140,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":550,"com.google.gson.stream.JsonWriterTest.testEmptyArray":88,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":515,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":546,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":370,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":485,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":211,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":484,"com.google.gson.functional.CollectionTest.testSetDeserialization":444,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":293,"com.google.gson.functional.EnumTest.testEnumSet":125,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":267,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":3,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":173,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":427,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":189,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":46,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":75,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":139,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":487,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":104,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":37,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":301,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":251,"com.google.gson.functional.MapTest.testHashMapDeserialization":531,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":521,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":27,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":398,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":24,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":146,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":346,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":516,"com.google.gson.functional.MapTest.testSortedMap":542,"com.google.gson.functional.MapTest.testMapSerialization":194,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":26,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":488,"com.google.gson.functional.MapTest.testSerializeMaps":188,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":402,"com.google.gson.functional.MapTest.testComplexKeysSerialization":203,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":64,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":545,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":337,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":282,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":431,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":227,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":566,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":442,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":123,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":51,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":1,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":475,"com.google.gson.functional.MapTest.testStringKeyDeserialization":544,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":429,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":175,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":258,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":206,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":296,"com.google.gson.functional.PrettyPrintingTest.testMap":311,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":157,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":356,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":20,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":119,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":410,"com.google.gson.functional.CollectionTest.testQueueSerialization":158,"com.google.gson.functional.MapTest.testMapSerializationEmpty":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":367,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":109,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":111,"com.google.gson.functional.MapTest.testMapOfMapSerialization":193,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":8,"com.google.gson.JavaSerializationTest.testMapIsSerializable":513,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":523,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":90,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":245,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":288,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":181,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":69,"com.google.gson.functional.FieldNamingTest.testIdentity":403,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":407,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":526,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":54,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":97,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":476,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":2,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":169,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":262,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":349,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":92,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":77,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":209,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":408,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":243,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":482,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":83,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":389,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":530,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":11,"com.google.gson.functional.MapTest.testMapSubclassSerialization":187,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":319,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":438,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":298,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":391,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":416,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":449,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":430,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":138,"com.google.gson.functional.EnumTest.testEnumSubclass":128,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":246,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":121,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":469,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":237,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":439,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":276,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":98,"com.google.gson.stream.JsonWriterTest.testTwoNames":89,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":483,"com.google.gson.stream.JsonWriterTest.testNullName":95,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":229,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":82,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":565,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":548,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":100,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":242,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":434,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":384,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":461,"com.google.gson.MixedStreamTest.testWriteNulls":417,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":334,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":96,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":528,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":330,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":281,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":435,"com.google.gson.CommentsTest.testParseComments":558,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":44,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":178,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":456,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":341,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":494,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":196,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":409,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":289,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":144,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":386,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":557,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":84,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":316,"com.google.gson.JsonParserTest.testParseMixedArray":87,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":239,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":425,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":428,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":338,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":70,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":7,"com.google.gson.JsonArrayTest.testRemove":62,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":286,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":373,"com.google.gson.functional.MapTest.testMapDeserialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":369,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":315,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":186,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":422,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":454,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":41,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":190,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":222,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":219,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":443,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":22,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":517,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":501,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":49,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":269,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":148,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":299,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":360,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":437,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":154,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":275,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":195,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":312,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":388,"com.google.gson.functional.PrimitiveTest.testShortSerialization":256,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":527,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":224,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":67,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":308,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":564,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":362,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":399,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":127,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":156,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":318,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":561,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":533,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":166,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":259,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":450,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":73,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":457,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":71,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":509,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":261,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":15,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":133,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":274,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":446,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":459,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":352,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":392,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":460,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":499,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":176,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":479,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":465,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":130,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":150,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":345,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":502,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":294,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":554,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":218,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":374,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":364,"com.google.gson.stream.JsonWriterTest.testNullStringValue":91,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":225,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":233,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":519,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":244,"com.google.gson.stream.JsonWriterTest.testEmptyObject":103,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":260,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":184,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":126,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":221,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":28,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":489,"com.google.gson.functional.MapTest.testGeneralMapField":200,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":464,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":327,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":57,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":210,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":381,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":198,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":215,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":353,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":250,"com.google.gson.MixedStreamTest.testReadMixedStreamed":508,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":42,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":538,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":78,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":163,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":498,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":106,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":496,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":68,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":307,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":512,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":372,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":539,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":395,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":532,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":12,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":179,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":56,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":393,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":31,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":371,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":529,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":55,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":522,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":183,"com.google.gson.functional.ObjectTest.testNestedDeserialization":480,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":272,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":278,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":491,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":228,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":305,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":340,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":432,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":540,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":137,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":254,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":149,"com.google.gson.JavaSerializationTest.testListIsSerializable":514,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":171,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":451,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":165,"com.google.gson.functional.ObjectTest.testNullSerialization":268,"com.google.gson.stream.JsonWriterTest.testDoubles":110,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":152,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":534,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":5,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":199,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":107,"com.google.gson.functional.MapTest.testInterfaceTypeMap":197,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":297,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":232,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":14,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":129,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":300,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":441,"com.google.gson.MixedStreamTest.testReadClosed":556,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":354,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":303,"com.google.gson.MixedStreamTest.testWriteClosed":420,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":160,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":492,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":264,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":458,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":141,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":4,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":343,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":50,"com.google.gson.stream.JsonWriterTest.testLongs":93,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":387,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":235,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":265,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":159,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":506,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":394,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":440,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":377,"com.google.gson.stream.JsonWriterTest.testNumbers":113,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":284,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":241,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":348,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":283,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":325,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":342,"com.google.gson.functional.CollectionTest.testQueueDeserialization":525,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":43,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":385,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":507,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":191,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":474,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":366,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":217,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":478,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":155,"com.google.gson.functional.MapTest.testRawMapSerialization":202,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":415,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":555,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":16,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":147,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":271,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":490,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":226,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":79,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":81,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":122,"com.google.gson.functional.PrimitiveTest.testByteSerialization":253,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":329,"com.google.gson.ObjectTypeAdapterTest.testSerialize":85,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":413,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":213,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":421,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":168,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":21,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":400,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":142,"com.google.gson.functional.MapTest.testMapWithQuotes":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":357,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":172,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":553,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":182,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":355,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":291,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":99,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":135,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":477,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":52,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":363,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":336,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":467,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":358,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":60,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":365,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":124,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":136,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":383,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":151,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":323,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":53,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":518,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":426,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":180,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":471,"com.google.gson.functional.ObjectTest.testNestedSerialization":47,"com.google.gson.internal.LinkedTreeMapTest.testClear":562,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":185,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":214,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":240,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":324,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":201,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":317,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":351,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":118,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":419,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":115,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":45,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":551,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":234,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":495,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":503,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":424,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":500,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":505,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":17,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":411,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":333,"com.google.gson.functional.CollectionTest.testSetSerialization":164,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":453,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":177,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":313,"com.google.gson.functional.StringTest.testStringValueSerialization":412,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":61,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":285,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":433,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":520,"com.google.gson.MixedStreamTest.testWriteInvalidState":418,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":266,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":335,"com.google.gson.stream.JsonWriterTest.testBooleans":30,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":396,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":361,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":401,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":567,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":279,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":493,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":66,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":302,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":378,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":414,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":535,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":34,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":331,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":549},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"9b51e9f5-3e63-11e6-b3c2-f54792692e95","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (!(value instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"value","this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion > (version)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"tindex":"9b523816-3e63-11e6-b3c2-8b535c2490a6","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"9b523817-3e63-11e6-b3c2-3f08c40913a0","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:158","type":"CtBinaryOperatorImpl","sourcecode":"child == null"},"failures":[],"tindex":"9b523818-3e63-11e6-b3c2-1510bfaced93","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9b525f29-3e63-11e6-b3c2-814679f498ab","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl","sourcecode":"isObject"},"failures":[24,25,26,27,28],"tindex":"9b525f2a-3e63-11e6-b3c2-5b28b1215d3d","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (deserialization) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"deserialization"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"9b52863b-3e63-11e6-b3c2-993dc65905b2","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"9b52863c-3e63-11e6-b3c2-fdcc99c77672","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"9b52863d-3e63-11e6-b3c2-5947bbbf4b60","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"9b52ad4e-3e63-11e6-b3c2-672487777aa3","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (!(value instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:319","type":"CtBinaryOperatorImpl","sourcecode":"(parent.left) == node"},"failures":[],"tindex":"9b52ad4f-3e63-11e6-b3c2-c7be658aea8e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node == node) {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"node","node":"node","left":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[29,30,31,32,33,34,35,36,37,3,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,22,60,61],"tindex":"9b52d460-3e63-11e6-b3c2-6fa683166d68","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"9b52fb71-3e63-11e6-b3c2-8da4c665936f","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value == null) {\n        value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n    } \n    com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"9b52fb72-3e63-11e6-b3c2-cf48ab494fb6","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(jsonElement, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"9b52fb73-3e63-11e6-b3c2-1110d4dfb1c9","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"9b532284-3e63-11e6-b3c2-c5e380429ab1","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.TypeVariable) {\n        {\n            if ((typeOfT instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:857","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_TRUE)"},"failures":[62],"tindex":"9b532285-3e63-11e6-b3c2-7f2275f12f1f","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_TRUE":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1240","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY)"},"failures":[63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,29,87,88,89,90,30,91,92,93,94,95,31,32,96,33,97,98,99,100,34,35,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,36,123,124,37,125,126,127,128,129,130,131,132,0,1,133,2,134,135,136,137,138,139,140,3,141,142,143,144,145,146,147,148,149,150,151,152,153,154,38,155,156,157,158,159,160,161,39,162,40,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,4,232,233,234,41,235,236,237,5,238,239,6,240,241,7,42,43,8,242,9,243,244,245,246,10,247,248,249,250,251,252,253,254,255,256,257,11,258,259,260,12,261,262,263,44,264,265,266,267,268,45,269,270,46,271,47,272,273,48,49,274,50,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,13,14,15,16,17,18,19,20,309,310,311,312,51,313,314,315,52,316,317,318,319,53,320,24,321,25,26,322,54,55,323,324,56,325,326,327,328,329,330,331,332,333,334,21,57,335,336,337,338,339,340,341,342,343,344,58,345,346,347,59,348,22,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,60,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,61,413,414,415,416,417,418,23,419,420,421,422,423,424],"tindex":"9b532286-3e63-11e6-b3c2-6b7cac8c5c4a","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY":"newTop"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"9b534997-3e63-11e6-b3c2-15065cdffe1b","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl","sourcecode":"isJsonArray()"},"failures":[],"tindex":"9b534998-3e63-11e6-b3c2-f92634e4aded","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"9b534999-3e63-11e6-b3c2-0d2821504708","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (typeOfT instanceof java.lang.reflect.TypeVariable) {\n        {\n            if ((typeOfT instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonParseException();\n            } else {\n                {\n                    return ((T)(fromJson(json, typeOfT)));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9b5370aa-3e63-11e6-b3c2-efd7fe1f3c25","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:782","type":"CtBinaryOperatorImpl","sourcecode":"(obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"9b5370ab-3e63-11e6-b3c2-9b2ee9f43545","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if ((key != null) && ((key.peek()) != key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"key","obj":"key","reader":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9b5370ac-3e63-11e6-b3c2-e19908434bb2","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:437","type":"CtBinaryOperatorImpl","sourcecode":"pivotRight != null"},"failures":[425,426],"tindex":"9b5370ad-3e63-11e6-b3c2-11d71d0e044f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotRight":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[220],"tindex":"9b5397be-3e63-11e6-b3c2-03825d0ac471","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:218","type":"CtInvocationImpl","sourcecode":"com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)"},"failures":[427,428,429],"tindex":"9b5397bf-3e63-11e6-b3c2-d33d2f495620","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (com.google.gson.reflect.TypeToken.typeEquals(from, to, typeVarMap)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"from","typeVarMap":"typeVarMap","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9b5397c0-3e63-11e6-b3c2-9bcf11a7697a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.GenericArrayType)"},"failures":[],"tindex":"9b5397c1-3e63-11e6-b3c2-83595a989daf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.GenericArrayType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"9b5397c2-3e63-11e6-b3c2-4b95cb5b9997","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:57","type":"CtInvocationImpl","sourcecode":"com.google.gson.TypeAdapterFactory.class.isAssignableFrom(value)"},"failures":[],"tindex":"9b53bed3-3e63-11e6-b3c2-bfed341e7a44","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.TypeAdapterFactory.class":"context","value":"supertype"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[],"tindex":"9b53bed4-3e63-11e6-b3c2-a5b3102736c5","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"9b53bed5-3e63-11e6-b3c2-058da60187a0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"9b53bed6-3e63-11e6-b3c2-d1d4e611e907","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9b53e5e7-3e63-11e6-b3c2-8ff18ce36986","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"9b53e5e8-3e63-11e6-b3c2-19cfd902f05f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == o) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"o","context":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[75,82,83,85,29,430,36,37,129,431,0,432,1,433,133,434,2,134,135,435,137,138,139,140,3,436,141,142,143,437,144,438,145,146,147,148,149,150,151,152,439,440,153,441,154,442,443,38,156,39,444,40,164,167,168,170,171,445,446,174,176,177,184,185,447,448,449,450,451,191,452,197,199,200,203,207,208,210,453,211,212,213,216,217,218,454,455,221,222,456,223,225,227,457,228,229,230,231,4,232,233,234,458,459,41,235,236,238,460,262,263,461,462,44,463,464,264,465,466,265,467,267,468,45,469,470,46,471,271,47,272,472,273,473,474,475,48,476,49,274,477,50,478,479,480,481,275,482,483,276,277,279,280,281,282,484,283,284,285,286,287,288,289,291,292,293,298,485,486,487,312,51,52,488,316,489,317,490,318,319,53,320,24,25,26,491,322,492,28,54,55,323,493,56,57,494,335,338,339,340,341,342,343,495,496,58,497,346,498,347,59,348,22,349,350,351,499,500,501,502,362,503,372,382,387,392,504,505,60,393,506,507,394,396,397,399,400,401,402,403,61,415,416,418,420,508,509],"tindex":"9b53e5e9-3e63-11e6-b3c2-1791af3ddd35","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw == raw) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw","rawSupertype":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"9b540cfa-3e63-11e6-b3c2-b5841067602f","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if ((from instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"9b540cfb-3e63-11e6-b3c2-f70d1a07db96","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element.isString()) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.contains(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[79,80,510,511,512,513,514,515,516,125,126,127,128,517,130,135,435,136,137,138,139,3,436,141,142,143,437,144,518,438,145,155,519,520,521,158,159,161,522,523,162,444,163,524,165,166,525,173,526,527,183,528,529,530,531,532,533,534,189,535,190,536,537,538,539,540,194,541,452,195,542,198,201,543,203,204,544,205,545,546,206,547,548,289,291,293,549,550,52,53,551,56,334,552,346,553,498,347,59,554,358,555,556,23,419,557,558,559,560],"tindex":"9b540cfc-3e63-11e6-b3c2-9fec68e48bd1","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isInterface()) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9b540cfd-3e63-11e6-b3c2-47f6193e81b2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9b54340e-3e63-11e6-b3c2-2b0db60058b2","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    float float = value.floatValue();\n    checkValidFloatingPoint(floatValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"9b54340f-3e63-11e6-b3c2-b18d26cf2630","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:318","type":"CtBinaryOperatorImpl","sourcecode":"delta == (-2)"},"failures":[],"tindex":"9b543410-3e63-11e6-b3c2-0fd7c963e265","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == (-2)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"9b543411-3e63-11e6-b3c2-e5628b1e7186","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n                {\n                    java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n                    java.io.Writer.write(\"\\\"\");\n                    int int = 0;\n                    int int = value.length();\n                    for (int int = 0 ; i < length ; i++) {\n                        char char = value.charAt(i);\n                        java.lang.String java.lang.String;\n                        if (c < 128) {\n                            replacement = replacements[c];\n                            if (replacement == null) {\n                                continue;\n                            } \n                        } else if (c == '\\u2028') {\n                            replacement = \"\\\\u2028\";\n                        } else if (c == '\\u2029') {\n                            replacement = \"\\\\u2029\";\n                        } else {\n                            continue;\n                        }\n                        if (last < i) {\n                            java.io.Writer.write(value, last, (i - last));\n                        } \n                        java.io.Writer.write(replacement);\n                        last = i + 1;\n                    }\n                    if (last < length) {\n                        java.io.Writer.write(value, last, (length - last));\n                    } \n                    java.io.Writer.write(\"\\\"\");\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:264","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[561,562,563,564,565,566,567,29,36,568,449,450,277,25,28,348,22,349,350],"tindex":"9b545b22-3e63-11e6-b3c2-7b04d64ed593","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (replacement != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl","sourcecode":"!(json instanceof com.google.gson.JsonPrimitive)"},"failures":[65,66,70,71,79,136,167,168,170,171,197,200,207,228,229,230,233,234,236,277,25,342,343,346,347,59,348,22,349,350],"tindex":"9b545b23-3e63-11e6-b3c2-b9a1286dd257","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (!(value instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[75,82,83,85,29,430,36,37,129,431,0,1,433,434,2,134,135,435,137,138,139,140,3,436,141,142,143,437,144,518,438,145,146,147,148,149,150,151,152,439,440,153,441,154,442,443,38,156,39,444,40,164,167,168,170,171,445,446,174,176,177,184,185,447,448,449,450,451,191,452,197,199,200,203,207,208,210,453,211,212,213,216,217,218,454,455,221,222,456,223,225,227,457,228,229,230,231,4,232,233,234,458,459,41,235,236,460,262,263,461,462,44,463,464,264,465,466,265,467,267,468,45,469,470,46,471,271,47,472,273,473,474,48,476,49,274,477,50,478,479,480,481,275,482,483,276,277,279,280,281,282,484,283,284,285,286,287,288,289,291,292,293,298,485,486,487,312,51,52,488,316,489,317,490,318,319,53,320,24,25,26,491,322,492,28,54,55,323,493,56,57,494,335,338,339,340,341,342,343,495,496,58,497,346,498,347,59,348,22,349,350,351,499,500,501,502,362,503,372,382,387,392,504,505,60,393,506,507,394,396,397,399,400,401,402,403,61,415,416,418,420,508,509],"tindex":"9b545b24-3e63-11e6-b3c2-e1e2a5f719ae","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[280,281,282,484,283,294,295,297,299,300,320],"tindex":"9b548235-3e63-11e6-b3c2-118b9266f2a2","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[],"tindex":"9b548236-3e63-11e6-b3c2-6dfc4ba67271","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"9b548237-3e63-11e6-b3c2-039a365a3b8a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:614","type":"CtBinaryOperatorImpl","sourcecode":"(c == 't') || (c == 'T')"},"failures":[],"tindex":"9b54a948-3e63-11e6-b3c2-857ffd936529","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if ((quote == 't') || (c == 'T')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1397","type":"CtBinaryOperatorImpl","sourcecode":"c == '#'"},"failures":[],"tindex":"9b54a949-3e63-11e6-b3c2-31cae397de33","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == '#') {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"9b54a94a-3e63-11e6-b3c2-e9cb4cf15815","method":{"position":"com.google.gson.JsonArray:115","type":"CtMethodImpl","sourcecode":"public boolean contains(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonArray) {\n        {\n            if (element.isString()) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.contains(element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"9b54d05b-3e63-11e6-b3c2-b5e0f9ddf8d2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"9b54d05c-3e63-11e6-b3c2-555da05eebf6","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467249931727/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":56,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
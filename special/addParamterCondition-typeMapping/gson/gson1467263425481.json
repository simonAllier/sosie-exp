{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":30,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":358,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":464,"com.google.gson.functional.StringTest.testStringValueDeserialization":619,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":140,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":553,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":607,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":526,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":64,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":429,"com.google.gson.MixedStreamTest.testWriteLenient":373,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":396,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":332,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":14,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":89,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":99,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":411,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":558,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":63,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":294,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":237,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":533,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":8,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":384,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":404,"com.google.gson.functional.ObjectTest.testSingletonLists":202,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":328,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":359,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":521,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":2,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":489,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":52,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":614,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":419,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":49,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":560,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":452,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":627,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":25,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":255,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":554,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":401,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":36,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":515,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":251,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":505,"com.google.gson.functional.EnumTest.testEnumCaseMapping":62,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":357,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":376,"com.google.gson.functional.JsonTreeTest.testToJsonTree":303,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":514,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":615,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":24,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":80,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":312,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":586,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":522,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":605,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":153,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":96,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":225,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":625,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":417,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":46,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":192,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":527,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":211,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":249,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":145,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":422,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":45,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":597,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":149,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":565,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":564,"com.google.gson.JsonParserTest.testParseString":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":613,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":184,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":459,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":178,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":600,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":217,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":327,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":541,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":397,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":501,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":551,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":604,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":299,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":394,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":138,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":185,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":492,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":552,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":216,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":278,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":44,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":350,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":415,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":68,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":170,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":507,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":445,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":161,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":74,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":577,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":18,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":471,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":331,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":322,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":433,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":144,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":432,"com.google.gson.functional.CollectionTest.testSetDeserialization":393,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":238,"com.google.gson.functional.EnumTest.testEnumSet":56,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":207,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":593,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":544,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":75,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":106,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":602,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":212,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":35,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":73,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":555,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":435,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":561,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":55,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":246,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":188,"com.google.gson.functional.MapTest.testHashMapDeserialization":495,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":524,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":610,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":351,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":580,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":81,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":266,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":297,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":474,"com.google.gson.functional.MapTest.testSortedMap":506,"com.google.gson.functional.MapTest.testMapSerialization":127,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":268,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":436,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":549,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":588,"com.google.gson.functional.MapTest.testSerializeMaps":121,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":355,"com.google.gson.functional.MapTest.testComplexKeysSerialization":136,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":592,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":509,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":289,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":227,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":379,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":160,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":391,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":53,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":476,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":9,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":258,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":65,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":575,"com.google.gson.functional.MapTest.testStringKeyDeserialization":508,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":589,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":108,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":196,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":139,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":530,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":241,"com.google.gson.functional.PrettyPrintingTest.testMap":256,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":525,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":92,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":309,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":472,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":48,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":590,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":363,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":620,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":10,"com.google.gson.functional.CollectionTest.testQueueSerialization":93,"com.google.gson.functional.MapTest.testMapSerializationEmpty":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":545,"com.google.gson.functional.MapTest.testMapOfMapSerialization":126,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":176,"com.google.gson.JavaSerializationTest.testMapIsSerializable":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":606,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":481,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":181,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":233,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":114,"com.google.gson.functional.FieldNamingTest.testIdentity":356,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":360,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":486,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":270,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":424,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":67,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":104,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":201,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":302,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":516,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":37,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":458,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":142,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":361,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":179,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":612,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":603,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":341,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":493,"com.google.gson.functional.MapTest.testMapSubclassSerialization":120,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":195,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":264,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":386,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":594,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":243,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":343,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":370,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":539,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":398,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":598,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":378,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":72,"com.google.gson.functional.EnumTest.testEnumSubclass":59,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":182,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":50,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":418,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":166,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":141,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":557,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":107,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":388,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":517,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":222,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":542,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":431,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":20,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":42,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":585,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":546,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":574,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":177,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":382,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":336,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":410,"com.google.gson.MixedStreamTest.testWriteNulls":371,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":494,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":284,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":490,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":280,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":226,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":383,"com.google.gson.CommentsTest.testParseComments":629,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":6,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":111,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":203,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":405,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":293,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":442,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":556,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":578,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":129,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":362,"com.google.gson.MixedStreamTest.testReadInvalidState":628,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":234,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":79,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":338,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":0,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":26,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":169,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":591,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":290,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":630,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":173,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":231,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":189,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":325,"com.google.gson.functional.MapTest.testMapDeserialization":500,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":584,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":321,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":261,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":119,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":403,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":123,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":164,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":155,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":152,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":392,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":301,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":449,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":210,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":218,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":83,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":244,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":21,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":313,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":385,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":88,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":221,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":128,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":257,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":340,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":513,"com.google.gson.functional.PrimitiveTest.testShortSerialization":193,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":488,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":157,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":559,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":253,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":540,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":3,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":523,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":352,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":58,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":91,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":263,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":497,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":536,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":103,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":197,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":399,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":611,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":457,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":200,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":568,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":66,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":219,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":395,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":305,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":344,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":409,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":447,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":109,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":543,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":427,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":414,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":84,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":296,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":450,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":239,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":487,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":151,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":326,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":529,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":316,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":158,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":609,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":22,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":477,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":518,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":563,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":180,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":198,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":117,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":57,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":154,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":440,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":27,"com.google.gson.functional.MapTest.testGeneralMapField":133,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":413,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":277,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":571,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":143,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":240,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":286,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":333,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":131,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":148,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":306,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":187,"com.google.gson.MixedStreamTest.testReadMixedStreamed":456,"com.google.gson.JsonObjectTest.testDeepCopy":11,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":174,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":601,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":38,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":100,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":446,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":465,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":444,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":547,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":252,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":468,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":434,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":324,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":503,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":348,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":496,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":199,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":274,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":346,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":323,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":491,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":271,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":480,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":596,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":512,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":116,"com.google.gson.functional.ObjectTest.testNestedDeserialization":428,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":215,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":223,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":438,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":19,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":250,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":570,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":292,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":380,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":504,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":621,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":71,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":191,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":387,"com.google.gson.JavaSerializationTest.testListIsSerializable":470,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":17,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":400,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":102,"com.google.gson.functional.ObjectTest.testNullSerialization":208,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":86,"com.google.gson.stream.JsonWriterTest.testDoubles":466,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":618,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":498,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":132,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":167,"com.google.gson.functional.MapTest.testInterfaceTypeMap":130,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":587,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":242,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":163,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":519,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":60,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":254,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":461,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":245,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":390,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":307,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":248,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":531,"com.google.gson.MixedStreamTest.testWriteClosed":375,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":95,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":439,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":204,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":616,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":76,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":162,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":33,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":220,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":339,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":165,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":205,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":94,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":454,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":550,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":347,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":389,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":329,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":31,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":229,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":572,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":172,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":300,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":599,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":228,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":275,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":32,"com.google.gson.functional.CollectionTest.testQueueDeserialization":485,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":175,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":548,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":624,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":337,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":455,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":124,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":318,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":150,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":426,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":90,"com.google.gson.functional.MapTest.testRawMapSerialization":135,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":369,"com.google.gson.JsonParserTest.testParseReader":4,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":608,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":82,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":213,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":437,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":159,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":39,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":41,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":51,"com.google.gson.functional.PrimitiveTest.testByteSerialization":190,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":279,"com.google.gson.ObjectTypeAdapterTest.testSerialize":1,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":367,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":146,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":528,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":15,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":285,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":353,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":77,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":467,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":622,"com.google.gson.functional.MapTest.testMapWithQuotes":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":310,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":534,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":623,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":105,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":595,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":115,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":29,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":566,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":308,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":236,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":511,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":69,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":425,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":262,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":315,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":288,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":416,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":311,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":317,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":345,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":562,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":54,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":482,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":583,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":70,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":335,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":85,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":272,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":617,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":265,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":473,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":13,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":520,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":34,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":460,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":113,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":420,"com.google.gson.JsonObjectTest.testAddingStringProperties":12,"com.google.gson.functional.ObjectTest.testNestedSerialization":214,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":118,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":147,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":171,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":626,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":273,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":134,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":28,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":304,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":47,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":374,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":209,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":581,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":567,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":23,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":443,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":451,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":377,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":532,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":448,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":453,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":364,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":283,"com.google.gson.functional.CollectionTest.testSetSerialization":101,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":402,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":110,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":259,"com.google.gson.functional.StringTest.testStringValueSerialization":365,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":366,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":230,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":381,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":478,"com.google.gson.MixedStreamTest.testWriteInvalidState":372,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":582,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":206,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":535,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":287,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":538,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":349,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":314,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":354,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":224,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":7,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":441,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":247,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":78,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":330,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":368,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":499,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":463,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":281,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":576},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"f430e5ed-3e80-11e6-8a5e-2f786cc72fba","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f431340e-3e80-11e6-8a5e-2fcce2f0a109","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f431340f-3e80-11e6-8a5e-55f1382b0086","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        {\n            if (jsonElement == null) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f4315b20-3e80-11e6-8a5e-5515beffa01b","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"f4315b21-3e80-11e6-8a5e-c1b42fca61e9","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[0,1,2],"tindex":"f4315b22-3e80-11e6-8a5e-0de73f148262","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f4318233-3e80-11e6-8a5e-85d214f2cd29","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f4318234-3e80-11e6-8a5e-ff220d4f43fb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[3],"tindex":"f4318235-3e80-11e6-8a5e-b3494e4dd802","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f4318236-3e80-11e6-8a5e-337f4cf1833c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"tindex":"f431a947-3e80-11e6-8a5e-d33fe8c75355","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[34],"tindex":"f431a948-3e80-11e6-8a5e-c5d687c9ed76","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if ((node != null) && (node != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node","right":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f431d059-3e80-11e6-8a5e-c127bb2c8e5b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"f431f76a-3e80-11e6-8a5e-fd37b650f925","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f431f76b-3e80-11e6-8a5e-d58bcab8a97d","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,14,15,104,16,17,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,19,20,21,161,162,163,22,23,164,165,24,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,25,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,26,28,263,264,265,29,266,267,30,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,32,33,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,3,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377],"tindex":"f431f76c-3e80-11e6-8a5e-13170e215810","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (!htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f4321e7d-3e80-11e6-8a5e-7fb4514a705a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"f4321e7e-3e80-11e6-8a5e-f9e854ecfca5","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:826","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED)"},"failures":[],"tindex":"f4321e7f-3e80-11e6-8a5e-0d87900c6223","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (dateStyle == dateStyle) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[35,42,43,1,44,378,52,55,60,379,64,380,65,381,66,382,67,68,69,383,71,72,73,74,75,384,76,77,78,385,79,386,80,81,82,83,387,84,85,86,388,389,87,390,88,391,392,89,91,97,393,99,101,14,15,16,17,394,395,107,109,110,117,118,396,397,398,399,400,124,401,130,132,133,136,140,141,143,402,144,145,146,149,150,151,403,404,154,155,405,156,158,160,406,19,20,21,161,162,163,22,23,407,408,164,165,24,409,201,202,410,411,203,412,413,204,414,415,205,416,207,417,209,418,419,212,420,213,214,421,216,422,423,217,424,218,219,425,220,426,427,428,429,221,430,431,222,25,224,225,226,227,432,228,229,230,231,232,233,234,236,237,238,243,433,434,435,257,258,262,436,26,27,28,437,263,264,265,29,266,30,268,438,269,439,440,270,271,272,441,274,286,442,287,290,291,292,293,32,33,443,444,295,445,297,446,298,299,300,301,302,303,304,447,448,449,450,3,451,324,334,339,344,452,453,345,346,454,455,347,349,350,352,353,354,355,356,366,369,370,372,375,456,457,458,459,460,461,462],"tindex":"f4324590-3e80-11e6-8a5e-5d91c66f1256","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if (serialize) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f4326ca1-3e80-11e6-8a5e-d39d7798df57","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"f4326ca2-3e80-11e6-8a5e-590dc5f94b4a","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:245","type":"CtBinaryOperatorImpl","sourcecode":"annotationVersion <= (version)"},"failures":[463,464,465,466],"tindex":"f4326ca3-3e80-11e6-8a5e-59353a4cf338","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value <= value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1249","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_OBJECT)"},"failures":[],"tindex":"f4326ca4-3e80-11e6-8a5e-7ff176ce852f","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_END_OBJECT":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"f43293b5-3e80-11e6-8a5e-f972a331674a","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (srcString == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"srcString"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"f43293b6-3e80-11e6-8a5e-b5a33d534763","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"f43293b7-3e80-11e6-8a5e-036a7ec482d5","method":{"position":"com.google.gson.GsonBuilder:103","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        {\n            com.google.gson.internal.Excluder = com.google.gson.internal.Excluder.withVersion(ignoreVersionsAfter);\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[7,10,12,14,15,16,17,107,108,109,113,396,397,398,399,400,142,367,368],"tindex":"f43293b8-3e80-11e6-8a5e-6fcc860b9e40","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"f43293b9-3e80-11e6-8a5e-078b4589aff9","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[467,35,36,37,38,39,40,41,42,43,44,47,468,469,470,48,49,50,471,51,378,52,472,473,474,55,56,57,58,59,475,476,60,379,61,62,63,64,380,65,381,66,382,67,68,69,383,70,71,72,73,74,75,384,76,77,78,385,79,13,386,80,81,82,83,387,84,85,86,388,389,87,390,88,391,392,89,90,91,92,477,478,479,93,94,95,96,97,480,481,98,482,393,99,100,483,101,102,484,103,485,14,15,104,16,17,105,394,106,18,486,395,107,108,109,487,110,111,112,488,113,489,114,115,116,117,118,396,397,398,399,400,490,491,492,493,119,494,495,496,120,121,497,498,122,499,123,500,124,501,502,503,504,125,126,127,505,401,128,129,506,130,131,132,133,134,135,507,136,137,508,138,509,510,139,140,141,142,143,402,144,145,146,147,148,149,150,151,403,404,152,511,153,154,155,405,156,157,158,159,512,160,406,19,20,21,161,162,163,22,23,407,408,164,165,24,513,514,515,166,516,167,517,518,519,520,521,168,522,523,169,524,525,526,527,528,529,530,170,171,531,532,533,534,535,172,536,173,174,537,538,175,539,540,176,541,177,178,542,543,179,180,544,545,546,181,547,548,549,550,551,552,553,554,182,555,183,556,184,185,557,558,186,559,560,187,561,188,562,409,563,189,190,191,192,193,194,195,564,565,566,196,567,197,568,569,570,198,199,571,200,572,573,201,202,410,411,203,412,413,204,414,415,205,416,574,207,417,209,418,210,419,211,212,420,213,214,215,421,216,422,423,575,217,424,218,219,425,220,426,427,428,429,221,430,431,222,25,223,224,225,226,227,432,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,576,433,434,435,577,255,256,257,258,259,260,261,262,578,436,26,27,28,579,437,263,264,265,29,266,267,30,268,580,438,269,439,440,581,270,271,31,272,441,273,274,275,276,582,277,278,279,280,281,583,584,282,283,284,585,586,587,285,588,286,442,287,589,288,590,289,591,290,291,292,293,32,33,294,443,444,295,445,592,593,296,594,297,595,446,298,299,300,301,302,303,304,447,596,305,306,307,597,448,449,308,598,309,310,599,311,600,312,313,450,601,314,602,3,603,315,316,317,318,319,451,320,604,321,322,605,323,606,324,325,326,327,607,328,608,609,329,610,330,331,611,332,333,612,334,335,336,337,338,339,613,614,340,341,615,342,616,343,344,452,453,345,346,454,455,347,617,618,348,349,350,351,352,353,354,355,356,619,357,358,359,360,361,620,621,362,622,363,623,624,625,364,626,627,365,366,369,628,370,372,373,374,375,456,457,376,377,629],"tindex":"f432baca-3e80-11e6-8a5e-91ddc9112d26","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"f432bacb-3e80-11e6-8a5e-f14325f9796f","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"f432bacc-3e80-11e6-8a5e-bfe476b2d5cd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[35,240,242,246,248,249,251,26,28,29,266,30,268,438,439,273,274,340],"tindex":"f432e1dd-3e80-11e6-8a5e-3915aa5c1c9f","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"f432e1de-3e80-11e6-8a5e-c5c9d6789018","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f432e1df-3e80-11e6-8a5e-ddcc832734de","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"f432e1e0-3e80-11e6-8a5e-050bfeb3f150","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"f43308f1-3e80-11e6-8a5e-db35e9f57cdd","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (!(type instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(type instanceof java.lang.reflect.ParameterizedType)) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[630,39,70,14,15,16,17,130,133,140,19,20,21,22,23,24,25,30,32,299,300,301,303],"tindex":"f43308f2-3e80-11e6-8a5e-3738c7852bb9","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"f43308f3-3e80-11e6-8a5e-695e5eb8e1e1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f43308f4-3e80-11e6-8a5e-a33e84578393","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind == null) {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"f4333005-3e80-11e6-8a5e-632a58a5403d","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"f4333006-3e80-11e6-8a5e-c39f0d8805b4","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (!(type instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(type instanceof java.lang.reflect.ParameterizedType)) {\n                {\n                    return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"f4333007-3e80-11e6-8a5e-25e3544eb4a0","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement == null) {\n        {\n            if (jsonElement == null) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752721/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":43,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":243,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":266,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":130,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":185,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":27,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":34,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":78,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":239,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":84,"com.google.gson.MixedStreamTest.testWriteLenient":0,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":58,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":115,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":269,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":42,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":225,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":227,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":94,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":235,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":210,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":11,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":101,"com.google.gson.functional.ObjectTest.testSingletonLists":193,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":61,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":121,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":83,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":57,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":24,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":280,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":205,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":25,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":216,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":286,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":51,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":75,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":183,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":272,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":263,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":233,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":248,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":252,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":86,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":67,"com.google.gson.functional.JsonTreeTest.testToJsonTree":56,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":253,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":188,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":72,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":74,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":12,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":166,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":283,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":6,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":255,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":250,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":268,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":28,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":38,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":232,"com.google.gson.functional.MapTest.testGeneralMapField":135,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":143,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":168,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":112,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":133,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":17,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":179,"com.google.gson.JsonObjectTest.testDeepCopy":15,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":289,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":98,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":9,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":236,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":29,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":180,"com.google.gson.JsonParserTest.testParseString":20,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":110,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":284,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":102,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":147,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":203,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":107,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":59,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":218,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":79,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":265,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":246,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":68,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":176,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":69,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":139,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":3,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":214,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":202,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":21,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":258,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":242,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":157,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":4,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":220,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":160,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":45,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":62,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":238,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":48,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":85,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":111,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":134,"com.google.gson.functional.MapTest.testInterfaceTypeMap":132,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":288,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":222,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":18,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":211,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":271,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":279,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":197,"com.google.gson.functional.EnumTest.testEnumSet":267,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":161,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":173,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":124,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":199,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":159,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":182,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":231,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":195,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":162,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":221,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":65,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":206,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":213,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":103,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":260,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":114,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":196,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":224,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":230,"com.google.gson.functional.MapTest.testMapSerialization":129,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":23,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":104,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":36,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":118,"com.google.gson.functional.MapTest.testSerializeMaps":123,"com.google.gson.functional.MapTest.testComplexKeysSerialization":138,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":219,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":234,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":22,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":33,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":76,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":154,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":273,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":170,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":254,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":53,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":141,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":171,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":64,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":13,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":186,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":240,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":126,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":50,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":181,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":5,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":226,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":90,"com.google.gson.functional.MapTest.testRawMapSerialization":137,"com.google.gson.JsonParserTest.testParseReader":19,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":140,"com.google.gson.functional.PrettyPrintingTest.testMap":184,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":281,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":200,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":228,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":261,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":105,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":41,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":285,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":14,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":109,"com.google.gson.functional.CollectionTest.testQueueSerialization":229,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":26,"com.google.gson.functional.PrimitiveTest.testByteSerialization":7,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":144,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":31,"com.google.gson.ObjectTypeAdapterTest.testSerialize":82,"com.google.gson.functional.MapTest.testMapOfMapSerialization":128,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":177,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":43,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":1,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":277,"com.google.gson.functional.FieldNamingTest.testIdentity":119,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":150,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":116,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":163,"com.google.gson.functional.MapTest.testMapWithQuotes":127,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":245,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":55,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":192,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":172,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":63,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":80,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":209,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":89,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":77,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":276,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":156,"com.google.gson.functional.MapTest.testMapSubclassSerialization":122,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":190,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":95,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":153,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":91,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":155,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":113,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":158,"com.google.gson.functional.EnumTest.testEnumSubclass":270,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":108,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":287,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":44,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":217,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":49,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":46,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":142,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":264,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":247,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":96,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":244,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":47,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":70,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":52,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":278,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":88,"com.google.gson.JsonObjectTest.testAddingStringProperties":16,"com.google.gson.functional.ObjectTest.testNestedSerialization":201,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":256,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":97,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":178,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":106,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":136,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":39,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":191,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":149,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":92,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":145,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":198,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":169,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":175,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":194,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":73,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":215,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":35,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":87,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":131,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":259,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":282,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":207,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":165,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":100,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":148,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":37,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":81,"com.google.gson.functional.CollectionTest.testSetSerialization":237,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":174,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":187,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":120,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":274,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":212,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":152,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":275,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":30,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":117,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":167,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":189,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":10,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":125,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":223,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":251,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":249,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":54,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":164,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":204,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":262,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":71,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":146},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl"},"failures":[0,1,2,3,4,5,6],"tindex":"bd3a6c17-3f43-11e6-8872-11b25d15d2e0","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[7],"tindex":"bd3ba498-3f43-11e6-8872-9997a26c879a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bd3ba499-3f43-11e6-8872-650111a2767f","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"tindex":"bd3c19ca-3f43-11e6-8872-c57ff55f56e7","method":{"position":"com.google.gson.JsonObject:53","type":"CtMethodImpl","sourcecode":"public void add(java.lang.String property, com.google.gson.JsonElement value) {\n    if (value instanceof com.google.gson.JsonObject) {\n        {\n            if (value == null) {\n                value = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.put(property, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:64","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bd3c67eb-3f43-11e6-8872-a70f6459d3d7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key","com.google.gson.stream.JsonToken.NULL":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl"},"failures":[],"tindex":"bd3c8efc-3f43-11e6-8872-abdec7862c43","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return ((float)(in.nextDouble()));\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            float float = value.floatValue();\n                            checkValidFloatingPoint(floatValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[81,82,83],"tindex":"bd3cb60d-3f43-11e6-8872-772006d1b9bf","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bd3cdd1e-3f43-11e6-8872-3f15bb987cbe","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:64","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Date value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bd3cdd1f-3f43-11e6-8872-83a48b644300","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bd3d0430-3f43-11e6-8872-419b0cf3a134","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[84,85],"tindex":"bd3d2b41-3f43-11e6-8872-1fd2f23c7b37","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            double double = value.doubleValue();\n            checkValidFloatingPoint(doubleValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bd3d2b42-3f43-11e6-8872-2d93a780564a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[86,87,88,89,82,83,90,91,0,92,21,26,93,94,95,96,97,98,99,100,101,102,103,27,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,34,37,39,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,42,43,44,45,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,49,51,174,175,176,53,54,55,56,177,178,179,180,181,57,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,63,207,208,209,210,211,212,213,214,215,64,65,216,217,218,219,66,67,68,69,70,71,220,221,222,72,73,223,224,74,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,75,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,85,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289],"tindex":"bd3d5253-3f43-11e6-8872-9b5ac70b9337","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (type == null) {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:614","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bd3d7964-3f43-11e6-8872-3758cab96227","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if ((quote == 't') || (c == 'T')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"bd3da075-3f43-11e6-8872-01cb69806ead","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467346765202/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":15,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
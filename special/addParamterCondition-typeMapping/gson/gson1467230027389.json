{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":55,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":352,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":242,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":72,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":463,"com.google.gson.MixedStreamTest.testWriteLenient":6,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":433,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":337,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":26,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":90,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":95,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":445,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":218,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":318,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":148,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":19,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":422,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":438,"com.google.gson.functional.ObjectTest.testSingletonLists":271,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":335,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":353,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":70,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":453,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":366,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":487,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":47,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":158,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":499,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":206,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":301,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":38,"com.google.gson.functional.EnumTest.testEnumCaseMapping":370,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":351,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":410,"com.google.gson.functional.JsonTreeTest.testToJsonTree":395,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":163,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":46,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":20,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":506,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":398,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":155,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":252,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":8,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":372,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":280,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":451,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":127,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":364,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":275,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":9,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":299,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":247,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":456,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":363,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":345,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":111,"com.google.gson.JsonParserTest.testParseString":16,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":1,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":156,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":269,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":140,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":334,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":434,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":470,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":226,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":59,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":62,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":431,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":386,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":2,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":277,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":309,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":67,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":349,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":449,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":39,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":220,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":263,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":415,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":481,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":388,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":80,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":336,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":331,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":472,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":246,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":466,"com.google.gson.functional.CollectionTest.testSetDeserialization":430,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":149,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":135,"com.google.gson.functional.EnumTest.testEnumSet":212,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":81,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":376,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":379,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":137,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":79,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":360,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":474,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":71,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":296,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":124,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":350,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":411,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":166,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":221,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":181,"com.google.gson.functional.MapTest.testMapSerialization":106,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":167,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":475,"com.google.gson.functional.MapTest.testSerializeMaps":105,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":197,"com.google.gson.functional.MapTest.testComplexKeysSerialization":384,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":177,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":282,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":418,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":258,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":428,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":368,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":21,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":161,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":73,"com.google.gson.functional.MapTest.testStringKeyDeserialization":40,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":98,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":4,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":109,"com.google.gson.functional.PrettyPrintingTest.testMap":159,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":291,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":92,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":168,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":322,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":157,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":365,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":357,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":328,"com.google.gson.functional.CollectionTest.testQueueSerialization":371,"com.google.gson.functional.MapTest.testMapSerializationEmpty":385,"com.google.gson.functional.MapTest.testMapOfMapSerialization":238,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":268,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":0,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":288,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":102,"com.google.gson.functional.FieldNamingTest.testIdentity":198,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":354,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":31,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":169,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":458,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":60,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":74,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":133,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":375,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":65,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":244,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":355,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":118,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":464,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":209,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":329,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":403,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":270,"com.google.gson.functional.MapTest.testMapSubclassSerialization":378,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":52,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":424,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":201,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":293,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":346,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":435,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":417,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":78,"com.google.gson.functional.EnumTest.testEnumSubclass":215,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":120,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":367,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":452,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":115,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":243,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":425,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":144,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":494,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":465,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":42,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":208,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":11,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":117,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":341,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":444,"com.google.gson.MixedStreamTest.testWriteNulls":406,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":174,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":311,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":281,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":421,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":17,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":134,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":232,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":439,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":179,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":501,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":239,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":356,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":145,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":85,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":343,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":49,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":262,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":316,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":504,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":265,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":286,"com.google.gson.JsonArrayTest.testRemove":507,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":125,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":400,"com.google.gson.functional.MapTest.testMapDeserialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":330,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":164,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":104,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":203,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":437,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":114,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":380,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":254,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":251,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":48,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":429,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":183,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":485,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":141,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":274,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":222,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":294,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":43,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":323,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":423,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":89,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":143,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":160,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":381,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":361,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":344,"com.google.gson.functional.PrimitiveTest.testShortSerialization":128,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":256,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":303,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":399,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":194,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":214,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":10,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":91,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":7,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":304,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":34,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":130,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":374,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":32,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":440,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":64,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":492,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":132,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":152,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":219,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":432,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":442,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":320,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":443,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":483,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":99,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":461,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":448,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":217,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":224,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":319,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":502,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":289,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":493,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":250,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":333,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":496,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":325,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":257,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":44,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":119,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":5,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":234,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":213,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":253,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":412,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":50,"com.google.gson.functional.MapTest.testGeneralMapField":107,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":447,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":308,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":176,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":245,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":338,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":382,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":249,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":396,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":123,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":13,"com.google.gson.MixedStreamTest.testReadMixedStreamed":491,"com.google.gson.JsonObjectTest.testDeepCopy":23,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":266,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":207,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":373,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":482,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":480,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":302,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":473,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":188,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":37,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":347,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":33,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":131,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":233,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":171,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":332,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":416,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":468,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":170,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":377,"com.google.gson.functional.ObjectTest.testNestedDeserialization":462,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":276,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":392,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":477,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":41,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":300,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":178,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":497,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":77,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":3,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":223,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":29,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":498,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":97,"com.google.gson.functional.ObjectTest.testNullSerialization":391,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":88,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":35,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":241,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":260,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":68,"com.google.gson.functional.MapTest.testInterfaceTypeMap":240,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":292,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":389,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":151,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":216,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":295,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":321,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":298,"com.google.gson.MixedStreamTest.testWriteClosed":409,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":228,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":478,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":272,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":441,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":82,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":113,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":58,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":142,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":189,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":259,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":273,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":93,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":489,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":467,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":193,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":426,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":401,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":56,"com.google.gson.stream.JsonWriterTest.testNumbers":69,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":284,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":264,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":394,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":283,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":307,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":57,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":413,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":267,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":495,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":393,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":471,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":342,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":490,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":236,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":327,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":112,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":460,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":227,"com.google.gson.functional.MapTest.testRawMapSerialization":108,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":200,"com.google.gson.JsonParserTest.testParseReader":15,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":153,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":87,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":138,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":476,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":387,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":12,"com.google.gson.functional.PrimitiveTest.testByteSerialization":126,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":211,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":310,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":362,"com.google.gson.ObjectTypeAdapterTest.testSerialize":66,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":404,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":110,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":202,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":27,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":175,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":195,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":83,"com.google.gson.functional.MapTest.testMapWithQuotes":237,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":186,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":230,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":103,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":185,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":147,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":75,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":459,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":165,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":324,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":315,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":339,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":397,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":28,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":326,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":369,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":76,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":172,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":340,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":225,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":305,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":414,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":503,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":53,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":505,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":25,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":101,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":150,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":454,"com.google.gson.JsonObjectTest.testAddingStringProperties":24,"com.google.gson.functional.ObjectTest.testNestedSerialization":139,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":235,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":116,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":248,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":306,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":383,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":51,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":184,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":210,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":408,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":136,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":45,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":486,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":204,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":455,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":484,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":488,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":154,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":358,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":313,"com.google.gson.functional.CollectionTest.testSetSerialization":96,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":436,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":100,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":162,"com.google.gson.functional.StringTest.testStringValueSerialization":359,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":199,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":285,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":419,"com.google.gson.MixedStreamTest.testWriteInvalidState":407,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":390,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":314,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":187,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":14,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":196,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":279,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":18,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":500,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":63,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":297,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":469,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":402,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":405,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":173},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"3160a485-3e33-11e6-b8b2-7beef7df7de4","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:378","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[0,1,2,3,4,5,6],"tindex":"3160f2a6-3e33-11e6-b8b2-f55e1a0d13d3","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"3160f2a7-3e33-11e6-b8b2-63050d5733d6","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"316119b8-3e33-11e6-b8b2-2bc4172bc754","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"316119b9-3e33-11e6-b8b2-a76e541eee8a","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    if (jsonTree.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n                return read(jsonReader);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"316119ba-3e33-11e6-b8b2-113311ade50c","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if ((typeAdapter instanceof java.lang.reflect.ParameterizedType) && (!(typeAdapter.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"typeAdapter","type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"316140cb-3e33-11e6-b8b2-075b89fa7bd0","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (memberName != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"316140cc-3e33-11e6-b8b2-bf45c04e1867","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"tindex":"316140cd-3e33-11e6-b8b2-7325ee22b78e","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:279","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[],"tindex":"316167de-3e33-11e6-b8b2-75b4ade95c72","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if ((node != null) && (node != null)) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"31618eef-3e33-11e6-b8b2-b181324281a5","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[],"tindex":"31618ef0-3e33-11e6-b8b2-91c288957724","method":{"position":"com.google.gson.internal.$Gson$Types:287","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Collection.java.util.Collection.java.lang.Class);\n    if (collectionType instanceof java.lang.reflect.WildcardType) {\n        collectionType = ((java.lang.reflect.WildcardType)(collectionType)).getUpperBounds()[0];\n    } \n    if (collectionType instanceof java.lang.reflect.ParameterizedType) {\n        return ((java.lang.reflect.ParameterizedType)(collectionType)).getActualTypeArguments()[0];\n    } \n    return java.lang.Object.java.lang.Object.java.lang.Class;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"contextRawType","classOfPrimitive":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"3161b601-3e33-11e6-b8b2-3f0997e0c914","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[],"tindex":"3161b602-3e33-11e6-b8b2-3172e8e79d5c","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key != null) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,0,120,121,1,2,122,123,124,125,126,3,127,128,129,4,130,5,131,132,133,134,135,136,137,138,139,140,141,142,143,144,47,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,52,53,54,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,59,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,6,202,203,204],"tindex":"3161b603-3e33-11e6-b8b2-0960ed9dc55a","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"3161dd14-3e33-11e6-b8b2-a31b5bfc619f","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:158","type":"CtBinaryOperatorImpl","sourcecode":"child == null"},"failures":[205],"tindex":"3161dd15-3e33-11e6-b8b2-4723445d02d3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"child":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"31620426-3e33-11e6-b8b2-1376ea272fcd","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[63,64],"tindex":"31620427-3e33-11e6-b8b2-9be759f9fd7d","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"31620428-3e33-11e6-b8b2-2365e16cb990","method":{"position":"com.google.gson.internal.LinkedTreeMap:481","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (!(o instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"31622b39-3e33-11e6-b8b2-436185752fc5","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"31622b3a-3e33-11e6-b8b2-25a587f33573","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[206,65,207,208,209,67,210,211,70,212,213,214,215,216,217,218,72,73,219,74,220,80,221,87,222,223,224,225,88,226,89,90,227,92,93,228,94,229,95,96,230,231,98,99,100,232,233,101,103,234,235,105,236,237,238,239,240,241,107,108,242,243,244,245,246,247,110,248,249,111,112,250,251,252,253,254,255,256,257,258,113,114,259,115,260,261,262,263,116,264,265,266,267,268,117,269,118,119,0,120,121,1,2,122,123,124,125,3,127,129,270,4,130,5,131,133,271,134,272,273,135,136,274,275,137,138,139,276,277,140,141,278,142,143,144,279,280,281,282,283,284,285,286,287,288,145,146,147,148,149,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,158,159,160,161,162,163,164,49,51,304,52,54,166,168,169,170,305,306,171,307,172,308,309,310,311,173,312,313,175,176,314,315,177,316,317,178,179,318,180,319,183,320,321,322,323,324,325,326,327,328,329,330,331,332,188,333,334,335,336,337,338,339,340,341,342,343,189,344,345,346,190,191,192,193,347,348,349,350,194,195,196,197,198,351,352,353,354,355,356,357,358,359,199],"tindex":"31622b3b-3e33-11e6-b8b2-8dfa62566235","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"31622b3c-3e33-11e6-b8b2-bbeed6f5827e","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"context","java.sql.Timestamp.class":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl","sourcecode":"(!(lenient)) && (!root)"},"failures":[360,206,65,207,12,361,362,208,209,67,363,364,210,365,366,367,211,70,368,369,71,212,213,214,215,216,217,370,218,72,73,219,74,220,75,76,77,78,79,80,81,82,83,84,85,86,221,87,222,224,225,88,226,89,90,227,91,92,371,93,228,372,94,229,95,373,96,97,374,26,27,375,28,29,230,376,231,98,99,100,232,233,101,102,103,377,234,235,104,378,105,379,380,236,237,238,106,381,239,240,382,241,107,383,108,384,385,386,109,242,243,244,245,246,247,110,248,249,111,112,250,251,252,253,254,255,256,257,387,258,41,42,43,388,113,389,44,45,114,259,46,115,260,261,262,263,116,264,265,266,267,268,117,269,118,119,0,120,121,1,2,122,123,124,125,126,3,127,128,129,270,4,130,5,131,132,133,271,134,272,273,390,135,391,136,274,275,137,138,139,276,277,140,141,278,142,143,144,47,392,279,280,281,282,283,284,285,286,287,288,145,146,147,148,149,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,151,158,159,160,161,162,163,164,165,49,51,304,52,53,54,166,393,55,167,168,169,170,305,306,171,307,172,308,309,310,311,173,312,313,174,175,176,314,315,177,316,317,178,179,57,58,318,180,319,181,182,59,394,183,60,395,184,320,396,321,185,322,186,397,398,323,187,399,324,325,326,327,328,329,330,331,332,188,400,333,334,335,401,402,336,337,338,339,340,341,342,343,189,344,403,345,346,190,191,192,193,347,348,349,350,194,195,196,197,198,351,352,353,354,355,356,357,358,359,199,404,405,200,201,406,407,6,408,409,410,204],"tindex":"3162524d-3e33-11e6-b8b2-cb9e8af02fce","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if ((!htmlSafe) && (!htmlSafe)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"htmlSafe","lenient":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:120","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof com.google.gson.JsonNull"},"failures":[],"tindex":"3162524e-3e33-11e6-b8b2-eba6a79f3d54","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"3162524f-3e33-11e6-b8b2-a54aed30f6dd","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"31625250-3e33-11e6-b8b2-b1b82242cd29","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"31627961-3e33-11e6-b8b2-af7708333c5c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl","sourcecode":"isObject"},"failures":[166,55,167,411,412],"tindex":"31627962-3e33-11e6-b8b2-e7bb1ab760fa","method":{"position":"com.google.gson.internal.Excluder:96","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy exclusionStrategy, boolean serialization, boolean deserialization) {\n    if (serialization) {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            if (serialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            if (deserialization) {\n                result.java.util.List<com.google.gson.ExclusionStrategy> = new java.util.ArrayList<com.google.gson.ExclusionStrategy>(java.util.List<com.google.gson.ExclusionStrategy>);\n                result.java.util.List<com.google.gson.ExclusionStrategy>.add(exclusionStrategy);\n            } \n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"serialization"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"31627963-3e33-11e6-b8b2-f7e970825856","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[],"tindex":"31627964-3e33-11e6-b8b2-85b17fa8c151","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if ((node != null) && (node != null)) {\n        {\n            if (node != null) {\n                {\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                    node.int = 1;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n                    (int)++;\n                    if (((int) > 0) && (((int) & 1) == 0)) {\n                        (int)++;\n                        (int)--;\n                        (int)++;\n                    } \n                    for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                        if ((int) == 0) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                        } else if ((int) == 1) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                            center.int = (right.int) + 1;\n                            right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                            int = 0;\n                        } else if ((int) == 2) {\n                            int = 0;\n                        } \n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node","right":"node"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[205,413,414,415,416],"tindex":"3162a075-3e33-11e6-b8b2-257e3839965e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[67,417,70,418,419,420,75,421,78,422,82,83,84,423,424,87,425,426,427,428,429,90,91,430,431,432,433,434,435,32,436,110,111,112,437,438,439,440,441,442,443,271,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,47,279,280,281,282,466,283,284,286,287,288,151,467,468,469,470,471,472,473,474,475,49,50,476,304,52,53,54,55,477,478,412,169,171,479,480,481,482,182,59,483,484,485,486,487,488,489,490,491,492],"tindex":"3162c786-3e33-11e6-b8b2-2f776d042dfd","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"3162c787-3e33-11e6-b8b2-a3283cba2422","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"3162c788-3e33-11e6-b8b2-ddabb9d45aa3","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[363,364,242,390,183,404,405],"tindex":"3162c789-3e33-11e6-b8b2-67c677c49fea","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:722","type":"CtBinaryOperatorImpl","sourcecode":"(last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_SIGN)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE))"},"failures":[],"tindex":"3162ee9a-3e33-11e6-b8b2-ebbd7cf8dcda","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if ((i == i) || (last == i)) {\n        {\n            return char[][i];\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_SIGN":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_NONE":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[119],"tindex":"3162ee9b-3e33-11e6-b8b2-fbbcae033e35","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[493,494,495,496,350],"tindex":"3162ee9c-3e33-11e6-b8b2-958b925b6e1b","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[399],"tindex":"3162ee9d-3e33-11e6-b8b2-e156e226ce12","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"3162ee9e-3e33-11e6-b8b2-a113ee92a494","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (!(typeOfT instanceof java.lang.reflect.TypeVariable)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[360,208,209,66,67,417,70,71,216,418,72,497,73,419,219,420,74,220,75,421,77,78,79,80,81,422,82,83,84,423,85,424,86,221,87,222,223,224,225,88,425,426,226,427,89,428,429,90,91,94,430,95,96,26,27,28,29,431,432,231,99,100,234,235,433,434,435,32,498,236,499,240,241,107,384,242,243,245,436,246,247,110,111,112,250,437,438,253,254,439,255,257,258,440,41,42,43,388,113,389,44,45,441,442,114,259,46,443,133,271,444,445,134,446,447,272,448,449,273,450,135,451,136,452,453,137,454,138,139,455,277,456,457,140,458,141,278,459,142,460,461,462,463,143,464,465,144,47,279,280,281,282,466,283,284,285,286,287,288,145,147,148,149,293,472,473,474,160,161,165,475,49,50,51,476,304,52,53,54,166,55,167,477,168,478,412,169,170,305,500,171,176,501,314,316,317,178,179,57,58,479,480,180,481,181,482,182,59,394,183,60,395,184,483,484,485,502,399,486,188,339,189,190,487,488,191,192,489,490,193,348,349,194,195,196,197,198,199,200,201,407,409,491,492],"tindex":"3162ee9f-3e33-11e6-b8b2-97bb1c0e19d8","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"316315b0-3e33-11e6-b8b2-b36c1a8da09f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonNull) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:543","type":"CtBinaryOperatorImpl","sourcecode":"c == (-1)"},"failures":[],"tindex":"316315b1-3e33-11e6-b8b2-75225f938fa0","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (indexOfSubstring == (-1)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"indexOfSubstring"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"316315b2-3e33-11e6-b8b2-59b08a54ecba","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (memberName != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[346,190,487,488,192,489,193,503,504,505,506],"tindex":"316315b3-3e33-11e6-b8b2-7f8f2a0f4f07","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"31633cc4-3e33-11e6-b8b2-2fcd68ae0224","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"31633cc5-3e33-11e6-b8b2-cd8c826a0a2c","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"31633cc6-3e33-11e6-b8b2-6bcd9458effb","method":{"position":"com.google.gson.internal.bind.TypeAdapters:267","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"31633cc7-3e33-11e6-b8b2-afb8fa5c7698","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"31633cc8-3e33-11e6-b8b2-71bb09040ccf","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"31633cc9-3e33-11e6-b8b2-cf0bab43bf97","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"316363da-3e33-11e6-b8b2-a560f9f1d966","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"316363db-3e33-11e6-b8b2-71ebf77f97f4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[],"tindex":"316363dc-3e33-11e6-b8b2-df80ab8a3627","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[24,26,27,28,29,231,433,434,435,32,498,244,404,405],"tindex":"31638aed-3e33-11e6-b8b2-dfb587c80bdb","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if (value == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"31638aee-3e33-11e6-b8b2-5561ef2a8780","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:833","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[507],"tindex":"31638aef-3e33-11e6-b8b2-437fdd0d91b9","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl","sourcecode":"toResolve == rawType"},"failures":[493,494,495,496,350],"tindex":"31638af0-3e33-11e6-b8b2-7f2af7c1bdd1","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl","sourcecode":"java.lang.Character.isLetter(firstCharacter)"},"failures":[],"tindex":"31638af1-3e33-11e6-b8b2-c1a19f798f18","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if (java.lang.Character.isLetter(quote)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:164","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"3163b202-3e33-11e6-b8b2-af1e0004f26b","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467229030506/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":62,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
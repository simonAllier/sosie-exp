{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":69,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":146,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":134,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":181,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":7,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":145,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":123,"com.google.gson.stream.JsonWriterTest.testRepeatedName":4,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":58,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":170,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":175,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":176,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":98,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":178,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":103,"com.google.gson.functional.ObjectTest.testSingletonLists":149,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":118,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":188,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":95,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":189,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":35,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":161,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":40,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":41,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":191,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":53,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":75,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":65,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":177,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":105,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":91,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":122,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":115,"com.google.gson.stream.JsonWriterTest.testNullStringValue":2,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":124,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":87,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":37,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":27,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":120,"com.google.gson.functional.MapTest.testGeneralMapField":139,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":164,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":109,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":137,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":14,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":50,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":13,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":111,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":90,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":159,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":113,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":43,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":3,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":89,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":197,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":68,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":16,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":116,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":57,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":143,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":25,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":158,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":33,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":184,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":61,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":195,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":78,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":70,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":81,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":67,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":92,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":138,"com.google.gson.functional.MapTest.testInterfaceTypeMap":136,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":49,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":72,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":104,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":34,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":97,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":153,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":82,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":128,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":155,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":80,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":96,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":151,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":196,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":83,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":71,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":24,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":162,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":29,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":62,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":94,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":74,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":152,"com.google.gson.functional.MapTest.testMapSerialization":133,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":30,"com.google.gson.functional.MapTest.testSerializeMaps":127,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":173,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":44,"com.google.gson.functional.MapTest.testComplexKeysSerialization":142,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":18,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":166,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":125,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":167,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":193,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":182,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":59,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":130,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":52,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":112,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":11,"com.google.gson.functional.MapTest.testRawMapSerialization":141,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":144,"com.google.gson.functional.PrettyPrintingTest.testMap":180,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":36,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":63,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":156,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":39,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":9,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":46,"com.google.gson.functional.MapTest.testMapOfMapSerialization":132,"com.google.gson.ObjectTypeAdapterTest.testSerialize":187,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":110,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":1,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":22,"com.google.gson.functional.FieldNamingTest.testIdentity":174,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":171,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":84,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":15,"com.google.gson.functional.MapTest.testMapWithQuotes":131,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":60,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":148,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":107,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":102,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":186,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":21,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":76,"com.google.gson.functional.MapTest.testMapSubclassSerialization":126,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":183,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":99,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":12,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":93,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":79,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":48,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":42,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":51,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":77,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":66,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":17,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":194,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":100,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":147,"com.google.gson.stream.JsonWriterTest.testTwoNames":0,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":56,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":185,"com.google.gson.functional.ObjectTest.testNestedSerialization":157,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":28,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":5,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":140,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":169,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":117,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":154,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":165,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":55,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":150,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":26,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":135,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":101,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":86,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":168,"com.google.gson.functional.CollectionTest.testSetSerialization":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":54,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":45,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":19,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":192,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":23,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":20,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":88,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":172,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":163,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":73,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":129,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":121,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":108,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":85,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":160,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":47,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":64,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":6},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191],"tindex":"53591eea-3e3f-11e6-9444-2f5e7443be0d","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235014703/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"53596d0b-3e3f-11e6-9444-67213f31040b","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235014703/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"5359941c-3e3f-11e6-9444-9b6e596018a9","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235014703/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:556","type":"CtBinaryOperatorImpl","sourcecode":"(dateStyle != (java.text.DateFormat.DEFAULT)) && (timeStyle != (java.text.DateFormat.DEFAULT))"},"failures":[],"tindex":"5359941d-3e3f-11e6-9444-c78b945cc9a4","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if ((length != length) && (length != (java.text.DateFormat.java.text.DateFormat.int))) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235014703/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"dateStyle":"length","timeStyle":"length","java.text.DateFormat.DEFAULT":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5359bb2e-3e3f-11e6-9444-d7f794e3e18d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:424","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuffer read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuffer(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[],"tindex":"5359bb2f-3e3f-11e6-9444-1bb3bd642b26","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"5359bb30-3e3f-11e6-9444-65517fa740f7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"5359e241-3e3f-11e6-9444-91edf532d143","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235014703/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl","sourcecode":"typeAdapter instanceof com.google.gson.TypeAdapter<?>"},"failures":[192,193,194,195,196,197],"tindex":"5359e242-3e3f-11e6-9444-53fcebb2c82d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof com.google.gson.TypeAdapter<?>) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235014703/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.FieldNamingPolicy:155","type":"CtUnaryOperatorImpl","sourcecode":"!(java.lang.Character.isUpperCase(firstCharacter))"},"failures":[],"tindex":"5359e243-3e3f-11e6-9444-ed3411cc3ff7","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if (!(java.lang.Character.isUpperCase(quote))) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467235014703/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":10,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
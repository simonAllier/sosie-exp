{"failureDictionary":{"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":81,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":178,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":239,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":32,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":177,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":64,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":216,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":116,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":139,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":187,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":228,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":49,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":233,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":234,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":126,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":185,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":237,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":131,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":105,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":163,"com.google.gson.functional.ObjectTest.testSingletonLists":183,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":142,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":159,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":122,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":170,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":10,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":198,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":60,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":93,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":210,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":40,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":41,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":58,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":156,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":62,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":214,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":190,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":97,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":115,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":235,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":161,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":172,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":167,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":246,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":153,"com.google.gson.functional.JsonTreeTest.testToJsonTree":138,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":168,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":90,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":96,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":112,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":29,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":164,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":37,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":225,"com.google.gson.functional.MapTest.testGeneralMapField":175,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":188,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":218,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":54,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":144,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":195,"com.google.gson.MixedStreamTest.testReadMixedStreamed":9,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":57,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":205,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":152,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":148,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":158,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":118,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":207,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":150,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":140,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":44,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":3,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":79,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":15,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":154,"com.google.gson.functional.ObjectTest.testNestedDeserialization":215,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":34,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":84,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":25,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":204,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":39,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":191,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":242,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":2,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":69,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":100,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":160,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":73,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":87,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":103,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":52,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":143,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":76,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":174,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":11,"com.google.gson.functional.MapTest.testInterfaceTypeMap":173,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":56,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":89,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":221,"com.google.gson.functional.CollectionTest.testSetDeserialization":236,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":132,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":124,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":194,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":80,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":104,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":199,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":4,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":102,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":13,"com.google.gson.MixedStreamTest.testWriteClosed":8,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":36,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":123,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":92,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":189,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":247,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":106,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":88,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":28,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":24,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":212,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":31,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":70,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":120,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":95,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":192,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":45,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":33,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":223,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":231,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":47,"com.google.gson.functional.MapTest.testComplexKeysSerialization":176,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":78,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":18,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":125,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":220,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":169,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":135,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":82,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":222,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":27,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":46,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":240,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":65,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":171,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":206,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":149,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":213,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":5,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":71,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":201,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":35,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":227,"com.google.gson.ObjectTypeAdapterTest.testSerialize":245,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":147,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":50,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":22,"com.google.gson.functional.FieldNamingTest.testIdentity":232,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":229,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":107,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":14,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":208,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":68,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":137,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":182,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":134,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":179,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":130,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":244,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":21,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":98,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":211,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":241,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":111,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":127,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":193,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":6,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":133,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":119,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":121,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":101,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":197,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":53,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":43,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":51,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":77,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":75,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":16,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":128,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":181,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":180,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":85,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":200,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":243,"com.google.gson.functional.ObjectTest.testNestedSerialization":202,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":30,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":67,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":226,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":155,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":184,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":196,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":99,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":219,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":166,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":186,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":91,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":157,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":26,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":113,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":203,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":42,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":129,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":110,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":224,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":55,"com.google.gson.functional.CollectionTest.testSetSerialization":238,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":63,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":48,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":19,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":66,"com.google.gson.MixedStreamTest.testWriteInvalidState":7,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":23,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":20,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":146,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":38,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":230,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":217,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":162,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":94,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":165,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":17,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":83,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":108,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":209,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":72,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":109},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"0660690c-3e31-11e6-8ac7-a992a92dd6d0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"0660b72d-3e31-11e6-8ac7-492912547aae","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852667/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"0660de3e-3e31-11e6-8ac7-93e430504e52","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:315","type":"CtBinaryOperatorImpl","sourcecode":"mapType instanceof java.lang.reflect.ParameterizedType"},"failures":[0,1,2,3],"tindex":"0660de3f-3e31-11e6-8ac7-6318c7c4a5bf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852667/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"mapType":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"0660de40-3e31-11e6-8ac7-973beb232191","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852667/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"06610551-3e31-11e6-8ac7-7f3d854aab81","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"06610552-3e31-11e6-8ac7-e5b9e70843c8","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token == token) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852667/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"token","context":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],"tindex":"06612c63-3e31-11e6-8ac7-a9bc82e4a399","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852667/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[246,247],"tindex":"06612c64-3e31-11e6-8ac7-415a90a57a8e","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852667/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"06612c65-3e31-11e6-8ac7-a7758ef2f5e0","method":{"position":"com.google.gson.stream.JsonReader:1448","type":"CtMethodImpl","sourcecode":"private boolean skipTo(java.lang.String toFind) throws java.io.IOException {\n    if (toFind != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852667/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            outer : for ( ; (((int) + (toFind.length())) <= (int)) || (fillBuffer(toFind.length())) ; (int)++) {\n                if ((char[][int]) == '\\n') {\n                    (int)++;\n                    int = (int) + 1;\n                    continue;\n                } \n                for (int int = 0 ; c < (toFind.length()) ; c++) {\n                    if ((char[][((int) + c)]) != (toFind.charAt(c))) {\n                        continue outer;\n                    } \n                }\n                return true;\n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"06615376-3e31-11e6-8ac7-4b1100c55c4e","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467228852667/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":11,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
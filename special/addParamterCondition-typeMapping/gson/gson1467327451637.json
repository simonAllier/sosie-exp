{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":186,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":488,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":226,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":55,"com.google.gson.stream.JsonWriterTest.testRepeatedName":218,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":146,"com.google.gson.MixedStreamTest.testWriteLenient":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":448,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":60,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":127,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":333,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":456,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":496,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":107,"com.google.gson.functional.ObjectTest.testSingletonLists":95,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":445,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":489,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":2,"com.google.gson.stream.JsonWriterTest.testStrings":236,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":305,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":144,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":399,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":15,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":358,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":338,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":307,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":230,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":39,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":402,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":478,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":38,"com.google.gson.functional.EnumTest.testEnumCaseMapping":495,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":192,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":487,"com.google.gson.functional.JsonTreeTest.testToJsonTree":189,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":390,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":126,"com.google.gson.stream.JsonWriterTest.testNulls":216,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":436,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":355,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":58,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":484,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":134,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":74,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":195,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":425,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":472,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":476,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":185,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":194,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":455,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":303,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":356,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":418,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":412,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":389,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":284,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":256,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":365,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":347,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":119,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":204,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":79,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":51,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":419,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":99,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":280,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":160,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":201,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":231,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":387,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":47,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":151,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":363,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":367,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":328,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":292,"com.google.gson.stream.JsonWriterTest.testEmptyArray":210,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":53,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":86,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":257,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":443,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":497,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":77,"com.google.gson.functional.CollectionTest.testSetDeserialization":140,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":108,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":98,"com.google.gson.functional.EnumTest.testEnumSet":172,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":293,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":80,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":29,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":318,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":67,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":238,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":229,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":306,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":473,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":421,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":486,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":161,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":246,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":87,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":115,"com.google.gson.functional.MapTest.testSortedMap":41,"com.google.gson.functional.MapTest.testMapSerialization":37,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":247,"com.google.gson.JsonPrimitiveTest.testByteEqualsShort":386,"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger":377,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":262,"com.google.gson.functional.MapTest.testSerializeMaps":270,"com.google.gson.functional.MapTest.testComplexKeysSerialization":48,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":52,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":203,"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger":379,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":290,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":76,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":156,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":170,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":467,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":309,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":369,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":147,"com.google.gson.functional.MapTest.testStringKeyDeserialization":50,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":295,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":427,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":54,"com.google.gson.functional.PrettyPrintingTest.testMap":308,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":459,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":129,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":434,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":357,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":398,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":492,"com.google.gson.functional.MapTest.testMapSerializationEmpty":49,"com.google.gson.functional.CollectionTest.testQueueSerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":253,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":232,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":234,"com.google.gson.functional.MapTest.testMapOfMapSerialization":272,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":410,"com.google.gson.JavaSerializationTest.testMapIsSerializable":9,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":137,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":211,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":182,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":415,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":464,"com.google.gson.functional.FieldNamingTest.testIdentity":263,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":490,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":81,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":221,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":339,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":150,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":187,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":312,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":393,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":214,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":403,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":191,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":491,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":413,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":197,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":441,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":454,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":25,"com.google.gson.functional.MapTest.testMapSubclassSerialization":269,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":368,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":12,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":59,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":199,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":481,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":66,"com.google.gson.functional.EnumTest.testEnumSubclass":175,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":416,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":400,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":405,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":183,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":82,"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger":383,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":168,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":337,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":222,"com.google.gson.JsonPrimitiveTest.testByteEqualsLong":373,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":120,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":196,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":97,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":149,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":224,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":411,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":450,"com.google.gson.MixedStreamTest.testWriteNulls":396,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":57,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":219,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":93,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":282,"com.google.gson.CommentsTest.testParseComments":3,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":75,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":298,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":313,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":112,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":273,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":346,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":104,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":71,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":452,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":0,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":275,"com.google.gson.JsonParserTest.testParseMixedArray":202,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":406,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":360,"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal":375,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":109,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":408,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":180,"com.google.gson.JsonArrayTest.testRemove":370,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":422,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":444,"com.google.gson.functional.MapTest.testMapDeserialization":32,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":442,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":89,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":268,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":498,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":31,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":125,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":155,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":342,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":171,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":85,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":18,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":100,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":471,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":163,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":461,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":395,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":437,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":336,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":348,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":40,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":88,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":453,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":83,"com.google.gson.functional.PrimitiveTest.testShortSerialization":426,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":344,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":480,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":20,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":259,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":174,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":331,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":239,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":27,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":244,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":482,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":208,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":206,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":429,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":352,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":335,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":101,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":124,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":209,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":431,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":296,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":177,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":165,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":469,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":135,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":291,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":255,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":343,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":252,"com.google.gson.stream.JsonWriterTest.testNullStringValue":213,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":345,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":122,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":130,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":414,"com.google.gson.stream.JsonWriterTest.testEmptyObject":228,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":428,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":157,"com.google.gson.JsonPrimitiveTest.testEquals":385,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":154,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":173,"com.google.gson.functional.MapTest.testGeneralMapField":45,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":279,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":287,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":359,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":458,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":23,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":43,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":14,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":302,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":432,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":420,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":34,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":241,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":117,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":334,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":404,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":479,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":22,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":35,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":457,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":26,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":245,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":463,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":16,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":326,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":217,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":254,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":364,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":94,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":384,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":340,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":136,"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble":378,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":84,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":321,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":483,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":394,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":477,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":111,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":36,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":65,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":424,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":164,"com.google.gson.JavaSerializationTest.testListIsSerializable":10,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":63,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":143,"com.google.gson.functional.ObjectTest.testNullSerialization":470,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":167,"com.google.gson.stream.JsonWriterTest.testDoubles":233,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":28,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":44,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":366,"com.google.gson.functional.MapTest.testInterfaceTypeMap":42,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":460,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":329,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":349,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":351,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":433,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":475,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong":381,"com.google.gson.MixedStreamTest.testWriteClosed":200,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":332,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":123,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":314,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":68,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":121,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":114,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":110,"com.google.gson.stream.JsonWriterTest.testLongs":215,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":323,"com.google.gson.JsonPrimitiveTest.testShortEqualsLong":376,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":24,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":315,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":330,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":133,"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger":372,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":327,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":169,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":446,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":178,"com.google.gson.stream.JsonWriterTest.testNumbers":235,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":407,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":391,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":78,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":277,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":113,"com.google.gson.functional.CollectionTest.testQueueDeserialization":145,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":361,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":409,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":430,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":451,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":33,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":440,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":102,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":304,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":128,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":198,"com.google.gson.functional.MapTest.testRawMapSerialization":274,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":141,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":353,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":162,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":319,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":56,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":485,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":6,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":281,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":392,"com.google.gson.functional.PrimitiveTest.testByteSerialization":423,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":466,"com.google.gson.ObjectTypeAdapterTest.testSerialize":1,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":265,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":300,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":374,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":61,"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal":371,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":286,"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger":380,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":260,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":69,"com.google.gson.functional.MapTest.testMapWithQuotes":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":435,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":294,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":116,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":465,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":103,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":250,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":106,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":223,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":64,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":90,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":417,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":438,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":96,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":258,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":19,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":62,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":325,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":439,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":468,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":139,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":188,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":449,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":166,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":341,"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger":382,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":362,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":13,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":299,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":350,"com.google.gson.functional.ObjectTest.testNestedSerialization":320,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":158,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":240,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":301,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":249,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":46,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":276,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":91,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":5,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":401,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":237,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":152,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":317,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":21,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":17,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":354,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":493,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":285,"com.google.gson.functional.CollectionTest.testSetSerialization":142,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":184,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":297,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":310,"com.google.gson.functional.StringTest.testStringValueSerialization":494,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":264,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":131,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":148,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":179,"com.google.gson.MixedStreamTest.testWriteInvalidState":397,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":316,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":288,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":159,"com.google.gson.stream.JsonWriterTest.testBooleans":212,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":251,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":261,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":73,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":205,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":474,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":447,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":266,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":30,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":225,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":283},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"06c67b6d-3f16-11e6-9997-a9779810afe1","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06c73ebe-3f16-11e6-9997-7be8af82a14b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[],"tindex":"06c765cf-3f16-11e6-9997-21781b19ecea","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:342","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06c78ce0-3f16-11e6-9997-736b4f43dfd4","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if ((index == index) || (p == index)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index == index) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_NONE":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06c78ce1-3f16-11e6-9997-e192310b2902","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06c7b3f2-3f16-11e6-9997-83a16fe7f72e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[0,1,2],"tindex":"06c7db03-3f16-11e6-9997-97ea4def7ae0","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1256","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06c80214-3f16-11e6-9997-f520d899d46f","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if ((index == index) || (p == index)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (index == index) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.set(index, element);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"index","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED_NAME":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[3,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185],"tindex":"06c82925-3f16-11e6-9997-63adf0513e82","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type == null) {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[186,60,61,187,62,63,188,189,113,114,120,122,190,126,191],"tindex":"06c87746-3f16-11e6-9997-231c83f63b66","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src == null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06c89e57-3f16-11e6-9997-17fd7a7a3117","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT != typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"typeOfT","type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:902","type":"CtBinaryOperatorImpl"},"failures":[192,193,194,195,196,197,0,1,2,198,199,4,5,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,12,13,14,240,241,242,243,244,245,246,247,248,249,16,250,19,251,252,253,254,22,255,256,257,23,258,24,259,260,261,262,263,264,265,266,267,268,269,270,29,31,33,271,272,37,40,273,42,43,44,45,46,274,48,49,51,54,55,275,276,277,278,279,280,281,282,283,284,285,57,286,287,288,289,290,291,59,64,188,65,66,67,292,293,68,69,70,71,72,73,74,75,76,78,294,80,82,295,296,297,298,299,84,85,300,301,302,303,304,305,306,307,308,88,309,310,311,89,90,91,312,95,313,314,315,316,98,317,318,319,320,321,99,322,100,101,323,103,104,105,106,107,108,109,110,111,112,324,325,326,327,115,118,119,328,121,329,125,330,127,128,331,129,132,133,332,134,135,138,333,334,142,143,146,147,335,150,151,336,337,338,339,340,341,153,342,154,155,343,344,345,156,157,158,159,160,346,161,162,163,165,166,167,347,348,172,173,174,175,349,177,178,179,180,181,182,350,351,352,353,354,355,356,357,358,359,185],"tindex":"06c8c568-3f16-11e6-9997-67f2fdd722f6","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_NONE":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06c91389-3f16-11e6-9997-839a2be37922","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06c93a9a-3f16-11e6-9997-b3c953e138c5","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl"},"failures":[360,361,362,363,364],"tindex":"06ca731b-3f16-11e6-9997-25a660f3671b","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cae84c-3f16-11e6-9997-3d5b298b5ba5","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter != (typeAdapter[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"typeAdapter","lowerBound":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cb0f5d-3f16-11e6-9997-835dd32e6dcd","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cb0f5e-3f16-11e6-9997-6fab67f29dfe","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cb366f-3f16-11e6-9997-a548ac147d9d","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.lang.Class) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cb5c80-3f16-11e6-9997-b9fbf939d236","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cb5c81-3f16-11e6-9997-ebd590fcf80a","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cb8392-3f16-11e6-9997-e5797b605ddd","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[103,365],"tindex":"06cb8393-3f16-11e6-9997-0f20763959c5","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    if (jsonTree instanceof com.google.gson.JsonArray) {\n        {\n            if (!(jsonTree instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n                        return read(jsonReader);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"jsonTree"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cbaaa4-3f16-11e6-9997-b1c860eb95b5","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cbaaa5-3f16-11e6-9997-ebfd7b385dfd","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cbaaa6-3f16-11e6-9997-5982bf3964f3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cbd1b7-3f16-11e6-9997-9f12b85bfac0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[366,367,368,286,293,85,121],"tindex":"06cbd1b8-3f16-11e6-9997-1f01efeddb42","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cbd1b9-3f16-11e6-9997-934da49d6e1a","method":{"position":"com.google.gson.JsonArray:92","type":"CtMethodImpl","sourcecode":"public boolean remove(com.google.gson.JsonElement element) {\n    if (element == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:198","type":"CtBinaryOperatorImpl"},"failures":[369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,189],"tindex":"06cbf8ca-3f16-11e6-9997-1d5dacabd23b","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if (obj instanceof java.lang.reflect.TypeVariable) {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cbf8cb-3f16-11e6-9997-b54580431d76","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if ((to instanceof java.lang.reflect.ParameterizedType) && (!(to.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"to","type":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[260,261,262,163,165,166,168,169,170],"tindex":"06cc1fdc-3f16-11e6-9997-531d126bcbeb","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (name != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cc1fdd-3f16-11e6-9997-87d4212fc1f2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cc1fde-3f16-11e6-9997-6177226ff0a0","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.lang.Class) {\n                {\n                    if (!(o instanceof java.util.Map.Entry)) {\n                        return false;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n                    if (node == null) {\n                        return false;\n                    } \n                    removeInternal(node, true);\n                    return true;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cc46ef-3f16-11e6-9997-81284f9e1ed9","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cc46f0-3f16-11e6-9997-dbb2241cceb5","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cc46f1-3f16-11e6-9997-17a39feaa750","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cc6e02-3f16-11e6-9997-b9d6a1fc9e59","method":{"position":"com.google.gson.JsonParser:80","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    boolean boolean = json.isLenient();\n    json.setLenient(true);\n    try {\n        return com.google.gson.internal.Streams.parse(json);\n    } catch (java.lang.StackOverflowError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } catch (java.lang.OutOfMemoryError e) {\n        throw new com.google.gson.JsonParseException(((\"Failed parsing JSON source: \" + json) + \" to Json\") , e);\n    } finally {\n        json.setLenient(lenient);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[6,7,392,186,55,60,61,187,62,63,188,391,85,393,189,113,114,394,120,395,122,190,126,338,191],"tindex":"06cc6e03-3f16-11e6-9997-43a1f0a7efea","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cc9514-3f16-11e6-9997-a55f07bbbc6a","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o != (o[0])) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"o","upperBound":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"06cc9515-3f16-11e6-9997-b5b2589620d8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cc9516-3f16-11e6-9997-b9c75ce7c593","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    if (jsonTree instanceof com.google.gson.JsonArray) {\n        {\n            if (!(jsonTree instanceof com.google.gson.JsonPrimitive)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n                        return read(jsonReader);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl"},"failures":[192,193,194,195,196,197,198,199,396,397,4,5,200,201,398,399,400,6,7,392,401,238,402,403,404,239,12,13,405,366,14,406,367,240,407,408,241,409,410,411,412,413,414,415,416,417,418,419,242,420,421,422,423,424,425,426,243,368,427,244,428,245,429,246,430,186,247,248,249,16,431,432,433,250,434,435,19,436,437,251,20,438,252,439,440,253,441,442,443,254,22,444,255,256,445,446,447,257,448,23,258,449,450,451,452,24,453,454,455,259,260,261,262,263,264,265,266,456,267,457,268,269,270,29,31,33,271,272,37,40,273,42,43,44,45,46,274,48,49,51,54,55,275,276,277,278,279,280,281,282,283,284,285,57,286,287,288,289,290,291,458,459,460,59,461,462,60,61,187,62,63,64,188,65,66,67,292,293,68,69,70,71,72,73,74,75,76,78,294,80,82,295,296,297,298,463,299,464,465,84,391,85,393,189,300,301,302,303,304,466,305,467,468,306,469,307,308,88,309,310,311,89,90,91,312,95,313,314,315,316,98,470,317,471,472,318,319,320,321,99,322,100,101,323,103,104,105,106,107,108,473,474,475,476,477,478,479,480,109,110,111,112,113,114,481,324,325,326,327,115,118,119,394,120,395,328,121,329,122,190,125,330,126,127,128,331,129,132,133,332,134,135,138,333,334,142,143,482,146,147,335,150,151,336,337,338,483,339,340,341,153,342,484,154,155,343,344,345,485,156,157,158,159,160,486,487,488,489,490,491,346,492,493,494,161,162,163,165,166,167,347,348,172,173,174,175,349,177,495,496,178,179,180,181,182,351,183,191,359,497,185],"tindex":"06ccbc27-3f16-11e6-9997-2f13bdda4af0","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"htmlSafe"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[396,204,205,208,403,374,498,432,19,436,448,449,453,268,460,187,294,80,297,298,463,464,465,84,467,468,91,470,473,475,476,478,482,483,484,485,174],"tindex":"06cce338-3f16-11e6-9997-2f668d28d0d4","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:583","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cd0a49-3f16-11e6-9997-f32649547489","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum != minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.EMPTY_OBJECT":"minimum","context":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:485","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"06cd315a-3f16-11e6-9997-07e66cc110bb","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (counter == offset) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467326604719/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"counter","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":46,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":199,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":271,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":108,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":170,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":42,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":158,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":188,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":148,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":195,"com.google.gson.MixedStreamTest.testWriteLenient":5,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":204,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":288,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":18,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":36,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":189,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":190,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":16,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":192,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":209,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":27,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":182,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":59,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":90,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":132,"com.google.gson.functional.ObjectTest.testSingletonLists":212,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":210,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":253,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":173,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":145,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":224,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":177,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":178,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":246,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":20,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":139,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":267,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":191,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":0,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":77,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":159,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":277,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":107,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":280,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":31,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":3,"com.google.gson.GenericArrayTypeTest.testNotEquals":160,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":155,"com.google.gson.functional.JsonTreeTest.testToJsonTree":263,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":281,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":51,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":119,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":53,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":60,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":97,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":175,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":76,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":11,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":166,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":17,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":135,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":278,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":22,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":124,"com.google.gson.functional.MapTest.testGeneralMapField":187,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":256,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":168,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":242,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":110,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":55,"com.google.gson.JsonObjectTest.testDeepCopy":63,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":244,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":104,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":129,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":35,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":273,"com.google.gson.JsonParserTest.testParseString":15,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":68,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":7,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":176,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":201,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":30,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":26,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":222,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":79,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":103,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":180,"com.google.gson.ParameterizedTypeTest.testNotEquals":72,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":141,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":270,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":239,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":54,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":125,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":149,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":71,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":48,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":114,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":8,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":236,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":221,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":163,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":165,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":32,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":105,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":198,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":86,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":9,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":248,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":183,"com.google.gson.JavaSerializationTest.testListIsSerializable":70,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":39,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":131,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":46,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":269,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":116,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":150,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":28,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":186,"com.google.gson.functional.MapTest.testInterfaceTypeMap":185,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":243,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":250,"com.google.gson.functional.CollectionTest.testSetDeserialization":128,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":82,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":172,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":194,"com.google.gson.functional.EnumTest.testEnumSet":134,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":216,"com.google.gson.MixedStreamTest.testReadClosed":65,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":89,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":147,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":287,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":100,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":218,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":88,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":286,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":254,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":214,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":91,"com.google.gson.functional.MapTest.testHashMapDeserialization":99,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":121,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":249,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":44,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":4,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":225,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":235,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":264,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":151,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":203,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":215,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":252,"com.google.gson.functional.MapTest.testSortedMap":109,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":123,"com.google.gson.functional.MapTest.testMapSerialization":106,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":232,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":207,"com.google.gson.functional.MapTest.testComplexKeysSerialization":112,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":181,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":127,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":115,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":45,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":226,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":258,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":282,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":260,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":259,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":43,"com.google.gson.functional.CollectionTest.testQueueDeserialization":133,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":2,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":61,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":171,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":196,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":184,"com.google.gson.functional.MapTest.testStringKeyDeserialization":33,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":13,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":274,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":10,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":118,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":161,"com.google.gson.JsonParserTest.testParseReader":14,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":117,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":143,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":174,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":219,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":265,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":233,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":62,"com.google.gson.functional.MapTest.testMapSerializationEmpty":113,"com.google.gson.functional.CollectionTest.testQueueSerialization":122,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":157,"com.google.gson.ObjectTypeAdapterTest.testSerialize":283,"com.google.gson.JavaSerializationTest.testMapIsSerializable":69,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":272,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":126,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":37,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":6,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":230,"com.google.gson.functional.FieldNamingTest.testIdentity":208,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":205,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":92,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":47,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":238,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":197,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":211,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":262,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":153,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":34,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":81,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":285,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":229,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":83,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":98,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":78,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":40,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":96,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":162,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":276,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":202,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":87,"com.google.gson.functional.EnumTest.testEnumSubclass":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":142,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":241,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":38,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":179,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":245,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":289,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":268,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":240,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":41,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":200,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":1,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":25,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":49,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":284,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":19,"com.google.gson.JsonObjectTest.testAddingStringProperties":64,"com.google.gson.functional.ObjectTest.testNestedSerialization":220,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":144,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":167,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":111,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":23,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":169,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":75,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":66,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":140,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":146,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":217,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":84,"com.google.gson.CommentsTest.testParseComments":156,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":257,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":57,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":213,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":52,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":237,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":80,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":95,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":67,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":21,"com.google.gson.functional.CollectionTest.testSetSerialization":193,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":247,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":275,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":120,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":227,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":12,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":234,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":228,"com.google.gson.functional.MapTest.testMapDeserialization":29,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":164,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":56,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":206,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":255,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":58,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":102,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":251,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":279,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":24,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":138,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":261,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":93,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":223,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":266,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":101,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":50,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":73,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":94},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4],"tindex":"2468fd18-3f2c-11e6-96f9-95c6cf9b8ffd","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz == clazz) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz","toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl"},"failures":[5,6,7,8,9,10,11],"tindex":"24694b39-3f2c-11e6-96f9-b90028f5820f","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[12,13],"tindex":"2469724a-3f2c-11e6-96f9-0b6b2c00c088","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2469724b-3f2c-11e6-96f9-c1d543f3e2cd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2469995c-3f2c-11e6-96f9-e314e8e76052","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2469995d-3f2c-11e6-96f9-31a499543fed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl"},"failures":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"tindex":"2469995e-3f2c-11e6-96f9-098325703bb6","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2469995f-3f2c-11e6-96f9-23fcaf6ad7ea","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2469c070-3f2c-11e6-96f9-c3fd5be7f03b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2469c071-3f2c-11e6-96f9-9ba4b7b05a18","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[65,5,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,25,96,97,98,99,26,27,28,100,101,102,29,103,104,30,105,106,31,107,108,109,110,111,32,112,113,33,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,41,144,145,146,147,47,148,149,150,151,152,153,154,155,54,156,157,158,159,160],"tindex":"2469e782-3f2c-11e6-96f9-b1284e5ab86b","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (!(subclass.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"246a35a3-3f2c-11e6-96f9-052be859e20a","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:106","type":"CtBinaryOperatorImpl"},"failures":[161,162,163,164,165,166,167,168,169,170,171,78,20,79,21,23,172,173,174,175,176,177,178,179,180,181,80,81,182,82,83,86,87,88,183,89,91,92,93,95,97,184,185,186,187,188,189,190,191,192,193,34,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,36,37,38,39,209,40,41,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,42,232,233,234,235,236,237,43,44,238,239,240,241,242,243,244,245,246,247,48,49,50,248,249,250,51,52,251,252,53,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,152,155,54,283,284,285,286],"tindex":"246a35a4-3f2c-11e6-96f9-05b3b6500297","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value instanceof com.google.gson.JsonArray) {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:218","type":"CtInvocationImpl"},"failures":[287,12,13],"tindex":"246aaad5-3f2c-11e6-96f9-77be5e204916","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (com.google.gson.reflect.TypeToken.typeEquals(to, from, typeVarMap)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"to","typeVarMap":"typeVarMap","to":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"246aaad6-3f2c-11e6-96f9-273ae7f87aba","method":{"position":"com.google.gson.internal.bind.TypeAdapters:580","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Calendar value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.name(com.google.gson.internal.bind.TypeAdapters.23.java.lang.String);\n    out.value(value.get(java.util.Calendar.java.util.Calendar.int));\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"246ad1e7-3f2c-11e6-96f9-638e4d0fc650","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:831","type":"CtBinaryOperatorImpl"},"failures":[288,289],"tindex":"246af8f8-3f2c-11e6-96f9-cd0ce356c0a3","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_LONG":"style"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:244","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"246af8f9-3f2c-11e6-96f9-3f72270e0671","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (!(clazz.isInterface())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (clazz == clazz) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"246af8fa-3f2c-11e6-96f9-399ffb2771e7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"246b200b-3f2c-11e6-96f9-b9032613cafd","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1252","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"246b200c-3f2c-11e6-96f9-d5ca7b05db53","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if ((i == i) || (p == i)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"246b200d-3f2c-11e6-96f9-cfc7f1f8962b","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if ((quote < '0') || (c > '9')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"246b200e-3f2c-11e6-96f9-4d67931edf80","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if ((memberName != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"246b471f-3f2c-11e6-96f9-87e8ed781d19","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement instanceof com.google.gson.JsonObject) {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467336484092/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":24,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":193,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":594,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":1,"com.google.gson.functional.StringTest.testStringValueDeserialization":592,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":92,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":567,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":412,"com.google.gson.stream.JsonWriterTest.testRepeatedName":645,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":27,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":159,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":81,"com.google.gson.MixedStreamTest.testWriteLenient":269,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":274,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":70,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":64,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":68,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":128,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":456,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":314,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":532,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":177,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":420,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":622,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":42,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":103,"com.google.gson.functional.ObjectTest.testSingletonLists":126,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":568,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":405,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":595,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":633,"com.google.gson.stream.JsonWriterTest.testStrings":664,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":347,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":23,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":582,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":141,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":299,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":459,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":236,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":678,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":608,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":278,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":3,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":4,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":450,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":656,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":87,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":288,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":398,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":498,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":373,"com.google.gson.functional.EnumTest.testEnumCaseMapping":313,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":593,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":612,"com.google.gson.functional.JsonTreeTest.testToJsonTree":224,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":397,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":584,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":123,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":14,"com.google.gson.stream.JsonWriterTest.testNulls":642,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":681,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":49,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":273,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":675,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":524,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":407,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":561,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":392,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":325,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":165,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":605,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":138,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":466,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":667,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":413,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":484,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":496,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":97,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":148,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":666,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":585,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":99,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":470,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":469,"com.google.gson.JsonParserTest.testParseString":619,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":652,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":581,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":264,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":676,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":435,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":546,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":150,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":281,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":520,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":433,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":566,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":82,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":366,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":447,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":59,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":558,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":220,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":626,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":74,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":383,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":265,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":353,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":448,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":147,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":514,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":21,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":134,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":244,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":659,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":34,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":284,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":380,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":216,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":114,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":40,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":502,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":339,"com.google.gson.stream.JsonWriterTest.testEmptyArray":635,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":301,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":385,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":504,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":574,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":560,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":96,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":16,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":168,"com.google.gson.functional.CollectionTest.testSetDeserialization":67,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":178,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":137,"com.google.gson.functional.EnumTest.testEnumSet":306,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":534,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":440,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":41,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":338,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":258,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":362,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":550,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":142,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":17,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":39,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":452,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":182,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":461,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":655,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":24,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":493,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":462,"com.google.gson.functional.MapTest.testHashMapDeserialization":357,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":410,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":572,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":506,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":591,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":50,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":192,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":217,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":305,"com.google.gson.functional.MapTest.testSortedMap":376,"com.google.gson.functional.MapTest.testMapSerialization":372,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":194,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":183,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":445,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":526,"com.google.gson.functional.MapTest.testSerializeMaps":2,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":248,"com.google.gson.functional.MapTest.testComplexKeysSerialization":91,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":533,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":384,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":625,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":530,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":26,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":167,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":109,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":256,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":62,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":311,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":7,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":257,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":29,"com.google.gson.functional.MapTest.testStringKeyDeserialization":382,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":260,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":527,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":341,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":267,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":386,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":416,"com.google.gson.functional.PrettyPrintingTest.testMap":5,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":411,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":489,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":318,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":196,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":543,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":298,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":529,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":677,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":598,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":602,"com.google.gson.functional.CollectionTest.testQueueSerialization":322,"com.google.gson.functional.MapTest.testMapSerializationEmpty":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":556,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":615,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":441,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":660,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":662,"com.google.gson.functional.MapTest.testMapOfMapSerialization":371,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":432,"com.google.gson.JavaSerializationTest.testMapIsSerializable":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":563,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":327,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":637,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":174,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":263,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":348,"com.google.gson.functional.FieldNamingTest.testIdentity":249,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":596,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":340,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":199,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":648,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":151,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":33,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":125,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":223,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":336,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":640,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":400,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":289,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":387,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":597,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":161,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":577,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":19,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":551,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":557,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":583,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":354,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":285,"com.google.gson.functional.MapTest.testMapSubclassSerialization":359,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":48,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":189,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":536,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":12,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":179,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":430,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":587,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":83,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":542,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":22,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":38,"com.google.gson.functional.EnumTest.testEnumSubclass":309,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":451,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":140,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":300,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":399,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":93,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":455,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":401,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":163,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":649,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":436,"com.google.gson.stream.JsonWriterTest.testTwoNames":636,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":162,"com.google.gson.stream.JsonWriterTest.testNullName":643,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":112,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":18,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":523,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":442,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":482,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":32,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":434,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":651,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":578,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":127,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":356,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":522,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":646,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":351,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":516,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":36,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":166,"com.google.gson.CommentsTest.testParseComments":614,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":620,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":106,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":129,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":343,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":205,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":210,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":454,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":503,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":375,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":600,"com.google.gson.MixedStreamTest.testReadInvalidState":610,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":175,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":47,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":468,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":580,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":184,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":632,"com.google.gson.JsonParserTest.testParseMixedArray":634,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":409,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":270,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":531,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":259,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":207,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":679,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":425,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":172,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":465,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":564,"com.google.gson.functional.MapTest.testMapDeserialization":365,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":519,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":559,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":10,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":355,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":102,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":683,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":121,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":364,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":105,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":390,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":63,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":222,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":310,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":228,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":152,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":483,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":491,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":113,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":547,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":46,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":61,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":160,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":6,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":374,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":292,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":276,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":396,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":345,"com.google.gson.functional.PrimitiveTest.testShortSerialization":467,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":393,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":458,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":500,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":431,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":230,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":408,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":245,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":308,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":65,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":188,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":360,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":424,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":334,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":473,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":84,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":280,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":630,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":575,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":255,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":628,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":479,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":474,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":672,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":31,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":75,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":120,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":153,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":539,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":631,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":124,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":226,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":77,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":437,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":157,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":133,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":312,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":54,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":535,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":229,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":487,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":342,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":101,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":565,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":415,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":219,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":553,"com.google.gson.stream.JsonWriterTest.testNullStringValue":639,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":570,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":117,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":319,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":402,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":464,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":439,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":268,"com.google.gson.stream.JsonWriterTest.testEmptyObject":654,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":79,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":104,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":307,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":198,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":185,"com.google.gson.functional.MapTest.testGeneralMapField":90,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":131,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":513,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":478,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":94,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":204,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":277,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":576,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":377,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":271,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":389,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":406,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":460,"com.google.gson.MixedStreamTest.testReadMixedStreamed":254,"com.google.gson.JsonObjectTest.testDeepCopy":623,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":367,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":548,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":218,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":290,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":330,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":657,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":214,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":443,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":499,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":295,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":181,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":232,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":368,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":590,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":358,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":344,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":477,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":203,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":239,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":644,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":427,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":562,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":352,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":200,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":538,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":395,"com.google.gson.functional.ObjectTest.testNestedDeserialization":158,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":350,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":485,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":669,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":195,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":111,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":497,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":476,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":209,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":28,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":369,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":599,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":37,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":266,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":53,"com.google.gson.JavaSerializationTest.testListIsSerializable":297,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":73,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":85,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":332,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":56,"com.google.gson.stream.JsonWriterTest.testDoubles":661,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":589,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":361,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":89,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":283,"com.google.gson.functional.MapTest.testInterfaceTypeMap":88,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":525,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":658,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":490,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":116,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":403,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":25,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":671,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":60,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":540,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":495,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":418,"com.google.gson.MixedStreamTest.testWriteClosed":253,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":197,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":324,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":119,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":586,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":43,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":115,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":212,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":155,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":208,"com.google.gson.stream.JsonWriterTest.testLongs":641,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":234,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":122,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":135,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":323,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":240,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":446,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":242,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":58,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":328,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":571,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":508,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":170,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":480,"com.google.gson.stream.JsonWriterTest.testNumbers":663,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":423,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":545,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":169,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":510,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":211,"com.google.gson.functional.CollectionTest.testQueueDeserialization":335,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":429,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":444,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":604,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":505,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":579,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":86,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":149,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":555,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":100,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":156,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":317,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":251,"com.google.gson.functional.MapTest.testRawMapSerialization":379,"com.google.gson.JsonParserTest.testParseReader":618,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":569,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":673,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":51,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":144,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":187,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":394,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":291,"com.google.gson.functional.PrimitiveTest.testByteSerialization":262,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":293,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":302,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":515,"com.google.gson.ObjectTypeAdapterTest.testSerialize":20,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":616,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":98,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes":261,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":414,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":682,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":71,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":286,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":246,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":44,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":287,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":601,"com.google.gson.functional.MapTest.testMapWithQuotes":370,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":544,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":603,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":337,"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject":13,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":537,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":349,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":191,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":471,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":541,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":176,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":650,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":391,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":35,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":154,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":11,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":552,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":136,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":528,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":272,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":72,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":238,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":554,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":463,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":329,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":275,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":315,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":511,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":55,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":201,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":588,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":190,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":680,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":304,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":316,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":404,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":282,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":346,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":670,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":143,"com.google.gson.functional.ObjectTest.testNestedSerialization":145,"com.google.gson.JsonObjectTest.testAddingStringProperties":624,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":80,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":388,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":417,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":607,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":509,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":378,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":186,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":225,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":294,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":611,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":665,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":139,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":507,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":472,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":118,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":213,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":231,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":419,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":613,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":146,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":227,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":237,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":674,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":606,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":521,"com.google.gson.functional.CollectionTest.testSetSerialization":69,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":95,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":8,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":78,"com.google.gson.functional.StringTest.testStringValueSerialization":609,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":250,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":30,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":171,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":320,"com.google.gson.MixedStreamTest.testWriteInvalidState":252,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":512,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":668,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":422,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":206,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":428,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":243,"com.google.gson.stream.JsonWriterTest.testBooleans":638,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":549,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":247,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":164,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":621,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":202,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":494,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":627,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":45,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":573,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":617,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":363,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":0,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":501,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":517},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12],"tindex":"56d909f8-3e7c-11e6-b483-4fdd81c9ae3c","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indent == null) {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"indent"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:370","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.WildcardType"},"failures":[13,14,15,16],"tindex":"56d95819-3e7c-11e6-b483-737dd2bee946","method":{"position":"com.google.gson.JsonObject:186","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.WildcardType) {\n        {\n            return (o == (com.google.gson.JsonObject.this)) || ((o instanceof com.google.gson.JsonObject) && (((com.google.gson.JsonObject)(o)).com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.equals(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"56d9581a-3e7c-11e6-b483-2762246df3a4","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,3,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,6,7,11,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,12,252,253,254,255],"tindex":"56d97f2b-3e7c-11e6-b483-dbeea138b180","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (!serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"56d97f2c-3e7c-11e6-b483-018983fcc7b9","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"56d9a63d-3e7c-11e6-b483-4b9fa5f92057","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56d9a63e-3e7c-11e6-b483-032a89930889","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl","sourcecode":"(primitive.value) instanceof java.lang.Number"},"failures":[],"tindex":"56d9a63f-3e7c-11e6-b483-f5a0d76d0754","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"src","value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[256,257,84],"tindex":"56d9cd50-3e7c-11e6-b483-37e08c96256a","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"56d9f461-3e7c-11e6-b483-2376ae338039","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"56d9f462-3e7c-11e6-b483-93844d91ec3e","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from == from) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"from","java.util.Date.class":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[258,259,260,261],"tindex":"56da1b73-3e7c-11e6-b483-5f2638a4f314","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from == from) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"from","java.sql.Timestamp.class":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"56da1b74-3e7c-11e6-b483-fdb78693f72b","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"56da1b75-3e7c-11e6-b483-a7440a4c2ba0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b == a) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"b","com.google.gson.LongSerializationPolicy.DEFAULT":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"56da4286-3e7c-11e6-b483-156049b63329","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT","b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"56da4287-3e7c-11e6-b483-2795b53a670f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[262],"tindex":"56da4288-3e7c-11e6-b483-9fedfed091b4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"56da4289-3e7c-11e6-b483-c92c85a43551","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (jsonElement.isNumber()) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(jsonElement, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56da428a-3e7c-11e6-b483-03f7423288ea","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[92,111,112,113,117,118,123,223],"tindex":"56da428b-3e7c-11e6-b483-db2372347446","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value != null) {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            put(new com.google.gson.JsonPrimitive(value));\n                            return com.google.gson.internal.bind.JsonTreeWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56da699c-3e7c-11e6-b483-ab56f659d1ff","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"56da699d-3e7c-11e6-b483-b59eb0f15667","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:537","type":"CtFieldReadImpl","sourcecode":"lenient"},"failures":[263,264,265,266,267,268,269],"tindex":"56da90ae-3e7c-11e6-b483-01d12c389e97","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"56da90af-3e7c-11e6-b483-03333a54d9fc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:291","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[270],"tindex":"56da90b0-3e7c-11e6-b483-0b57553b8772","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[271,272,273,274,275,276,277,278,279,280,281],"tindex":"56dab7c1-3e7c-11e6-b483-d9bce60902f1","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.GenericArrayType) {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl","sourcecode":"o instanceof java.util.Iterator"},"failures":[],"tindex":"56dab7c2-3e7c-11e6-b483-6f36f5c9cbf1","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src instanceof java.util.Iterator) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(src, typeOfSrc, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"56dab7c3-3e7c-11e6-b483-e579f339c426","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value != null) {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            put(new com.google.gson.JsonPrimitive(value));\n                            return com.google.gson.internal.bind.JsonTreeWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"56dab7c4-3e7c-11e6-b483-7d8d3e9dd25a","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56dab7c5-3e7c-11e6-b483-b57a73c387f3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[270,282],"tindex":"56dab7c6-3e7c-11e6-b483-c7242e27d620","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if (node == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"56daded7-3e7c-11e6-b483-4b0ae5332995","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (jsonElement.isNumber()) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(jsonElement, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[41,115,283,284,285,286,222],"tindex":"56daded8-3e7c-11e6-b483-3f2fcccbcbd8","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:59","type":"CtUnaryOperatorImpl","sourcecode":"!((delegate) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[287,17,288,289,290,291,292,293,18,19,21,294,295,296,297,298,299,300,301,302,22,23,303,304,305,24,306,307,308,309,310,311,25,26,312,313,314,27,29,32,33,35,36,315,37,38,39,40,41,42,43,44,45,46,47,316,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,317,65,318,319,320,321,322,323,324,325,66,326,327,328,329,67,68,330,331,69,332,333,334,335,70,71,336,72,73,337,74,338,339,340,75,76,341,77,342,78,343,344,345,346,347,348,349,350,79,80,81,82,83,84,85,351,352,353,354,355,356,357,358,359,2,360,361,362,363,364,365,86,366,367,368,369,370,371,372,373,87,374,375,376,88,377,89,90,378,379,380,91,381,382,383,384,385,386,92,93,387,95,96,97,98,388,389,99,100,101,102,103,390,391,392,104,105,106,107,393,108,394,395,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,396,397,398,399,400,283,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,284,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,263,443,444,445,446,447,448,449,450,451,452,453,454,264,265,455,456,457,458,459,460,461,462,463,124,464,465,262,266,466,467,468,285,469,470,471,267,472,473,474,475,476,268,477,478,479,480,481,125,126,127,128,129,130,131,132,133,134,135,136,482,137,138,139,140,483,141,484,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,3,485,164,167,168,170,171,172,173,174,175,486,176,177,178,487,488,489,490,179,491,492,493,494,495,496,497,498,499,500,501,180,181,182,502,4,5,6,7,8,9,10,11,503,183,184,185,186,504,187,188,189,190,191,192,505,193,194,506,195,196,197,198,507,199,200,508,202,509,203,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,286,526,204,205,206,527,528,529,530,531,207,208,209,210,211,212,532,213,214,215,216,533,534,535,536,217,537,218,219,220,221,222,223,224,225,226,538,539,271,540,15,227,228,541,542,543,544,545,272,546,273,547,229,548,549,550,230,551,552,553,554,555,556,231,557,558,559,560,561,562,563,232,564,565,566,567,568,569,570,571,572,573,574,575,274,576,577,233,275,578,579,580,234,581,582,276,583,584,585,586,587,235,236,237,238,239,240,241,242,588,589,590,243,244,591,245,246,247,248,249,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,250,251,610,12,252,269,611,253,254,255,612,613,614],"tindex":"56daded9-3e7c-11e6-b483-afc57fb44271","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (!(typeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delegate":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl","sourcecode":"node != null"},"failures":[],"tindex":"56db05ea-3e7c-11e6-b483-338b5e28af7d","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"unbalanced"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[283,284,425,432,435,285,269],"tindex":"56db2cfb-3e7c-11e6-b483-2d34f1d07081","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"56db2cfc-3e7c-11e6-b483-494f21844a85","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (indent == null) {\n                {\n                    if ((indent.length()) == 0) {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n                    } else {\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                        com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[615],"tindex":"56db2cfd-3e7c-11e6-b483-8dbaead16815","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"56db2cfe-3e7c-11e6-b483-f5d810560c61","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56db2cff-3e7c-11e6-b483-95481af33a1d","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Time read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.util.Date java.util.Date = java.text.DateFormat.parse(in.nextString());\n        return new java.sql.Time(date.getTime());\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"56db5410-3e7c-11e6-b483-e52c5a8800e4","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56db5411-3e7c-11e6-b483-01ef9dac9904","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56db5412-3e7c-11e6-b483-c795b5a049ae","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"56db5413-3e7c-11e6-b483-2704ccb7cc08","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56db5414-3e7c-11e6-b483-91c33a2d4749","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"56db7b25-3e7c-11e6-b483-2f3ecbe31baf","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:118","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[165,166,167,168,169,487,488,490,491,492,191],"tindex":"56db7b26-3e7c-11e6-b483-275ab80a169e","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"56db7b27-3e7c-11e6-b483-e3294e751d88","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"56db7b28-3e7c-11e6-b483-619f835e5f3e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[616,617],"tindex":"56db7b29-3e7c-11e6-b483-6121eac6b211","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if ((property.length()) == 0) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"56db7b2a-3e7c-11e6-b483-c14caa7da1f0","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context","b":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"56dba23b-3e7c-11e6-b483-e1149fa004e4","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    if (jsonTree == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n                return read(jsonReader);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56dba23c-3e7c-11e6-b483-6f5752d4082a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[],"tindex":"56dba23d-3e7c-11e6-b483-abfc01125c20","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (name == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n                    return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                        final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                        @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                        @java.lang.Override\n                        void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = field.get(value);\n                            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                            t.write(writer, fieldValue);\n                        }\n\n                        @java.lang.Override\n                        void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                            if ((fieldValue != null) || (!isPrimitive)) {\n                                field.set(value, fieldValue);\n                            } \n                        }\n\n                        public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                            if (!(boolean))\n                                return false;\n                            \n                            java.lang.Object java.lang.Object = field.get(value);\n                            return fieldValue != value;\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1422","type":"CtUnaryOperatorImpl","sourcecode":"!(lenient)"},"failures":[],"tindex":"56dba23e-3e7c-11e6-b483-bb078c9e2349","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"unlink"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56dbc94f-3e7c-11e6-b483-9d0876adb940","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[618,619,620,621,622,257,615,623,624,316,70,71,72,73,339,111,112,113,117,118,123,3,184,185,186,191,193,508,211,212],"tindex":"56dbc950-3e7c-11e6-b483-217ccbbc0366","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[],"tindex":"56dbc951-3e7c-11e6-b483-c13e404311e8","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"56dbf062-3e7c-11e6-b483-7baee5a15cf3","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[],"tindex":"56dbf063-3e7c-11e6-b483-eb6c768afaad","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"56dbf064-3e7c-11e6-b483-078b9e79960a","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if ((property.length()) == 0) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    add(property, createJsonElement(value));\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl","sourcecode":"!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[315,387,392],"tindex":"56dc1775-3e7c-11e6-b483-fb84690d9d21","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (!(src instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56dc1776-3e7c-11e6-b483-471094e6d4e0","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:591","type":"CtBinaryOperatorImpl","sourcecode":"result != (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[625,626,627,628,629,630,631,17,18,19,632,20,633,21,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,0,1,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,23,24,306,307,308,309,25,312,27,29,31,33,34,35,315,37,38,39,40,41,43,44,45,47,49,50,51,52,54,55,56,59,61,64,317,65,318,322,323,324,325,66,328,68,330,69,332,337,338,76,341,77,78,343,346,350,79,80,355,359,2,362,364,86,370,371,372,374,375,88,377,89,90,378,379,91,381,383,386,92,93,94,96,97,98,388,389,99,100,101,390,104,105,107,393,108,109,114,115,116,121,122,406,417,426,457,468,473,477,125,126,129,132,135,668,137,139,142,144,145,669,147,150,152,153,155,160,163,3,164,165,166,167,169,170,171,172,173,174,175,486,176,177,178,487,179,670,671,672,673,674,675,676,677,678,4,5,6,7,8,9,10,11,184,186,188,189,190,191,192,194,196,199,200,201,509,203,510,511,513,514,515,516,517,520,521,522,286,204,206,528,530,207,208,209,210,215,217,219,220,222,225,541,272,549,553,556,562,232,565,566,574,576,233,234,235,238,239,242,243,244,245,246,247,248,249,600,250,616,617,251,12,252,269,611,253,612,613],"tindex":"56dc1777-3e7c-11e6-b483-f99c35568d55","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty != empty) {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"empty","com.google.gson.stream.JsonReader.PEEKED_NONE":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56dc1778-3e7c-11e6-b483-d37a187c7fd2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"56dc3e89-3e7c-11e6-b483-51efd3dfa394","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfT","b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"56dc3e8a-3e7c-11e6-b483-db0df32c3603","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator != null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[587,235,236,237,238,239,240,241,242,588,679,680,681],"tindex":"56dc3e8b-3e7c-11e6-b483-89884437fb1a","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (until != null) {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"until"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56dc3e8c-3e7c-11e6-b483-43245823e6d1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56dc3e8d-3e7c-11e6-b483-a7fe0137f06c","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"56dc3e8e-3e7c-11e6-b483-c1758faafcea","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[626,627,628,289,20,21,658,663,23,24,27,29,33,35,315,37,38,39,40,41,43,44,45,47,49,51,56,61,64,65,318,323,66,68,69,332,341,77,78,346,348,349,355,2,372,90,379,386,98,99,100,115,121,399,417,434,438,439,263,451,453,264,265,457,460,462,465,262,266,466,467,468,267,473,268,477,479,125,129,137,139,142,144,145,150,152,155,160,163,3,175,486,176,177,178,670,671,672,673,674,675,676,677,4,5,6,7,8,9,10,11,189,190,191,192,194,196,199,200,203,511,517,522,286,204,530,209,210,215,217,219,220,222,225,541,544,549,232,234,235,238,239,242,245,246,247,248,249,250,251,12,269,682,683,613],"tindex":"56dc659f-3e7c-11e6-b483-eb834ac2f838","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[392],"tindex":"56dc65a0-3e7c-11e6-b483-0f08bbad63a2","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src != null) {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:94","type":"CtBinaryOperatorImpl","sourcecode":"primitive instanceof java.lang.Character"},"failures":[],"tindex":"56dc65a1-3e7c-11e6-b483-f3cf2bb588ea","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Character) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56dc65a2-3e7c-11e6-b483-1943504eb90b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"56dc65a3-3e7c-11e6-b483-8d2bc102fc78","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value != null) {\n                        {\n                            if (value == null) {\n                                return nullValue();\n                            } \n                            put(new com.google.gson.JsonPrimitive(value));\n                            return com.google.gson.internal.bind.JsonTreeWriter.this;\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)"},"failures":[],"tindex":"56dc8cb4-3e7c-11e6-b483-d38972e84fc1","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108","type":"CtMethodImpl","sourcecode":"public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if ((value instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (!(boolean))\n                return false;\n            \n            java.lang.Object java.lang.Object = field.get(value);\n            return fieldValue != value;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"56dc8cb5-3e7c-11e6-b483-273915bd001c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl","sourcecode":"generateNonExecutableJson"},"failures":[],"tindex":"56dc8cb6-3e7c-11e6-b483-5376338f1bbb","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"56dc8cb7-3e7c-11e6-b483-51a91f10bcfb","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467260193413/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":80,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
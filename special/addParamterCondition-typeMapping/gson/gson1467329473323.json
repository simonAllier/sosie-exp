{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":84,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":217,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":20,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":154,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":63,"com.google.gson.functional.PrimitiveTest.testShortSerialization":360,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":256,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":267,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":73,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":146,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":91,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":79,"com.google.gson.MixedStreamTest.testWriteLenient":308,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":96,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":117,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":101,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":266,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":64,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":65,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":68,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":105,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":115,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":262,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":40,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":280,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":303,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":49,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":227,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":363,"com.google.gson.functional.ObjectTest.testSingletonLists":113,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":82,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":110,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":194,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":234,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":6,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":247,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":289,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":366,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":128,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":326,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":140,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":176,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":189,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":30,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":31,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":249,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":147,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":19,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":178,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":144,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":120,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":23,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":319,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":210,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":66,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":90,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":225,"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse":269,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":58,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":231,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":285,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":237,"com.google.gson.functional.JsonTreeTest.testToJsonTree":205,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":232,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":322,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":186,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":192,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":304,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":56,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":347,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":329,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":364,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":13,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":264,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":228,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":159,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":27,"com.google.gson.functional.MapTest.testGeneralMapField":61,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":118,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":197,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":15,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":171,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":271,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":125,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":258,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":359,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":354,"com.google.gson.MixedStreamTest.testReadMixedStreamed":5,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":298,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":265,"com.google.gson.JsonObjectTest.testDeepCopy":305,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":174,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":135,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":236,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":257,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":291,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":109,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":221,"com.google.gson.JsonParserTest.testParseString":261,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":11,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":93,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":330,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":351,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":284,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":279,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":137,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":365,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":24,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":80,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":34,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":276,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":248,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":215,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":167,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":238,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":312,"com.google.gson.functional.ObjectTest.testNestedDeserialization":145,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":175,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":156,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":180,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":352,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":162,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":134,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":7,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":9,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":121,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":78,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":286,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":44,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":111,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":358,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":183,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":47,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":83,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":104,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":340,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":295,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":212,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":275,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":281,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":60,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":10,"com.google.gson.functional.MapTest.testInterfaceTypeMap":59,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":369,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":173,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":185,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":200,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":307,"com.google.gson.functional.CollectionTest.testSetDeserialization":67,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":41,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":71,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":325,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":124,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":216,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":48,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":129,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":46,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":242,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":12,"com.google.gson.MixedStreamTest.testWriteClosed":4,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":158,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":195,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":119,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":188,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":355,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":50,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":184,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":165,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":142,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":161,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":153,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":206,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":95,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":122,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":191,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":339,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":35,"com.google.gson.functional.MapTest.testMapSerialization":335,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":155,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":273,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":25,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":99,"com.google.gson.functional.MapTest.testSerializeMaps":334,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":37,"com.google.gson.functional.MapTest.testComplexKeysSerialization":62,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":214,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":272,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":246,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":288,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":293,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":318,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":148,"com.google.gson.stream.JsonWriterTest.testNumbers":370,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":72,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":199,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":233,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":202,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":243,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":201,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":218,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":164,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":21,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":36,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":244,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":74,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":57,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":136,"com.google.gson.functional.MapTest.testStringKeyDeserialization":287,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":143,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":252,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":362,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":1,"com.google.gson.functional.MapTest.testRawMapSerialization":336,"com.google.gson.JsonParserTest.testParseReader":260,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":337,"com.google.gson.functional.PrettyPrintingTest.testMap":320,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":327,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":131,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":207,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":338,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":157,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":29,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":331,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":0,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":300,"com.google.gson.functional.PrimitiveTest.testByteSerialization":357,"com.google.gson.ObjectTypeAdapterTest.testSerialize":239,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":254,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":220,"com.google.gson.JavaSerializationTest.testMapIsSerializable":259,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":309,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":102,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":152,"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails":268,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":348,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":367,"com.google.gson.functional.FieldNamingTest.testIdentity":100,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":317,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":97,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":51,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":296,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":166,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":342,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":77,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":112,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":204,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":368,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":70,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":371,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":294,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":341,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":85,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":346,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":39,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":241,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":297,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":151,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":42,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":141,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":22,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":55,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":106,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":350,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":123,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":2,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":224,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":94,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":193,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":45,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":349,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":127,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":343,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":170,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":33,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":103,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":177,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":213,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":250,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":314,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":211,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":168,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":87,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":107,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":86,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":278,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":253,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":324,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":130,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":240,"com.google.gson.functional.ObjectTest.testNestedSerialization":132,"com.google.gson.internal.LinkedTreeMapTest.testClear":263,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":270,"com.google.gson.JsonObjectTest.testAddingStringProperties":306,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":14,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":344,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":76,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":345,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":28,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":18,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":114,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":316,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":290,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":126,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":43,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":198,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":301,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":116,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":230,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":187,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":108,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":16,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":163,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":92,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":88,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":133,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":32,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":328,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":38,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":54,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":361,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":26,"com.google.gson.functional.CollectionTest.testSetSerialization":69,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":172,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":179,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":321,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":223,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":75,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":149,"com.google.gson.JsonParserTest.testParseMixedArray":245,"com.google.gson.MixedStreamTest.testWriteInvalidState":3,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":251,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":160,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":17,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":150,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":356,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":8,"com.google.gson.functional.MapTest.testMapDeserialization":283,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":292,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":98,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":299,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":196,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":323,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":302,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":333,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":226,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":310,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":190,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":229,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":169,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":219,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":277,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":203,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":89,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":313,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":52,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":139,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":208,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":255,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":282,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":182,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":53,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":315},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[0],"tindex":"bbc5f13d-3f1a-11e6-961f-a9f868c8bc42","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if (property != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242],"tindex":"bbc63f5e-3f1a-11e6-961f-7b066d969a7b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl"},"failures":[243,82,244],"tindex":"bbc6666f-3f1a-11e6-961f-0bdabb7aac97","method":{"position":"com.google.gson.internal.LinkedTreeMap:217","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V>.com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbc68d80-3f1a-11e6-961f-21f03d620cd2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((key instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbc68d81-3f1a-11e6-961f-71f29b192425","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:278","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbc68d82-3f1a-11e6-961f-0d1a048cb4ad","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"node":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbc6b493-3f1a-11e6-961f-fb422918eaa0","method":{"position":"com.google.gson.Gson:468","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src) {\n    if (src instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            return toJsonTree(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbc6b494-3f1a-11e6-961f-0b3d21389745","method":{"position":"com.google.gson.internal.bind.TypeAdapters:635","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.Locale value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[245,246,247,248,249,23,250,63,101,102,103,104,251,177,252,178,253,203,254,255,256,235,237,238,257,258],"tindex":"bbc6dba5-3f1a-11e6-961f-7900ab4c32f9","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    if (element instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbc6dba6-3f1a-11e6-961f-95d30fb80659","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"bbc6dba7-3f1a-11e6-961f-b374fd05c0f0","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key.getRawType().equals(key.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key","to":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbc702b8-3f1a-11e6-961f-edd1780d9bef","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonArray) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbc702b9-3f1a-11e6-961f-47a24036c7fa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbc702ba-3f1a-11e6-961f-3538e9d54323","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbc729cb-3f1a-11e6-961f-6b4f9aebbdb7","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"bbc729cc-3f1a-11e6-961f-278bcf39ba9e","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbc729cd-3f1a-11e6-961f-7f95abca9426","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:358","type":"CtUnaryOperatorImpl"},"failures":[259,260,261,7,262,263,264,265,266,267,268,269,270,243,247,248,249,271,272,273,23,274,25,26,27,28,275,29,276,277,250,278,279,280,281,282,283,284,285,286,287,288,63,289,70,79,80,81,82,83,290,291,292,101,102,103,104,106,107,154,159,164,165,293,294,295,296,177,252,178,253,180,181,182,186,187,192,194,202,203,204,205,254,255,297,256,235,237,238,298,299,300,301,257,302,303,304,244,0,305,306,258,307],"tindex":"bbc729ce-3f1a-11e6-961f-eb9a9356871c","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (!create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"changed":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[1,2,308,309,310,311,7,312,313,247,314,315,316,317,15,318,18,319,320,20,21,321,322,323,22,23,24,324,325,326,327,328,329,330,331,30,33,34,37,38,332,39,40,41,42,250,44,45,46,47,48,50,51,52,54,56,333,334,335,61,336,337,64,65,338,339,66,68,69,340,70,73,74,77,84,87,341,342,292,93,95,96,97,98,99,100,106,107,110,112,116,124,126,129,131,132,137,139,142,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,153,155,157,162,163,166,167,252,178,179,253,367,368,184,190,194,195,203,207,212,217,220,221,222,223,235,237,238,239,369,370,371],"tindex":"bbc777ef-3f1a-11e6-961f-af221b35bb13","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"bbc777f0-3f1a-11e6-961f-8f40e257d695","method":{"position":"com.google.gson.stream.JsonReader:1572","type":"CtMethodImpl","sourcecode":"private java.io.IOException syntaxError(java.lang.String message) throws java.io.IOException {\n    if (message != null) {\n        {\n            throw new com.google.gson.stream.MalformedJsonException(((((((message + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())) + \" path \") + (getPath())));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467329080997/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"message"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":20,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":260,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":350,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":375,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":122,"com.google.gson.stream.JsonWriterTest.testRepeatedName":372,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":42,"com.google.gson.MixedStreamTest.testWriteLenient":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":324,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":82,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":67,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":77,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":41,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":289,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":226,"com.google.gson.functional.ObjectTest.testSingletonLists":190,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":320,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":351,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":30,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":27,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":211,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":244,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":14,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":240,"com.google.gson.functional.EnumTest.testEnumCaseMapping":40,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":349,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":368,"com.google.gson.functional.JsonTreeTest.testToJsonTree":6,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":249,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":153,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":58,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":303,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":135,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":378,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":74,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":214,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":24,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":180,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":199,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":1,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":238,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":127,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":23,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":224,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":334,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":131,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":172,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":0,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":205,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":319,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":65,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":294,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":120,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":173,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":204,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":271,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":22,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":342,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":46,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":158,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":146,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":314,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":126,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":2,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":227,"com.google.gson.functional.EnumTest.testEnumSet":34,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":195,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":53,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":88,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":104,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":388,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":200,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":13,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":51,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":33,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":235,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":176,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":343,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":59,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":258,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":292,"com.google.gson.functional.MapTest.testMapSerialization":109,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":261,"com.google.gson.functional.MapTest.testSerializeMaps":103,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":347,"com.google.gson.functional.MapTest.testComplexKeysSerialization":118,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":282,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":216,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":142,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":381,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":31,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":10,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":247,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":43,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":90,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":184,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":121,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":230,"com.google.gson.functional.PrettyPrintingTest.testMap":245,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":70,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":300,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":26,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":355,"com.google.gson.functional.CollectionTest.testQueueSerialization":71,"com.google.gson.functional.MapTest.testMapSerializationEmpty":119,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":311,"com.google.gson.functional.MapTest.testMapOfMapSerialization":108,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":164,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":169,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":96,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":12,"com.google.gson.functional.FieldNamingTest.testIdentity":348,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":352,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":263,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":5,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":45,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":84,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":189,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":15,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":124,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":353,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":167,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":21,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":333,"com.google.gson.functional.MapTest.testMapSubclassSerialization":102,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":183,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":255,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":232,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":335,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":362,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":383,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":50,"com.google.gson.functional.EnumTest.testEnumSubclass":37,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":170,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":28,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":154,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":123,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":89,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":210,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":144,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":20,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":380,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":165,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":328,"com.google.gson.MixedStreamTest.testWriteNulls":363,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":277,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":273,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":215,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":93,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":191,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":286,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":111,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":354,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":223,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":57,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":330,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":252,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":157,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":8,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":283,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":389,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":161,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":220,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":177,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":313,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":250,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":101,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":105,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":151,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":137,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":134,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":4,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":198,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":206,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":61,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":233,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":304,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":66,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":209,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":110,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":246,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":332,"com.google.gson.functional.PrimitiveTest.testShortSerialization":181,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":139,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":11,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":242,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":379,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":306,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":344,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":36,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":69,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":254,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":376,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":81,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":185,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":384,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":188,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":44,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":296,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":336,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":91,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":39,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":62,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":291,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":75,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":228,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":133,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":318,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":308,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":140,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":149,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":168,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":186,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":99,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":35,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":136,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":385,"com.google.gson.functional.MapTest.testGeneralMapField":115,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":270,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":125,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":229,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":325,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":113,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":130,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":297,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":175,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":162,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":16,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":78,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":316,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":340,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":94,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":187,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":267,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":338,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":371,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":315,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":387,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":98,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":203,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":212,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":143,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":239,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":285,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":49,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":179,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":386,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":86,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":80,"com.google.gson.functional.ObjectTest.testNullSerialization":196,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":64,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":114,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":155,"com.google.gson.functional.MapTest.testInterfaceTypeMap":112,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":231,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":148,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":243,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":298,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":237,"com.google.gson.MixedStreamTest.testWriteClosed":367,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":73,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":192,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":54,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":147,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":288,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":208,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":331,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":152,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":193,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":72,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":339,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":76,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":321,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":218,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":160,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":3,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":217,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":268,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":287,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":163,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":329,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":106,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":310,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":132,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":68,"com.google.gson.functional.MapTest.testRawMapSerialization":117,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":361,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":60,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":201,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":141,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":17,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":19,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":29,"com.google.gson.functional.PrimitiveTest.testByteSerialization":178,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":272,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":359,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":128,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":83,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":278,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":345,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":55,"com.google.gson.functional.MapTest.testMapWithQuotes":107,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":301,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":87,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":97,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":299,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":225,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":47,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":7,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":251,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":307,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":302,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":85,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":309,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":337,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":32,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":48,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":327,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":63,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":265,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":256,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":95,"com.google.gson.functional.ObjectTest.testNestedSerialization":202,"com.google.gson.internal.LinkedTreeMapTest.testClear":377,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":100,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":129,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":159,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":266,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":116,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":253,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":295,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":25,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":366,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":197,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":150,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":369,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":356,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":276,"com.google.gson.functional.CollectionTest.testSetSerialization":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":92,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":248,"com.google.gson.functional.StringTest.testStringValueSerialization":357,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":358,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":219,"com.google.gson.MixedStreamTest.testWriteInvalidState":364,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":194,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":280,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":341,"com.google.gson.stream.JsonWriterTest.testBooleans":370,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":305,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":346,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":382,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":213,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":236,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":56,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":322,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":9,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":360,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":374,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":274},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[0,1,2],"tindex":"94b5c7af-3e77-11e6-b939-5787f55d6782","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1368","type":"CtUnaryOperatorImpl","sourcecode":"!charsLoaded"},"failures":[3,4,5,6],"tindex":"94b614d0-3e77-11e6-b939-0b704f9b96cf","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"charsLoaded":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:288","type":"CtBinaryOperatorImpl","sourcecode":"left != null"},"failures":[7,8,9,10],"tindex":"94b63be1-3e77-11e6-b939-170903add9bf","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:132","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"94b63be2-3e77-11e6-b939-411b8d7db34c","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:325","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"94b63be3-3e77-11e6-b939-9d6c4e1e5c69","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.TypeVariable) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,3,4,5,6,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369],"tindex":"94b6b114-3e77-11e6-b939-6ba04d769673","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"94b77465-3e77-11e6-b939-ad8d071de339","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"94b77466-3e77-11e6-b939-b3a82e0c6456","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:793","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME)"},"failures":[],"tindex":"94b77467-3e77-11e6-b939-9d91e0948adc","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (timeStyle == timeStyle) {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED_NAME":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"94b79b78-3e77-11e6-b939-a73e0ea4cae8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[22,370,371,372,373,374,375,30,33,53,67,75,77,151,162,163,191,197,200,202,205,206,208,247,251,256,263,264,267,279,290,294,4,337,358],"tindex":"94b79b79-3e77-11e6-b939-b1f1de217a82","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"94b79b7a-3e77-11e6-b939-6316d23d9572","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"94b79b7b-3e77-11e6-b939-e504b6e2bbe1","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"94b7c28c-3e77-11e6-b939-f114f63f5d17","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:292","type":"CtBinaryOperatorImpl","sourcecode":"(parent.left) == node"},"failures":[376,377,378,379,380,381,382,383,384,260,385,4],"tindex":"94b7c28d-3e77-11e6-b939-73545b50ab02","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root == root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root","node":"root","left":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:138","type":"CtBinaryOperatorImpl","sourcecode":"(peek()) != expected"},"failures":[],"tindex":"94b7c28e-3e77-11e6-b939-4114b73d9726","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    return java.lang.reflect.Field.get(instance);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"expected":"instance","this":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"94b7e99f-3e77-11e6-b939-1bb90a260c13","method":{"position":"com.google.gson.Gson:576","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    try {\n        com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n        toJson(src, typeOfSrc, jsonWriter);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"94b7e9a0-3e77-11e6-b939-4d17c009f792","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[13,14,15,16,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,386,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,146,147,148,151,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,289,290,291,292,293,294,4,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,368,369],"tindex":"94b7e9a1-3e77-11e6-b939-5b11e2d88a3f","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (writer == null) {\n                {\n                    if (writer == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (writer == null) {\n                                {\n                                    if (boolean) {\n                                        writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n                                    } \n                                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n                                    if (boolean) {\n                                        jsonWriter.setIndent(\"  \");\n                                    } \n                                    jsonWriter.setSerializeNulls(boolean);\n                                    return jsonWriter;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.WildcardType)"},"failures":[],"tindex":"94b837c2-3e77-11e6-b939-f1e177ab2634","method":{"position":"com.google.gson.internal.$Gson$Types:277","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type array) {\n    return array instanceof java.lang.reflect.GenericArrayType ? ((java.lang.reflect.GenericArrayType)(array)).getGenericComponentType() : ((java.lang.Class<?>)(array)).getComponentType();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"array"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:467","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[],"tindex":"94b837c3-3e77-11e6-b939-877e6901a591","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"empty","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:83","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.util.Date.class)"},"failures":[],"tindex":"94b837c4-3e77-11e6-b939-0d627e14c197","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:74","type":"CtMethodImpl","sourcecode":"private java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type type, java.lang.Object value) {\n    if (value == type) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((value != null) && (((type == (java.lang.Object.java.lang.Object.java.lang.Class)) || (type instanceof java.lang.reflect.TypeVariable<?>)) || (type instanceof java.lang.Class<?>))) {\n                type = value.getClass();\n            } \n            return type;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"value","java.util.Date.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"94b85ed5-3e77-11e6-b939-3b0b2622cba6","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (writer == null) {\n                {\n                    if (writer == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (writer == null) {\n                                {\n                                    if (boolean) {\n                                        writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n                                    } \n                                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n                                    if (boolean) {\n                                        jsonWriter.setIndent(\"  \");\n                                    } \n                                    jsonWriter.setSerializeNulls(boolean);\n                                    return jsonWriter;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl","sourcecode":"(!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"94b85ed6-3e77-11e6-b939-871d15db81a4","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if ((!(src.isJsonNull())) && ((src.peek()) != src)) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","jsonReader":"src","element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"94b85ed7-3e77-11e6-b939-456bc3e973e3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"94b85ed8-3e77-11e6-b939-af9934ade7f7","method":{"position":"com.google.gson.internal.$Gson$Types:267","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSupertype(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.Class<?> supertype) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(supertype.isAssignableFrom(contextRawType));\n    return com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, supertype));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"supertype"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[],"tindex":"94b85ed9-3e77-11e6-b939-8b136e697b63","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[387,388,329],"tindex":"94b885ea-3e77-11e6-b939-6bd59a23939f","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException ignored) {\n            }\n            try {\n                return java.text.DateFormat.parse(json);\n            } catch (java.text.ParseException e) {\n                throw new com.google.gson.JsonSyntaxException(json , e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"94b885eb-3e77-11e6-b939-57327a358e72","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (writer == null) {\n                {\n                    if (writer == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (writer == null) {\n                                {\n                                    if (boolean) {\n                                        writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n                                    } \n                                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n                                    if (boolean) {\n                                        jsonWriter.setIndent(\"  \");\n                                    } \n                                    jsonWriter.setSerializeNulls(boolean);\n                                    return jsonWriter;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"94b885ec-3e77-11e6-b939-0be2ba939c66","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((key instanceof java.lang.reflect.ParameterizedType) && (!(key.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (removeInternalByKey(key)) != null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:181","type":"CtBinaryOperatorImpl","sourcecode":"(type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))"},"failures":[],"tindex":"94b8acfd-3e77-11e6-b939-474f9f27a6fe","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if ((key instanceof java.lang.reflect.ParameterizedType) && (!(key.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return (removeInternalByKey(key)) != null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.lang.String.class":"key","type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"94b8acfe-3e77-11e6-b939-29cde9a0e28c","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:154","type":"CtUnaryOperatorImpl","sourcecode":"!create"},"failures":[169,172,173,179,184,186,365],"tindex":"94b8acff-3e77-11e6-b939-b58bb1cc19d9","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[176,368],"tindex":"94b8d410-3e77-11e6-b939-e994d99228f3","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[389,17,48,82,83,85,86,112,115,122,143,144,145,149,150,153,211,260,287,294,3,4,6],"tindex":"94b8d411-3e77-11e6-b939-19b151e4a6e6","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"94b8d412-3e77-11e6-b939-cddd332cd8a8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"94b8d413-3e77-11e6-b939-ade6f1517cc0","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (writer == null) {\n                {\n                    if (writer == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (writer == null) {\n                                {\n                                    if (boolean) {\n                                        writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n                                    } \n                                    com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n                                    if (boolean) {\n                                        jsonWriter.setIndent(\"  \");\n                                    } \n                                    jsonWriter.setSerializeNulls(boolean);\n                                    return jsonWriter;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new java.io.IOException();\n                            }\n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"94b8fb24-3e77-11e6-b939-353c17189582","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"94b92235-3e77-11e6-b939-df2ed6427e43","method":{"position":"com.google.gson.FieldNamingPolicy:122","type":"CtMethodImpl","sourcecode":"private static java.lang.String separateCamelCase(java.lang.String name, java.lang.String separator) {\n    if (separator == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            for (int int = 0 ; i < (name.length()) ; i++) {\n                char char = name.charAt(i);\n                if ((java.lang.Character.isUpperCase(character)) && ((translation.length()) != 0)) {\n                    translation.append(separator);\n                } \n                translation.append(character);\n            }\n            return translation.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"separator"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"94b92236-3e77-11e6-b939-bd9c467ef1e3","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2029'"},"failures":[],"tindex":"94b92237-3e77-11e6-b939-bfb62990e71d","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if (quote == '\\u2029') {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl","sourcecode":"lowerBound != (originalLowerBound[0])"},"failures":[],"tindex":"94b92238-3e77-11e6-b939-49aee03512c0","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value != (value[0])) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"value","lowerBound":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:182","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))"},"failures":[],"tindex":"94b94949-3e77-11e6-b939-639e06d561fa","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(d))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"d":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"94b9494a-3e77-11e6-b939-9df5f7ee506b","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"94b9494b-3e77-11e6-b939-15e7eb7f5db3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"94b9494c-3e77-11e6-b939-d969583bf51f","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key != null) {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467258651357/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":46,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
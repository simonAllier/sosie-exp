{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":77,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":305,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":131,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":140,"com.google.gson.stream.JsonWriterTest.testRepeatedName":128,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":339,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":71,"com.google.gson.MixedStreamTest.testWriteLenient":161,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":54,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":367,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":379,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":32,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":53,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":120,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":337,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":384,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":321,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":26,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":105,"com.google.gson.functional.ObjectTest.testSingletonLists":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":363,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":385,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":306,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":88,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":61,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":117,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":238,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":19,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":7,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":297,"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality":251,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":200,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":500,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":253,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":199,"com.google.gson.functional.EnumTest.testEnumCaseMapping":336,"com.google.gson.GenericArrayTypeTest.testNotEquals":252,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":270,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":304,"com.google.gson.functional.JsonTreeTest.testToJsonTree":474,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":302,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":466,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":184,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":350,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":172,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":492,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":141,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":90,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":59,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":133,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":426,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":258,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":281,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":451,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":64,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":499,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":320,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":375,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":102,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":132,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":418,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":412,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":291,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":399,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":362,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":39,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":194,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":17,"com.google.gson.ParameterizedTypeTest.testNotEquals":168,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":478,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":110,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":83,"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality":167,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":209,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":419,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":287,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":398,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":2,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":57,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":276,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":205,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":262,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":405,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":50,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":145,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":322,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":170,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":211,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":244,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":366,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":357,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":450,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":93,"com.google.gson.functional.CollectionTest.testSetDeserialization":34,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":177,"com.google.gson.functional.EnumTest.testEnumSet":227,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":391,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":240,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":134,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":190,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":395,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":180,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":260,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":5,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":278,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":470,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":422,"com.google.gson.functional.MapTest.testHashMapDeserialization":186,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":216,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":277,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":157,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":435,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":245,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":246,"com.google.gson.functional.MapTest.testSortedMap":202,"com.google.gson.functional.MapTest.testMapSerialization":198,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":437,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":9,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":156,"com.google.gson.functional.MapTest.testSerializeMaps":326,"com.google.gson.functional.MapTest.testComplexKeysSerialization":206,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":210,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":295,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":36,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":92,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":153,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":99,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":468,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":111,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":300,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":340,"com.google.gson.functional.MapTest.testStringKeyDeserialization":208,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":454,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":430,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":212,"com.google.gson.functional.PrettyPrintingTest.testMap":298,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":487,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":349,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":438,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":269,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":310,"com.google.gson.functional.MapTest.testMapSerializationEmpty":207,"com.google.gson.functional.CollectionTest.testQueueSerialization":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":354,"com.google.gson.functional.MapTest.testMapOfMapSerialization":328,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":410,"com.google.gson.JavaSerializationTest.testMapIsSerializable":165,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":220,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":76,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":415,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":124,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":274,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":307,"com.google.gson.functional.FieldNamingTest.testIdentity":378,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":241,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":81,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":66,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":342,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":381,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":386,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":473,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":501,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":308,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":448,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":41,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":413,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":497,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":75,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":374,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":185,"com.google.gson.functional.MapTest.testMapSubclassSerialization":325,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":429,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":31,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":46,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":265,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":315,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":489,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":87,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":25,"com.google.gson.functional.EnumTest.testEnumSubclass":230,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":416,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":60,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":118,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":402,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":447,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":453,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":96,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":344,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":42,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":461,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":496,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":237,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":38,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":411,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":129,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":370,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":52,"com.google.gson.MixedStreamTest.testWriteNulls":266,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":171,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":233,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":289,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":24,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":91,"com.google.gson.CommentsTest.testParseComments":248,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":106,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":387,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":457,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":442,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":119,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":309,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":257,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":175,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":371,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":428,"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass":163,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":10,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":404,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":159,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":439,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":408,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":360,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":423,"com.google.gson.functional.MapTest.testMapDeserialization":193,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":356,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":303,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":324,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":104,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":125,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":192,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":151,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":149,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":100,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":231,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":472,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":394,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":400,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":475,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":490,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":462,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":351,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":30,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":343,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":479,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":201,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":299,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":373,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":242,"com.google.gson.functional.PrimitiveTest.testShortSerialization":427,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":494,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":255,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":273,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":142,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":155,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":229,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":33,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":45,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":188,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":225,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":431,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":40,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":107,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":1,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":434,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":341,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":84,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":86,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":116,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":345,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":72,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":6,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":455,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":69,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":56,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":232,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":338,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":476,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":333,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":485,"com.google.gson.functional.TreeTypeAdaptersTest.initializationError":173,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":361,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":493,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":353,"com.google.gson.stream.JsonWriterTest.testNullStringValue":154,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":495,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":214,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":464,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":414,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":432,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":261,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":150,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":228,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":80,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":11,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":55,"com.google.gson.functional.MapTest.testGeneralMapField":329,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":286,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":293,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":449,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":368,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":203,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":346,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":481,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":421,"com.google.gson.MixedStreamTest.testReadMixedStreamed":0,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":195,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":409,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":108,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":222,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":502,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":49,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":254,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":164,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":359,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":196,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":323,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":187,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":433,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":458,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":8,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":318,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":358,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":234,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField":15,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":445,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":219,"com.google.gson.functional.ObjectTest.testNestedDeserialization":70,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":243,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":256,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":397,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":78,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":460,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":282,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":441,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":197,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":179,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":425,"com.google.gson.JavaSerializationTest.testListIsSerializable":166,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":383,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":224,"com.google.gson.functional.ObjectTest.testNullSerialization":392,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":477,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":189,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":139,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":403,"com.google.gson.functional.MapTest.testInterfaceTypeMap":138,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":488,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":146,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":13,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":335,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":98,"com.google.gson.MixedStreamTest.testReadClosed":160,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":491,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":347,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":280,"com.google.gson.MixedStreamTest.testWriteClosed":268,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":79,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":332,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":85,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":388,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":27,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":463,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":444,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":401,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":440,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":372,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":147,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":389,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":218,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":21,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter":14,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":319,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":97,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":221,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":364,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":73,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":407,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":471,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":94,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":284,"com.google.gson.functional.CollectionTest.testQueueDeserialization":226,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":443,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":123,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize":18,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":436,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":115,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":65,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":137,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":114,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":68,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":103,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":213,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":264,"com.google.gson.functional.MapTest.testRawMapSerialization":330,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":236,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":503,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":95,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":396,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":12,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":152,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":249,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":288,"com.google.gson.functional.PrimitiveTest.testByteSerialization":424,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":467,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":498,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":483,"com.google.gson.ObjectTypeAdapterTest.testSerialize":504,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":101,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":380,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":292,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":376,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":28,"com.google.gson.functional.MapTest.testMapWithQuotes":327,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":121,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":452,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":247,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":259,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":35,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":348,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":176,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":23,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":67,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":112,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":417,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":58,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":113,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":317,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":382,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":469,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":178,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":285,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":369,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":158,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":446,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":47,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":183,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":459,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":62,"com.google.gson.functional.ObjectTest.testNestedSerialization":122,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":283,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":406,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":480,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":313,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":204,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":314,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":296,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":162,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":272,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":239,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":393,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":465,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":48,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":44,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":43,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":63,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":20,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":311,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":135,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":82,"com.google.gson.functional.CollectionTest.testSetSerialization":334,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":301,"com.google.gson.functional.StringTest.testStringValueSerialization":312,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":456,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":482,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":37,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":144,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":215,"com.google.gson.MixedStreamTest.testWriteInvalidState":267,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":390,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":294,"com.google.gson.stream.JsonWriterTest.testBooleans":126,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":352,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":377,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":89,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject":16,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":279,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":365,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":484,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":191,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":130,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":169,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":290},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091b7b88-3f23-11e6-bd2c-c3deae4b6c4d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110],"tindex":"091bf0b9-3f23-11e6-bd2c-e123e6c46899","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:101","type":"CtMethodImpl","sourcecode":"@java.lang.Override\nvoid read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value == null) {\n        {\n            java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n            if ((fieldValue != null) || (!isPrimitive)) {\n                field.set(value, fieldValue);\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[40,111],"tindex":"091c17ca-3f23-11e6-bd2c-bbcec4d1b8a3","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[112,113,114,115,116],"tindex":"091c3edb-3f23-11e6-bd2c-458db6217ec5","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091c3edc-3f23-11e6-bd2c-41c7a700f952","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091c65ed-3f23-11e6-bd2c-a3551cbd514c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091c65ee-3f23-11e6-bd2c-e7f5f03396ed","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091c8cff-3f23-11e6-bd2c-2d161527c4e1","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl"},"failures":[117,118,2,8,119,32,120,121,45,46,122,123,124,125,88,101,102,103,110,126,127,128,129,130,131,132,133],"tindex":"091c8d00-3f23-11e6-bd2c-2ffa02c41ca2","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[134],"tindex":"091cb411-3f23-11e6-bd2c-b5d55e053453","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"091cb412-3f23-11e6-bd2c-7b78e3953bc9","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    } else {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091cb413-3f23-11e6-bd2c-ff4728588f52","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl"},"failures":[135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"091cdb24-3f23-11e6-bd2c-b1af28e9b0b5","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091cdb25-3f23-11e6-bd2c-c3e89bc5fa90","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"other","token":"other","com.google.gson.stream.JsonToken.NUMBER":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091d0236-3f23-11e6-bd2c-811ad0ef14c5","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:364","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091d0237-3f23-11e6-bd2c-7b7fb7bc26dd","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == 2) {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091d0238-3f23-11e6-bd2c-e9940acd5d1e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl"},"failures":[],"tindex":"091d0239-3f23-11e6-bd2c-4563695d2200","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091d294a-3f23-11e6-bd2c-7f30ee4e1cb6","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.FieldNamingPolicy:143","type":"CtInvocationImpl"},"failures":[155,156,157,158,96,100],"tindex":"091d294b-3f23-11e6-bd2c-7dbf056efb05","method":{"position":"com.google.gson.FieldNamingPolicy:163","type":"CtMethodImpl","sourcecode":"private static java.lang.String modifyString(char firstCharacter, java.lang.String srcString, int indexOfSubstring) {\n    if (java.lang.Character.isLetter(firstCharacter)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return indexOfSubstring < (srcString.length()) ? firstCharacter + (srcString.substring(indexOfSubstring)) : java.lang.String.valueOf(firstCharacter);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"firstCharacter":"firstCharacter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"091d294c-3f23-11e6-bd2c-7f8e90044b43","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (jsonElement.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl"},"failures":[159],"tindex":"091d294d-3f23-11e6-bd2c-c3163f6cd321","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if ((node != null) && (replacement != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node","right":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091d505e-3f23-11e6-bd2c-d36605545b4c","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,8,175,176,177,23,24,178,179,25,180,181,26,27,28,29,30,182,183,31,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,141,219,220,221,34,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,47,237,238,239,240,241,242,243,244,245,246,247,108,109,110,248,249,250,251,252],"tindex":"091d505f-3f23-11e6-bd2c-05d529a36755","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == subclass) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"subclass","rawSupertype":"subclass"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[253,254,255,7,256,257,229,258,259,260],"tindex":"091d7770-3f23-11e6-bd2c-2160ef8f73c8","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"091d7771-3f23-11e6-bd2c-abd070b5be3b","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:702","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091d7772-3f23-11e6-bd2c-e3dcd23eac24","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if ((targetSize == targetSize) || (last == targetSize)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"targetSize","last":"targetSize","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"091d7773-3f23-11e6-bd2c-751dcebd271f","method":{"position":"com.google.gson.FieldNamingPolicy:113","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"-\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091d7774-3f23-11e6-bd2c-e1c49d3c05f7","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    java.lang.Object java.lang.Object = field.get(value);\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n    t.write(writer, fieldValue);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091d9e85-3f23-11e6-bd2c-59a1626b007f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091d9e86-3f23-11e6-bd2c-c986bd39c47b","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091d9e87-3f23-11e6-bd2c-77295ef90ea4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091d9e88-3f23-11e6-bd2c-f3ceadda28f5","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if ((target.peek()) == target) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"target","com.google.gson.stream.JsonToken.NULL":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091d9e89-3f23-11e6-bd2c-1fc37d8227ec","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            if ((com.google.gson.TypeAdapter<T>) != null) {\n                throw new java.lang.AssertionError();\n            } \n            com.google.gson.TypeAdapter<T> = typeAdapter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091d9e8a-3f23-11e6-bd2c-8ffb7ab77b93","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091d9e8b-3f23-11e6-bd2c-b375a9a64a05","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName != null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[261,37,262,263],"tindex":"091dc59c-3f23-11e6-bd2c-f370c3f0f0cc","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl"},"failures":[264,265,266,267,161,162,268,269,117,118,270,271,272,2,273,274,275,276,277,278,279,280,281,282,253,254,255,261,283,284,285,286,287,288,289,290,291,135,171,292,293,294,136,295,296,297,298,299,300,301,302,303,174,304,305,306,307,308,309,310,311,312,7,256,313,8,10,314,13,315,316,317,318,319,175,320,176,321,177,23,178,179,25,180,322,181,27,28,29,182,184,323,324,325,326,190,192,137,327,328,198,201,119,138,203,139,329,204,330,206,207,209,212,140,32,213,33,331,217,218,332,141,333,221,120,222,334,224,225,35,227,228,229,230,335,232,336,337,338,339,340,341,342,262,343,344,345,346,347,348,349,121,235,350,351,352,142,112,353,113,114,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,143,369,370,115,371,372,373,374,375,155,376,377,156,378,379,380,381,382,383,45,46,47,384,385,386,51,387,388,389,390,391,392,393,394,258,395,396,122,397,398,399,400,116,401,402,403,263,404,405,406,407,408,409,123,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,73,144,74,75,76,435,436,77,437,438,439,440,441,442,443,444,81,445,446,447,448,449,450,451,452,240,453,454,455,456,457,458,459,124,259,243,460,461,462,145,463,146,464,465,125,147,466,467,88,468,469,470,89,90,91,92,94,471,472,473,474,157,95,475,476,158,477,478,479,101,480,481,102,103,482,483,484,485,486,487,488,489,490,491,148,149,492,150,151,493,494,495,152,153,246,109,110,496,497,249,250,498,499,133,260,500,501,502],"tindex":"091dc59d-3f23-11e6-bd2c-5fb33f9b68d2","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if (lenient) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091decae-3f23-11e6-bd2c-b972effaac04","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (b instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl"},"failures":[],"tindex":"091decaf-3f23-11e6-bd2c-57d9ad7607bf","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091decb0-3f23-11e6-bd2c-91e611cd39e0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091decb1-3f23-11e6-bd2c-09dd63cf0df3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091decb2-3f23-11e6-bd2c-19aae031a192","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091decb3-3f23-11e6-bd2c-fffa10962d3c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091e13c4-3f23-11e6-bd2c-4fc9d72553b8","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091e13c5-3f23-11e6-bd2c-eb68756bf891","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n                    out.value(dateFormatAsString);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091e13c6-3f23-11e6-bd2c-533922bdc27b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[264,265,2,285,290,171,292,293,295,296,297,298,299,300,301,302,303,174,8,503,316,317,318,319,175,320,176,321,177,23,178,179,25,180,322,181,27,28,29,182,184,326,198,329,330,212,32,331,218,333,120,334,224,35,340,342,343,344,155,376,377,156,378,46,47,385,387,391,393,395,122,399,400,401,422,426,428,435,77,437,441,442,444,81,445,455,456,463,125,88,470,471,472,473,474,477,479,101,102,103,482,246,109,110,504],"tindex":"091e13c7-3f23-11e6-bd2c-794cbb3e04e4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091e13c8-3f23-11e6-bd2c-2dfeae0c6bdc","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091e3ad9-3f23-11e6-bd2c-6bde8668f2e5","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if ((!(src.isJsonNull())) && ((src.peek()) != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","jsonReader":"src","element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1015","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091e3ada-3f23-11e6-bd2c-23ba3fa4422c","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == '\\\\') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"empty"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:62","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091e3adb-3f23-11e6-bd2c-932316167920","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if ((key.peek()) == key) {\n        {\n            return (findByObject(key)) != null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"key","com.google.gson.stream.JsonToken.NULL":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:861","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"091e3adc-3f23-11e6-bd2c-b7d75e692d98","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"newTop","com.google.gson.stream.JsonReader.PEEKED_FALSE":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"091e3add-3f23-11e6-bd2c-f781c9bea07d","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"091e61ee-3f23-11e6-bd2c-a39268b35257","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if (!serialize) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467332038122/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":55,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
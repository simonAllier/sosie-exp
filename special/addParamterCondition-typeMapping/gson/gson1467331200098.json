{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":25,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":111,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":20,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":188,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":431,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":52,"com.google.gson.MixedStreamTest.testWriteLenient":58,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":414,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":218,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":21,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":163,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":173,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":413,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":186,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":238,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":133,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":45,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":391,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":453,"com.google.gson.functional.ObjectTest.testSingletonLists":241,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":214,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":239,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":112,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":329,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":421,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":2,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":386,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":16,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":102,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":395,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":373,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":82,"com.google.gson.functional.EnumTest.testEnumCaseMapping":185,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":69,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":110,"com.google.gson.functional.JsonTreeTest.testToJsonTree":35,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":107,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":32,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":474,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":201,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":362,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":170,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":333,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":419,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":284,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":371,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":249,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":42,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":80,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":310,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":424,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":370,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":228,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":350,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":59,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":476,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":55,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":94,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":7,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":400,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":345,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":36,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":38,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":440,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":161,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":277,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":90,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":254,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":72,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":75,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":417,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":192,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":263,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":411,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":323,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":139,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":217,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":211,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":378,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":309,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":445,"com.google.gson.functional.CollectionTest.testSetDeserialization":396,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":134,"com.google.gson.functional.EnumTest.testEnumSet":179,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":245,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":140,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":312,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":462,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":149,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":250,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":138,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":372,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":380,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":77,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":331,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":280,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":76,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":338,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":433,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":364,"com.google.gson.functional.MapTest.testMapSerialization":153,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":297,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":383,"com.google.gson.functional.MapTest.testSerializeMaps":148,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":232,"com.google.gson.functional.MapTest.testComplexKeysSerialization":159,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":73,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":100,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":335,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":397,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":363,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":449,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":330,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":46,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":105,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":189,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":464,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":314,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":60,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":162,"com.google.gson.functional.PrettyPrintingTest.testMap":103,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":356,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":198,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":435,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":68,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":116,"com.google.gson.functional.MapTest.testMapSerializationEmpty":160,"com.google.gson.functional.CollectionTest.testQueueSerialization":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":208,"com.google.gson.functional.MapTest.testMapOfMapSerialization":152,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":269,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":274,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":295,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":320,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":113,"com.google.gson.functional.FieldNamingTest.testIdentity":233,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":303,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":426,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":191,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":234,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":240,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":337,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":374,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":475,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":114,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":307,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":272,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":403,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":227,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":294,"com.google.gson.functional.MapTest.testMapSubclassSerialization":147,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":287,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":236,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":393,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":63,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":125,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":358,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":53,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":444,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":137,"com.google.gson.functional.EnumTest.testEnumSubclass":182,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":275,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":3,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":420,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":259,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":43,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":306,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":313,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":446,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":194,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":404,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":28,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":366,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":270,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":399,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":10,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":222,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":412,"com.google.gson.MixedStreamTest.testWriteNulls":64,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":95,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":92,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":334,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":390,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":242,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":317,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":456,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":301,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":381,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":115,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":155,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":130,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":144,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":224,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":286,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":122,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":44,"com.google.gson.JsonParserTest.testParseMixedArray":12,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":262,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":463,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":298,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":472,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":15,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":266,"com.google.gson.JsonArrayTest.testRemove":56,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":293,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":213,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":281,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":210,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":108,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":51,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":48,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":452,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":150,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":326,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":455,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":361,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":450,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":406,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":248,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":256,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":340,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":359,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":202,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":392,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":47,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":193,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":346,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":104,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":154,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":226,"com.google.gson.functional.PrimitiveTest.testShortSerialization":285,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":467,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":84,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":278,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":204,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":229,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":181,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":165,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":235,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":177,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":288,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":401,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":459,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":377,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":290,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":190,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":257,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":441,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":443,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":195,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":432,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":315,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":429,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":416,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":184,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":187,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":342,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":407,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":354,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":469,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":6,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":4,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":365,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":458,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":30,"com.google.gson.JsonArrayTest.testSet":11,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":273,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":61,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":85,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":180,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":454,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":437,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":384,"com.google.gson.functional.MapTest.testGeneralMapField":19,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":415,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":49,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":89,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":97,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":308,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":355,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":479,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":219,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":196,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":261,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":349,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":279,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":0,"com.google.gson.MixedStreamTest.testReadMixedStreamed":376,"com.google.gson.JsonObjectTest.testDeepCopy":57,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":40,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":267,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":174,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":375,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":460,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":410,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":83,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":379,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":212,"com.google.gson.JsonArrayTest.testDeepCopy":14,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":146,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":289,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":318,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":121,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":128,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":5,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":304,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":322,"com.google.gson.functional.ObjectTest.testNestedDeserialization":430,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":119,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":253,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":434,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":27,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":81,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":300,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":13,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":471,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":136,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":283,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":341,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":24,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":402,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":176,"com.google.gson.functional.ObjectTest.testNullSerialization":246,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":344,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":157,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":260,"com.google.gson.functional.MapTest.testInterfaceTypeMap":18,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":357,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":325,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":124,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":183,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":478,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":360,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":448,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":197,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":79,"com.google.gson.MixedStreamTest.testWriteClosed":67,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":169,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":436,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":243,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":442,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":141,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":324,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":302,"com.google.gson.stream.JsonWriterTest.testLongs":8,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":258,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":225,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":244,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":327,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":168,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":388,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":129,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":447,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":172,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":41,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":215,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":291,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":265,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":33,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":87,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":336,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":26,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":268,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":470,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":223,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":389,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":394,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":207,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":351,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":428,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":164,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":62,"com.google.gson.functional.MapTest.testRawMapSerialization":158,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":251,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":339,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":385,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":468,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":37,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":91,"com.google.gson.functional.PrimitiveTest.testByteSerialization":282,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":328,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":369,"com.google.gson.ObjectTypeAdapterTest.testSerialize":461,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":347,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":22,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":96,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":230,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":142,"com.google.gson.functional.MapTest.testMapWithQuotes":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":199,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":311,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":321,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":178,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":54,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":132,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":135,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":427,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":205,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":276,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":99,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":200,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":23,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":127,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":206,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":17,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":88,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":221,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":343,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":305,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":237,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":473,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":477,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":319,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":422,"com.google.gson.functional.ObjectTest.testNestedSerialization":252,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":86,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":264,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":348,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":120,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":466,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":123,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":101,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":66,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":71,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":247,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":31,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":408,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":405,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":423,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":387,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":117,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":465,"com.google.gson.functional.CollectionTest.testSetSerialization":175,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":439,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":106,"com.google.gson.functional.StringTest.testStringValueSerialization":118,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":316,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":352,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":292,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":398,"com.google.gson.MixedStreamTest.testWriteInvalidState":65,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":98,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":203,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":1,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":231,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":332,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":438,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":39,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":78,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":216,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":353,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":93},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c1046c1b-3f1e-11e6-80c0-5311d7413e1b","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            out.value(value.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:125","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c104e14c-3f1e-11e6-80c0-d9385422eb7e","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json instanceof com.google.gson.JsonObject) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c104e14d-3f1e-11e6-80c0-a9f34d39ffab","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[0,1],"tindex":"c105085e-3f1e-11e6-80c0-f1d0a8eeec68","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1052f6f-3f1e-11e6-80c0-935e358eeec3","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[2,3,4,5,6,7,8,9,10],"tindex":"c1052f70-3f1e-11e6-80c0-3bf5a97ec33b","method":{"position":"com.google.gson.stream.JsonWriter:476","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write(java.lang.Long.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1052f71-3f1e-11e6-80c0-9d6f33bb617a","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:912","type":"CtBinaryOperatorImpl"},"failures":[11],"tindex":"c1055682-3f1e-11e6-80c0-d1e5baea437e","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"index"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:558","type":"CtBinaryOperatorImpl"},"failures":[12,13,11,14],"tindex":"c1055683-3f1e-11e6-80c0-e53c5534ff83","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i < i) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"i","length":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"tindex":"c1057d94-3f1e-11e6-80c0-fbed722de953","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:392","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c105a4a5-3f1e-11e6-80c0-5599b524f8b2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (offset == 0) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:79","type":"CtUnaryOperatorImpl"},"failures":[12,13,38,39,15,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,11,14,56,57],"tindex":"c105a4a6-3f1e-11e6-80c0-5f4e11490716","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (!(element instanceof com.google.gson.JsonPrimitive)) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[58,59,60,61],"tindex":"c105cbb7-3f1e-11e6-80c0-17b625ae0447","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c105cbb8-3f1e-11e6-80c0-3958921cb663","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"writer","value":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c105cbb9-3f1e-11e6-80c0-1f37843d5321","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((com.google.gson.JsonPrimitive.this) == obj) {\n        return true;\n    } \n    if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n        return false;\n    } \n    com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n    if ((java.lang.Object) == null) {\n        return (other.java.lang.Object) == null;\n    } \n    if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n        return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n    } \n    if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n        double double = getAsNumber().doubleValue();\n        double double = other.getAsNumber().doubleValue();\n        return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n    } \n    return java.lang.Object.equals(other.java.lang.Object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c105f2ca-3f1e-11e6-80c0-a7c619c9eb51","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c105f2cb-3f1e-11e6-80c0-436d67f9e8b3","method":{"position":"com.google.gson.internal.$Gson$Types:471","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.ParameterizedType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl.this, ((java.lang.reflect.ParameterizedType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c10619dc-3f1e-11e6-80c0-7d28d6f31fd6","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"jsonElement","this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:332","type":"CtVariableReadImpl"},"failures":[62,63,64,65,58,66,67,68,2,3,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,16,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,17,136,137,138,139,140,141,142,143,144,145,146,51,147,148,149,150,151,152,153,154,155,18,156,157,19,158,159,160,161,162,20,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,54,198,199,200,201,202,203,204,205,4,206,207,208,209,210,211,5,212,213,6,7,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,21,22,234,23,24,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,59,277,278,279,280,281,282,283,284,285,286,287,60,288,61,289,290,291,292,293,294,295,296,297,298,299,300,301,26,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,27,28,29,323,324,325,30,31,326,327,32,328,329,330,331,332,333,334,335,336,33,34,337,35,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,36,366,367,37,368,369,370,371,372,373,374,375],"tindex":"c10619dd-3f1e-11e6-80c0-35aba8355217","method":{"position":"com.google.gson.stream.JsonWriter:268","type":"CtMethodImpl","sourcecode":"public final void setSerializeNulls(boolean serializeNulls) {\n    if (serializeNulls) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = serializeNulls;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeNulls"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c10640ee-3f1e-11e6-80c0-cdc356216b0e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c10640ef-3f1e-11e6-80c0-cbc4fb3c4fdd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1354","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c10640f0-3f1e-11e6-80c0-43f142c0a537","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == '\\n') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl"},"failures":[],"tindex":"c10640f1-3f1e-11e6-80c0-ed7bfca3be4b","method":{"position":"com.google.gson.internal.$Gson$Preconditions:40","type":"CtMethodImpl","sourcecode":"public static void checkArgument(boolean condition) {\n    if (!condition) {\n        throw new java.lang.IllegalArgumentException();\n    } \n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"condition"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl"},"failures":[],"tindex":"c10640f2-3f1e-11e6-80c0-818c93a2542a","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type.getRawType().equals(type.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","to":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1066803-3f1e-11e6-80c0-71d6ecd29322","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c1066804-3f1e-11e6-80c0-cb19cbe0d105","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[62,63,65,67,376,377,72,74,75,378,379,380,85,86,97,381,98,101,382,104,105,109,16,121,383,122,384,123,385,126,386,387,127,128,388,389,129,130,132,133,134,135,390,136,137,138,139,140,391,141,142,143,392,144,393,145,394,395,18,157,19,159,20,163,165,171,396,173,175,178,183,397,188,189,398,399,191,192,52,400,53,401,402,193,403,404,194,405,406,407,204,408,212,220,225,229,230,231,232,233,21,22,23,24,235,236,237,409,410,239,411,240,241,412,413,242,414,415,243,416,417,244,418,245,419,247,420,421,250,422,251,252,423,254,424,425,255,426,256,257,427,258,428,429,430,431,432,291,292,293,294,295,433,25,297,434,435,436,437,298,299,300,301,26,302,303,304,305,438,306,308,439,309,310,440,441,313,315,316,27,28,29,323,324,325,30,31,442,443,326,327,32,444,329,331,332,333,334,335,445,336,33,34,337,35,338,339,340,341,342,343,344,446,447,345,448,346,449,450,347,350,351,352,358,451,452,453,454,455,456,457,458,363,459,364,460,365,36,461,366,367,372],"tindex":"c1066805-3f1e-11e6-80c0-056fdc9b1ac9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1068f16-3f1e-11e6-80c0-4b75e3aa470c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:520","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c1068f17-3f1e-11e6-80c0-59e89581c547","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (start == end) {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"start","com.google.gson.stream.JsonScope.DANGLING_NAME":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1068f18-3f1e-11e6-80c0-c73c70de8491","method":{"position":"com.google.gson.internal.bind.TypeAdapters:245","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1068f19-3f1e-11e6-80c0-c354e06c9d19","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c1068f1a-3f1e-11e6-80c0-a18c69d95b4b","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if (ignoreVersionsAfter > ignoreVersionsAfter) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"ignoreVersionsAfter","annotationVersion":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c106b62b-3f1e-11e6-80c0-d3a35b455a1e","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"writer","value":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:702","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c106b62c-3f1e-11e6-80c0-a3c1b2b45cf8","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if ((empty == nonempty) || (last == nonempty)) {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"nonempty","last":"empty","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"nonempty"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl"},"failures":[],"tindex":"c106b62d-3f1e-11e6-80c0-4f42aa4c53fd","method":{"position":"com.google.gson.internal.Streams:67","type":"CtMethodImpl","sourcecode":"public static void write(com.google.gson.JsonElement element, com.google.gson.stream.JsonWriter writer) throws java.io.IOException {\n    com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.write(writer, element);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c106b62e-3f1e-11e6-80c0-37ecf457defe","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl"},"failures":[462,463,464],"tindex":"c106b62f-3f1e-11e6-80c0-1f53dc4ab671","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c106dd40-3f1e-11e6-80c0-53e177f9a020","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:122","type":"CtBinaryOperatorImpl"},"failures":[68,2,3,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,465,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,16,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,17,136,137,138,139,140,141,142,143,144,146,51,147,148,149,150,394,151,152,153,154,155,18,156,157,19,466,158,159,160,161,162,20,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,54,198,199,200,201,202,203,204,205,4,206,207,208,209,210,211,5,212,213,6,7,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,235,236,237,238,239,240,241,242,243,244,245,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,59,277,278,279,280,281,282,283,284,285,286,287,60,288,61,289,290,291,292,293,294,295,433,296,297,435,298,299,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,332,333,334,335,336,34,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,354,355,356,357,358,359,360,451,361,362,454,455,457,467,458,468,363,364,365,36,366,367,372,373,374,375],"tindex":"c106dd41-3f1e-11e6-80c0-abad8b2b1ed9","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == src) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.internal.bind.JsonTreeReader.SENTINEL_CLOSED":"src","o":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1070452-3f1e-11e6-80c0-c9b7ef76c241","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1070453-3f1e-11e6-80c0-3fe91e957320","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1070454-3f1e-11e6-80c0-a58d86990d35","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl"},"failures":[62,63,65,67,376,377,469,470,72,74,75,378,379,380,85,86,97,381,98,101,382,104,105,109,16,121,383,122,384,123,385,126,386,387,127,128,388,389,129,130,132,133,134,135,390,136,137,138,139,140,391,141,142,143,392,144,393,145,394,395,18,157,19,159,20,163,165,171,396,173,175,178,183,397,188,471,189,398,190,399,191,192,52,400,53,401,402,193,403,404,194,405,406,407,204,408,212,220,225,229,230,231,232,233,21,22,23,24,235,236,237,409,410,239,411,240,241,412,413,242,414,415,243,416,417,244,418,245,419,247,420,421,250,422,251,252,423,254,424,425,255,426,256,257,427,258,428,429,430,431,432,291,292,293,294,295,433,25,297,434,435,436,437,298,299,300,301,26,302,303,304,305,438,306,308,439,309,310,440,441,313,315,316,27,28,29,323,324,325,30,31,442,443,326,327,32,444,329,331,332,333,334,335,445,336,33,34,337,35,338,339,340,341,342,343,344,446,447,345,448,346,449,450,347,350,351,352,358,451,452,453,454,455,456,457,458,363,459,364,460,365,36,461,472,473,474,366,367,372,475,476,477,478,479],"tindex":"c1072b65-3f1e-11e6-80c0-db07f093e39f","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if ((!serialize) && (!serialize)) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"serialize","lenient":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c1072b66-3f1e-11e6-80c0-517dff43ae25","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if ((key instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"c1072b67-3f1e-11e6-80c0-23ac22b8d25f","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl"},"failures":[],"tindex":"c1075278-3f1e-11e6-80c0-03751c2864a8","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c1075279-3f1e-11e6-80c0-c92e39a5b437","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:459","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"c107798a-3f1e-11e6-80c0-a98cad107449","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive instanceof com.google.gson.TypeAdapter<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467330332524/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":48,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
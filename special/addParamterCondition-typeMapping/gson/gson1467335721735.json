{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":1,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":350,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":59,"com.google.gson.functional.StringTest.testStringValueDeserialization":652,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":188,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":466,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":508,"com.google.gson.stream.JsonWriterTest.testRepeatedName":51,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":435,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":323,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":614,"com.google.gson.MixedStreamTest.testWriteLenient":25,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":584,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":145,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":395,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":308,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":318,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":592,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":471,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":164,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":373,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":284,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":443,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":563,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":647,"com.google.gson.functional.ObjectTest.testSingletonLists":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":141,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":165,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":351,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":430,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":20,"com.google.gson.stream.JsonWriterTest.testStrings":72,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":574,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":246,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":635,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":515,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":602,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":31,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":473,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":387,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":403,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":660,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":11,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":251,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":467,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":64,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":535,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":415,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":423,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":291,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":534,"com.google.gson.functional.EnumTest.testEnumCaseMapping":372,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":12,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":349,"com.google.gson.functional.JsonTreeTest.testToJsonTree":6,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":422,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":516,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":626,"com.google.gson.stream.JsonWriterTest.testNulls":48,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":676,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":124,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":222,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":384,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":550,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":506,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":336,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":685,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":315,"com.google.gson.functional.ObjectTest.testNullDeserialization":608,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":224,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":658,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects":681,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":599,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":15,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":103,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":436,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":270,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":692,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":289,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":391,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":605,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":14,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":282,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":494,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":243,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":480,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":479,"com.google.gson.JsonParserTest.testParseString":680,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":514,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":95,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":385,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":454,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":484,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":499,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":198,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":276,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":674,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":140,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":453,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":464,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":530,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":585,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":690,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":364,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":505,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":10,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":34,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":568,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":186,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":96,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":590,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":465,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":194,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":275,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":28,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":67,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":347,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":596,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":327,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":440,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":537,"com.google.gson.metrics.PerformanceTest.testDummy":407,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":520,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":303,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":216,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":420,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":569,"com.google.gson.stream.JsonWriterTest.testEmptyArray":41,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":540,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":575,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":144,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":544,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":135,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":417,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":390,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":693,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":567,"com.google.gson.functional.CollectionTest.testSetDeserialization":633,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":285,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":266,"com.google.gson.functional.EnumTest.testEnumSet":366,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":581,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":457,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":217,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":229,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":392,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":502,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":271,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":74,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":215,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":468,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":419,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":63,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":474,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":249,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":286,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":99,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":433,"com.google.gson.functional.MapTest.testHashMapDeserialization":524,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":629,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":511,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":348,"com.google.gson.MixedStreamTest.testReadNulls":411,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":489,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":111,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":358,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":673,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":8,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":579,"com.google.gson.functional.MapTest.testSortedMap":536,"com.google.gson.functional.MapTest.testMapSerialization":175,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":113,"com.google.gson.internal.bind.JsonElementReaderTest.testObject":682,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":462,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":542,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":552,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":159,"com.google.gson.functional.MapTest.testSerializeMaps":169,"com.google.gson.functional.MapTest.testComplexKeysSerialization":184,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":580,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":33,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":539,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":205,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":226,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":667,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":343,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":688,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":400,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":247,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":666,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":254,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":398,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":324,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":607,"com.google.gson.functional.MapTest.testStringKeyDeserialization":538,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":394,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":554,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":231,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":106,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":187,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":439,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":208,"com.google.gson.functional.PrettyPrintingTest.testMap":252,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":434,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":311,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":121,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":577,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":30,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":386,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":555,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":355,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":653,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":132,"com.google.gson.functional.MapTest.testMapSerializationEmpty":185,"com.google.gson.functional.CollectionTest.testQueueSerialization":312,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":68,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":458,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":70,"com.google.gson.functional.MapTest.testMapOfMapSerialization":174,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":452,"com.google.gson.JavaSerializationTest.testMapIsSerializable":689,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":507,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":631,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":43,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":92,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":378,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":237,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":0,"com.google.gson.functional.FieldNamingTest.testIdentity":160,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":352,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":570,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":54,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":331,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":609,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":5,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":260,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":326,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":559,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":46,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":424,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":75,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":353,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":668,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":90,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":640,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":513,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":154,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":377,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":522,"com.google.gson.functional.MapTest.testMapSubclassSerialization":168,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":478,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":80,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":566,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":582,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":22,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":210,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":298,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":450,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":488,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":497,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":586,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":576,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":214,"com.google.gson.functional.EnumTest.testEnumSubclass":369,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":93,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":32,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":601,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":82,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":388,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":470,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":230,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":662,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":426,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":329,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":55,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":455,"com.google.gson.stream.JsonWriterTest.testTwoNames":42,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":641,"com.google.gson.stream.JsonWriterTest.testNullName":49,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":621,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":16,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":549,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":687,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":459,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":598,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":57,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":89,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":639,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":53,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":149,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":591,"com.google.gson.MixedStreamTest.testWriteNulls":23,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":523,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":200,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":52,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":588,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":196,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":225,"com.google.gson.CommentsTest.testParseComments":406,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":562,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":234,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":262,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":649,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":297,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":469,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":553,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":541,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":177,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":354,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":642,"com.google.gson.MixedStreamTest.testReadInvalidState":409,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":281,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":221,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":151,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":18,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":189,"com.google.gson.JsonParserTest.testParseMixedArray":29,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":675,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":84,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":402,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":556,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":393,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":294,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":447,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":376,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":100,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":138,"com.google.gson.functional.MapTest.testMapDeserialization":529,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":548,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":134,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":257,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":167,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":78,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":646,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":171,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":306,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":338,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":335,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":401,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":691,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":4,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":665,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":496,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":269,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":277,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":360,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":211,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":622,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":125,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":564,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":328,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":365,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":176,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":153,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":421,"com.google.gson.functional.PrimitiveTest.testShortSerialization":104,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":573,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":340,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":472,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":293,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":451,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":686,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":97,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":127,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":432,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":156,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":368,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":310,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":79,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":683,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":526,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":446,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":107,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":322,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":399,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":512,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":651,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":36,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":413,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":110,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":483,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":381,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":325,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":278,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":571,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":625,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":39,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":117,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":299,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":476,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":583,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":232,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":456,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":612,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":595,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":371,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":250,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":361,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":316,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":500,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":206,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":572,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":334,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":139,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":339,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":438,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":129,"com.google.gson.stream.JsonWriterTest.testNullStringValue":45,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":510,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":396,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":627,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":427,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":477,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":91,"com.google.gson.JsonArrayTest.testSet":671,"com.google.gson.stream.JsonWriterTest.testEmptyObject":62,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":108,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":344,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":337,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":367,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":492,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":543,"com.google.gson.functional.MapTest.testGeneralMapField":181,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":594,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":193,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":486,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":202,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":207,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":146,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":179,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":83,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":118,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":242,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":98,"com.google.gson.MixedStreamTest.testReadMixedStreamed":412,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":501,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":531,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":76,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":319,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":619,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":65,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":519,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":460,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":292,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":418,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":137,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":532,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":166,"com.google.gson.JsonArrayTest.testDeepCopy":672,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":525,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":109,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":235,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":116,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":301,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":50,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":448,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":37,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":136,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":589,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":332,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":493,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":630,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":650,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":239,"com.google.gson.functional.ObjectTest.testNestedDeserialization":613,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":274,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":330,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":490,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":620,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":290,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":485,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":296,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":533,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":637,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":654,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":670,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":213,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":102,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":661,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":561,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":587,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":321,"com.google.gson.functional.ObjectTest.testNullSerialization":267,"com.google.gson.stream.JsonWriterTest.testDoubles":69,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":363,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":521,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":527,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":180,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":425,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":66,"com.google.gson.functional.MapTest.testInterfaceTypeMap":178,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":551,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":209,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":305,"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName":677,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":428,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":370,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":380,"com.google.gson.MixedStreamTest.testReadClosed":410,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":557,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":664,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":119,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":288,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":441,"com.google.gson.MixedStreamTest.testWriteClosed":27,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":314,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":491,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":517,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":624,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":218,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":304,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":7,"com.google.gson.stream.JsonWriterTest.testLongs":47,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":279,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":295,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":152,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":264,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":307,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":313,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":405,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":463,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":302,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":663,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":142,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":644,"com.google.gson.stream.JsonWriterTest.testNumbers":71,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":374,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":487,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":86,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":3,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":498,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":191,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":227,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":615,"com.google.gson.functional.CollectionTest.testQueueDeserialization":636,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":88,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":461,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":657,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":112,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":150,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":616,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":172,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":606,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":131,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":244,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":611,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":309,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":21,"com.google.gson.functional.MapTest.testRawMapSerialization":183,"com.google.gson.JsonParserTest.testParseReader":679,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":634,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":509,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":382,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":272,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":359,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":545,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":342,"com.google.gson.functional.PrimitiveTest.testByteSerialization":101,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":195,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":245,"com.google.gson.ObjectTypeAdapterTest.testSerialize":19,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":162,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":240,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":437,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":77,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":558,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":201,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":157,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":219,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":414,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":655,"com.google.gson.functional.MapTest.testMapWithQuotes":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":122,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":444,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":656,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":228,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":618,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":238,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":280,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":120,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":283,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":56,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":648,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":212,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":610,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":258,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":128,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":600,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":204,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":123,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":130,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":300,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":560,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":475,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":248,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":632,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":547,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":148,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":192,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":362,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":333,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":617,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":81,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":578,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":429,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":565,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":236,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":379,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":603,"com.google.gson.functional.ObjectTest.testNestedSerialization":273,"com.google.gson.internal.LinkedTreeMapTest.testClear":684,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":345,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":85,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":241,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":659,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":115,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":182,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":190,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":259,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":26,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":40,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":73,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":268,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":643,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":482,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":623,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":504,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":13,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":408,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":442,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":495,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":604,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":404,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":383,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":356,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":199,"com.google.gson.functional.CollectionTest.testSetSerialization":320,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":669,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":233,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":255,"com.google.gson.functional.StringTest.testStringValueSerialization":357,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":161,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":375,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":628,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":638,"com.google.gson.MixedStreamTest.testWriteInvalidState":24,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":546,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":265,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":445,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":203,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":449,"com.google.gson.stream.JsonWriterTest.testBooleans":44,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":126,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":158,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":678,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":223,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":645,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":35,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":287,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":220,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":143,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":163,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":528,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":58,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":197,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":416},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11],"tindex":"48234a5c-3f29-11e6-a691-27021ca92ef0","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:175","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            if (!(isLenient())) {\n                double double = value.doubleValue();\n                if ((java.lang.Double.isNaN(d)) || (java.lang.Double.isInfinite(d))) {\n                    throw new java.lang.IllegalArgumentException((\"JSON forbids NaN and infinities: \" + value));\n                } \n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"48240dad-3f29-11e6-a691-4b5867572475","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"482434be-3f29-11e6-a691-d1bfbd896192","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"482434bf-3f29-11e6-a691-1fe6706c40df","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:139","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getKeyAdapter(com.google.gson.Gson context, java.lang.reflect.Type keyType) {\n    if (keyType != null) {\n        {\n            return (keyType == (boolean.boolean.java.lang.Class)) || (keyType == (java.lang.Boolean.java.lang.Boolean.java.lang.Class)) ? com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Boolean> : context.getAdapter(com.google.gson.reflect.TypeToken.get(keyType));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"keyType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"48245bd0-3f29-11e6-a691-51f0c5d4b925","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"482482e1-3f29-11e6-a691-0bf673a91865","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4824a9f2-3f29-11e6-a691-d5f31a4335e5","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type == type) {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"type","context":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl"},"failures":[],"tindex":"4824d103-3f29-11e6-a691-c7d28c2da55a","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isNumber()) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:795","type":"CtBinaryOperatorImpl"},"failures":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,2,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,4,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,8,9,10,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,11,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391],"tindex":"4824f814-3f29-11e6-a691-596be267db73","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == topOfStack) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED_NAME":"topOfStack"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[115,116],"tindex":"48251f25-3f29-11e6-a691-ff1a6d5250ec","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"48254636-3f29-11e6-a691-2912e34126d6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:491","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.InetAddress value) throws java.io.IOException {\n    out.value((value == null ? null : value.getHostAddress()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"48254637-3f29-11e6-a691-6be0622e872e","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[392,393,394],"tindex":"48254638-3f29-11e6-a691-e37d8f6f0657","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (to == null) {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:96","type":"CtVariableReadImpl"},"failures":[28,44,50,51,53,58,59,81,87,88,116,161,165,202,217,4,246,249,254,258,262,268,271,273,276,277,279,300,10,306,308,316,318,331,332],"tindex":"48254639-3f29-11e6-a691-b7ad27876ce3","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            if (value) {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write((value ? \"true\" : \"false\"));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isObject":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl"},"failures":[12,13,85,87,97,105,107,109,115,161,169,181,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,395,212,213,214,215,218,219,220,242,251,254,255,256,257,260,262,268,271,272,396,326,11,334,335,337,338,343,354,374,375,376,377,378,379,383,390],"tindex":"48256d4a-3f29-11e6-a691-b10bc2eb8d56","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array instanceof java.lang.reflect.WildcardType) {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4825945b-3f29-11e6-a691-a5afc1840ba0","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl"},"failures":[397],"tindex":"4825945c-3f29-11e6-a691-a99d7cff68ed","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[398,399],"tindex":"4825bb6d-3f29-11e6-a691-6545ca1cca37","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            if (key instanceof java.lang.reflect.WildcardType) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n                    if (node != null) {\n                        removeInternal(node, true);\n                    } \n                    return node;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4825e27e-3f29-11e6-a691-a9ed0622f560","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4825e27f-3f29-11e6-a691-cdb525229d82","method":{"position":"com.google.gson.internal.$Gson$Types:65","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type componentType) {\n    return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(componentType);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"componentType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4825e280-3f29-11e6-a691-e541848c37ec","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter","value":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"48260991-3f29-11e6-a691-4b3801430d19","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[127,363],"tindex":"48260992-3f29-11e6-a691-93a018afa698","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"48260993-3f29-11e6-a691-b5517bcc9e7c","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (skipPast == skipPast) {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1310","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"482630a4-3f29-11e6-a691-235010f9d334","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (offset >= offset) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            throw new java.lang.AssertionError();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"limit":"offset","minimum":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1186","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"482630a5-3f29-11e6-a691-7f57830565f3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"482657b6-3f29-11e6-a691-c5adef29f212","method":{"position":"com.google.gson.internal.$Gson$Types:226","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type context, java.lang.Class<?> rawType, java.lang.Class<?> toResolve) {\n    if (toResolve == rawType) {\n        return context;\n    } \n    if (toResolve.isInterface()) {\n        java.lang.Class<?>[] java.lang.Class<?>[] = rawType.getInterfaces();\n        for (int int = 0, int int = interfaces.int ; i < length ; i++) {\n            if ((interfaces[i]) == toResolve) {\n                return rawType.getGenericInterfaces()[i];\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\n            } \n        }\n    } \n    if (!(rawType.isInterface())) {\n        while (rawType != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n            java.lang.Class<?> java.lang.Class<?> = rawType.getSuperclass();\n            if (rawSupertype == toResolve) {\n                return rawType.getGenericSuperclass();\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\n                return com.google.gson.internal.$Gson$Types.getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\n            } \n            rawType = rawSupertype;\n        }\n    } \n    return toResolve;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"482657b7-3f29-11e6-a691-2197aa092b7e","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"482657b8-3f29-11e6-a691-3da2c9a125cf","method":{"position":"com.google.gson.reflect.TypeToken:185","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (from instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (to.equals(from)) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.getRawType(from);\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = null;\n            if (from instanceof java.lang.reflect.ParameterizedType) {\n                ptype = ((java.lang.reflect.ParameterizedType)(from));\n            } \n            if (ptype != null) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = ptype.getActualTypeArguments();\n                java.lang.reflect.TypeVariable<?>[] java.lang.reflect.TypeVariable<?>[] = clazz.getTypeParameters();\n                for (int int = 0 ; i < (tArgs.int) ; i++) {\n                    java.lang.reflect.Type java.lang.reflect.Type = tArgs[i];\n                    java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = tParams[i];\n                    while (arg instanceof java.lang.reflect.TypeVariable<?>) {\n                        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(arg));\n                        arg = typeVarMap.get(v.getName());\n                    }\n                    typeVarMap.put(var.getName(), arg);\n                }\n                if (com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)) {\n                    return true;\n                } \n            } \n            for (java.lang.reflect.Type java.lang.reflect.Type : clazz.getGenericInterfaces()) {\n                if (com.google.gson.reflect.TypeToken.isAssignableFrom(itype, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap))) {\n                    return true;\n                } \n            }\n            java.lang.reflect.Type java.lang.reflect.Type = clazz.getGenericSuperclass();\n            return com.google.gson.reflect.TypeToken.isAssignableFrom(sType, to, new java.util.HashMap<java.lang.String, java.lang.reflect.Type>(typeVarMap));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"48267ec9-3f29-11e6-a691-2d17327da3dc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"48267eca-3f29-11e6-a691-ed270b03d330","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value.toString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"48267ecb-3f29-11e6-a691-958407820e64","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl"},"failures":[],"tindex":"4826a5dc-3f29-11e6-a691-cb4fac8f9f39","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    return toJsonTree(src);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4826a5dd-3f29-11e6-a691-bb3e30200cb0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4826a5de-3f29-11e6-a691-49bc5ebb48cf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4826a5df-3f29-11e6-a691-2f3bae9cb36f","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4826ccf0-3f29-11e6-a691-6fcff3a52b09","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:808","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if (o == o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"o","context":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl"},"failures":[35,36],"tindex":"4826ccf1-3f29-11e6-a691-178f770edf5f","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4826ccf2-3f29-11e6-a691-d5252fe01204","method":{"position":"com.google.gson.internal.bind.TypeAdapters:643","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.JsonElement read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    switch (in.peek()) {\n        case STRING :\n            return new com.google.gson.JsonPrimitive(in.nextString());\n        case NUMBER :\n            java.lang.String java.lang.String = in.nextString();\n            return new com.google.gson.JsonPrimitive(new com.google.gson.internal.LazilyParsedNumber(number));\n        case BOOLEAN :\n            return new com.google.gson.JsonPrimitive(in.nextBoolean());\n        case NULL :\n            in.nextNull();\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        case BEGIN_ARRAY :\n            com.google.gson.JsonArray com.google.gson.JsonArray = new com.google.gson.JsonArray();\n            in.beginArray();\n            while (in.hasNext()) {\n                array.add(read(in));\n            }\n            in.endArray();\n            return array;\n        case BEGIN_OBJECT :\n            com.google.gson.JsonObject com.google.gson.JsonObject = new com.google.gson.JsonObject();\n            in.beginObject();\n            while (in.hasNext()) {\n                object.add(in.nextName(), read(in));\n            }\n            in.endObject();\n            return object;\n        case END_DOCUMENT :\n        case NAME :\n        case END_OBJECT :\n        case END_ARRAY :\n        default :\n            throw new java.lang.IllegalArgumentException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:153","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4826f403-3f29-11e6-a691-35f86cd12ea4","method":{"position":"com.google.gson.internal.LinkedTreeMap:574","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object o) {\n    if ((o != o) && (token != o)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(o instanceof java.util.Map.Entry)) {\n                return false;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByEntry(((java.util.Map.Entry<?, ?>)(o)));\n            if (node == null) {\n                return false;\n            } \n            removeInternal(node, true);\n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"o","token":"o","com.google.gson.stream.JsonToken.NUMBER":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4826f404-3f29-11e6-a691-c5650a80d712","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (name != null) {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"48271b15-3f29-11e6-a691-bbb51fdd9b4a","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"48271b16-3f29-11e6-a691-17c930d5d621","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == null) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"48274227-3f29-11e6-a691-2798576bbee9","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[158,360,400],"tindex":"48274228-3f29-11e6-a691-fde68e97a2cc","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"48274229-3f29-11e6-a691-ab2e66d7926a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != (o[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"o","upperBound":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:171","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4827693a-3f29-11e6-a691-9f117ab81d5b","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    if ((typeAdapter != typeAdapter) && (token != typeAdapter)) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n                java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n            } \n            if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n                com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"typeAdapter","token":"typeAdapter","com.google.gson.stream.JsonToken.NUMBER":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:552","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4827693b-3f29-11e6-a691-b5e5d10f883f","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index < index) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"index","i":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4827904c-3f29-11e6-a691-bb3ae754e51d","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4827904d-3f29-11e6-a691-e130ffe150da","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4827904e-3f29-11e6-a691-971fc57f9254","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[156,358,401],"tindex":"4827b75f-3f29-11e6-a691-b9e76b5e0254","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:389","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4827b760-3f29-11e6-a691-fbed9fab7689","method":{"position":"com.google.gson.TreeTypeAdapter:103","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class<?> hierarchyType, java.lang.Object typeAdapter) {\n    if (typeAdapter != null) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , null , false , hierarchyType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl"},"failures":[],"tindex":"4827b761-3f29-11e6-a691-b9436aebb448","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"type","type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"4827de72-3f29-11e6-a691-85499cf47c63","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    try {\n        com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n        return read(jsonReader);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonTree"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"4827de73-3f29-11e6-a691-9ff906fee94d","method":{"position":"com.google.gson.FieldNamingPolicy:37","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return f.getName();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"48280584-3f29-11e6-a691-8b9cc85a2fd4","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        {\n            if (value) {\n                {\n                    writeDeferredName();\n                    beforeValue(false);\n                    java.io.Writer.write((value ? \"true\" : \"false\"));\n                    return com.google.gson.stream.JsonWriter.this;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl"},"failures":[402,397],"tindex":"48280585-3f29-11e6-a691-c19dee25b23a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if ((node != null) && (node != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"node","right":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[299,403,404,301,405,302],"tindex":"48282c96-3f29-11e6-a691-594c3a492cba","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"48282c97-3f29-11e6-a691-fb6185d9582e","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl"},"failures":[],"tindex":"48282c98-3f29-11e6-a691-b9169c05491e","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"a","type":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"482853a9-3f29-11e6-a691-1f5f758f1718","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"482853aa-3f29-11e6-a691-13d15600d06c","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl"},"failures":[],"tindex":"482853ab-3f29-11e6-a691-eb55835cf27b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if ((value == null) || (value.isJsonNull())) {\n        out.nullValue();\n    } else if (value.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            out.value(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            out.value(primitive.getAsBoolean());\n        } else {\n            out.value(primitive.getAsString());\n        }\n    } else if (value.isJsonArray()) {\n        out.beginArray();\n        for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n            write(out, e);\n        }\n        out.endArray();\n    } else if (value.isJsonObject()) {\n        out.beginObject();\n        for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n            out.name(e.getKey());\n            write(out, e.getValue());\n        }\n        out.endObject();\n    } else {\n        throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"48287abc-3f29-11e6-a691-45b08f24d0db","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (to == null) {\n                {\n                    return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"48287abd-3f29-11e6-a691-85d3c436e306","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4828a1ce-3f29-11e6-a691-175a29b3a738","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4828a1cf-3f29-11e6-a691-f5cf473f1075","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:360","type":"CtVariableReadImpl"},"failures":[406,12,13,407,14,15,16,17,408,21,409,410,22,23,24,25,411,26,27,412,413,28,30,31,32,40,414,74,415,75,76,416,417,418,419,420,79,80,81,421,422,423,82,424,425,426,427,428,429,430,83,431,432,84,433,434,435,436,437,438,439,440,85,441,442,443,444,445,86,446,447,87,448,449,88,450,451,452,453,89,454,455,456,90,91,457,458,459,92,460,461,462,463,464,465,466,467,93,468,94,469,95,96,470,471,97,472,473,98,474,99,475,476,477,100,101,102,103,104,105,478,479,480,481,106,482,107,483,484,485,108,109,486,110,487,488,111,112,1,113,489,490,114,491,492,115,116,493,117,118,119,494,495,496,120,497,121,122,498,123,499,124,125,500,501,126,502,127,503,128,129,130,131,132,504,133,505,134,135,506,136,507,137,138,139,140,508,141,509,510,142,511,143,144,512,145,146,513,147,148,149,150,151,152,514,515,153,154,516,155,517,156,157,158,159,160,161,162,163,164,518,519,165,520,521,166,522,167,523,524,525,168,169,526,527,170,528,171,529,172,530,531,532,533,173,174,175,534,535,176,177,536,178,179,180,181,182,183,537,184,185,538,186,539,540,187,188,541,542,189,543,190,544,545,191,192,546,193,194,195,196,197,547,548,198,199,200,549,550,551,201,552,202,553,203,554,204,555,205,556,206,207,208,209,210,211,557,395,558,559,560,561,212,562,2,213,214,215,216,217,563,218,219,220,564,221,565,566,222,223,224,225,226,567,227,228,568,229,569,570,571,230,231,232,572,233,234,235,573,236,574,237,238,239,3,4,5,6,240,241,242,243,244,575,245,576,246,247,577,578,579,248,249,580,581,250,582,251,252,253,254,255,256,257,258,259,583,584,585,586,399,587,588,589,590,260,261,591,592,262,593,594,263,595,596,264,265,597,598,266,599,267,268,600,601,269,602,270,271,603,272,273,274,604,275,605,606,607,608,276,609,277,278,610,279,611,612,613,614,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,615,7,298,299,403,404,300,301,405,616,302,617,8,618,619,9,10,620,621,622,303,304,305,396,623,624,625,306,307,626,308,309,310,311,627,628,629,312,313,314,315,316,630,631,317,632,633,318,319,634,320,321,635,322,636,323,637,324,638,325,639,326,327,328,640,641,329,11,330,642,643,331,332,644,333,645,334,646,647,335,648,336,337,338,649,339,340,341,342,650,343,651,344,345,346,347,348,652,349,350,351,352,353,653,654,354,655,355,656,657,658,356,659,660,357,358,359,360,661,361,362,363,662,663,364,664,365,400,401,366,367,368,369,665,666,370,667,371,372,373,388,668,389,669,390,391],"tindex":"4828c7e0-3f29-11e6-a691-7732916e1c59","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[18,19,20],"tindex":"4828eef1-3f29-11e6-a691-ed0e4831476a","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"48291602-3f29-11e6-a691-354ee011fea8","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:822","type":"CtBinaryOperatorImpl"},"failures":[29,670,671,672],"tindex":"48291603-3f29-11e6-a691-2185df215f70","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl"},"failures":[673,674,675,118,123,124,148],"tindex":"48291604-3f29-11e6-a691-59f6e8226b6b","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonObject:54","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"48293d15-3f29-11e6-a691-f972d7e95693","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            if (key instanceof java.lang.reflect.WildcardType) {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n                    if (node != null) {\n                        removeInternal(node, true);\n                    } \n                    return node;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Streams:50","type":"CtVariableReadImpl"},"failures":[676,677,678,679,680,28,681,682,36,37,683,684,685,686,687,688,689,80,1,492,494,126,162,163,529,532,534,538,543,544,545,569,236,3,4,5,6,246,584,585,586,399,587,280,615,7,8,9,10,621,622,396,623,626,635,11,690,691],"tindex":"48293d16-3f29-11e6-a691-577a4b9ed7a1","method":{"position":"com.google.gson.internal.LinkedTreeMap:310","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (insert) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            for (com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>) {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                int int = left != null ? left.int : 0;\n                int int = right != null ? right.int : 0;\n                int int = leftHeight - rightHeight;\n                if (delta == (-2)) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = rightRight != null ? rightRight.int : 0;\n                    int int = rightLeft != null ? rightLeft.int : 0;\n                    int int = rightLeftHeight - rightRightHeight;\n                    if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                        rotateLeft(node);\n                    } else {\n                        assert rightDelta == 1;\n                        rotateRight(right);\n                        rotateLeft(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 2) {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    int int = leftRight != null ? leftRight.int : 0;\n                    int int = leftLeft != null ? leftLeft.int : 0;\n                    int int = leftLeftHeight - leftRightHeight;\n                    if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                        rotateRight(node);\n                    } else {\n                        assert leftDelta == (-1);\n                        rotateLeft(left);\n                        rotateRight(node);\n                    }\n                    if (insert) {\n                        break;\n                    } \n                } else if (delta == 0) {\n                    node.int = leftHeight + 1;\n                    if (insert) {\n                        break;\n                    } \n                } else {\n                    assert (delta == (-1)) || (delta == 1);\n                    node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                    if (!insert) {\n                        break;\n                    } \n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl"},"failures":[127],"tindex":"48298b37-3f29-11e6-a691-6b9d304a6c9f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl"},"failures":[692,693,499],"tindex":"48298b38-3f29-11e6-a691-01af3554a9e6","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != o) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"o","type":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl"},"failures":[],"tindex":"48298b39-3f29-11e6-a691-795a9271c58c","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (value.isAssignableFrom(key)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"value","rawSupertype":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4829b24a-3f29-11e6-a691-ff448da8a4d1","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if (value > value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4829b24b-3f29-11e6-a691-9524cc1fb163","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4829b24c-3f29-11e6-a691-4b9275bbef19","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"4829d95d-3f29-11e6-a691-19d589ae784d","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4829d95e-3f29-11e6-a691-af13f607292a","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"4829d95f-3f29-11e6-a691-53c2114c0b31","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            if (f.isSynthetic()) {\n                {\n                    return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:401","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"4829d960-3f29-11e6-a691-876d083138fe","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return char[][i];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_END_OBJECT":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"482a0071-3f29-11e6-a691-c1503a04c227","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:861","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"482a0072-3f29-11e6-a691-75d398091385","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_FALSE":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"482a0073-3f29-11e6-a691-89b7cff18f09","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (skipPast == skipPast) {\n                {\n                    boolean boolean = false;\n                    if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                        skipPastFound = true;\n                    \n                    for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                        if (!skipPastFound) {\n                            if (factory == skipPast) {\n                                skipPastFound = true;\n                            } \n                            continue;\n                        } \n                        com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                        if (candidate != null) {\n                            return candidate;\n                        } \n                    }\n                    throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333930936/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":88,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":700,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":182,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":449,"com.google.gson.functional.StringTest.testStringValueDeserialization":585,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":77,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":577,"com.google.gson.JsonPrimitiveTest.testDeepCopy":683,"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder":643,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":614,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":12,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":144,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":66,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":254,"com.google.gson.MixedStreamTest.testWriteLenient":460,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":436,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":706,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":55,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":49,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":53,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":113,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":542,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":286,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":408,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":163,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":527,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":662,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":27,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":88,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":666,"com.google.gson.functional.ObjectTest.testSingletonLists":111,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":204,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":432,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":450,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":523,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":704,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":474,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":8,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":489,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":126,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":275,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":544,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":225,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":593,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":688,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":149,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":388,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":540,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":72,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":263,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":478,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":384,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":516,"com.google.gson.functional.EnumTest.testEnumCaseMapping":285,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":448,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":464,"com.google.gson.functional.JsonTreeTest.testToJsonTree":213,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":608,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":391,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":582,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":108,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":248,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":417,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":653,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":557,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":575,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder":598,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":328,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":293,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":151,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":591,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":123,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":679,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":272,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":357,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":615,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":369,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":661,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":382,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":82,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":133,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":271,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":567,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":84,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":548,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":547,"com.google.gson.JsonParserTest.testParseString":668,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":488,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":250,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":349,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":654,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":343,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":570,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":135,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":402,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":692,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":431,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":533,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":67,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":512,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":537,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":677,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":44,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":574,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":209,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":256,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":59,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":322,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":350,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":604,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":538,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":132,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":398,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":4,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":119,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":233,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":686,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":19,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":335,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":518,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":642,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":205,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":99,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":25,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":481,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":470,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":520,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":600,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":435,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":483,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":166,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":427,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":81,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":154,"com.google.gson.functional.CollectionTest.testSetDeserialization":52,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":164,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":122,"com.google.gson.functional.EnumTest.testEnumSet":280,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":564,"com.google.gson.JsonStreamParserTest.testIterator":701,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":534,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":26,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":300,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":311,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":572,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":127,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":24,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":628,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":168,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":545,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":9,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":379,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":353,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":645,"com.google.gson.functional.MapTest.testHashMapDeserialization":507,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":612,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":580,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":447,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":484,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":35,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":181,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":690,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":206,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":602,"com.google.gson.functional.MapTest.testSortedMap":517,"com.google.gson.functional.MapTest.testMapSerialization":315,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":183,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":172,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":536,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":559,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":237,"com.google.gson.functional.MapTest.testSerializeMaps":310,"com.google.gson.functional.MapTest.testComplexKeysSerialization":76,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":563,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":255,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":606,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":407,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":11,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":153,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":94,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":47,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":278,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":495,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":170,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity":599,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":663,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":673,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":14,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":552,"com.google.gson.functional.MapTest.testStringKeyDeserialization":519,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":560,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":301,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":361,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":323,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":526,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":375,"com.google.gson.functional.PrettyPrintingTest.testMap":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":613,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":289,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":414,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":468,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":274,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":561,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":655,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":454,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":586,"com.google.gson.functional.CollectionTest.testQueueSerialization":290,"com.google.gson.functional.MapTest.testMapSerializationEmpty":321,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":424,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":674,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":624,"com.google.gson.functional.MapTest.testMapOfMapSerialization":314,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":341,"com.google.gson.JavaSerializationTest.testMapIsSerializable":492,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":576,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":500,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":160,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":346,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":305,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":658,"com.google.gson.functional.FieldNamingTest.testIdentity":238,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":451,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":698,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":471,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":188,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":136,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":18,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":110,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":212,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":298,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":521,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":264,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields":249,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":324,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":452,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":146,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":344,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":581,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":2,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":573,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":425,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":443,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":506,"com.google.gson.functional.MapTest.testMapSubclassSerialization":309,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":360,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":33,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":178,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":565,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":165,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":241,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":445,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":531,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":68,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":568,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":635,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":7,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":23,"com.google.gson.functional.EnumTest.testEnumSubclass":283,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":347,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":125,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":276,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":331,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":78,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":541,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":61,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":42,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":609,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":148,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":705,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":622,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":147,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":97,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":1,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":556,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":625,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":636,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":17,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":342,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":439,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":112,"com.google.gson.MixedStreamTest.testWriteNulls":459,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":475,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":404,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":603,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":400,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":21,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":152,"com.google.gson.CommentsTest.testParseComments":594,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":672,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":91,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":114,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":302,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":194,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":199,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":629,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":482,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":317,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":453,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":479,"com.google.gson.MixedStreamTest.testReadInvalidState":638,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":161,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":32,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":441,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":173,"com.google.gson.JsonParserTest.testParseMixedArray":269,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":693,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":334,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":597,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":562,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":196,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":246,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":258,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":338,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":158,"com.google.gson.JsonArrayTest.testRemove":696,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":354,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":429,"com.google.gson.functional.MapTest.testMapDeserialization":511,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":426,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":392,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":308,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":87,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":463,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":106,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":312,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":90,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":327,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":48,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":211,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":494,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":217,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":137,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":368,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":37,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":377,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":98,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":418,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":31,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":664,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":46,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":145,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":169,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":316,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":442,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":607,"com.google.gson.functional.PrimitiveTest.testShortSerialization":358,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":473,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":329,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":543,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":386,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":656,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":532,"com.google.gson.JsonParserTest.testParseEmptyString":670,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":351,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":219,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":525,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":234,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":282,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":50,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":177,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":509,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":529,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":297,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":362,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":69,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":691,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":261,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":95,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":487,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":245,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":259,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":365,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":632,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":650,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":16,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":60,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":105,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":138,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":224,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":410,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":680,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":109,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":215,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":62,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":623,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":142,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":118,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":284,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":39,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":409,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":51,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":218,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":373,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":5,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":472,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":86,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":430,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":617,"com.google.gson.internal.LinkedHashTreeMapTest.testClear":640,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":208,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":421,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":93,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":579,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":102,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":496,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":610,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":546,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":345,"com.google.gson.JsonArrayTest.testSet":694,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":363,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":64,"com.google.gson.JsonPrimitiveTest.testEquals":682,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":89,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":281,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":187,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":174,"com.google.gson.functional.MapTest.testGeneralMapField":75,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":116,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":397,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":634,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":79,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":193,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":374,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":687,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":437,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":318,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":326,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":411,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":352,"com.google.gson.MixedStreamTest.testReadMixedStreamed":244,"com.google.gson.JsonObjectTest.testDeepCopy":675,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":339,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":571,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":659,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":207,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":265,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":295,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":703,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":203,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":626,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":385,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":657,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":491,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":167,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":221,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":514,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":446,"com.google.gson.JsonArrayTest.testDeepCopy":695,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":508,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":303,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":364,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":192,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":228,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":621,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":428,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":646,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":505,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":681,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":189,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":499,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":566,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":477,"com.google.gson.functional.ObjectTest.testNestedDeserialization":143,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":307,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":370,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":371,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":184,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":96,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":383,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":633,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":198,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":13,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":515,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":587,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":671,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":22,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":356,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":38,"com.google.gson.JavaSerializationTest.testListIsSerializable":493,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":58,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":70,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":296,"com.google.gson.functional.ObjectTest.testNullSerialization":367,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":41,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":584,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":510,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":74,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":332,"com.google.gson.functional.MapTest.testInterfaceTypeMap":73,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":558,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":376,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":101,"com.google.gson.FieldAttributesTest.testModifiers":702,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":611,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":10,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":387,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":252,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":412,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":381,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":618,"com.google.gson.MixedStreamTest.testWriteClosed":243,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":186,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":292,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":104,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":117,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":583,"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails":644,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":28,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":100,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":201,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":140,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":197,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":697,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":223,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":107,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":120,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":291,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":229,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":627,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":231,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":43,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":294,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":660,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":665,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":689,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":433,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":485,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":156,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":551,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":685,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":337,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":569,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":155,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":395,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":200,"com.google.gson.functional.CollectionTest.testQueueDeserialization":504,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":639,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":340,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":535,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":6,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":590,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":393,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":230,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":440,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":71,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":134,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":423,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":85,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":141,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":288,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":240,"com.google.gson.functional.MapTest.testRawMapSerialization":320,"com.google.gson.JsonParserTest.testParseReader":667,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":502,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":578,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":651,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":36,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":129,"com.google.gson.JsonPrimitiveTest.testExponential":684,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":176,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":330,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":266,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":268,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":277,"com.google.gson.functional.PrimitiveTest.testByteSerialization":355,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":399,"com.google.gson.ObjectTypeAdapterTest.testSerialize":3,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":457,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":83,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":616,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":462,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":56,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":405,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":235,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":29,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":466,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":588,"com.google.gson.functional.MapTest.testMapWithQuotes":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":415,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":528,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":589,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":299,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":486,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":306,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":180,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":631,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":413,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":162,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":270,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":476,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":20,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":139,"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft":596,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":171,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":348,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":420,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":121,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":222,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":416,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":57,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":227,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":422,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":630,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":279,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":501,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":554,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":287,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":396,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":438,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":40,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":190,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":490,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":641,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":179,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":247,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":601,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":469,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":522,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":251,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":647,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":304,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":649,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":128,"com.google.gson.functional.ObjectTest.testNestedSerialization":130,"com.google.gson.JsonObjectTest.testAddingStringProperties":676,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":65,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":325,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":336,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":592,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":394,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":319,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":175,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":214,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":669,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":273,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":461,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":124,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":553,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":549,"com.google.gson.JsonPrimitiveTest.testBoolean":678,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":103,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":202,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":220,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":465,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":467,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":619,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":216,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":226,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":652,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":455,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":403,"com.google.gson.functional.CollectionTest.testSetSerialization":54,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":80,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":63,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":390,"com.google.gson.functional.StringTest.testStringValueSerialization":456,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":239,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":15,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":157,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":497,"com.google.gson.MixedStreamTest.testWriteInvalidState":242,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":637,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":366,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":620,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":195,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":530,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":419,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":236,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":150,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":595,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":191,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":699,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":257,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":380,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":30,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":434,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":458,"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker":648,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":605,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":401,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":480},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253],"tindex":"8285df74-3e61-11e6-ada5-7d4b5d896d50","method":{"position":"com.google.gson.internal.Excluder:149","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field field, boolean serialize) {\n    if ((!serialize) && (!serialize)) {\n        {\n            if (((int) & (field.getModifiers())) != 0) {\n                return true;\n            } \n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(field.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), field.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if (field.isSynthetic()) {\n                return true;\n            } \n            if (boolean) {\n                com.google.gson.annotations.Expose com.google.gson.annotations.Expose = field.getAnnotation(com.google.gson.annotations.Expose.com.google.gson.annotations.Expose.java.lang.Class);\n                if ((annotation == null) || (serialize ? !(annotation.serialize()) : !(annotation.deserialize()))) {\n                    return true;\n                } \n            } \n            if ((!(boolean)) && (isInnerClass(field.getType()))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(field.getType())) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            if (!(list.isEmpty())) {\n                com.google.gson.FieldAttributes com.google.gson.FieldAttributes = new com.google.gson.FieldAttributes(field);\n                for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                    if (exclusionStrategy.shouldSkipField(fieldAttributes)) {\n                        return true;\n                    } \n                }\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"serialize","skipSerialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"82862d95-3e61-11e6-ada5-2bece6dd2e07","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"82862d96-3e61-11e6-ada5-f17f155635d8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"828654a7-3e61-11e6-ada5-71e5a7213a56","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:608","type":"CtBinaryOperatorImpl","sourcecode":"(!(lenient)) && (!root)"},"failures":[254,255,256,257,258,259,260,261,262,0,263,264,265,266,267,268,1,2,4,269,270,271,272,273,274,275,276,277,8,278,279,9,280,281,282,283,10,284,285,286,12,14,16,18,19,20,287,22,23,24,25,26,28,29,30,32,34,35,36,37,39,40,41,44,46,49,288,50,289,290,291,292,293,51,294,53,295,54,296,297,55,56,298,57,58,299,300,61,301,62,63,302,303,304,305,306,307,64,65,308,309,310,311,312,71,313,314,315,316,317,73,318,74,75,319,320,76,321,322,323,77,78,324,79,81,82,83,325,326,84,85,86,327,328,89,90,92,329,93,330,94,96,97,98,99,100,101,102,103,106,107,108,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,110,111,114,117,120,366,122,367,124,368,369,127,129,130,370,132,135,137,138,140,145,148,149,371,150,151,152,153,155,156,157,158,159,160,161,372,162,163,164,373,374,375,376,165,377,378,379,380,381,382,383,384,385,386,387,388,389,169,170,390,391,392,171,173,175,177,178,179,180,181,393,182,183,185,188,189,190,394,192,395,396,397,398,399,400,401,402,403,404,405,193,195,406,407,196,197,198,199,200,201,408,204,409,206,208,209,210,211,212,213,214,410,411,412,413,414,415,416,417,418,419,219,420,421,422,423,424,425,426,427,428,221,429,430,431,432,433,434,435,436,437,222,438,439,440,441,223,442,443,444,445,224,227,228,231,446,232,233,447,234,235,236,237,238,448,449,450,451,452,453,454,455,456,239,457,458,240,241,459,242,460,461,243,462,463,464,465],"tindex":"828654a8-3e61-11e6-ada5-732387bf03df","method":{"position":"com.google.gson.stream.JsonWriter:234","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if ((!lenient) && (!lenient)) {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = lenient;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"lenient","lenient":"lenient"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:826","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED)"},"failures":[466,0,263,264,265,1,2,467,274,275,276,468,279,282,12,13,14,15,16,17,18,19,287,27,31,469,35,37,38,39,40,41,42,43,45,46,47,48,297,55,56,298,57,58,299,59,300,470,471,60,61,301,62,472,63,302,303,473,304,474,305,306,307,308,475,310,71,73,75,319,77,324,83,86,87,327,476,328,89,90,92,329,93,330,477,94,95,478,337,346,349,350,353,356,361,363,366,369,144,149,371,479,150,152,374,375,376,379,380,381,382,383,384,385,386,480,166,167,168,481,388,389,169,170,390,391,392,171,482,172,173,174,175,483,176,181,393,182,183,484,184,185,186,187,485,394,192,403,408,202,203,204,205,206,486,207,208,209,214,215,411,416,417,420,428,429,430,433,487,440,441,488,489,442,445,224,225,226,227,228,229,230,231,490,232,233,447,234,235,236,237,238,457,460,461,464,465],"tindex":"82867bb9-3e61-11e6-ada5-99aa837ee39c","method":{"position":"com.google.gson.GsonBuilder:551","type":"CtMethodImpl","sourcecode":"private void addTypeAdaptersForDate(java.lang.String datePattern, int dateStyle, int timeStyle, java.util.List<com.google.gson.TypeAdapterFactory> factories) {\n    if (dateStyle == timeStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.DefaultDateTypeAdapter com.google.gson.DefaultDateTypeAdapter;\n            if ((datePattern != null) && (!(\"\".equals(datePattern.trim())))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(datePattern);\n            } else if ((dateStyle != (java.text.DateFormat.java.text.DateFormat.int)) && (timeStyle != (java.text.DateFormat.java.text.DateFormat.int))) {\n                dateTypeAdapter = new com.google.gson.DefaultDateTypeAdapter(dateStyle , timeStyle);\n            } else {\n                return ;\n            }\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.util.Date.java.util.Date.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Timestamp.java.sql.Timestamp.java.lang.Class), dateTypeAdapter));\n            factories.add(com.google.gson.TreeTypeAdapter.newFactory(com.google.gson.reflect.TypeToken.get(java.sql.Date.java.sql.Date.java.lang.Class), dateTypeAdapter));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"dateStyle","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"timeStyle"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"82867bba-3e61-11e6-ada5-8585aeecf2bb","method":{"position":"com.google.gson.JsonObject:78","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.String value) {\n    if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[],"tindex":"8286a2cb-3e61-11e6-ada5-8bde43b99c40","method":{"position":"com.google.gson.internal.$Gson$Types:322","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type resolve(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.Type toResolve) {\n    while (true) {\n        if (toResolve instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(toResolve));\n            toResolve = com.google.gson.internal.$Gson$Types.resolveTypeVariable(context, contextRawType, typeVariable);\n            if (toResolve == typeVariable) {\n                return toResolve;\n            } \n        } else if ((toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())) {\n            java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.GenericArrayType) {\n            java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getGenericComponentType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, componentType);\n            return componentType == newComponentType ? original : com.google.gson.internal.$Gson$Types.arrayOf(newComponentType);\n        } else if (toResolve instanceof java.lang.reflect.ParameterizedType) {\n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(toResolve));\n            java.lang.reflect.Type java.lang.reflect.Type = original.getOwnerType();\n            java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, ownerType);\n            boolean boolean = newOwnerType != ownerType;\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getActualTypeArguments();\n            for (int int = 0, int int = args.int ; t < length ; t++) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, args[t]);\n                if (resolvedTypeArgument != (args[t])) {\n                    if (!changed) {\n                        args = args.clone();\n                        changed = true;\n                    } \n                    args[t] = resolvedTypeArgument;\n                } \n            }\n            return changed ? com.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args) : original;\n        } else if (toResolve instanceof java.lang.reflect.WildcardType) {\n            java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(toResolve));\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getLowerBounds();\n            java.lang.reflect.Type[] java.lang.reflect.Type[] = original.getUpperBounds();\n            if ((originalLowerBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalLowerBound[0]);\n                if (lowerBound != (originalLowerBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.supertypeOf(lowerBound);\n                } \n            } else if ((originalUpperBound.int) == 1) {\n                java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(context, contextRawType, originalUpperBound[0]);\n                if (upperBound != (originalUpperBound[0])) {\n                    return com.google.gson.internal.$Gson$Types.subtypeOf(upperBound);\n                } \n            } \n            return original;\n        } else {\n            return toResolve;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8286a2cc-3e61-11e6-ada5-f31fa51f160d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[264,265,273,491,492,493,274,275,276,7,280,281,282,283,494,495,11,285,13,15,17,20,21,23,27,28,29,30,31,469,33,36,42,43,45,47,48,49,50,496,497,498,499,500,501,52,502,503,504,59,470,471,60,472,473,474,306,505,506,475,507,508,509,510,511,512,513,514,515,516,517,518,519,520,80,83,326,84,85,87,88,91,95,104,105,478,521,522,523,524,525,334,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,109,546,547,548,549,550,551,111,112,113,115,116,118,119,121,123,125,126,128,131,133,134,552,136,139,141,142,143,144,146,147,149,371,150,151,152,153,154,155,156,158,159,160,373,374,376,377,379,380,381,382,383,384,385,386,387,480,166,167,168,481,482,172,173,174,175,176,177,178,179,180,184,186,553,188,485,394,192,554,555,556,557,558,559,194,560,561,562,202,203,205,563,564,565,207,208,209,215,566,411,567,216,568,569,416,570,417,218,571,572,573,220,574,575,576,429,431,577,578,579,433,580,487,581,438,440,488,489,582,583,225,226,229,230,584,585,449,451,586,587,588,589,590,591,592,593,594],"tindex":"8286c9dd-3e61-11e6-ada5-7f12e8d778f5","method":{"position":"com.google.gson.Gson:780","type":"CtMethodImpl","sourcecode":"private static void assertFullConsumption(java.lang.Object obj, com.google.gson.stream.JsonReader reader) {\n    if (obj == null) {\n        {\n            try {\n                if ((obj != null) && ((reader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonIOException(\"JSON document was not fully consumed.\");\n                } \n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"obj"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[149],"tindex":"8286c9de-3e61-11e6-ada5-3bda908947cb","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"8286c9df-3e61-11e6-ada5-bd76c153cd2d","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"8286f0f0-3e61-11e6-ada5-475593e79718","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[],"tindex":"8286f0f1-3e61-11e6-ada5-f7f632d05365","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"bound","b":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"8286f0f2-3e61-11e6-ada5-d164abc4b23c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8286f0f3-3e61-11e6-ada5-1952a9dbb068","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"82871804-3e61-11e6-ada5-f3aabcf95cb8","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[595],"tindex":"82871805-3e61-11e6-ada5-8f381ee6475a","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if (property == null) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"82871806-3e61-11e6-ada5-13713804e52c","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"82871807-3e61-11e6-ada5-7b74fb7993e6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[224,225,226,228,229,231],"tindex":"82871808-3e61-11e6-ada5-812f9d5de4df","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion <= (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"82871809-3e61-11e6-ada5-9d7d4c2d6814","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:409","type":"CtBinaryOperatorImpl","sourcecode":"pivotLeft != null"},"failures":[596,597,598,599],"tindex":"82873f1a-3e61-11e6-ada5-d724942f2a78","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:686","type":"CtMethodImpl","sourcecode":"void add(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            node.int = 1;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node;\n            (int)++;\n            if (((int) > 0) && (((int) & 1) == 0)) {\n                (int)++;\n                (int)--;\n                (int)++;\n            } \n            for (int int = 4 ; ((int) & (scale - 1)) == (scale - 1) ; scale *= 2) {\n                if ((int) == 0) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                } else if ((int) == 1) {\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    center.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    center.int = (right.int) + 1;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = center;\n                    int = 0;\n                } else if ((int) == 2) {\n                    int = 0;\n                } \n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pivotLeft":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[224,225,226,227,228,229,230,231],"tindex":"82873f1b-3e61-11e6-ada5-37dccf6e396f","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        {\n            if (since != null) {\n                {\n                    return (isValidSince(since)) && (isValidUntil(until));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[466,0,263,264,265,266,267,268,1,2,4,273,491,492,493,274,275,276,600,277,7,8,468,601,602,9,280,281,282,283,494,495,10,11,284,285,286,12,13,14,15,16,17,18,19,20,21,287,22,23,24,25,26,27,28,29,30,31,32,469,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,288,50,289,496,497,498,290,291,292,293,51,499,500,294,501,52,53,295,502,54,296,503,297,504,55,56,298,57,58,299,59,300,470,471,60,61,301,62,472,63,302,303,473,304,474,305,306,307,64,65,66,67,68,69,70,603,505,604,506,308,475,507,508,309,310,509,510,311,605,312,511,71,512,513,514,515,313,314,315,516,72,316,317,517,73,318,74,75,319,320,518,76,321,519,322,606,520,323,77,78,324,79,80,81,82,83,325,326,84,85,86,87,88,327,476,328,89,90,91,92,329,93,330,477,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,607,608,478,331,521,332,609,610,611,522,523,333,524,525,334,612,613,614,615,616,617,526,335,336,618,619,527,528,620,337,529,338,339,621,530,340,531,532,341,533,342,343,622,623,344,345,534,624,625,346,626,535,536,627,537,538,539,540,347,628,348,629,349,350,541,542,351,543,544,352,545,353,630,109,546,354,355,356,357,358,359,360,547,548,631,361,549,362,632,550,633,363,364,634,365,551,635,110,111,112,113,114,115,116,117,118,119,120,121,636,122,123,124,125,368,126,369,127,128,129,130,370,131,132,133,134,552,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,371,150,151,152,153,154,155,156,157,158,159,160,161,372,162,163,164,373,374,375,376,165,377,378,379,380,381,382,383,384,385,386,480,166,167,168,481,388,389,169,170,390,391,392,171,482,172,173,174,175,483,176,177,178,179,180,181,393,182,183,484,184,185,186,187,553,188,189,485,190,191,394,192,395,396,637,397,398,399,400,401,554,555,402,403,404,556,557,558,405,559,193,194,195,560,406,561,407,562,196,197,198,199,200,201,408,202,203,204,205,563,564,409,565,206,486,207,208,209,210,211,212,213,214,215,566,410,411,412,567,216,217,413,568,414,415,569,416,570,417,418,218,571,419,572,219,573,420,421,422,423,424,220,425,574,426,427,575,428,576,221,429,430,431,577,432,578,579,433,580,434,435,487,436,437,581,222,438,439,440,441,223,488,489,442,443,582,444,583,445,224,225,226,227,228,229,230,231,490,584,446,232,233,447,234,235,236,237,238,585,448,449,450,451,452,586,587,453,588,454,589,590,591,455,592,593,456,239,240,638,241,242,460,461,243,244,245,464,465,594],"tindex":"8287662c-3e61-11e6-ada5-cbe7f53c2f2a","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((com.google.gson.TypeAdapter<T>) != null) {\n                        throw new java.lang.AssertionError();\n                    } \n                    com.google.gson.TypeAdapter<T> = typeAdapter;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"8287662d-3e61-11e6-ada5-f19e8fb6105a","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"82878d3e-3e61-11e6-ada5-43f13057fada","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:226","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[],"tindex":"82878d3f-3e61-11e6-ada5-f1e429ea93d5","method":{"position":"com.google.gson.internal.LinkedTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if ((root != null) && (root != null)) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root","right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"82878d40-3e61-11e6-ada5-19c28243494d","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"82878d41-3e61-11e6-ada5-69a20a3b3b1d","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element.isString()) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"8287b452-3e61-11e6-ada5-091f0b14f9d8","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8287b453-3e61-11e6-ada5-41fc3728d17e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8287b454-3e61-11e6-ada5-63b70eb0a77a","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:132","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"8287b455-3e61-11e6-ada5-a9490ae780dc","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n                    return node != null ? node.V : null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"8287b456-3e61-11e6-ada5-35edc47595c3","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if ((src.length()) == 0) {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"8287db67-3e61-11e6-ada5-115a52c71709","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (src != null) {\n        toJson(src, src.getClass(), writer);\n    } else {\n        toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"8287db68-3e61-11e6-ada5-07bfb2dcf110","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"jsonElement","this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"8287db69-3e61-11e6-ada5-8713ffd86e5a","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8287db6a-3e61-11e6-ada5-b95267043c50","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"8287db6b-3e61-11e6-ada5-6703955090d3","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:649","type":"CtFieldReadImpl","sourcecode":"prettyPrinting"},"failures":[597,639,640,641,642,643,644,645,646,647],"tindex":"8287db6c-3e61-11e6-ada5-7f3598f1f681","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"prettyPrinting":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:578","type":"CtBinaryOperatorImpl","sourcecode":"root == null"},"failures":[596,597,648,599],"tindex":"8288027d-3e61-11e6-ada5-63991f6b8dc9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:626","type":"CtMethodImpl","sourcecode":"void reset(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root == null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root ; n != null ; n = n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                n.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n                stackTop = n;\n            }\n            com.google.gson.internal.LinkedHashTreeMap.AvlIterator.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = stackTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"root":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[12,14,18,26,100,348,364,649,387,650,651,652,653,654,655,405,211],"tindex":"8288298e-3e61-11e6-ada5-698c6c41705a","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:467","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[],"tindex":"8288298f-3e61-11e6-ada5-617e6ee1b195","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (timeStyle == timeStyle) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"timeStyle","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[254,255,256,257,656,657,658,258,259,260,261,262,659,660,661,662,663,664,665,266,267,268,666,667,668,4,669,269,670,671,672,271,673,674,675,676,272,277,8,282,287,469,297,55,56,298,57,58,299,300,471,61,302,303,473,474,307,66,67,68,69,70,73,75,606,77,324,476,96,97,98,102,103,108,149,371,374,376,379,381,382,384,677,482,172,173,174,175,483,176,180,182,187,485,200,201,206,208,209,210,211,212,213,214,411,415,416,417,436,438,442,582,457,458,459,678,463,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701],"tindex":"82882990-3e61-11e6-ada5-2da6e4591f86","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if ((target instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(target instanceof java.lang.reflect.ParameterizedType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"82882991-3e61-11e6-ada5-7500bc9da1f3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"82884fa2-3e61-11e6-ada5-a738c38980db","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (src == src) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"src","context":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"82884fa3-3e61-11e6-ada5-73c4d31b8483","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"82884fa4-3e61-11e6-ada5-df80bb353123","method":{"position":"com.google.gson.internal.bind.TypeAdapters:736","type":"CtMethodImpl","sourcecode":"public T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.Map<java.lang.String, T>.get(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[41,219],"tindex":"82884fa5-3e61-11e6-ada5-572194337794","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:438","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[],"tindex":"82884fa6-3e61-11e6-ada5-c79fd6521fe1","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if ((com.google.gson.TypeAdapter<T>) != null) {\n                        throw new java.lang.AssertionError();\n                    } \n                    com.google.gson.TypeAdapter<T> = typeAdapter;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:166","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.Class<?>"},"failures":[],"tindex":"828876b7-3e61-11e6-ada5-03d5faff6cd2","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n                    return node != null ? node.V : null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl","sourcecode":"upperBound != (originalUpperBound[0])"},"failures":[],"tindex":"828876b8-3e61-11e6-ada5-87b983cf4ddd","method":{"position":"com.google.gson.TreeTypeAdapter:84","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter != (typeAdapter[0])) {\n        {\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , false , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"typeAdapter","upperBound":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"828876b9-3e61-11e6-ada5-e9d2425e51db","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"828876ba-3e61-11e6-ada5-37af1b611d15","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:200","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedHashTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key instanceof com.google.gson.JsonObject) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"828876bb-3e61-11e6-ada5-273d99e1c68c","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"82889dcc-3e61-11e6-ada5-7924c2f9a9c3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:586","type":"CtBinaryOperatorImpl","sourcecode":"(stackSize) == 1"},"failures":[702],"tindex":"82889dcd-3e61-11e6-ada5-f76ea8277b6d","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == 1) {\n        {\n            return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"modifier"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"82889dce-3e61-11e6-ada5-67567f7bec8b","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"82889dcf-3e61-11e6-ada5-bd38f14901ce","method":{"position":"com.google.gson.GsonBuilder:261","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy serializationPolicy) {\n    if (serializationPolicy == serializationPolicy) {\n        {\n            com.google.gson.GsonBuilder.this.com.google.gson.LongSerializationPolicy = serializationPolicy;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"serializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"serializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"82889dd0-3e61-11e6-ada5-273d6940ce51","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        com.google.gson.internal.Streams.write(jsonElement, writer);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[255,262,298,77,96,97,98,102,103,108,200,201,212],"tindex":"8288c4e1-3e61-11e6-ada5-ff70e09d798c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:75","type":"CtMethodImpl","sourcecode":"private void put(com.google.gson.JsonElement value) {\n    if (value.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((java.lang.String) != null) {\n                if ((!(value.isJsonNull())) || (getSerializeNulls())) {\n                    com.google.gson.JsonObject com.google.gson.JsonObject = ((com.google.gson.JsonObject)(peek()));\n                    object.add(java.lang.String, value);\n                } \n                java.lang.String = null;\n            } else if (java.util.List<com.google.gson.JsonElement>.isEmpty()) {\n                com.google.gson.JsonElement = value;\n            } else {\n                com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n                if (element instanceof com.google.gson.JsonArray) {\n                    ((com.google.gson.JsonArray)(element)).add(value);\n                } else {\n                    throw new java.lang.IllegalStateException();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8288c4e2-3e61-11e6-ada5-13ee5fa894da","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:188","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.reflect.WildcardType"},"failures":[0,1,2,3,4,7,8,9,10,11,12,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,469,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245],"tindex":"8288c4e3-3e61-11e6-ada5-1d93af1e7aa2","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.WildcardType) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8288c4e4-3e61-11e6-ada5-5756d9d57598","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[394,192],"tindex":"8288ebf5-3e61-11e6-ada5-55ea78b53519","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"8288ebf6-3e61-11e6-ada5-3f1f9f1b65dc","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"8288ebf7-3e61-11e6-ada5-95c2c31c18ba","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl","sourcecode":"serializeSpecialFloatingPointValues"},"failures":[346,349,350,356,361,363,460],"tindex":"8288ebf8-3e61-11e6-ada5-5367297ddcd0","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"82891309-3e61-11e6-ada5-07348a9a7c5f","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (!(key instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (key instanceof java.lang.Class<?>) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n                    return node != null ? node.V : null;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"8289130a-3e61-11e6-ada5-09084080d50f","method":{"position":"com.google.gson.Gson:617","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(com.google.gson.JsonElement jsonElement) {\n    if (jsonElement.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(jsonElement, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:882","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NULL)"},"failures":[],"tindex":"8289130b-3e61-11e6-ada5-7f2db0529089","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NULL":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[],"tindex":"8289130c-3e61-11e6-ada5-894bb4138697","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"8289130d-3e61-11e6-ada5-05fd62a5407b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"8289130e-3e61-11e6-ada5-39535bde67b7","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"8289130f-3e61-11e6-ada5-87fd722c9cf0","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl","sourcecode":"(java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))"},"failures":[703],"tindex":"82893a20-3e61-11e6-ada5-e1ad57b6d598","method":{"position":"com.google.gson.stream.JsonWriter:461","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(double value) throws java.io.IOException {\n    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.append(java.lang.Double.toString(value));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"82893a21-3e61-11e6-ada5-8b913aa4b83a","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"82893a22-3e61-11e6-ada5-8967ceac7ed3","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new java.io.IOException();\n                    } else {\n                        {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:137","type":"CtInvocationImpl","sourcecode":"java.util.EnumSet.class.isAssignableFrom(rawType)"},"failures":[],"tindex":"82893a23-3e61-11e6-ada5-c92afb0c086b","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type.isAssignableFrom(rawType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.EnumSet.class":"type","rawType":"rawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[35,40,42,48,234,237],"tindex":"82896134-3e61-11e6-ada5-ddb642b78623","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name == null) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            int int = 0;\n            char char = name.charAt(index);\n            while (index < ((name.length()) - 1)) {\n                if (java.lang.Character.isLetter(firstCharacter)) {\n                    break;\n                } \n                fieldNameBuilder.append(firstCharacter);\n                firstCharacter = name.charAt((++index));\n            }\n            if (index == (name.length())) {\n                return fieldNameBuilder.toString();\n            } \n            if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                return fieldNameBuilder.append(modifiedTarget).toString();\n            } else {\n                return name;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"82896135-3e61-11e6-ada5-932b6502d406","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:115","type":"CtInvocationImpl","sourcecode":"primitive.isNumber()"},"failures":[],"tindex":"82896136-3e61-11e6-ada5-3dc5c187945a","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isNumber()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"82896137-3e61-11e6-ada5-719da6bb773d","method":{"position":"com.google.gson.DefaultDateTypeAdapter:70","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.util.Date src, java.lang.reflect.Type typeOfSrc, com.google.gson.JsonSerializationContext context) {\n    if (typeOfSrc instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            synchronized(java.text.DateFormat) {\n                java.lang.String java.lang.String = java.text.DateFormat.format(src);\n                return new com.google.gson.JsonPrimitive(dateFormatAsString);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:87","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Date.class)"},"failures":[],"tindex":"82896138-3e61-11e6-ada5-bdfd9296c96f","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == src) {\n        {\n            return toJsonTree(src);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.sql.Date.class":"src","typeOfT":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"82896139-3e61-11e6-ada5-4542a38758ee","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        {\n            if (since != null) {\n                {\n                    return (isValidSince(since)) && (isValidUntil(until));\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"8289613a-3e61-11e6-ada5-893daea21656","method":{"position":"com.google.gson.internal.bind.TypeAdapters:414","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuilder value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value((value == null ? null : value.toString()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl","sourcecode":"rawSupertype == toResolve"},"failures":[466,0,263,264,265,266,267,268,1,2,3,704,4,705,6,273,491,492,493,274,275,276,600,277,7,8,468,601,602,9,280,281,282,283,494,495,10,11,284,285,286,12,13,14,15,16,17,18,19,20,21,287,22,23,24,25,26,27,28,29,30,31,32,469,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,288,50,289,496,497,498,290,291,292,293,51,499,500,294,501,52,53,295,502,54,296,503,297,504,55,56,298,57,58,299,59,300,470,471,60,61,301,62,472,63,302,303,473,304,474,305,306,307,64,65,66,67,68,69,70,603,505,604,506,308,475,507,508,309,310,509,510,311,605,312,511,71,512,513,514,515,313,314,315,516,72,316,317,517,73,318,74,75,319,320,518,76,321,519,322,606,520,323,77,78,324,79,80,81,82,83,325,326,84,85,86,87,88,327,476,328,89,90,91,92,329,93,330,477,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,607,608,478,331,521,332,609,610,611,522,523,333,524,525,334,612,613,614,615,616,617,526,335,336,618,619,527,528,620,337,529,338,339,621,530,340,531,532,341,533,342,343,622,623,344,345,534,624,625,346,626,535,536,627,537,538,539,540,347,628,348,629,349,350,541,542,351,543,544,352,545,353,630,109,546,354,355,356,357,358,359,360,547,548,631,361,549,362,632,550,633,363,364,634,365,551,635,110,111,112,113,114,115,116,117,118,119,120,121,636,122,123,124,125,368,126,369,127,128,129,130,370,131,132,133,134,552,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,371,150,151,152,153,154,155,156,157,158,159,160,161,372,162,163,164,373,374,375,376,165,377,378,379,380,381,382,383,384,385,386,480,166,167,168,481,388,389,169,170,390,391,392,171,482,172,173,174,175,483,176,177,178,179,180,181,393,182,183,484,184,185,186,187,553,188,189,485,190,191,394,192,395,396,637,397,398,399,400,401,554,555,402,403,404,556,557,558,405,559,193,194,195,560,406,561,407,562,196,197,198,199,200,201,408,202,203,204,205,563,564,409,565,206,486,207,208,209,210,211,212,213,214,215,566,410,411,412,216,217,568,414,569,416,417,418,218,571,572,219,573,420,421,422,423,424,220,425,574,426,427,575,428,576,221,429,430,431,432,578,579,433,580,435,487,436,437,581,222,438,439,440,441,223,488,489,442,444,583,224,225,226,227,228,229,230,231,584,446,232,233,234,235,236,237,238,585,448,449,450,451,452,586,587,453,588,454,589,590,591,455,592,593,456,239,240,638,241,242,460,461,243,244,245,464,465,594,247,248,250,251,706,252],"tindex":"8289884b-3e61-11e6-ada5-e10100cba405","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8289884c-3e61-11e6-ada5-bbf790d17984","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"8289884d-3e61-11e6-ada5-0d19ccd5b526","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[40,42,237],"tindex":"8289884e-3e61-11e6-ada5-03418ea25555","method":{"position":"com.google.gson.FieldNamingPolicy:72","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \" \"));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"8289884f-3e61-11e6-ada5-a54be573e70d","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (annotation != null) {\n                        double double = annotation.value();\n                        if (annotationVersion <= (double)) {\n                            return false;\n                        } \n                    } \n                    return true;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"8289af60-3e61-11e6-ada5-e3243cff93b1","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"8289af61-3e61-11e6-ada5-67cc8c7a1e1e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:293","type":"CtInvocationImpl","sourcecode":"com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)"},"failures":[],"tindex":"8289af62-3e61-11e6-ada5-2fa5340b1cb1","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element.isString()) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"8289af63-3e61-11e6-ada5-4112fc9337ff","method":{"position":"com.google.gson.internal.bind.SqlDateTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized java.sql.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        final long long = java.text.DateFormat.parse(in.nextString()).getTime();\n        return new java.sql.Date(utilDate);\n    } catch (java.text.ParseException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:401","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_END_OBJECT)"},"failures":[],"tindex":"8289af64-3e61-11e6-ada5-d15a4883cd4e","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:35","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] buffer, int offset, int counter) {\n    if (offset == counter) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_END_OBJECT":"counter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:377","type":"CtBinaryOperatorImpl","sourcecode":"lowerBound != (originalLowerBound[0])"},"failures":[],"tindex":"8289d675-3e61-11e6-ada5-41e989e5d821","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key != (key[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalLowerBound":"key","lowerBound":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:497","type":"CtBinaryOperatorImpl","sourcecode":"(typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)"},"failures":[],"tindex":"8289d676-3e61-11e6-ada5-49623c7f7737","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if ((target instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!(target instanceof java.lang.reflect.ParameterizedType)) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (target instanceof java.lang.String) {\n                        return true;\n                    } \n                    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n                    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"8289d677-3e61-11e6-ada5-77f1f52d2a74","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.TypeVariable) {\n        {\n            if (src == src) {\n                {\n                    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n                    toJson(src, typeOfSrc, writer);\n                    return writer.toString();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467248391359/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0}],"header":{"groupId":"com.google.code.gson","transformationCount":100,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":459,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":517,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":33,"com.google.gson.functional.StringTest.testStringValueDeserialization":516,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":129,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":499,"com.google.gson.stream.JsonWriterTest.testRepeatedName":25,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":58,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":443,"com.google.gson.MixedStreamTest.testWriteLenient":283,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":373,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":424,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":341,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":298,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":83,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":93,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":423,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":412,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":192,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":397,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":364,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":381,"com.google.gson.functional.ObjectTest.testSingletonLists":160,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":246,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":392,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":12,"com.google.gson.stream.JsonWriterTest.testStrings":46,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":372,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":50,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":507,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":431,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":353,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":204,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":510,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":526,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":178,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":205,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":410,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":38,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":303,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":389,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":336,"com.google.gson.functional.EnumTest.testEnumCaseMapping":361,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":286,"com.google.gson.functional.JsonTreeTest.testToJsonTree":484,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":210,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":508,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":308,"com.google.gson.stream.JsonWriterTest.testNulls":22,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":74,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":339,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":201,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":496,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":328,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":90,"com.google.gson.functional.ObjectTest.testNullDeserialization":437,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":180,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":524,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":428,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":49,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":335,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":133,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":434,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":48,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":487,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":137,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":418,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":417,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":506,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":202,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":490,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":172,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":234,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":260,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":403,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":374,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":407,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":81,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":495,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":249,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":1,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":302,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":127,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":408,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":171,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":230,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":13,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":41,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":270,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":427,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":62,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":477,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":147,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":68,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":454,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":369,"com.google.gson.stream.JsonWriterTest.testEmptyArray":15,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":261,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":458,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":311,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":132,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":310,"com.google.gson.functional.CollectionTest.testSetDeserialization":296,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":193,"com.google.gson.functional.EnumTest.testEnumSet":52,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":165,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":479,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":404,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":69,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":98,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards":529,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":493,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":167,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":67,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":453,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":37,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":414,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":51,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":502,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":460,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":536,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":75,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":219,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":247,"com.google.gson.functional.MapTest.testMapSerialization":116,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":220,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":406,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":456,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":470,"com.google.gson.functional.MapTest.testSerializeMaps":110,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":274,"com.google.gson.functional.MapTest.testComplexKeysSerialization":125,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":478,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":0,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":241,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":182,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":360,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":146,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":294,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":321,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":359,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":208,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":59,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":436,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":531,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":472,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":100,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":128,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":396,"com.google.gson.functional.PrettyPrintingTest.testMap":206,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":221,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":357,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":203,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":352,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":473,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":519,"com.google.gson.functional.CollectionTest.testQueueSerialization":87,"com.google.gson.functional.MapTest.testMapSerializationEmpty":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":256,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":42,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":44,"com.google.gson.functional.MapTest.testMapOfMapSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":497,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":17,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":188,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":326,"com.google.gson.functional.FieldNamingTest.testIdentity":275,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":518,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":28,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":222,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":438,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":61,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":159,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":324,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":483,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":20,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":390,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":320,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":444,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":504,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":494,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":187,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":344,"com.google.gson.functional.MapTest.testMapSubclassSerialization":109,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":216,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":367,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":480,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":195,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":281,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":401,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":375,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":488,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":356,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":66,"com.google.gson.functional.EnumTest.testEnumSubclass":55,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":354,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":430,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":130,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":411,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":99,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":292,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":177,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":29,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":533,"com.google.gson.stream.JsonWriterTest.testTwoNames":16,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":445,"com.google.gson.stream.JsonWriterTest.testNullName":23,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":304,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":8,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":468,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":31,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":290,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":27,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":422,"com.google.gson.MixedStreamTest.testWriteNulls":345,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":378,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":236,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":26,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":232,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":181,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":103,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":161,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":383,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":245,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":471,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":455,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":118,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":276,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":189,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":73,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":156,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":10,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":213,"com.google.gson.JsonParserTest.testParseMixedArray":14,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":395,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":474,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":530,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":242,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":498,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":467,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":211,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":108,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":347,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":380,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":112,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":150,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":142,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":140,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":288,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":250,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":316,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":173,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":77,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":447,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":387,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":365,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":82,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":176,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":117,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":207,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":343,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":144,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":413,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":451,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":402,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":155,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":317,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":394,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":271,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":54,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":85,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":215,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":399,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":157,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":323,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":376,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":5,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":503,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":3,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":528,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":198,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":60,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":174,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":307,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":370,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":6,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":265,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":415,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":485,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":101,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":441,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":426,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":78,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":91,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":491,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":194,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField":532,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":371,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":139,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":143,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":259,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":535,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":255,"com.google.gson.stream.JsonWriterTest.testNullStringValue":19,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":500,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":305,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":416,"com.google.gson.stream.JsonWriterTest.testEmptyObject":36,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":106,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":53,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":141,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":463,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":457,"com.google.gson.functional.MapTest.testGeneralMapField":122,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":425,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":229,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":131,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":238,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":262,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":120,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":136,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":152,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":337,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":348,"com.google.gson.MixedStreamTest.testReadMixedStreamed":527,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":492,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":94,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":350,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":481,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":39,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":476,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":450,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":258,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":158,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":325,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":226,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":267,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":24,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":257,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":486,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":384,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":105,"com.google.gson.functional.ObjectTest.testNestedDeserialization":442,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":170,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":331,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":461,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":386,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":449,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":244,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":362,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":520,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":65,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":291,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":301,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":377,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":96,"com.google.gson.functional.ObjectTest.testNullSerialization":330,"com.google.gson.stream.JsonWriterTest.testDoubles":43,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":80,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":515,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":121,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":40,"com.google.gson.functional.MapTest.testInterfaceTypeMap":119,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":469,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":332,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":149,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":56,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":197,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":368,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":334,"com.google.gson.MixedStreamTest.testWriteClosed":285,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":89,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":462,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":162,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":509,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":70,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":148,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":314,"com.google.gson.stream.JsonWriterTest.testLongs":21,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":175,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":264,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":151,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":163,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":88,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":512,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":268,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":293,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":501,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":464,"com.google.gson.stream.JsonWriterTest.testNumbers":45,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":184,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":421,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":482,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":489,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":183,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":227,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":313,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":405,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":523,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":534,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":505,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":513,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":113,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":435,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":35,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":138,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":440,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":84,"com.google.gson.functional.MapTest.testRawMapSerialization":124,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":280,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":199,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":76,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":168,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":312,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":329,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":231,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":355,"com.google.gson.ObjectTypeAdapterTest.testSerialize":11,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":278,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":134,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":346,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":299,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":237,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":272,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":71,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":521,"com.google.gson.functional.MapTest.testMapWithQuotes":114,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":338,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":398,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":522,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":97,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":327,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":218,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":252,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":191,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":30,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":382,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":63,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":439,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":212,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":429,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":240,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":309,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":263,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":253,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":266,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":300,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":322,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":295,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":466,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":64,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":228,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":342,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":79,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":224,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":514,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":217,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":358,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":366,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":391,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":319,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":104,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":196,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":432,"com.google.gson.functional.ObjectTest.testNestedSerialization":169,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":107,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":135,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":153,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":525,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":225,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":123,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":214,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":251,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":284,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":351,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":47,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":166,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":419,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":388,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":475,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":318,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":287,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":315,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":433,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":511,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":200,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":235,"com.google.gson.functional.CollectionTest.testSetSerialization":95,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":379,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":102,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":209,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":277,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":185,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":289,"com.google.gson.MixedStreamTest.testWriteInvalidState":282,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":164,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":239,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":400,"com.google.gson.stream.JsonWriterTest.testBooleans":18,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":254,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":273,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":349,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":179,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":465,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":2,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":448,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":72,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":340,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":279,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":32,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":233},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"450a2397-3e40-11e6-ac1e-bd185d211f63","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1240","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287],"tindex":"450a71b8-3e40-11e6-ac1e-31170e6d6433","method":{"position":"com.google.gson.stream.JsonWriter:324","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter open(int empty, java.lang.String openBracket) throws java.io.IOException {\n    if (empty == empty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            beforeValue(true);\n            push(empty);\n            java.io.Writer.write(openBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"empty","com.google.gson.stream.JsonReader.PEEKED_BEGIN_ARRAY":"empty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"450a98c9-3e40-11e6-ac1e-1180da566329","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"450a98ca-3e40-11e6-ac1e-f16dddb80948","method":{"position":"com.google.gson.internal.bind.TypeAdapters:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.lang.Boolean.valueOf(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[63,66,67,71,72,139,141,142,146],"tindex":"450a98cb-3e40-11e6-ac1e-c5b05be24f0b","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:84","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object array) throws java.io.IOException {\n    if (array == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (array == null) {\n                out.nullValue();\n                return ;\n            } \n            out.beginArray();\n            for (int int = 0, int int = java.lang.reflect.Array.getLength(array) ; i < length ; i++) {\n                E E = ((E)(java.lang.reflect.Array.get(array, i)));\n                com.google.gson.TypeAdapter<E>.write(out, value);\n            }\n            out.endArray();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"array"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"450abfdc-3e40-11e6-ac1e-3788109cf072","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(src instanceof java.lang.reflect.ParameterizedType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:98","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"450abfdd-3e40-11e6-ac1e-012bbc2d9384","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:804","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"450abfde-3e40-11e6-ac1e-2fd4af2351f4","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[],"tindex":"450ae6ef-3e40-11e6-ac1e-c5a5e464e298","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[75,288,271],"tindex":"450ae6f0-3e40-11e6-ac1e-e16524c50bd1","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"450ae6f1-3e40-11e6-ac1e-e3a06b26d32c","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isJsonPrimitive()) {\n        com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            return java.lang.String.valueOf(primitive.getAsNumber());\n        } else if (primitive.isBoolean()) {\n            return java.lang.Boolean.toString(primitive.getAsBoolean());\n        } else if (primitive.isString()) {\n            return primitive.getAsString();\n        } else {\n            throw new java.lang.AssertionError();\n        }\n    } else if (keyElement.isJsonNull()) {\n        return \"null\";\n    } else {\n        throw new java.lang.AssertionError();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"450b3412-3e40-11e6-ac1e-7bba03b764e4","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"450b3413-3e40-11e6-ac1e-bfb1d60042a5","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"typeOfT","java.sql.Timestamp.class":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"450b5b24-3e40-11e6-ac1e-b91f3223027f","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:137","type":"CtMethodImpl","sourcecode":"private void expect(com.google.gson.stream.JsonToken expected) throws java.io.IOException {\n    if ((expected != expected) && (token != expected)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((peek()) != expected) {\n                throw new java.lang.IllegalStateException((((\"Expected \" + expected) + \" but was \") + (peek())));\n            } \n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"expected","token":"expected","com.google.gson.stream.JsonToken.NUMBER":"expected"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450b5b25-3e40-11e6-ac1e-a569b4161423","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n    toJson(src, typeOfSrc, writer);\n    return writer.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"450b5b26-3e40-11e6-ac1e-6dafee9e1705","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:77","type":"CtBinaryOperatorImpl","sourcecode":"(!(value.isJsonNull())) || (getSerializeNulls())"},"failures":[],"tindex":"450b5b27-3e40-11e6-ac1e-91b566f8ab1e","method":{"position":"com.google.gson.internal.LinkedTreeMap:86","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    return (findByObject(key)) != null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key","value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"450b5b28-3e40-11e6-ac1e-23c302556a81","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:123","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"450b8239-3e40-11e6-ac1e-11790836ff6c","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[11,52,54,55,58,59,289,290,61,62,75,76,77,291,78,79,80,292,293,294,288,83,86,88,91,295,296,95,297,298,299,300,301,302,99,106,107,303,125,304,148,305,306,307,150,308,152,309,165,173,174,179,180,181,182,310,183,184,185,186,187,188,189,190,191,192,193,195,311,211,312,218,242,243,244,245,313,314,249,250,315,316,317,318,258,262,264,269,270],"tindex":"450b823a-3e40-11e6-ac1e-4f3535091200","method":{"position":"com.google.gson.internal.ConstructorConstructor:128","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nprivate <T>com.google.gson.internal.ObjectConstructor<T> newDefaultImplementationConstructor(final java.lang.reflect.Type type, java.lang.Class<? super T> rawType) {\n    if (type instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (java.util.Collection.java.util.Collection.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedSet.java.util.SortedSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.EnumSet.java.util.EnumSet.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        @java.lang.SuppressWarnings(value = \"rawtypes\")\n                        public T construct() {\n                            if (type instanceof java.lang.reflect.ParameterizedType) {\n                                java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0];\n                                if (elementType instanceof java.lang.Class) {\n                                    return ((T)(java.util.EnumSet.noneOf(((java.lang.Class)(elementType)))));\n                                } else {\n                                    throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                                }\n                            } else {\n                                throw new com.google.gson.JsonIOException((\"Invalid EnumSet type: \" + (type.toString())));\n                            }\n                        }\n                    };\n                } else if (java.util.Set.java.util.Set.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashSet<java.lang.Object>()));\n                        }\n                    };\n                } else if (java.util.Queue.java.util.Queue.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedList<java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.ArrayList<java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            if (java.util.Map.java.util.Map.java.lang.Class.isAssignableFrom(rawType)) {\n                if (java.util.SortedMap.java.util.SortedMap.java.lang.Class.isAssignableFrom(rawType)) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.TreeMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else if ((type instanceof java.lang.reflect.ParameterizedType) && (!(java.lang.String.java.lang.String.java.lang.Class.isAssignableFrom(com.google.gson.reflect.TypeToken.get(((java.lang.reflect.ParameterizedType)(type)).getActualTypeArguments()[0]).getRawType())))) {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new java.util.LinkedHashMap<java.lang.Object, java.lang.Object>()));\n                        }\n                    };\n                } else {\n                    return new com.google.gson.internal.ObjectConstructor<T>() {\n                        public T construct() {\n                            return ((T)(new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>()));\n                        }\n                    };\n                }\n            } \n            return null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[23],"tindex":"450ba94b-3e40-11e6-ac1e-0dd5bf51a090","method":{"position":"com.google.gson.stream.JsonWriter:385","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (name == null) {\n                throw new java.lang.NullPointerException(\"name == null\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException();\n            } \n            if ((int) == 0) {\n                throw new java.lang.IllegalStateException(\"JsonWriter is closed.\");\n            } \n            java.lang.String = name;\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"450ba94c-3e40-11e6-ac1e-5578d01f853c","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n    if (node != null) {\n        removeInternal(node, true);\n    } \n    return node;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[319],"tindex":"450ba94d-3e40-11e6-ac1e-0d719185156c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"insert"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450bd05e-3e40-11e6-ac1e-9bdabd662ae8","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[0,1,2,3,4,6,320,14,48,49,321,322,54,64,323,298,299,324,300,301,97,98,99,100,101,102,103,325,104,326,327,105,108,129,328,144,329,164,330,178,331,332,333,334,335,336,247,248,249,250,251,337,252,338,253,339,254,340,341,342,343,344,278,279,345,346,347],"tindex":"450bd05f-3e40-11e6-ac1e-51aa36856199","method":{"position":"com.google.gson.internal.bind.TypeAdapters:680","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, com.google.gson.JsonElement value) throws java.io.IOException {\n    if (value instanceof com.google.gson.JsonArray) {\n        {\n            if ((value == null) || (value.isJsonNull())) {\n                out.nullValue();\n            } else if (value.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = value.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    out.value(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    out.value(primitive.getAsBoolean());\n                } else {\n                    out.value(primitive.getAsString());\n                }\n            } else if (value.isJsonArray()) {\n                out.beginArray();\n                for (com.google.gson.JsonElement com.google.gson.JsonElement : value.getAsJsonArray()) {\n                    write(out, e);\n                }\n                out.endArray();\n            } else if (value.isJsonObject()) {\n                out.beginObject();\n                for (java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> java.util.Map.Entry<java.lang.String, com.google.gson.JsonElement> : value.getAsJsonObject().entrySet()) {\n                    out.name(e.getKey());\n                    write(out, e.getValue());\n                }\n                out.endObject();\n            } else {\n                throw new java.lang.IllegalArgumentException((\"Couldn't write \" + (value.getClass())));\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"450bf770-3e40-11e6-ac1e-6d4674e8824b","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450bf771-3e40-11e6-ac1e-834b4ae88d4c","method":{"position":"com.google.gson.internal.Streams:39","type":"CtMethodImpl","sourcecode":"public static com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader reader) throws com.google.gson.JsonParseException {\n    boolean boolean = true;\n    try {\n        reader.peek();\n        isEmpty = false;\n        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<com.google.gson.JsonElement>.read(reader);\n    } catch (java.io.EOFException e) {\n        if (isEmpty) {\n            return com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n        } \n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (com.google.gson.stream.MalformedJsonException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:360","type":"CtBinaryOperatorImpl","sourcecode":"candidate != null"},"failures":[],"tindex":"450bf772-3e40-11e6-ac1e-15fb553fd39c","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter != null) {\n                {\n                    if ((com.google.gson.TypeAdapter<T>) != null) {\n                        throw new java.lang.AssertionError();\n                    } \n                    com.google.gson.TypeAdapter<T> = typeAdapter;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"candidate":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"450c1e83-3e40-11e6-ac1e-15f6d62262f3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"450c1e84-3e40-11e6-ac1e-bd07b58acf0a","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450c1e85-3e40-11e6-ac1e-27272cb08e93","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450c1e86-3e40-11e6-ac1e-2f0e91413b79","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:54","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (token) {\n        case BEGIN_ARRAY :\n            java.util.List<java.lang.Object> java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object>();\n            in.beginArray();\n            while (in.hasNext()) {\n                list.add(read(in));\n            }\n            in.endArray();\n            return list;\n        case BEGIN_OBJECT :\n            java.util.Map<java.lang.String, java.lang.Object> java.util.Map<java.lang.String, java.lang.Object> = new com.google.gson.internal.LinkedTreeMap<java.lang.String, java.lang.Object>();\n            in.beginObject();\n            while (in.hasNext()) {\n                map.put(in.nextName(), read(in));\n            }\n            in.endObject();\n            return map;\n        case STRING :\n            return in.nextString();\n        case NUMBER :\n            return in.nextDouble();\n        case BOOLEAN :\n            return in.nextBoolean();\n        case NULL :\n            in.nextNull();\n            return null;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.JsonPrimitive:176","type":"CtInvocationImpl","sourcecode":"isNumber()"},"failures":[],"tindex":"450c1e87-3e40-11e6-ac1e-f34ee9ced3c0","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    java.lang.Object java.lang.Object = field.get(value);\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n    t.write(writer, fieldValue);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"450c4598-3e40-11e6-ac1e-f78564188c82","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"450c4599-3e40-11e6-ac1e-0b1a5b2f7842","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:380","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"450c459a-3e40-11e6-ac1e-a94fa7653313","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:677","type":"CtMethodImpl","sourcecode":"void reset(int targetSize) {\n    if (targetSize == targetSize) {\n        {\n            int int = ((java.lang.Integer.highestOneBit(targetSize)) * 2) - 1;\n            int = treeCapacity - targetSize;\n            int = 0;\n            int = 0;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"targetSize","com.google.gson.stream.JsonReader.PEEKED_NONE":"targetSize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450c459b-3e40-11e6-ac1e-af9c51f96419","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450c6cac-3e40-11e6-ac1e-ada648a3bbeb","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450c6cad-3e40-11e6-ac1e-3f7d53320b2f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450c6cae-3e40-11e6-ac1e-09c4d289f573","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[348,349],"tindex":"450c6caf-3e40-11e6-ac1e-0ba9feb68b4e","method":{"position":"com.google.gson.TypeAdapter:254","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.io.Reader in) throws java.io.IOException {\n    if (in == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(in);\n            return read(reader);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"in"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:552","type":"CtBinaryOperatorImpl","sourcecode":"last < i"},"failures":[],"tindex":"450c6cb0-3e40-11e6-ac1e-0d37348abda2","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i < i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"i","i":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"450c6cb1-3e40-11e6-ac1e-b71e558d1546","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if (indent != null) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"450c93c2-3e40-11e6-ac1e-49cc097dd045","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450c93c3-3e40-11e6-ac1e-41fafaf69892","method":{"position":"com.google.gson.internal.bind.TypeAdapters:385","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigInteger read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigInteger(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[7,320,350,8,9,11,13,351,352,353,354,355,356,50,357,358,51,54,55,359,56,360,361,58,362,59,289,290,61,62,63,363,64,65,66,67,68,69,364,70,71,72,365,73,366,367,74,75,76,77,291,78,79,80,292,293,81,368,82,294,288,83,85,91,295,296,93,95,297,298,299,300,301,302,369,370,99,101,371,102,372,327,106,107,373,374,375,376,377,378,113,303,119,121,122,125,129,130,131,379,132,133,134,136,137,138,139,380,381,382,141,142,383,143,145,384,146,385,386,304,387,147,148,149,305,388,306,307,150,151,308,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,159,160,422,423,161,424,425,162,426,427,163,309,165,428,166,429,430,431,167,432,168,169,433,171,434,435,436,437,172,438,173,174,439,175,440,441,442,443,176,444,445,177,178,331,179,180,181,182,310,183,184,185,186,187,188,189,191,192,193,194,446,332,195,447,333,448,334,335,449,336,450,451,311,452,453,454,207,208,212,455,456,213,457,214,458,312,215,216,217,218,219,459,220,460,461,221,462,463,222,223,464,224,465,225,226,466,467,468,469,470,238,471,239,472,473,474,242,243,244,245,313,314,475,476,246,477,478,479,480,247,481,248,249,482,250,483,484,251,485,486,337,487,315,316,488,489,490,339,491,492,493,317,494,318,495,496,497,258,498,260,499,500,501,502,503,504,263,342,505,264,506,507,508,509,265,510,511,266,267,512,513,268,514,515,269,270,271,272,273,274,275,516,517,518,519,520,521,522,523,524,525,526,277,280,281,282,285,527,528],"tindex":"450c93c4-3e40-11e6-ac1e-0b8b8ee73444","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key.isInterface()) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:350","type":"CtBinaryOperatorImpl","sourcecode":"ongoingCall != null"},"failures":[],"tindex":"450cbad5-3e40-11e6-ac1e-31db6978578a","method":{"position":"com.google.gson.Gson:881","type":"CtMethodImpl","sourcecode":"public void setDelegate(com.google.gson.TypeAdapter<T> typeAdapter) {\n    if (typeAdapter != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (typeAdapter != null) {\n                {\n                    if ((com.google.gson.TypeAdapter<T>) != null) {\n                        throw new java.lang.AssertionError();\n                    } \n                    com.google.gson.TypeAdapter<T> = typeAdapter;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ongoingCall":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:917","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_UNQUOTED)"},"failures":[],"tindex":"450cbad6-3e40-11e6-ac1e-3b2ce57c64a8","method":{"position":"com.google.gson.GsonBuilder:402","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int style) {\n    if (style == style) {\n        {\n            com.google.gson.GsonBuilder.this.int = style;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"style","com.google.gson.stream.JsonReader.PEEKED_UNQUOTED":"style"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:218","type":"CtInvocationImpl","sourcecode":"com.google.gson.reflect.TypeToken.typeEquals(ptype, to, typeVarMap)"},"failures":[529,530,531],"tindex":"450cbad7-3e40-11e6-ac1e-17b8b9a53548","method":{"position":"com.google.gson.reflect.TypeToken:238","type":"CtMethodImpl","sourcecode":"private static boolean typeEquals(java.lang.reflect.ParameterizedType from, java.lang.reflect.ParameterizedType to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeVarMap) {\n    if (com.google.gson.reflect.TypeToken.typeEquals(to, to, typeVarMap)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from.getRawType().equals(to.getRawType())) {\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = from.getActualTypeArguments();\n                java.lang.reflect.Type[] java.lang.reflect.Type[] = to.getActualTypeArguments();\n                for (int int = 0 ; i < (fromArgs.int) ; i++) {\n                    if (!(com.google.gson.reflect.TypeToken.matches(fromArgs[i], toArgs[i], typeVarMap))) {\n                        return false;\n                    } \n                }\n                return true;\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"to","typeVarMap":"typeVarMap","to":"to"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[7,8,9,11,13,356,50,51,56,360,58,59,289,290,61,62,63,363,65,66,67,68,69,364,70,71,72,365,73,367,74,75,76,77,291,78,79,80,292,293,81,368,82,294,288,83,85,91,296,93,95,298,299,300,301,302,370,99,101,102,106,107,373,374,375,376,377,113,303,119,121,122,125,129,130,131,379,132,133,134,137,138,139,380,381,141,142,383,143,145,146,385,386,304,387,147,148,149,305,388,306,307,150,151,308,415,159,160,422,423,161,424,425,162,426,427,163,309,165,428,166,430,431,167,432,168,169,433,171,434,435,172,438,173,174,439,175,440,441,442,443,176,444,445,177,178,179,180,181,182,310,183,184,185,186,187,188,189,191,192,193,195,311,452,453,207,208,212,456,213,457,214,312,215,216,217,218,219,459,220,461,221,462,463,222,223,224,465,226,238,471,239,242,243,244,245,313,314,475,476,246,477,247,481,248,249,482,250,483,484,251,485,315,316,491,317,318,258,263,264,265,510,511,266,267,512,513,268,269,270,271,272,273,274,275,277,280,281,282,285,527,528],"tindex":"450cbad8-3e40-11e6-ac1e-dbfe986aad2e","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:99","type":"CtVariableReadImpl","sourcecode":"serialization"},"failures":[319],"tindex":"450ce1e9-3e40-11e6-ac1e-2718c617a3c8","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (unlink) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialization":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl","sourcecode":"toGenericComponentType instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"450d08fa-3e40-11e6-ac1e-0beaa2d253ed","method":{"position":"com.google.gson.internal.$Gson$Types:54","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type ownerType, java.lang.reflect.Type rawType, java.lang.reflect.Type... typeArguments) {\n    return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(ownerType , rawType , typeArguments);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"ownerType"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"450d08fb-3e40-11e6-ac1e-357b82f3f248","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450d08fc-3e40-11e6-ac1e-d7949972cae4","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"450d08fd-3e40-11e6-ac1e-d5705dac5994","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"450d300e-3e40-11e6-ac1e-7d22d2e3262e","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[],"tindex":"450d300f-3e40-11e6-ac1e-e10876edc636","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    if (json == null) {\n        {\n            return ((T)(fromJson(json, typeOfT)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonParseException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:56","type":"CtUnaryOperatorImpl","sourcecode":"!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)"},"failures":[],"tindex":"450d3010-3e40-11e6-ac1e-b9661a069c52","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (!(o instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeTypeAdapter":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"450d5721-3e40-11e6-ac1e-1fae7e9590fa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:509","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.util.UUID value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[532,533,534,535,536],"tindex":"450d5722-3e40-11e6-ac1e-374661e8f7cd","method":{"position":"com.google.gson.internal.Excluder:220","type":"CtMethodImpl","sourcecode":"private boolean isInnerClass(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return (clazz.isMemberClass()) && (!(isStatic(clazz)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"450d5723-3e40-11e6-ac1e-dbb2b49e0320","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:332","type":"CtBinaryOperatorImpl","sourcecode":"(toResolve instanceof java.lang.Class) && (((java.lang.Class<?>)(toResolve)).isArray())"},"failures":[],"tindex":"450d5724-3e40-11e6-ac1e-b3c5ee32e9f3","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"450d5725-3e40-11e6-ac1e-ed14f87fd749","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:854","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"450d5726-3e40-11e6-ac1e-e948a77bb150","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset == offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"offset","com.google.gson.stream.JsonReader.PEEKED_NONE":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:314","type":"CtBinaryOperatorImpl","sourcecode":"replacement != null"},"failures":[],"tindex":"450d7e37-3e40-11e6-ac1e-d358ec98c32d","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:338","type":"CtMethodImpl","sourcecode":"private void rebalance(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> unbalanced, boolean insert) {\n    if (unbalanced != null) {\n        {\n            if (insert) {\n                {\n                    for (com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = unbalanced ; node != null ; node = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) {\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                        int int = left != null ? left.int : 0;\n                        int int = right != null ? right.int : 0;\n                        int int = leftHeight - rightHeight;\n                        if (delta == (-2)) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = rightRight != null ? rightRight.int : 0;\n                            int int = rightLeft != null ? rightLeft.int : 0;\n                            int int = rightLeftHeight - rightRightHeight;\n                            if ((rightDelta == (-1)) || ((rightDelta == 0) && (!insert))) {\n                                rotateLeft(node);\n                            } else {\n                                assert rightDelta == 1;\n                                rotateRight(right);\n                                rotateLeft(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 2) {\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                            int int = leftRight != null ? leftRight.int : 0;\n                            int int = leftLeft != null ? leftLeft.int : 0;\n                            int int = leftLeftHeight - leftRightHeight;\n                            if ((leftDelta == 1) || ((leftDelta == 0) && (!insert))) {\n                                rotateRight(node);\n                            } else {\n                                assert leftDelta == (-1);\n                                rotateLeft(left);\n                                rotateRight(node);\n                            }\n                            if (insert) {\n                                break;\n                            } \n                        } else if (delta == 0) {\n                            node.int = leftHeight + 1;\n                            if (insert) {\n                                break;\n                            } \n                        } else {\n                            assert (delta == (-1)) || (delta == 1);\n                            node.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                            if (!insert) {\n                                break;\n                            } \n                        }\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"unbalanced"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:952","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_LONG)"},"failures":[],"tindex":"450da548-3e40-11e6-ac1e-87412e9bdbce","method":{"position":"com.google.gson.stream.JsonReader:1288","type":"CtMethodImpl","sourcecode":"private boolean fillBuffer(int minimum) throws java.io.IOException {\n    if (minimum == minimum) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int -= int;\n            if ((int) != (int)) {\n                int -= int;\n                java.lang.System.arraycopy(buffer, int, buffer, 0, int);\n            } else {\n                int = 0;\n            }\n            int = 0;\n            int int;\n            while ((total = java.io.Reader.read(buffer, int, ((buffer.int) - (int)))) != (-1)) {\n                int += total;\n                if (((((int) == 0) && ((int) == 0)) && ((int) > 0)) && ((buffer[0]) == '\\ufeff')) {\n                    (int)++;\n                    (int)++;\n                    minimum++;\n                } \n                if ((int) >= minimum) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"minimum","com.google.gson.stream.JsonReader.PEEKED_LONG":"minimum"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[],"tindex":"450da549-3e40-11e6-ac1e-f9ada53f93cd","method":{"position":"com.google.gson.stream.JsonWriter:252","type":"CtMethodImpl","sourcecode":"public final void setHtmlSafe(boolean htmlSafe) {\n    if (htmlSafe) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonWriter.this.boolean = htmlSafe;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"htmlSafe"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"450da54a-3e40-11e6-ac1e-13fd7567da1b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467234585934/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":68,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
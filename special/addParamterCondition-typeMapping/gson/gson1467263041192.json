{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":364,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":38,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":134,"com.google.gson.stream.JsonWriterTest.testRepeatedName":30,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":63,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":354,"com.google.gson.MixedStreamTest.testWriteLenient":288,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":315,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":337,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":309,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":88,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":98,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":336,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":197,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":299,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":323,"com.google.gson.functional.ObjectTest.testSingletonLists":165,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":251,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":17,"com.google.gson.stream.JsonWriterTest.testStrings":51,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":55,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":344,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":209,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":383,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":183,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":210,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":43,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":320,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":291,"com.google.gson.functional.JsonTreeTest.testToJsonTree":2,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":215,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":3,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":333,"com.google.gson.stream.JsonWriterTest.testNulls":27,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":79,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":206,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":95,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":185,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":342,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":54,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":138,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":347,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":53,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":195,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":142,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":39,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":207,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":390,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":177,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":265,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":316,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":86,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":254,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":6,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":313,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":132,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":391,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":176,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":235,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":18,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":46,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":275,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":340,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":67,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":374,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":152,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":73,"com.google.gson.stream.JsonWriterTest.testEmptyArray":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":266,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":358,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":137,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":357,"com.google.gson.functional.CollectionTest.testSetDeserialization":308,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":198,"com.google.gson.functional.EnumTest.testEnumSet":57,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":170,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":74,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":103,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":116,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":172,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":12,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":72,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":360,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":42,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":56,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse":0,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":80,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":224,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":252,"com.google.gson.functional.MapTest.testMapSerialization":121,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":225,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":361,"com.google.gson.functional.MapTest.testSerializeMaps":115,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":279,"com.google.gson.functional.MapTest.testComplexKeysSerialization":130,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":5,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":246,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":187,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":294,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":151,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":306,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":213,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":64,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":105,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":393,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":133,"com.google.gson.functional.PrettyPrintingTest.testMap":211,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":91,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":226,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":208,"com.google.gson.functional.CollectionTest.testQueueSerialization":92,"com.google.gson.functional.MapTest.testMapSerializationEmpty":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":261,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":47,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":49,"com.google.gson.functional.MapTest.testMapOfMapSerialization":120,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":22,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":193,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":389,"com.google.gson.functional.FieldNamingTest.testIdentity":280,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":33,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":227,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":349,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":66,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":164,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":376,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":25,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":355,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":14,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":192,"com.google.gson.functional.MapTest.testMapSubclassSerialization":114,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":221,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":301,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":200,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":286,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":317,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":293,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":71,"com.google.gson.functional.EnumTest.testEnumSubclass":60,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":343,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":135,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":104,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":303,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":182,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":34,"com.google.gson.stream.JsonWriterTest.testTwoNames":21,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":356,"com.google.gson.stream.JsonWriterTest.testNullName":28,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":327,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":13,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":36,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":297,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":32,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":335,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":241,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":31,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":237,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":186,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":298,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":108,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":166,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":324,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":250,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":369,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":123,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":281,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":194,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":78,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":161,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":15,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":218,"com.google.gson.JsonParserTest.testParseMixedArray":19,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":247,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":191,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":216,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":113,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":322,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":117,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":155,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":147,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":145,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":307,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":255,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":379,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":178,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":82,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":328,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":300,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":87,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":181,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":122,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":212,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":149,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":381,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":276,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":59,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":90,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":220,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":162,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":318,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":10,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":325,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":8,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":388,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":203,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":65,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":179,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":314,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":332,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":11,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":270,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":334,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":377,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":106,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":352,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":339,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":62,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":83,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":96,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":380,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":199,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":144,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":264,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":260,"com.google.gson.stream.JsonWriterTest.testNullStringValue":24,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":150,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":329,"com.google.gson.stream.JsonWriterTest.testEmptyObject":41,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":394,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":111,"com.google.gson.JsonPrimitiveTest.testEquals":4,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":58,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":146,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":367,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":362,"com.google.gson.functional.MapTest.testGeneralMapField":127,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":338,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":234,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":136,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":267,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":125,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":141,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":157,"com.google.gson.MixedStreamTest.testReadMixedStreamed":387,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":395,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":159,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":99,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":375,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":44,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":373,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":359,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":263,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":163,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":231,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":272,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":29,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":9,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":262,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":228,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":110,"com.google.gson.functional.ObjectTest.testNestedDeserialization":353,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":175,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":365,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":326,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":249,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":295,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":70,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":392,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":302,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":312,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":319,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":101,"com.google.gson.stream.JsonWriterTest.testDoubles":48,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":85,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":126,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":45,"com.google.gson.functional.MapTest.testInterfaceTypeMap":124,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":154,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":61,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":202,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":305,"com.google.gson.MixedStreamTest.testWriteClosed":290,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":94,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":366,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":167,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":331,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":75,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":153,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":371,"com.google.gson.stream.JsonWriterTest.testLongs":26,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":180,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":269,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":156,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":168,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":93,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":385,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":273,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":304,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":97,"com.google.gson.stream.JsonWriterTest.testNumbers":50,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":189,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":1,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":188,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":232,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":370,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":386,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":118,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":348,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":40,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":143,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":351,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":89,"com.google.gson.functional.MapTest.testRawMapSerialization":129,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":285,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":204,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":81,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":173,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":363,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":236,"com.google.gson.ObjectTypeAdapterTest.testSerialize":16,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":283,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":139,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":310,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":242,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":277,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":76,"com.google.gson.functional.MapTest.testMapWithQuotes":119,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":102,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":257,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":196,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":35,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":68,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":350,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":217,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":245,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":341,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":268,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":258,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":271,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":311,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":69,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":233,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":84,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":229,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":222,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":109,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":201,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":345,"com.google.gson.functional.ObjectTest.testNestedSerialization":174,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":112,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":140,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":158,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":230,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":128,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":219,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":256,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":289,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":52,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":171,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":330,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":382,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":292,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":378,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":384,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":205,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":240,"com.google.gson.functional.CollectionTest.testSetSerialization":100,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":321,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":107,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":214,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":282,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":190,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":296,"com.google.gson.MixedStreamTest.testWriteInvalidState":287,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":169,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":244,"com.google.gson.stream.JsonWriterTest.testBooleans":23,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":259,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":278,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":396,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":184,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":368,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":7,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":77,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":284,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":37,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":238},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:83","type":"CtBinaryOperatorImpl","sourcecode":"superclass instanceof java.lang.Class"},"failures":[],"tindex":"0f230c9c-3e80-11e6-b48b-cd0cc9bb898a","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"superclass":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:204","type":"CtBinaryOperatorImpl","sourcecode":"ptype != null"},"failures":[],"tindex":"0f2381cd-3e80-11e6-b48b-f1f0f92bfb70","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"ptype":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:313","type":"CtBinaryOperatorImpl","sourcecode":"(value) == null"},"failures":[0],"tindex":"0f2381ce-3e80-11e6-b48b-13d86a68df14","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[1,2,3,4],"tindex":"0f2381cf-3e80-11e6-b48b-93fc3e1bd461","method":{"position":"com.google.gson.JsonPrimitive:333","type":"CtMethodImpl","sourcecode":"private static boolean isIntegral(com.google.gson.JsonPrimitive primitive) {\n    if (primitive.isBoolean()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((primitive.java.lang.Object) instanceof java.lang.Number) {\n                java.lang.Number java.lang.Number = ((java.lang.Number)(primitive.java.lang.Object));\n                return ((((number instanceof java.math.BigInteger) || (number instanceof java.lang.Long)) || (number instanceof java.lang.Integer)) || (number instanceof java.lang.Short)) || (number instanceof java.lang.Byte);\n            } \n            return false;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"primitive"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl","sourcecode":"!skipPastFound"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292],"tindex":"0f23a8e0-3e80-11e6-b48b-1bea53fc46fa","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        {\n            if (!root) {\n                {\n                    switch (peek()) {\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            if (!(boolean)) {\n                                throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                            } \n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            if ((!(boolean)) && (!root)) {\n                                throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                            } \n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            newline();\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            java.io.Writer.append(',');\n                            newline();\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            java.io.Writer.append(java.lang.String);\n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            break;\n                        default :\n                            throw new java.lang.IllegalStateException(\"Nesting problem.\");\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl","sourcecode":"deserialization"},"failures":[12,13,14,16,18,293,55,56,61,294,63,295,64,296,65,297,66,67,68,298,70,71,72,73,74,299,75,76,77,300,78,301,79,80,81,82,302,83,84,85,303,304,86,305,87,306,307,88,90,96,308,98,100,309,310,311,312,313,314,104,106,107,111,112,315,316,317,318,319,118,320,124,126,127,130,134,135,136,321,137,138,139,142,143,144,322,323,146,147,324,148,150,151,325,326,327,328,152,153,154,329,330,331,332,155,156,333,334,164,165,335,336,166,337,338,167,339,340,168,341,170,342,171,343,344,172,345,173,174,346,176,347,348,177,349,178,179,350,180,351,352,353,354,181,355,356,182,183,184,185,186,187,357,188,189,190,191,192,193,194,196,197,198,200,358,359,360,212,213,217,361,218,362,219,363,220,221,222,223,224,364,225,365,226,366,367,227,228,229,368,231,243,369,244,247,248,249,250,370,371,372,373,251,374,252,375,253,254,1,255,376,2,256,377,378,379,380,381,382,263,268,269,270,383,384,271,272,385,386,273,274,275,276,277,278,279,280,282,285,286,287,290,387,388],"tindex":"0f23cff1-3e80-11e6-b48b-e5e73cd08d5b","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[389,390,391,392,393,394,288],"tindex":"0f23f702-3e80-11e6-b48b-8b65e0b156db","method":{"position":"com.google.gson.Gson:273","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return ((float)(in.nextDouble()));\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    float float = value.floatValue();\n                    checkValidFloatingPoint(floatValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"0f23f703-3e80-11e6-b48b-7791287b01f1","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[],"tindex":"0f241e14-3e80-11e6-b48b-41d073e14c58","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        {\n            if (!root) {\n                {\n                    switch (peek()) {\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            if (!(boolean)) {\n                                throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                            } \n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            if ((!(boolean)) && (!root)) {\n                                throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                            } \n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            newline();\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            java.io.Writer.append(',');\n                            newline();\n                            break;\n                        case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                            java.io.Writer.append(java.lang.String);\n                            replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                            break;\n                        default :\n                            throw new java.lang.IllegalStateException(\"Nesting problem.\");\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:702","type":"CtBinaryOperatorImpl","sourcecode":"(last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT)) || (last == (com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT))"},"failures":[],"tindex":"0f241e15-3e80-11e6-b48b-cf78a17e3fb0","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if ((i == i) || (last == i)) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"i","last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"0f244526-3e80-11e6-b48b-e3572ba7d157","method":{"position":"com.google.gson.internal.bind.TypeAdapters:274","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:280","type":"CtInvocationImpl","sourcecode":"standardPrimitive.isAssignableFrom(classOfPrimitive)"},"failures":[],"tindex":"0f244527-3e80-11e6-b48b-4dc734bfce23","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass.isAssignableFrom(subclass)) {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n            if (superclass instanceof java.lang.Class) {\n                throw new java.lang.RuntimeException(\"Missing type parameter.\");\n            } \n            java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n            return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"standardPrimitive":"subclass","classOfPrimitive":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[12,13,14,16,18,293,55,56,61,294,63,295,64,296,65,297,66,67,68,298,70,71,72,73,74,299,75,76,77,300,78,301,79,80,81,82,302,83,84,85,303,304,86,305,87,306,307,88,90,96,308,98,100,309,310,311,312,313,314,104,106,107,111,112,315,316,317,318,319,118,320,124,126,127,130,134,135,136,321,137,138,139,142,143,144,322,323,146,147,324,148,150,151,325,326,327,328,152,153,154,329,330,331,332,155,156,333,334,164,165,335,336,166,337,338,167,339,340,168,341,170,342,171,343,344,172,345,173,174,346,176,347,348,177,349,178,179,350,180,351,352,353,354,181,355,356,182,183,184,185,186,187,357,188,189,190,191,192,193,194,196,197,198,200,358,359,360,212,213,217,361,218,362,219,363,220,221,222,223,224,364,225,365,226,366,367,227,228,229,368,231,243,369,244,247,248,249,250,370,371,372,373,251,374,252,375,253,254,1,255,376,2,256,377,378,379,380,381,382,263,268,269,270,383,384,271,272,385,386,273,274,275,276,277,278,279,280,282,285,286,287,290,387,388],"tindex":"0f244528-3e80-11e6-b48b-a70ac821ed06","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58","type":"CtMethodImpl","sourcecode":"public boolean excludeField(java.lang.reflect.Field f, boolean serialize) {\n    if ((!serialize) && (!serialize)) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(f, serialize, com.google.gson.internal.Excluder);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"serialize","skipSerialize":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"0f246c39-3e80-11e6-b48b-6512d2e8942a","method":{"position":"com.google.gson.JsonObject:121","type":"CtMethodImpl","sourcecode":"private com.google.gson.JsonElement createJsonElement(java.lang.Object value) {\n    return value == null ? com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull : new com.google.gson.JsonPrimitive(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[395,396],"tindex":"0f246c3a-3e80-11e6-b48b-17748b87066e","method":{"position":"com.google.gson.TypeAdapter:268","type":"CtMethodImpl","sourcecode":"public final T fromJson(java.lang.String json) throws java.io.IOException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            return fromJson(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:817","type":"CtVariableReadImpl","sourcecode":"isEmpty"},"failures":[],"tindex":"0f246c3b-3e80-11e6-b48b-bb7af5f9a375","method":{"position":"com.google.gson.stream.JsonReader:1331","type":"CtMethodImpl","sourcecode":"private int nextNonWhitespace(boolean throwOnEof) throws java.io.IOException {\n    if (throwOnEof) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467262752725/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            int int = int;\n            int int = int;\n            while (true) {\n                if (p == l) {\n                    int = p;\n                    if (!(fillBuffer(1))) {\n                        break;\n                    } \n                    p = int;\n                    l = int;\n                } \n                int int = buffer[(p++)];\n                if (c == '\\n') {\n                    (int)++;\n                    int = p;\n                    continue;\n                } else if (((c == ' ') || (c == '\\r')) || (c == '\\t')) {\n                    continue;\n                } \n                if (c == '/') {\n                    int = p;\n                    if (p == l) {\n                        (int)--;\n                        boolean boolean = fillBuffer(2);\n                        (int)++;\n                        if (!charsLoaded) {\n                            return c;\n                        } \n                    } \n                    checkLenient();\n                    char char = buffer[int];\n                    switch (peek) {\n                        case '*' :\n                            (int)++;\n                            if (!(skipTo(\"*/\"))) {\n                                throw syntaxError(\"Unterminated comment\");\n                            } \n                            p = (int) + 2;\n                            l = int;\n                            continue;\n                        case '/' :\n                            (int)++;\n                            skipToEndOfLine();\n                            p = int;\n                            l = int;\n                            continue;\n                        default :\n                            return c;\n                    }\n                } else if (c == '#') {\n                    int = p;\n                    checkLenient();\n                    skipToEndOfLine();\n                    p = int;\n                    l = int;\n                } else {\n                    int = p;\n                    return c;\n                }\n            }\n            if (throwOnEof) {\n                throw new java.io.EOFException(((((\"End of input\" + \" at line \") + (getLineNumber())) + \" column \") + (getColumnNumber())));\n            } else {\n                return -1;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"isEmpty":"throwOnEof"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":16,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
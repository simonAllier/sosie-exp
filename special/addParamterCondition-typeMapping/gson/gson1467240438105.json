{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":28,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":271,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":174,"com.google.gson.stream.JsonWriterTest.testRepeatedName":263,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":60,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":213,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":136,"com.google.gson.MixedStreamTest.testWriteLenient":286,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":184,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":45,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":230,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":182,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":234,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":128,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":101,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":160,"com.google.gson.functional.ObjectTest.testSingletonLists":180,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":156,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":388,"com.google.gson.stream.JsonWriterTest.testStrings":284,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":119,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":245,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":195,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":37,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":300,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":93,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":381,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":276,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":169,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":290,"com.google.gson.functional.JsonTreeTest.testToJsonTree":135,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":384,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":92,"com.google.gson.stream.JsonWriterTest.testNulls":260,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":109,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":297,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":249,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":377,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":215,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":192,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":289,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":53,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":202,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":288,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":333,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":145,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":272,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":298,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":204,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":325,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":137,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":75,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":151,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":390,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":55,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":368,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":201,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":339,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":35,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":188,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":239,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":279,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":65,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":157,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":83,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":99,"com.google.gson.stream.JsonWriterTest.testEmptyArray":253,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":326,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":7,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":52,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":218,"com.google.gson.functional.CollectionTest.testSetDeserialization":233,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":129,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":191,"com.google.gson.functional.EnumTest.testEnumSet":328,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":100,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":311,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":357,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":196,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":98,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":9,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":275,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":120,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":27,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":66,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":148,"com.google.gson.functional.MapTest.testMapSerialization":361,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":29,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":220,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":228,"com.google.gson.functional.MapTest.testSerializeMaps":356,"com.google.gson.functional.MapTest.testComplexKeysSerialization":173,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":389,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":348,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":122,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":217,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":166,"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink":252,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":78,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":237,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":243,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":61,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":397,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":312,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":369,"com.google.gson.functional.PrettyPrintingTest.testMap":382,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":373,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":31,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":322,"com.google.gson.functional.MapTest.testMapSerializationEmpty":367,"com.google.gson.functional.CollectionTest.testQueueSerialization":374,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":280,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":282,"com.google.gson.functional.MapTest.testMapOfMapSerialization":360,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":255,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":18,"com.google.gson.functional.FieldNamingTest.testIdentity":229,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":10,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":266,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":205,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":64,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":134,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":179,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":258,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":176,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":241,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":17,"com.google.gson.functional.MapTest.testMapSubclassSerialization":355,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":108,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":124,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":2,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":130,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":138,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":118,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":97,"com.google.gson.functional.EnumTest.testEnumSubclass":331,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":194,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":49,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":73,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":178,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":267,"com.google.gson.stream.JsonWriterTest.testTwoNames":254,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":177,"com.google.gson.stream.JsonWriterTest.testNullName":261,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":81,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":240,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":251,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":63,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":269,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":265,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":181,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":345,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":264,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":341,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":95,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":216,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":163,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":183,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":313,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":22,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":142,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":335,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":363,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":126,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":106,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":307,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":221,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":387,"com.google.gson.JsonParserTest.testParseMixedArray":386,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":244,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":19,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":16,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":385,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":354,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":159,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":90,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":358,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":162,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":352,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":79,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":133,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":111,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":206,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":68,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":82,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":105,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":77,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":175,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":236,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":362,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":353,"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder":250,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":113,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":225,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":330,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":231,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":123,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":247,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":308,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":139,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":394,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":167,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":6,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":392,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":294,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":316,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":56,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":89,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":207,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":36,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":395,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":54,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":153,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":58,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":211,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":187,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":332,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":70,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":112,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":232,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":334,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":158,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":164,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":324,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":321,"com.google.gson.stream.JsonWriterTest.testNullStringValue":257,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":165,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":86,"com.google.gson.stream.JsonWriterTest.testEmptyObject":274,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":25,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":161,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":329,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":33,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":222,"com.google.gson.functional.MapTest.testGeneralMapField":172,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":185,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":338,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":50,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":141,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":327,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":364,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":303,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":350,"com.google.gson.MixedStreamTest.testReadMixedStreamed":5,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":305,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":149,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":379,"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles":277,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":155,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":8,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":115,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":309,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":147,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":40,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":262,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":393,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":323,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":11,"com.google.gson.functional.ObjectTest.testNestedDeserialization":212,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":315,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":371,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":30,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":80,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":21,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":396,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":96,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":69,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":48,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":140,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":380,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":72,"com.google.gson.stream.JsonWriterTest.testDoubles":281,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":171,"com.google.gson.functional.MapTest.testInterfaceTypeMap":170,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":278,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":85,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":121,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":293,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":76,"com.google.gson.MixedStreamTest.testWriteClosed":4,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":32,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":376,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":88,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":186,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":102,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":84,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":24,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":20,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":209,"com.google.gson.stream.JsonWriterTest.testLongs":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":117,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":91,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":189,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":375,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":41,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":43,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":74,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":378,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":14,"com.google.gson.stream.JsonWriterTest.testNumbers":283,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":132,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":219,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":336,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":23,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":42,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":168,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":203,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":273,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":146,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":210,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":372,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":1,"com.google.gson.functional.MapTest.testRawMapSerialization":366,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":295,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":67,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":198,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":224,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":340,"com.google.gson.ObjectTypeAdapterTest.testSerialize":242,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":301,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":144,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":46,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":346,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":226,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":103,"com.google.gson.functional.MapTest.testMapWithQuotes":359,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":310,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":131,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":318,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":127,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":268,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":94,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":208,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":238,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":190,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":347,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":116,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":319,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":39,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":47,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":317,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":337,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":71,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":12,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":125,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":107,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":292,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":314,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":197,"com.google.gson.functional.ObjectTest.testNestedSerialization":199,"com.google.gson.internal.LinkedTreeMapTest.testClear":248,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":26,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":304,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":349,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":351,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":365,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":223,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":152,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":287,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":285,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":193,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":87,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":114,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":291,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":110,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":200,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":38,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":296,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":344,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":51,"com.google.gson.functional.CollectionTest.testSetSerialization":235,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":59,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":383,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":44,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":15,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":62,"com.google.gson.MixedStreamTest.testWriteInvalidState":3,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":370,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":143,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":34,"com.google.gson.stream.JsonWriterTest.testBooleans":256,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":320,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":227,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":246,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":214,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":13,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":391,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":104,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":302,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":270,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":342},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242],"tindex":"6ea6c0cc-3e4b-11e6-9697-6757aa5e6af0","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (type == type) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"type","context":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"6ea70eed-3e4b-11e6-9697-efc2721e0df2","method":{"position":"com.google.gson.reflect.TypeToken:122","type":"CtMethodImpl","sourcecode":"@java.lang.Deprecated\npublic boolean isAssignableFrom(java.lang.reflect.Type from) {\n    if (from instanceof java.lang.reflect.TypeVariable) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (from == null) {\n                return false;\n            } \n            if (java.lang.reflect.Type.equals(from)) {\n                return true;\n            } \n            if ((java.lang.reflect.Type) instanceof java.lang.Class<?>) {\n                return java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from));\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.ParameterizedType) {\n                return com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.ParameterizedType)(java.lang.reflect.Type)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } else if ((java.lang.reflect.Type) instanceof java.lang.reflect.GenericArrayType) {\n                return (java.lang.Class<? super T>.isAssignableFrom(com.google.gson.internal.$Gson$Types.getRawType(from))) && (com.google.gson.reflect.TypeToken.isAssignableFrom(from, ((java.lang.reflect.GenericArrayType)(java.lang.reflect.Type))));\n            } else {\n                throw com.google.gson.reflect.TypeToken.buildUnexpectedTypeError(java.lang.reflect.Type, java.lang.Class.java.lang.Class.java.lang.Class, java.lang.reflect.ParameterizedType.java.lang.reflect.ParameterizedType.java.lang.Class, java.lang.reflect.GenericArrayType.java.lang.reflect.GenericArrayType.java.lang.Class);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[243,139],"tindex":"6ea70eee-3e4b-11e6-9697-6bbfdc6fd514","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"property"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[132,133,134,135],"tindex":"6ea735ff-3e4b-11e6-9697-973cab207e37","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:157","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if ((!value) && (!value)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"value","skipSerialize":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:318","type":"CtBinaryOperatorImpl","sourcecode":"parent != null"},"failures":[244],"tindex":"6ea73600-3e4b-11e6-9697-5ddacf9edfdd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"parent":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1189","type":"CtBinaryOperatorImpl","sourcecode":"(p == (com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED)) || (p == (com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED))"},"failures":[],"tindex":"6ea75d11-3e4b-11e6-9697-b5dda4ea27ba","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if ((topOfStack == topOfStack) || (p == topOfStack)) {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_SINGLE_QUOTED":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_DOUBLE_QUOTED":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:591","type":"CtBinaryOperatorImpl","sourcecode":"result != (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"6ea75d12-3e4b-11e6-9697-0b25098fdb89","method":{"position":"com.google.gson.internal.Streams:111","type":"CtMethodImpl","sourcecode":"public java.lang.CharSequence subSequence(int start, int end) {\n    if (end != end) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new java.lang.String(char[] , start , (end - start));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"end","com.google.gson.stream.JsonReader.PEEKED_NONE":"end"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:178","type":"CtInvocationImpl","sourcecode":"isBoolean()"},"failures":[],"tindex":"6ea75d13-3e4b-11e6-9697-0787f0dab131","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:264","type":"CtBinaryOperatorImpl","sourcecode":"right != null"},"failures":[243,28,33,93,119,132,133,134,135,138,139,245,239,246,247,248,249,250,251,252],"tindex":"6ea78424-3e4b-11e6-9697-b7f623aeb576","method":{"position":"com.google.gson.internal.LinkedTreeMap:284","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedTreeMap.Node<K, V> node, com.google.gson.internal.LinkedTreeMap.Node<K, V> replacement) {\n    if (node != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"right":"node"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6ea78425-3e4b-11e6-9697-1f4139fcff77","method":{"position":"com.google.gson.internal.bind.TypeAdapters:85","type":"CtMethodImpl","sourcecode":"public java.util.BitSet read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.BitSet java.util.BitSet = new java.util.BitSet();\n    in.beginArray();\n    int int = 0;\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    while (tokenType != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        boolean boolean;\n        switch (tokenType) {\n            case NUMBER :\n                set = (in.nextInt()) != 0;\n                break;\n            case BOOLEAN :\n                set = in.nextBoolean();\n                break;\n            case STRING :\n                java.lang.String java.lang.String = in.nextString();\n                try {\n                    set = (java.lang.Integer.parseInt(stringValue)) != 0;\n                } catch (java.lang.NumberFormatException e) {\n                    throw new com.google.gson.JsonSyntaxException((\"Error: Expecting: bitset number value (1, 0), Found: \" + stringValue));\n                }\n                break;\n            default :\n                throw new com.google.gson.JsonSyntaxException((\"Invalid bitset value type: \" + tokenType));\n        }\n        if (set) {\n            bitset.set(i);\n        } \n        ++i;\n        tokenType = in.peek();\n    }\n    in.endArray();\n    return bitset;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:136","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6ea7d246-3e4b-11e6-9697-9bc9e0890e7a","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.GenericArrayType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:350","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,0,1,2,3,286,287,4,288,289,290,291,10,11,12,14,15,16,17,18,19,20,21,22,25,26,27,29,31,34,35,292,293,294,295,296,297,298,299,300,36,39,40,43,44,301,302,49,50,52,53,303,304,305,306,307,308,309,310,311,57,312,58,59,313,314,315,60,61,316,64,65,66,67,68,70,71,72,75,77,83,84,85,90,91,93,94,317,96,97,98,99,100,102,103,104,106,109,318,319,320,321,322,323,115,324,325,326,327,116,117,119,120,328,329,330,331,121,332,123,124,125,126,333,127,128,129,334,130,131,133,335,336,337,338,339,340,341,342,343,344,345,346,141,143,347,348,144,349,350,145,146,351,147,148,150,151,152,156,158,352,161,162,164,353,165,166,354,355,356,357,358,168,359,360,361,362,363,170,364,171,172,365,366,173,367,368,369,174,175,178,179,180,183,186,189,370,191,193,196,198,199,371,201,204,206,207,209,214,215,216,217,219,221,223,225,226,227,228,229,230,372,231,373,374,375,376,377,232,378,234,379,235,380,381,382,236,237,383,384,385,238,239,386,240,241,387,242,388,389,390,391,392,393,394,395],"tindex":"6ea7d247-3e4b-11e6-9697-91db70b81d0d","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[],"tindex":"6ea7f958-3e4b-11e6-9697-fbd3a1efec1c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if ((root != null) && (root != null)) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root","right":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6ea82069-3e4b-11e6-9697-bb5ae260d356","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6ea8206a-3e4b-11e6-9697-4b0cae9613af","method":{"position":"com.google.gson.internal.bind.TypeAdapters:451","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URL value) throws java.io.IOException {\n    out.value((value == null ? null : value.toExternalForm()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:87","type":"CtInvocationImpl","sourcecode":"isJsonObject()"},"failures":[],"tindex":"6ea8206b-3e4b-11e6-9697-a36d16f7e503","method":{"position":"com.google.gson.Gson:871","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        return null;\n    } \n    return ((T)(fromJson(new com.google.gson.internal.bind.JsonTreeReader(json), typeOfT)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:340","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"6ea8477c-3e4b-11e6-9697-9bc6a5930174","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"6ea8477d-3e4b-11e6-9697-1f28546a772b","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"6ea8477e-3e4b-11e6-9697-79f267225698","method":{"position":"com.google.gson.internal.bind.TypeAdapters:178","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    out.value((value == null ? \"null\" : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"6ea8477f-3e4b-11e6-9697-5306499093bb","method":{"position":"com.google.gson.JsonObject:100","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Boolean value) {\n    if ((property.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"6ea86e90-3e4b-11e6-9697-ed27fe724e75","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"6ea86e91-3e4b-11e6-9697-6721071311d0","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl","sourcecode":"toResolve.isInterface()"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,396,61,62,316,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,371,200,201,202,203,397,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242],"tindex":"6ea86e92-3e4b-11e6-9697-c73b7fd40094","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isInterface()) {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"6ea8bcb3-3e4b-11e6-9697-15718c068ffa","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:116","type":"CtBinaryOperatorImpl","sourcecode":"(!skipSerialize) && (!skipDeserialize)"},"failures":[],"tindex":"6ea8bcb4-3e4b-11e6-9697-6be3cd5b2963","method":{"position":"com.google.gson.stream.JsonReader:325","type":"CtMethodImpl","sourcecode":"public final void setLenient(boolean lenient) {\n    if ((!lenient) && (!lenient)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader.this.boolean = lenient;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipDeserialize":"lenient","skipSerialize":"lenient"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:563","type":"CtBinaryOperatorImpl","sourcecode":"(peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)) || (peekStack == (com.google.gson.stream.JsonScope.NONEMPTY_ARRAY))"},"failures":[],"tindex":"6ea8bcb5-3e4b-11e6-9697-4baa2e22e9d1","method":{"position":"com.google.gson.JsonArray:105","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(int index) {\n    if ((index == index) || (peekStack == index)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return java.util.List<com.google.gson.JsonElement>.remove(index);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"index","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"index","com.google.gson.stream.JsonScope.NONEMPTY_ARRAY":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl","sourcecode":"declaredBy instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"6ea8e3c6-3e4b-11e6-9697-5522a270fa10","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:94","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class"},"failures":[],"tindex":"6ea8e3c7-3e4b-11e6-9697-f1bae41d93b3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:512","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"rawtypes\")\n@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Class) {\n        {\n            if (o instanceof java.util.Map.Entry) {\n                java.util.Map.Entry java.util.Map.Entry = ((java.util.Map.Entry)(o));\n                return ((K) == null ? (other.getKey()) == null : K.equals(other.getKey())) && ((V) == null ? (other.getValue()) == null : V.equals(other.getValue()));\n            } \n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"6ea8e3c8-3e4b-11e6-9697-d7b8d4043aad","method":{"position":"com.google.gson.GsonBuilder:473","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory factory) {\n    if (factory == factory) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.List<com.google.gson.TypeAdapterFactory>.add(factory);\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"factory","skipPast":"factory"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:113","type":"CtInvocationImpl","sourcecode":"primitive.isBoolean()"},"failures":[],"tindex":"6ea90ad9-3e4b-11e6-9697-e9c438a5e7ad","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if (o.isBoolean()) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"6ea90ada-3e4b-11e6-9697-3ba0dd29948d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467239848316/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":31,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
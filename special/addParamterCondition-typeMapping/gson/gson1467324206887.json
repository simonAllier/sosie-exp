{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":58,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":333,"com.google.gson.functional.StringTest.testStringValueDeserialization":332,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":638,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":44,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":88,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":407,"com.google.gson.stream.JsonWriterTest.testRepeatedName":635,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":298,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":244,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":202,"com.google.gson.MixedStreamTest.testWriteLenient":378,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":212,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":392,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":480,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":144,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":290,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":210,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":295,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":47,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":486,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":599,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":248,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":32,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":156,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":318,"com.google.gson.functional.ObjectTest.testSingletonLists":208,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":110,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":477,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":27,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":589,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":376,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":178,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":190,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":99,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":224,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":11,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":440,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":265,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":342,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":309,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":45,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":552,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":115,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":24,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":386,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":255,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":506,"com.google.gson.functional.EnumTest.testEnumCaseMapping":362,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":374,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":588,"com.google.gson.functional.JsonTreeTest.testToJsonTree":183,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":398,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":100,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":289,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":75,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":164,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":630,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":531,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":28,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":83,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":585,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":574,"com.google.gson.functional.ObjectTest.testNullDeserialization":234,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":166,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":340,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":220,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":447,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":604,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":408,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":562,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":253,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":372,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":231,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":603,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":69,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":485,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":53,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":186,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":52,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":639,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":98,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField":390,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":437,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":631,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":423,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":55,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":74,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":235,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":528,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":38,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":87,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":42,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":203,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":499,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":82,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":276,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":171,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":516,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":438,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":559,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":43,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":230,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":524,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":9,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":216,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":331,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":304,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":411,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":513,"com.google.gson.metrics.PerformanceTest.testDummy":602,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":111,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":280,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":154,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":20,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":172,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":518,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":549,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":126,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":479,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":474,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":371,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":169,"com.google.gson.functional.CollectionTest.testSetDeserialization":294,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":249,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":195,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":219,"com.google.gson.functional.EnumTest.testEnumSet":595,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":39,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":155,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":539,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":78,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":495,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":225,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":14,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":153,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":434,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":19,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":49,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":193,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":250,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":442,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":405,"com.google.gson.functional.MapTest.testHashMapDeserialization":489,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":91,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":60,"com.google.gson.MixedStreamTest.testReadNulls":608,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":624,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":57,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":343,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":273,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":550,"com.google.gson.functional.MapTest.testSortedMap":509,"com.google.gson.functional.MapTest.testMapSerialization":505,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":59,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":41,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":122,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":132,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":105,"com.google.gson.functional.MapTest.testSerializeMaps":492,"com.google.gson.functional.MapTest.testComplexKeysSerialization":119,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":194,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":517,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":534,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":168,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":361,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":326,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":355,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":617,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":359,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":198,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":300,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":233,"com.google.gson.functional.MapTest.testStringKeyDeserialization":515,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":136,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":541,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":452,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":31,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":519,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":406,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":535,"com.google.gson.functional.PrettyPrintingTest.testMap":553,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":567,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":62,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":464,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":10,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":137,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":632,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":335,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":592,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":471,"com.google.gson.functional.MapTest.testMapSerializationEmpty":514,"com.google.gson.functional.CollectionTest.testQueueSerialization":571,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":428,"com.google.gson.functional.MapTest.testMapOfMapSerialization":504,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":421,"com.google.gson.JavaSerializationTest.testMapIsSerializable":388,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":84,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":576,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":367,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":430,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":546,"com.google.gson.functional.FieldNamingTest.testIdentity":106,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":334,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":540,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":311,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":236,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":182,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":207,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":303,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":537,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":25,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":15,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":590,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":600,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":306,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":93,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":1,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":80,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":366,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":613,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":488,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":450,"com.google.gson.functional.MapTest.testMapSubclassSerialization":491,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":22,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":163,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":196,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":4,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":36,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":142,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":72,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":204,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":460,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":189,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":152,"com.google.gson.functional.EnumTest.testEnumSubclass":358,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":433,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":12,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":223,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":399,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":368,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":46,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":174,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":350,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":401,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":308,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":394,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":424,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":307,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":278,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":0,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":130,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":429,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":560,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":302,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":422,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":636,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":482,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":209,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":113,"com.google.gson.MixedStreamTest.testWriteNulls":607,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":530,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":557,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":526,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":149,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":167,"com.google.gson.CommentsTest.testParseComments":373,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":211,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":542,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":134,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":261,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":436,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":121,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":508,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":591,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":623,"com.google.gson.MixedStreamTest.testReadInvalidState":377,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":246,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":161,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":483,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":123,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":601,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":30,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":138,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":258,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":640,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":417,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":365,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":86,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":444,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":129,"com.google.gson.functional.MapTest.testMapDeserialization":498,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":473,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":556,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":616,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":317,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":287,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":497,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":321,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":584,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":356,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":181,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":597,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":71,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":237,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":561,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":345,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":143,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":279,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":466,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":160,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":305,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":354,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":197,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":507,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":484,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":397,"com.google.gson.functional.PrimitiveTest.testShortSerialization":448,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":544,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":586,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":48,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":257,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":37,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":439,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":29,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":79,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":102,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":357,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":291,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":21,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":493,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":34,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":453,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":622,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":205,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":92,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":327,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":8,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":454,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":627,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":582,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":173,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":238,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":286,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":462,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":50,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":201,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":175,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":425,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":242,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":215,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":598,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":347,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":551,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":76,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":292,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":139,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":176,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":316,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":476,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":410,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":275,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":468,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":324,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":89,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":283,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":568,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":402,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":51,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":427,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":456,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":328,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":320,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":596,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":64,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":124,"com.google.gson.functional.MapTest.testGeneralMapField":118,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":213,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":523,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":458,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":133,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":140,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":369,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":481,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":68,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":185,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":404,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":441,"com.google.gson.MixedStreamTest.testReadMixedStreamed":7,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":77,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":418,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":500,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":16,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":274,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":578,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":109,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":431,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":256,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":387,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":18,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":85,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":501,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":487,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":490,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":457,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":543,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":66,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":268,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":634,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":419,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":475,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":558,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":67,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":575,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":325,"com.google.gson.functional.ObjectTest.testNestedDeserialization":243,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":547,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":310,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":563,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":61,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":277,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":254,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":455,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":260,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":299,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":336,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":502,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":151,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":446,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":346,"com.google.gson.JavaSerializationTest.testListIsSerializable":389,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":147,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":206,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":580,"com.google.gson.functional.ObjectTest.testNullSerialization":620,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":349,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":112,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":494,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":117,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":400,"com.google.gson.functional.MapTest.testInterfaceTypeMap":116,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":131,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":141,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":282,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":403,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":360,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":626,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields":393,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":353,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":536,"com.google.gson.MixedStreamTest.testReadClosed":606,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":463,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":252,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":413,"com.google.gson.MixedStreamTest.testWriteClosed":6,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":63,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":573,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":101,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":214,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":285,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":157,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":281,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":263,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":240,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":259,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":97,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":217,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":288,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":572,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":269,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":432,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":271,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":351,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":577,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":90,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":313,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":56,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":363,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":416,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":180,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":73,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":170,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":520,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":262,"com.google.gson.functional.CollectionTest.testQueueDeserialization":581,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":40,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":420,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":339,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField":395,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":461,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":96,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":270,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":114,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":232,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":470,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":187,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":241,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":566,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":3,"com.google.gson.functional.MapTest.testRawMapSerialization":512,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":579,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":478,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":628,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":227,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":344,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":127,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":587,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":382,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":188,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":384,"com.google.gson.functional.PrimitiveTest.testByteSerialization":445,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":525,"com.google.gson.ObjectTypeAdapterTest.testSerialize":2,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":614,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":184,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":409,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":145,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":532,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":103,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":158,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":337,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":385,"com.google.gson.functional.MapTest.testMapWithQuotes":503,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":610,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":338,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":538,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":565,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":179,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":245,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":451,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":609,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":247,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":319,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":148,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":239,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":199,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":222,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":467,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":218,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":533,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":465,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":146,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":469,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":443,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":618,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":293,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":95,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":150,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":521,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":348,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":314,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":272,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":23,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":380,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":192,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":26,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":162,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields":391,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":545,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":625,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":226,"com.google.gson.functional.ObjectTest.testNestedSerialization":228,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":329,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":341,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":412,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":548,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":65,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":511,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":125,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":200,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":13,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":379,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":221,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":583,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":54,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":284,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":81,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":375,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":414,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":605,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":70,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":229,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":266,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":629,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":593,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":529,"com.google.gson.functional.CollectionTest.testSetSerialization":296,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":370,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":177,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":554,"com.google.gson.functional.StringTest.testStringValueSerialization":594,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":107,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":301,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":364,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":569,"com.google.gson.MixedStreamTest.testWriteInvalidState":5,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":522,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":619,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":415,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":35,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":135,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":330,"com.google.gson.stream.JsonWriterTest.testBooleans":633,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":611,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":104,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":165,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":315,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":251,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":159,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":612,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":615,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":496,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":637,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":396,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":527},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78bea1e2-3f0e-11e6-adfd-49fbd6ca4dd0","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78bf8c43-3f0e-11e6-adfd-1d17ebd9334e","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:227","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372],"tindex":"78bfb354-3f0e-11e6-adfd-b5632165eaab","method":{"position":"com.google.gson.internal.Primitives:60","type":"CtMethodImpl","sourcecode":"private static void add(java.util.Map<java.lang.Class<?>, java.lang.Class<?>> forward, java.util.Map<java.lang.Class<?>, java.lang.Class<?>> backward, java.lang.Class<?> key, java.lang.Class<?> value) {\n    if (key == value) {\n        {\n            forward.put(key, value);\n            backward.put(value, key);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"value","toResolve":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:232","type":"CtInvocationImpl"},"failures":[373,374,375,0,1,2,376,3,377,4,5,378,379,6,7,8,9,10,11,12,380,381,382,383,384,13,385,14,386,15,16,387,388,389,390,391,392,393,394,395,396,17,18,19,20,21,22,23,397,398,24,399,25,400,401,402,403,26,27,404,28,29,30,405,406,407,408,409,410,31,411,412,413,414,32,33,415,416,34,417,418,419,35,420,36,37,421,38,422,423,424,425,426,427,39,428,429,430,431,40,41,432,42,43,44,45,433,434,435,436,437,438,46,47,439,48,440,441,49,442,443,50,51,444,445,446,447,448,449,450,52,53,451,452,54,453,454,55,455,456,457,458,459,56,460,57,461,58,59,60,61,62,63,64,65,66,67,462,68,463,70,71,72,464,73,465,75,466,76,77,78,79,80,467,468,469,470,471,81,472,82,473,474,83,475,84,85,86,476,87,477,478,89,90,91,479,92,480,481,93,94,95,482,96,483,97,98,99,484,485,101,102,103,104,105,106,107,486,108,109,110,111,112,487,488,113,489,490,491,492,493,494,495,496,497,498,114,499,500,501,502,503,504,505,506,115,507,508,509,116,510,117,118,511,512,513,119,514,515,516,517,518,519,120,121,122,123,124,125,126,127,520,521,522,523,524,525,526,527,128,129,528,529,530,130,531,131,532,132,133,134,135,136,533,137,534,138,139,140,535,141,142,143,536,144,145,537,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,538,171,539,172,540,173,174,541,175,176,177,542,543,544,545,178,546,179,547,180,181,182,183,184,548,185,186,187,549,188,189,190,191,192,550,193,194,195,551,196,552,553,197,198,554,555,556,199,200,201,202,203,204,205,206,557,558,559,207,208,209,210,211,212,213,214,215,216,217,218,560,219,220,221,223,561,224,562,225,226,227,228,563,229,230,231,232,233,235,236,237,238,239,240,241,242,243,244,245,246,564,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,273,565,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,566,291,567,568,569,570,571,572,573,574,292,575,576,577,294,295,578,579,296,580,581,298,299,300,301,582,302,303,304,305,306,307,308,309,310,583,311,312,313,314,315,316,317,318,584,319,585,320,321,322,323,586,324,587,325,326,327,328,329,330,331,332,588,333,589,334,590,335,336,591,337,592,338,339,340,593,341,342,594,343,344,345,346,347,348,349,350,351,352,353,354,355,356,595,596,357,358,597,359,360,361,598,362,599,363,364,365,366,367,368,600,369,370,371,372],"tindex":"78c00175-3f0e-11e6-adfd-67cb134c48e5","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz.isInterface()) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c076a6-3f0e-11e6-adfd-af62daec64c0","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[601,2,376],"tindex":"78c076a7-3f0e-11e6-adfd-293074c81540","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c09db8-3f0e-11e6-adfd-177fbf0c096f","method":{"position":"com.google.gson.Gson:895","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    com.google.gson.TypeAdapter<T>.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl"},"failures":[],"tindex":"78c09db9-3f0e-11e6-adfd-61ae80cc57e6","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.equals(value)) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"value","to":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c0c4ca-3f0e-11e6-adfd-c777531e7355","method":{"position":"com.google.gson.internal.bind.TypeAdapters:501","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.UUID read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.util.UUID.fromString(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c0c4cb-3f0e-11e6-adfd-07d9554d7383","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:303","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:298","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c0ebdc-3f0e-11e6-adfd-2384d2474ade","method":{"position":"com.google.gson.internal.Excluder:69","type":"CtMethodImpl","sourcecode":"public com.google.gson.internal.Excluder withVersion(double ignoreVersionsAfter) {\n    if ((java.lang.Double.isNaN(ignoreVersionsAfter)) || (java.lang.Double.isInfinite(value))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.Excluder com.google.gson.internal.Excluder = clone();\n            result.double = ignoreVersionsAfter;\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"ignoreVersionsAfter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c0ebdd-3f0e-11e6-adfd-f761747d4ab4","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:746","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c112ee-3f0e-11e6-adfd-df634a7bee22","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (((timeStyle == timeStyle) || (last == timeStyle)) || (last == dateStyle)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonReader.NUMBER_CHAR_FRACTION_DIGIT":"timeStyle","last":"timeStyle","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_DIGIT":"dateStyle","com.google.gson.stream.JsonReader.NUMBER_CHAR_DIGIT":"timeStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:189","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c112ef-3f0e-11e6-adfd-2373c6bc6024","method":{"position":"com.google.gson.internal.Primitives:69","type":"CtMethodImpl","sourcecode":"public static boolean isPrimitive(java.lang.reflect.Type type) {\n    if (!(type instanceof java.lang.reflect.WildcardType)) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c13a00-3f0e-11e6-adfd-0d4ff6eb6909","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c13a01-3f0e-11e6-adfd-7f3a4756b919","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == o) {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"o","context":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c16112-3f0e-11e6-adfd-01085cf5a72a","method":{"position":"com.google.gson.internal.$Gson$Types:563","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    return (other instanceof java.lang.reflect.WildcardType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.WildcardTypeImpl.this, ((java.lang.reflect.WildcardType)(other))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"other"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:293","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c16113-3f0e-11e6-adfd-69ab1f0aba1c","method":{"position":"com.google.gson.internal.$Gson$Types:213","type":"CtMethodImpl","sourcecode":"private static int hashCodeOrZero(java.lang.Object o) {\n    return o != null ? o.hashCode() : 0;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c18824-3f0e-11e6-adfd-0fa94a1be472","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c18825-3f0e-11e6-adfd-91a2329df869","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:430","type":"CtUnaryOperatorImpl"},"failures":[373,374,375,602,603,604,0,1,605,3,377,606,4,607,5,378,608,379,6,7,8,9,10,11,12,13,385,14,386,15,16,396,17,18,19,20,21,22,23,397,398,24,399,25,400,401,402,403,26,27,404,28,29,30,405,406,407,408,409,410,31,411,412,413,414,32,33,415,416,34,417,418,419,35,420,36,37,421,38,422,423,424,425,426,427,39,428,429,430,431,40,41,432,42,43,44,45,433,434,435,436,437,438,46,47,439,48,440,441,49,442,443,50,51,444,445,446,447,448,449,450,52,53,451,452,54,453,454,55,455,456,457,458,459,56,460,57,461,58,59,60,61,62,63,64,65,66,67,462,68,463,69,70,71,609,72,464,610,73,465,74,75,466,76,77,611,78,79,80,467,468,469,470,471,81,472,82,473,474,83,475,84,85,86,476,87,88,477,478,89,90,91,612,479,92,480,481,93,94,95,482,96,483,97,98,99,484,613,100,485,101,102,103,104,105,106,107,614,615,486,108,109,110,111,112,487,488,616,113,489,490,491,492,493,494,495,496,497,498,114,499,500,501,502,503,504,505,506,115,507,508,509,116,510,117,118,511,512,513,119,514,515,516,517,518,519,120,121,122,123,124,125,126,127,520,521,522,523,524,525,526,527,128,129,528,529,530,130,531,131,532,132,133,134,135,136,533,137,534,138,139,140,535,141,142,143,536,144,145,537,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,538,171,539,172,540,173,174,541,175,176,177,542,543,544,545,178,546,179,547,180,181,182,183,184,548,185,186,187,549,188,189,190,617,191,192,550,618,193,194,195,551,196,552,553,197,198,554,555,556,199,200,201,202,203,204,205,206,557,558,559,207,208,209,210,211,212,213,214,215,216,217,619,218,560,219,220,620,221,222,223,561,224,562,225,226,227,228,563,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,246,564,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,621,264,265,266,267,268,269,270,271,272,273,565,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,566,291,567,568,569,570,571,572,573,574,292,575,576,577,293,294,295,578,579,296,580,297,622,581,298,299,300,301,582,302,303,304,305,306,307,308,309,310,623,583,311,312,313,314,315,316,317,318,584,319,585,320,321,322,323,586,324,587,325,326,327,328,329,330,331,624,332,588,333,589,334,590,335,336,591,337,592,338,339,340,593,341,342,594,343,344,345,346,347,348,349,350,351,352,353,354,355,356,595,596,357,358,597,359,360,361,598,362,599,368,600,369,370,371,372],"tindex":"78c1d646-3f0e-11e6-adfd-d71d8c8b8e32","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (!serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"skipPastFound":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c22467-3f0e-11e6-adfd-0f313f1256cd","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:462","type":"CtBinaryOperatorImpl"},"failures":[435,457,532,155,181,281,298,300,303,625,626,627,628,629,630,631,632],"tindex":"78c24b78-3f0e-11e6-adfd-d7f998aa97bb","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c27289-3f0e-11e6-adfd-e94c7ba9a0e1","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                {\n                    if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                        throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n                    } \n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c2728a-3f0e-11e6-adfd-b3765468ecec","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:602","type":"CtUnaryOperatorImpl"},"failures":[604,9,11,12,633,634,635,636,637,638,639,21,22,420,66,610,508,546,184,186,187,190,228,276,287,290,295],"tindex":"78c2999b-3f0e-11e6-adfd-61cc3d66e8ed","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (!value) {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"lenient":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c2c0ac-3f0e-11e6-adfd-c98cbde8f7f0","method":{"position":"com.google.gson.internal.$Gson$Types:75","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ bound } , com.google.gson.internal.$Gson$Types.com.google.gson.internal.$Gson$Types.java.lang.reflect.Type[]);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:342","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c2c0ad-3f0e-11e6-adfd-6d1b57eb28f5","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"index","com.google.gson.stream.JsonReader.PEEKED_NONE":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl"},"failures":[640,380,381,621,264,265,266,268,269,271,272],"tindex":"78c2e7be-3f0e-11e6-adfd-35f0b4d2ef6f","method":{"position":"com.google.gson.internal.Excluder:232","type":"CtMethodImpl","sourcecode":"private boolean isValidSince(com.google.gson.annotations.Since annotation) {\n    if (annotation != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion > (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c2e7bf-3f0e-11e6-adfd-51deb984bae6","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c30ed0-3f0e-11e6-adfd-3f948e43ecf1","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if (pattern == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c335e1-3f0e-11e6-adfd-39bffebbee3e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:525","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.sql.Timestamp read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    java.util.Date java.util.Date = dateTypeAdapter.read(in);\n    return date != null ? new java.sql.Timestamp(date.getTime()) : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c335e2-3f0e-11e6-adfd-4bc9dfc34d0f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[374,375,603,604,0,1,9,10,11,12,13,14,386,15,16,21,22,23,399,400,404,30,411,412,416,417,418,420,421,422,423,426,427,430,433,435,437,438,439,441,442,444,445,446,447,448,449,450,452,453,456,457,459,57,461,59,62,65,66,462,68,463,609,464,610,465,75,466,611,79,467,468,469,470,471,472,473,474,475,85,86,476,87,477,90,612,479,480,481,94,95,482,96,483,97,484,613,485,102,103,104,105,106,107,614,615,486,110,487,616,491,492,495,497,114,503,504,505,507,508,116,510,117,118,511,512,119,514,516,519,120,123,125,520,521,523,524,525,526,527,528,529,530,532,133,135,533,534,139,140,535,141,142,143,536,148,150,151,152,153,154,155,157,158,159,161,164,165,166,167,168,170,538,539,174,541,175,177,542,543,545,546,179,547,181,184,548,185,186,187,188,190,617,618,193,551,552,553,197,198,554,555,556,199,200,207,208,211,214,217,619,219,620,221,561,562,225,227,228,563,230,235,237,238,240,245,246,564,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,621,264,267,268,271,273,275,276,280,281,282,287,288,290,566,291,567,571,572,573,574,292,577,295,578,296,580,622,298,300,582,303,304,305,308,309,310,311,312,314,316,584,585,320,321,323,586,324,587,326,328,329,330,331,624,588,333,589,334,590,591,592,593,594,343,344,345,346,347,348,349,352,354,595,596,357,358,360,598,362,599,363,364,365,366,367,626,368,600,369,371,372],"tindex":"78c35cf3-3f0e-11e6-adfd-4bb5c93ccfe2","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"appendable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"78c3ab14-3f0e-11e6-adfd-77df887031ac","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,14,17,18,19,21,22,23,50,57,58,59,61,62,63,64,66,70,71,76,79,81,85,94,97,102,103,104,105,106,107,108,109,110,111,114,115,116,117,118,119,120,122,123,124,125,127,133,134,135,142,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,170,171,173,174,175,177,180,181,182,183,184,186,187,189,190,193,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,225,226,227,228,229,230,231,232,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,258,259,260,261,262,263,264,265,266,267,268,269,270,271,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,294,295,296,298,300,301,302,303,304,305,306,307,308,309,311,312,314,315,316,317,318,320,321,322,323,324,326,327,328,329,330,331,343,344,345,346,347,348,349,350,351,352,353,354,355,356,360,361,363,364,365,366,367,368,369,370,371,372],"tindex":"78c3ab15-3f0e-11e6-adfd-9982f5ee71bc","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:86","type":"CtMethodImpl","sourcecode":"private com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField createBoundField(final com.google.gson.Gson context, final java.lang.reflect.Field field, final java.lang.String name, final com.google.gson.reflect.TypeToken<?> fieldType, boolean serialize, boolean deserialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            final boolean boolean = com.google.gson.internal.Primitives.isPrimitive(fieldType.getRawType());\n            return new com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n                final com.google.gson.TypeAdapter<?> typeAdapter = getFieldAdapter(context, field, fieldType);\n\n                @java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n                @java.lang.Override\n                void write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = field.get(value);\n                    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n                    t.write(writer, fieldValue);\n                }\n\n                @java.lang.Override\n                void read(com.google.gson.stream.JsonReader reader, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    java.lang.Object java.lang.Object = com.google.gson.TypeAdapter<?>.read(reader);\n                    if ((fieldValue != null) || (!isPrimitive)) {\n                        field.set(value, fieldValue);\n                    } \n                }\n\n                public boolean writeField(java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n                    if (!(boolean))\n                        return false;\n                    \n                    java.lang.Object java.lang.Object = field.get(value);\n                    return fieldValue != value;\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1397","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c42046-3f0e-11e6-adfd-7743a6657927","method":{"position":"com.google.gson.stream.JsonReader:1268","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == '#') {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                int[] int[] = new int[(int) * 2];\n                java.lang.String[] java.lang.String[] = new java.lang.String[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                java.lang.System.arraycopy(int[], 0, newPathIndices, 0, int);\n                java.lang.System.arraycopy(java.lang.String[], 0, newPathNames, 0, int);\n                int[] = newStack;\n                int[] = newPathIndices;\n                java.lang.String[] = newPathNames;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c44757-3f0e-11e6-adfd-0bde6f1f1c4f","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (typeOfSrc != (src[0])) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"src","upperBound":"typeOfSrc"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:247","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c46e68-3f0e-11e6-adfd-75510af6fab5","method":{"position":"com.google.gson.internal.Excluder:224","type":"CtMethodImpl","sourcecode":"private boolean isStatic(java.lang.Class<?> clazz) {\n    if (clazz == clazz) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((clazz.getModifiers()) & (java.lang.reflect.Modifier.java.lang.reflect.Modifier.int)) != 0;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"78c46e69-3f0e-11e6-adfd-9976b79ba30a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467323434588/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":40,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":74,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":143,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":19,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":180,"com.google.gson.functional.PrimitiveTest.testShortSerialization":116,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":71,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":109,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":155,"com.google.gson.MixedStreamTest.testWriteLenient":2,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":81,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":160,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":176,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":62,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":63,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":67,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":158,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":42,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":168,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":196,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":119,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":88,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":138,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":9,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":122,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":29,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":35,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":131,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":25,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":17,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":66,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":172,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":149,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":22,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":189,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":191,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":197,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":55,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":103,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":32,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":120,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":159,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":163,"com.google.gson.functional.MapTest.testGeneralMapField":59,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":14,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":115,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":110,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":192,"com.google.gson.JsonObjectTest.testDeepCopy":200,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":175,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":145,"com.google.gson.JsonParserTest.testParseString":157,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":33,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":79,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":107,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":171,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":167,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":96,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":121,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":26,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":37,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":129,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":150,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":7,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":186,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":108,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":126,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":6,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":173,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":46,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":114,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":49,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":179,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":69,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":184,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":142,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":169,"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles":152,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":43,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":28,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":91,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":50,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":93,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":48,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":139,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":111,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":51,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":136,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":182,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":98,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":123,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":80,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":65,"com.google.gson.functional.MapTest.testMapSerialization":58,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":124,"com.google.gson.functional.MapTest.testSerializeMaps":57,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":84,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":38,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":15,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":183,"com.google.gson.stream.JsonWriterTest.testNumbers":153,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":181,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":20,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":198,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":72,"com.google.gson.functional.MapTest.testStringKeyDeserialization":174,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":130,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":146,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":118,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":0,"com.google.gson.functional.MapTest.testRawMapSerialization":60,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":61,"com.google.gson.JsonParserTest.testParseReader":156,"com.google.gson.functional.PrettyPrintingTest.testMap":18,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":30,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":64,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":94,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":141,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":125,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":34,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":199,"com.google.gson.functional.PrimitiveTest.testByteSerialization":113,"com.google.gson.ObjectTypeAdapterTest.testSerialize":151,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":144,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":3,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":177,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":104,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":134,"com.google.gson.functional.FieldNamingTest.testIdentity":85,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":13,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":82,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":52,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":185,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":128,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":77,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":73,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":89,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":135,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":70,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":154,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":76,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":102,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":41,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":44,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":24,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":86,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":106,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":1,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":47,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":105,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":99,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":36,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":178,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":10,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":45,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":75,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":87,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":166,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":187,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":133,"com.google.gson.functional.ObjectTest.testNestedSerialization":95,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":161,"com.google.gson.JsonObjectTest.testAddingStringProperties":201,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":100,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":101,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":164,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":16,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":12,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":92,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":194,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":90,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":190,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":127,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":5,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":31,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":54,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":117,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":162,"com.google.gson.functional.CollectionTest.testSetSerialization":68,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":21,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":132,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":147,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":112,"com.google.gson.functional.MapTest.testMapDeserialization":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":78,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":83,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":193,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":23,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":195,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":56,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":4,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":137,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":165,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":140,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":8,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":53,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":97,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":188,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":11},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154],"tindex":"2889063e-3f24-11e6-bf3f-35bbf3f34c65","method":{"position":"com.google.gson.stream.JsonWriter:490","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            java.lang.String java.lang.String = value.toString();\n            if ((!(boolean)) && (((string.equals(\"-Infinity\")) || (string.equals(\"Infinity\"))) || (string.equals(\"NaN\")))) {\n                throw new java.lang.IllegalArgumentException((\"Numeric values must be finite, but was \" + value));\n            } \n            beforeValue(false);\n            java.io.Writer.append(string);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:184","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"28897b6f-3f24-11e6-bf3f-fde703c37f07","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if ((o != o) && (token != o)) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"o","token":"o","com.google.gson.stream.JsonToken.NUMBER":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"2889a280-3f24-11e6-bf3f-0b553f00641c","method":{"position":"com.google.gson.GsonBuilder:447","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type type, java.lang.Object typeAdapter) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.InstanceCreator<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n    if (typeAdapter instanceof com.google.gson.InstanceCreator<?>) {\n        java.util.Map<java.lang.reflect.Type, com.google.gson.InstanceCreator<?>>.put(type, ((com.google.gson.InstanceCreator)(typeAdapter)));\n    } \n    if ((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        com.google.gson.reflect.TypeToken<?> com.google.gson.reflect.TypeToken<?> = com.google.gson.reflect.TypeToken.get(type);\n        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.TreeTypeAdapter.newFactoryWithMatchRawType(typeToken, typeAdapter));\n    } \n    if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n        java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newFactory(com.google.gson.reflect.TypeToken.get(type), ((com.google.gson.TypeAdapter)(typeAdapter))));\n    } \n    return com.google.gson.GsonBuilder.this;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2889c991-3f24-11e6-bf3f-ddfd3e47eebb","method":{"position":"com.google.gson.internal.Excluder:124","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if (skipDeserialize) {\n        in.skipValue();\n        return null;\n    } \n    return delegate().read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[155],"tindex":"2889c992-3f24-11e6-bf3f-d1da98eefc95","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:92","type":"CtBinaryOperatorImpl"},"failures":[156,157,158,159,160,161,25,162,163,164,165,166,167,168,169,170,171,172,173,174,70,175,176,177,178,179,86,87,180,181,182,183,184,185,186,187,188,189,190,191,150,192,193,194,195,196,197,198,199,200,201],"tindex":"2889c993-3f24-11e6-bf3f-9da9eb8cfe25","method":{"position":"com.google.gson.internal.LinkedTreeMap:81","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key instanceof java.util.Iterator) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"o":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2889f0a4-3f24-11e6-bf3f-e7da7c9ec05b","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288a17b5-3f24-11e6-bf3f-9f2de839c224","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:127","type":"CtInvocationImpl"},"failures":[],"tindex":"288a3ec6-3f24-11e6-bf3f-03d0a9315724","method":{"position":"com.google.gson.internal.LinkedTreeMap:207","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (a.equals(a)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"a","type":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"288a3ec7-3f24-11e6-bf3f-7506b4149f45","method":{"position":"com.google.gson.internal.bind.TypeAdapters:361","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.String value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"288a3ec8-3f24-11e6-bf3f-01880029ee8f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:326","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Character read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    if ((str.length()) != 1) {\n        throw new com.google.gson.JsonSyntaxException((\"Expecting character, got: \" + str));\n    } \n    return str.charAt(0);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:51","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288a65d9-3f24-11e6-bf3f-9da49a582ab2","method":{"position":"com.google.gson.internal.LinkedTreeMap:605","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if ((o.peek()) == o) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"o","com.google.gson.stream.JsonToken.NULL":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288a65da-3f24-11e6-bf3f-9b99d8690f22","method":{"position":"com.google.gson.internal.bind.TypeAdapters:282","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:179","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288a8ceb-3f24-11e6-bf3f-33731f2e8cca","method":{"position":"com.google.gson.internal.$Gson$Types:117","type":"CtMethodImpl","sourcecode":"public static java.lang.Class<?> getRawType(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class<?>) {\n        return ((java.lang.Class<?>)(type));\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        java.lang.reflect.Type java.lang.reflect.Type = parameterizedType.getRawType();\n        com.google.gson.internal.$Gson$Preconditions.checkArgument((rawType instanceof java.lang.Class));\n        return ((java.lang.Class<?>)(rawType));\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.Type java.lang.reflect.Type = ((java.lang.reflect.GenericArrayType)(type)).getGenericComponentType();\n        return java.lang.reflect.Array.newInstance(com.google.gson.internal.$Gson$Types.getRawType(componentType), 0).getClass();\n    } else if (type instanceof java.lang.reflect.TypeVariable) {\n        return java.lang.Object.java.lang.Object.java.lang.Class;\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        return com.google.gson.internal.$Gson$Types.getRawType(((java.lang.reflect.WildcardType)(type)).getUpperBounds()[0]);\n    } else {\n        java.lang.String java.lang.String = type == null ? \"null\" : type.getClass().getName();\n        throw new java.lang.IllegalArgumentException(((((\"Expected a Class, ParameterizedType, or \" + \"GenericArrayType, but <\") + type) + \"> is of type \") + className));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:336","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288a8cec-3f24-11e6-bf3f-19409759855c","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i == 2) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return char[][i];\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:547","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288ab3fd-3f24-11e6-bf3f-b10744dafdfc","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2029') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:485","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288ab3fe-3f24-11e6-bf3f-f1093fd67cec","method":{"position":"com.google.gson.stream.JsonWriter:353","type":"CtMethodImpl","sourcecode":"private void push(int newTop) {\n    if (newTop == newTop) {\n        {\n            if ((int) == (int[].int)) {\n                int[] int[] = new int[(int) * 2];\n                java.lang.System.arraycopy(int[], 0, newStack, 0, int);\n                int[] = newStack;\n            } \n            int[][((int)++)] = newTop;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"newTop","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"newTop"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:218","type":"CtVariableReadImpl"},"failures":[],"tindex":"288adb0f-3f24-11e6-bf3f-0d670b4d10e3","method":{"position":"com.google.gson.internal.LinkedTreeMap:121","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = com.google.gson.internal.LinkedTreeMap.this.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedTreeMap.com.google.gson.internal.LinkedTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n            } else {\n                created = new com.google.gson.internal.LinkedTreeMap.Node<K, V>(nearest , key , header , header.com.google.gson.internal.LinkedTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            (int)++;\n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"create"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:733","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288b0220-3f24-11e6-bf3f-93db3b31e03f","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack == topOfStack) {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"topOfStack","com.google.gson.stream.JsonReader.NUMBER_CHAR_DECIMAL":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.ConstructorConstructor:131","type":"CtInvocationImpl"},"failures":[],"tindex":"288b0221-3f24-11e6-bf3f-79a9cbdb819b","method":{"position":"com.google.gson.internal.ConstructorConstructor:200","type":"CtMethodImpl","sourcecode":"private <T>com.google.gson.internal.ObjectConstructor<T> newUnsafeAllocator(final java.lang.reflect.Type type, final java.lang.Class<? super T> rawType) {\n    if (type.isAssignableFrom(rawType)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return new com.google.gson.internal.ObjectConstructor<T>() {\n                private final com.google.gson.internal.UnsafeAllocator unsafeAllocator = com.google.gson.internal.UnsafeAllocator.create();\n\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                public T construct() {\n                    try {\n                        java.lang.Object java.lang.Object = com.google.gson.internal.UnsafeAllocator.newInstance(rawType);\n                        return ((T)(newInstance));\n                    } catch (java.lang.Exception e) {\n                        throw new java.lang.RuntimeException((((\"Unable to invoke no-args constructor for \" + type) + \". \") + \"Register an InstanceCreator with Gson for this type may fix this problem.\") , e);\n                    }\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"rawType":"rawType","java.util.SortedSet.class":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:107","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288b0222-3f24-11e6-bf3f-31f728ca4a83","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key instanceof java.lang.reflect.WildcardType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288b2933-3f24-11e6-bf3f-63f308cca48e","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:549","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288b2934-3f24-11e6-bf3f-c762413081eb","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i == 2) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return char[][i];\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonScope.CLOSED":"i","peekStack":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288b2935-3f24-11e6-bf3f-afc3351edaa4","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if (property == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonPrimitive:319","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288b2936-3f24-11e6-bf3f-233f33113015","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if ((src instanceof java.lang.Number) && ((src.java.lang.Object) instanceof java.lang.Number)) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"src","value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:289","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"288b2937-3f24-11e6-bf3f-d7af5e3bf0c2","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467333048435/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return containsKey(o);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":26,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":464,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":76,"com.google.gson.functional.StringTest.testStringValueDeserialization":74,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":178,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":421,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":278,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":382,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":219,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":364,"com.google.gson.MixedStreamTest.testWriteLenient":6,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":227,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":326,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":287,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":647,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":308,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":179,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":196,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":324,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":430,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":214,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":316,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":117,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":391,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":615,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":127,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":572,"com.google.gson.functional.ObjectTest.testSingletonLists":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":279,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":319,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":77,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":375,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":635,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":504,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":524,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":201,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":297,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":342,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":13,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":433,"com.google.gson.internal.bind.JsonElementReaderTest.testNulls":613,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":106,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":90,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":92,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":66,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":422,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":160,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":367,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":599,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":33,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":159,"com.google.gson.functional.EnumTest.testEnumCaseMapping":213,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":15,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":75,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":366,"com.google.gson.functional.JsonTreeTest.testToJsonTree":540,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":71,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":300,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":520,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion":643,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":135,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":253,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":653,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":271,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":377,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":575,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":189,"com.google.gson.functional.ObjectTest.testNullDeserialization":354,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":532,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":87,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":336,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":443,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":596,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":383,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":343,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":611,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":656,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":31,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":488,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":351,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":595,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":243,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":301,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":448,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":558,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":296,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":427,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":654,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":406,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":252,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":454,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":48,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":277,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":404,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":152,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":228,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":419,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":550,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":268,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":590,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":605,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":490,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":174,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":234,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":428,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":420,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":42,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":350,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":19,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":21,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":330,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":170,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":226,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":387,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":660,"com.google.gson.metrics.PerformanceTest.testDummy":18,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":320,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":511,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":125,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":27,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":492,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":176,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":521,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":102,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":285,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":24,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":270,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":487,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":625,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":535,"com.google.gson.functional.CollectionTest.testSetDeserialization":195,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":118,"com.google.gson.functional.EnumTest.testEnumSet":204,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":216,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":335,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":411,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":126,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":491,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":258,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":344,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":124,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":598,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":424,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":26,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":435,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":28,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":530,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":436,"com.google.gson.functional.MapTest.testHashMapDeserialization":141,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":380,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":185,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":283,"com.google.gson.MixedStreamTest.testReadNulls":7,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":22,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":466,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":462,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":541,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":528,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":586,"com.google.gson.functional.MapTest.testSortedMap":163,"com.google.gson.functional.MapTest.testMapSerialization":158,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":465,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":98,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":417,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":55,"com.google.gson.functional.MapTest.testSerializeMaps":144,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":306,"com.google.gson.functional.MapTest.testComplexKeysSerialization":171,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":215,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":175,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":62,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":211,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":534,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":584,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":553,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":525,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":209,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":69,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":616,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":221,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":353,"com.google.gson.functional.MapTest.testStringKeyDeserialization":173,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":59,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":496,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":450,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":177,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":386,"com.google.gson.functional.PrettyPrintingTest.testMap":67,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":381,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":565,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":182,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":248,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":468,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":526,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":12,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":61,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":655,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":80,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":84,"com.google.gson.functional.MapTest.testMapSerializationEmpty":172,"com.google.gson.functional.CollectionTest.testQueueSerialization":186,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":265,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":412,"com.google.gson.functional.MapTest.testMapOfMapSerialization":157,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":403,"com.google.gson.JavaSerializationTest.testMapIsSerializable":637,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":273,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":192,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":414,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":632,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":505,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":78,"com.google.gson.functional.FieldNamingTest.testIdentity":307,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":493,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":478,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":356,"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays":619,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":225,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":310,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":321,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":539,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":369,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":600,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":79,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":484,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":236,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":289,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":593,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":260,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":267,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":299,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":631,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":138,"com.google.gson.functional.MapTest.testMapSubclassSerialization":143,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":446,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":134,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":314,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":218,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":3,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":104,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":401,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":567,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":229,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":247,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":461,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":523,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":123,"com.google.gson.functional.EnumTest.testEnumSubclass":207,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":423,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":14,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":340,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":368,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":483,"com.google.gson.internal.bind.JsonElementReaderTest.testArray":612,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":429,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":495,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":548,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":371,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":238,"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject":639,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":407,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":237,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":509,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":51,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":592,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":334,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":413,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":224,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":405,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":292,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":323,"com.google.gson.MixedStreamTest.testWriteNulls":4,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":140,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":50,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":232,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":44,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":120,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":533,"com.google.gson.CommentsTest.testParseComments":591,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":325,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":500,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":578,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":57,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":426,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":474,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":97,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":82,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":162,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":94,"com.google.gson.MixedStreamTest.testReadInvalidState":1,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":114,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":132,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":294,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":445,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":99,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":634,"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose":614,"com.google.gson.JsonParserTest.testParseMixedArray":602,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":379,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":657,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":63,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":471,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion":641,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":607,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":396,"com.google.gson.JsonArrayTest.testRemove":624,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":630,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":275,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":440,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":47,"com.google.gson.functional.MapTest.testMapDeserialization":150,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":269,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":72,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":139,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":571,"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers":618,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":149,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":518,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":577,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":573,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":554,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":208,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":538,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":245,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":341,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":357,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":543,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":568,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":510,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":254,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":131,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":617,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":235,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":552,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":68,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":161,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":645,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":298,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":365,"com.google.gson.functional.PrimitiveTest.testShortSerialization":444,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":502,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":580,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":432,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":35,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":402,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":259,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":378,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":303,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":206,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":181,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":313,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":145,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":395,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":202,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":452,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":230,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":608,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":286,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":585,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":11,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":459,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":453,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":650,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":223,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":358,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":494,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":517,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":105,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":240,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":438,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":65,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":408,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":497,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":362,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":329,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":212,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":217,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":545,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":255,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":563,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":498,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":276,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":579,"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject":640,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":385,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":262,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":589,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":581,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":281,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":183,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":514,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":372,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":439,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":410,"com.google.gson.JsonArrayTest.testSet":622,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":456,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":36,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":205,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":576,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":470,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":100,"com.google.gson.functional.MapTest.testGeneralMapField":167,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":327,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":41,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers":620,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":458,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":56,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":485,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":564,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":288,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":165,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":241,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":376,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":557,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":434,"com.google.gson.MixedStreamTest.testReadMixedStreamed":10,"com.google.gson.JsonObjectTest.testDeepCopy":626,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":153,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":256,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":397,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":609,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":197,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":588,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":601,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":318,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":415,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":34,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":636,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":274,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":154,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":137,"com.google.gson.JsonArrayTest.testDeepCopy":623,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":142,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":457,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":501,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":96,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":109,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":398,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":272,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":661,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":233,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":479,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":239,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":583,"com.google.gson.functional.ObjectTest.testNestedDeserialization":363,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":507,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":93,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":348,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":467,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":508,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":32,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":455,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":473,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":81,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":155,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":220,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":603,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":122,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":442,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":544,"com.google.gson.JavaSerializationTest.testListIsSerializable":638,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":231,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":312,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":200,"com.google.gson.functional.ObjectTest.testNullSerialization":337,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":547,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":136,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":146,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":166,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":370,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":53,"com.google.gson.functional.MapTest.testInterfaceTypeMap":164,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":566,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":513,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":373,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":210,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":649,"com.google.gson.MixedStreamTest.testReadClosed":2,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":551,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":242,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":30,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":389,"com.google.gson.MixedStreamTest.testWriteClosed":9,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":188,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":302,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":328,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":516,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":128,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":512,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":476,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":360,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":472,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":295,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":331,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":519,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":187,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":110,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":418,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":112,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":549,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":193,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":610,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":621,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":282,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":480,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":460,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":628,"com.google.gson.JsonParserTest.testParseInvalidJson":604,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":394,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":537,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":250,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":38,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":536,"com.google.gson.functional.CollectionTest.testQueueDeserialization":203,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":475,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":658,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":400,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":416,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":86,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":463,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":293,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":151,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":352,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":264,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":361,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":559,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":180,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":0,"com.google.gson.functional.MapTest.testRawMapSerialization":169,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":280,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":651,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":346,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":542,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":103,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":582,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":644,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":43,"com.google.gson.functional.PrimitiveTest.testByteSerialization":441,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":522,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":646,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":561,"com.google.gson.ObjectTypeAdapterTest.testSerialize":633,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":555,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":384,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":309,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":54,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":304,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":83,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":129,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":597,"com.google.gson.functional.MapTest.testMapWithQuotes":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":249,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":392,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":85,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":489,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":587,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":506,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":627,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":449,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":246,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":116,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":574,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":119,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":359,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":73,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":261,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":339,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":425,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":60,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":333,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":290,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":251,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":108,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":263,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":311,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":437,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":529,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":194,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":46,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":39,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":121,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":291,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":546,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":481,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":113,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":659,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":315,"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion":642,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":527,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":133,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":374,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":503,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":648,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":345,"com.google.gson.functional.ObjectTest.testNestedSerialization":347,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":37,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":89,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":388,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":556,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":95,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":168,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":101,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":64,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":8,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":17,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":338,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":477,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":451,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":515,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":266,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":16,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":390,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":594,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":244,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":349,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":107,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":652,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":88,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":49,"com.google.gson.functional.CollectionTest.testSetSerialization":199,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":486,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":70,"com.google.gson.functional.StringTest.testStringValueSerialization":91,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":499,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":560,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":184,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":222,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":629,"com.google.gson.MixedStreamTest.testWriteInvalidState":5,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":40,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":332,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":393,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":58,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":399,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":20,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":257,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":305,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":531,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":482,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":29,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":606,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":284,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":562,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":148,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":23,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":45},"transformations":[{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"24531976-3f53-11e6-808b-217187668e05","method":{"position":"com.google.gson.internal.bind.TimeTypeAdapter:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.sql.Time value) throws java.io.IOException {\n    out.value((value == null ? null : java.text.DateFormat.format(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2453b5b7-3f53-11e6-808b-9f665d5d5464","method":{"position":"com.google.gson.JsonParser:56","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.io.Reader json) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n                com.google.gson.JsonElement com.google.gson.JsonElement = parse(jsonReader);\n                if ((!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken))) {\n                    throw new com.google.gson.JsonSyntaxException(\"Did not consume the entire document.\");\n                } \n                return element;\n            } catch (com.google.gson.stream.MalformedJsonException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } catch (java.lang.NumberFormatException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl"},"failures":[],"tindex":"2453b5b8-3f53-11e6-808b-4d6c4f6c1e5b","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"src","this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2453dcc9-3f53-11e6-808b-471b08f590be","method":{"position":"com.google.gson.JsonParser:44","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement parse(java.lang.String json) throws com.google.gson.JsonSyntaxException {\n    if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            return parse(new java.io.StringReader(json));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2453dcca-3f53-11e6-808b-2be081ed3f72","method":{"position":"com.google.gson.JsonObject:171","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonArray getAsJsonArray(java.lang.String memberName) {\n    if ((memberName.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonArray)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:455","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"245403db-3f53-11e6-808b-73228ead3d02","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:90","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean containsKey(java.lang.Object key) {\n    if ((key instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (findByObject(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeAdapter":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:167","type":"CtUnaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"24542aec-3f53-11e6-808b-6b2b5c04a854","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"create":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2454790d-3f53-11e6-808b-930f081b5d8f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:297","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl"},"failures":[602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,139,227,229,246,252,622,623,624,625,626],"tindex":"2454790e-3f53-11e6-808b-6306ce76e707","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"element"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:162","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2454790f-3f53-11e6-808b-0f62bad421f8","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toGenericComponentType":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2454a020-3f53-11e6-808b-4b06f97e8f4e","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[239,258,293],"tindex":"2454c731-3f53-11e6-808b-a1253c64d47b","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            if (json != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2454c732-3f53-11e6-808b-7112ddaa7d45","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:43","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return a.compareTo(b);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:403","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2454ee43-3f53-11e6-808b-2711f10daceb","method":{"position":"com.google.gson.internal.$Gson$Types:217","type":"CtMethodImpl","sourcecode":"public static java.lang.String typeToString(java.lang.reflect.Type type) {\n    return type instanceof java.lang.Class ? ((java.lang.Class<?>)(type)).getName() : type.toString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredBy":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2454ee44-3f53-11e6-808b-c78e9e685228","method":{"position":"com.google.gson.internal.bind.TypeAdapters:188","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        int int = in.nextInt();\n        return ((byte)(intValue));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601],"tindex":"24551555-3f53-11e6-808b-3bc4ea1b21bf","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"24553c66-3f53-11e6-808b-83e31d821036","method":{"position":"com.google.gson.internal.Primitives:79","type":"CtMethodImpl","sourcecode":"public static boolean isWrapperType(java.lang.reflect.Type type) {\n    if (type == type) {\n        {\n            return com.google.gson.internal.Primitives.com.google.gson.internal.Primitives.java.util.Map<java.lang.Class<?>, java.lang.Class<?>>.containsKey(com.google.gson.internal.$Gson$Preconditions.checkNotNull(type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type","b":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:250","type":"CtVariableReadImpl"},"failures":[],"tindex":"24553c67-3f53-11e6-808b-9757a845161e","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (!serializeSpecialFloatingPointValues) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (serializeSpecialFloatingPointValues) {\n                        return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n                    } \n                    return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                        @java.lang.Override\n                        public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                            if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                                in.nextNull();\n                                return null;\n                            } \n                            return in.nextDouble();\n                        }\n\n                        @java.lang.Override\n                        public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                            if (value == null) {\n                                out.nullValue();\n                                return ;\n                            } \n                            double double = value.doubleValue();\n                            checkValidFloatingPoint(doubleValue);\n                            out.value(value);\n                        }\n                    };\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serializeSpecialFloatingPointValues":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:581","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"24556378-3f53-11e6-808b-7f8ef31533c1","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return char[][i];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"context":"i","com.google.gson.stream.JsonScope.NONEMPTY_OBJECT":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"24556379-3f53-11e6-808b-413985896132","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[0,3,5,9,10,11,19,20,21,24,25,26,36,37,56,57,58,64,65,68,69,73,92,96,98,99,100,101,103,105,106,107,108,109,110,111,112,114,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,134,135,151,160,164,166,167,171,178,179,181,190,195,196,199,627,210,211,219,221,222,224,225,226,227,228,229,230,231,235,236,237,238,244,245,255,259,266,274,290,295,303,304,305,306,307,308,309,311,312,313,314,315,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,333,335,336,338,340,342,344,345,346,347,349,350,351,352,355,356,357,358,359,360,361,362,363,364,438,628,629,630,631,632,462,464,465,467,468,469,470,471,472,473,474,475,476,478,479,481,482,483,485,486,487,488,490,494,495,497,499,508,509,510,511,512,513,514,515,516,517,518,519,520,523,524,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,558,559,560,567,570,571,572,576,577,578,579,581,584,585,586,588,589,590,633,592,593,598],"tindex":"2455637a-3f53-11e6-808b-3958972e5793","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                {\n                    com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n                    return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2455637b-3f53-11e6-808b-83fcded7a660","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[41,56,114,116,117,118,144,180,190,196,199,338,560,634,633,635],"tindex":"24558a8c-3f53-11e6-808b-b9660461da1e","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n            if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n                out.beginObject();\n                out.endObject();\n                return ;\n            } \n            typeAdapter.write(out, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:57","type":"CtInvocationImpl"},"failures":[],"tindex":"24558a8d-3f53-11e6-808b-e9e00a2f19c6","method":{"position":"com.google.gson.internal.$Gson$Types:303","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type context, java.lang.Class<?> contextRawType) {\n    if (context == (java.util.Properties.java.util.Properties.java.lang.Class)) {\n        return new java.lang.reflect.Type[]{ java.lang.String.java.lang.String.java.lang.Class , java.lang.String.java.lang.String.java.lang.Class };\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getSupertype(context, contextRawType, java.util.Map.java.util.Map.java.lang.Class);\n    if (mapType instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(mapType));\n        return mapParameterizedType.getActualTypeArguments();\n    } \n    return new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class , java.lang.Object.java.lang.Object.java.lang.Class };\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.TypeAdapterFactory.class":"context","value":"contextRawType"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"24558a8e-3f53-11e6-808b-f94c093e14ba","method":{"position":"com.google.gson.internal.bind.TypeAdapters:72","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Class read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else {\n        throw new java.lang.UnsupportedOperationException(\"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"24558a8f-3f53-11e6-808b-97f17dbdb455","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:69","type":"CtMethodImpl","sourcecode":"private synchronized java.util.Date deserializeToDate(java.lang.String json) {\n    if (json == null) {\n        {\n            if (json != null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException ignored) {\n                    }\n                    try {\n                        return java.text.DateFormat.parse(json);\n                    } catch (java.text.ParseException e) {\n                        throw new com.google.gson.JsonSyntaxException(json , e);\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"24558a90-3f53-11e6-808b-83dcc9023b1a","method":{"position":"com.google.gson.internal.$Gson$Types:411","type":"CtMethodImpl","sourcecode":"private static int indexOf(java.lang.Object[] array, java.lang.Object toFind) {\n    for (int int = 0 ; i < (array.int) ; i++) {\n        if (toFind.equals(array[i])) {\n            return i;\n        } \n    }\n    throw new java.util.NoSuchElementException();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"toFind"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:645","type":"CtFieldReadImpl"},"failures":[0,1,3,5,6,8,9,10,11,12,13,14,636,637,638,15,16,17,639,640,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,627,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,244,245,247,248,250,251,253,254,255,256,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,279,280,281,282,283,285,286,287,288,289,290,291,292,293,294,295,296,297,298,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,333,334,335,336,338,340,341,342,343,344,345,346,347,348,349,350,351,352,353,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,628,629,630,631,632,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,526,527,528,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,633,635,591,641,642,643,592,593,644,645,646,597,598,599,600,601,647],"tindex":"2455b1a1-3f53-11e6-808b-171bedcbec97","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if ((!(boolean)) && (isInnerClass(clazz))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(clazz)) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                        if (exclusionStrategy.shouldSkipClass(clazz)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"generateNonExecutableJson":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:318","type":"CtBinaryOperatorImpl"},"failures":[602,603,622,623],"tindex":"2455d8b2-3f53-11e6-808b-c13d0895e883","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i == (-2)) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.get(i);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"delta":"i"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2455d8b3-3f53-11e6-808b-8199726d267b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2455d8b4-3f53-11e6-808b-5b671547269c","method":{"position":"com.google.gson.internal.$Gson$Types:511","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    return (o instanceof java.lang.reflect.GenericArrayType) && (com.google.gson.internal.$Gson$Types.equals(com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl.this, ((java.lang.reflect.GenericArrayType)(o))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"o","token":"o","com.google.gson.stream.JsonToken.NUMBER":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2455d8b5-3f53-11e6-808b-65cbfef3b071","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    } else {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:558","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2455d8b6-3f53-11e6-808b-953489d9735e","method":{"position":"com.google.gson.internal.bind.JsonTreeReader:41","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic int read(char[] buffer, int offset, int count) throws java.io.IOException {\n    if (offset < offset) {\n        {\n            throw new java.lang.AssertionError();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"offset","length":"offset"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2455ffc7-3f53-11e6-808b-85fc85a97234","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2455ffc8-3f53-11e6-808b-35d9362c2a63","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2455ffc9-3f53-11e6-808b-97f584d6f537","method":{"position":"com.google.gson.TypeAdapter:194","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader reader) throws java.io.IOException {\n    if ((reader.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        reader.nextNull();\n        return null;\n    } \n    return com.google.gson.TypeAdapter.this.read(reader);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"reader"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:167","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"24564dea-3f53-11e6-808b-0f92e82b664e","method":{"position":"com.google.gson.internal.$Gson$Types:93","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.Type canonicalize(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.Class) {\n        java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(type));\n        return c.isArray() ? new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(com.google.gson.internal.$Gson$Types.canonicalize(c.getComponentType())) : c;\n    } else if (type instanceof java.lang.reflect.ParameterizedType) {\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(type));\n        return new com.google.gson.internal.$Gson$Types.ParameterizedTypeImpl(p.getOwnerType() , p.getRawType() , p.getActualTypeArguments());\n    } else if (type instanceof java.lang.reflect.GenericArrayType) {\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(type));\n        return new com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl(g.getGenericComponentType());\n    } else if (type instanceof java.lang.reflect.WildcardType) {\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(type));\n        return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(w.getUpperBounds() , w.getLowerBounds());\n    } else {\n        return type;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2456c31b-3f53-11e6-808b-1fc632e3bf19","method":{"position":"com.google.gson.internal.bind.TypeAdapters:744","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    out.value((value == null ? null : java.util.Map<T, java.lang.String>.get(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2456ea2c-3f53-11e6-808b-43c953aaf608","method":{"position":"com.google.gson.internal.bind.TypeAdapters:145","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Boolean read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } else if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.parseBoolean(in.nextString());\n    } \n    return in.nextBoolean();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:145","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2457113d-3f53-11e6-808b-afce68d48cf9","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (src == null) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl"},"failures":[259],"tindex":"2457113e-3f53-11e6-808b-75c697630ed2","method":{"position":"com.google.gson.internal.bind.TypeAdapters:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2457113f-3f53-11e6-808b-492cda0adf56","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl"},"failures":[],"tindex":"24571140-3f53-11e6-808b-b7c3a95cc9b0","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:245","type":"CtMethodImpl","sourcecode":"private java.lang.String keyToString(com.google.gson.JsonElement keyElement) {\n    if (keyElement.isString()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (keyElement.isJsonPrimitive()) {\n                com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = keyElement.getAsJsonPrimitive();\n                if (primitive.isNumber()) {\n                    return java.lang.String.valueOf(primitive.getAsNumber());\n                } else if (primitive.isBoolean()) {\n                    return java.lang.Boolean.toString(primitive.getAsBoolean());\n                } else if (primitive.isString()) {\n                    return primitive.getAsString();\n                } else {\n                    throw new java.lang.AssertionError();\n                }\n            } else if (keyElement.isJsonNull()) {\n                return \"null\";\n            } else {\n                throw new java.lang.AssertionError();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"keyElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:235","type":"CtBinaryOperatorImpl"},"failures":[6,54,648,649,650,651,652,653,654,655,126,219,221,225,370,387,396,403,406,425,446,457,512,538],"tindex":"24573851-3f53-11e6-808b-d96af02e9601","method":{"position":"com.google.gson.Gson:297","type":"CtMethodImpl","sourcecode":"private void checkValidFloatingPoint(double value) {\n    if (value > value) {\n        {\n            if ((java.lang.Double.isNaN(value)) || (java.lang.Double.isInfinite(value))) {\n                throw new java.lang.IllegalArgumentException(((value + \" is not a valid double value as per JSON specification. To override this\") + \" behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method.\"));\n            } \n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"version":"value","annotationVersion":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"24573852-3f53-11e6-808b-43c52256a666","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"24573853-3f53-11e6-808b-4348a4a2279b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[],"tindex":"24573854-3f53-11e6-808b-49e8a84b84a9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (f.isSynthetic()) {\n                {\n                    com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n                    return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:271","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"24573855-3f53-11e6-808b-a9483d43754a","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:429","type":"CtMethodImpl","sourcecode":"private void rotateRight(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotRight;\n            if (pivotRight != null) {\n                pivotRight.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((right != null ? right.int : 0), (pivotRight != null ? pivotRight.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"24575f66-3f53-11e6-808b-cbdb5add6aae","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:126","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"24575f67-3f53-11e6-808b-1d3abe7b1f0f","method":{"position":"com.google.gson.internal.LinkedTreeMap:373","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedTreeMap.Node<K, V> root) {\n    if (root != null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"nearest":"root"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:103","type":"CtVariableReadImpl"},"failures":[],"tindex":"24578678-3f53-11e6-808b-efdb9da7667c","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (serialize) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                        return true;\n                    } \n                    if ((!(boolean)) && (isInnerClass(clazz))) {\n                        return true;\n                    } \n                    if (isAnonymousOrLocal(clazz)) {\n                        return true;\n                    } \n                    java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n                    for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                        if (exclusionStrategy.shouldSkipClass(clazz)) {\n                            return true;\n                        } \n                    }\n                    return false;\n                }\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deserialization":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"24578679-3f53-11e6-808b-bdb5f3ddce36","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Date read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return deserializeToDate(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[0,3,5,9,10,11,19,20,21,24,25,26,36,37,56,57,58,64,65,68,69,73,92,96,98,99,100,101,103,105,106,107,108,109,110,111,112,114,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,134,135,151,160,164,166,167,171,178,179,181,190,195,196,199,627,210,211,219,221,222,224,225,226,227,228,229,230,231,235,236,237,238,244,245,255,259,266,274,290,295,303,304,305,306,307,308,309,311,312,313,314,315,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,333,335,336,338,340,342,344,345,346,347,349,350,351,352,355,356,357,358,359,360,361,362,363,364,438,628,629,630,631,632,462,464,465,467,468,469,470,471,472,473,474,475,476,478,479,481,482,483,485,486,487,488,490,494,495,497,499,508,509,510,511,512,513,514,515,516,517,518,519,520,523,524,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,558,559,560,567,570,571,572,576,577,578,579,581,584,585,586,588,589,590,633,592,593,598],"tindex":"2457ad8a-3f53-11e6-808b-233b9b1f328a","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:66","type":"CtMethodImpl","sourcecode":"private java.lang.String getFieldName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            return com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getFieldName(com.google.gson.FieldNamingStrategy, f);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:694","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"2457ad8b-3f53-11e6-808b-6142a2432ce6","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (i == (-2)) {\n                {\n                    return java.util.List<com.google.gson.JsonElement>.get(i);\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"last":"i","com.google.gson.stream.JsonReader.NUMBER_CHAR_EXP_E":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:243","type":"CtBinaryOperatorImpl"},"failures":[105,106,107,108,109,110,111,112,642,643],"tindex":"2457ad8c-3f53-11e6-808b-e9975aef891e","method":{"position":"com.google.gson.internal.Excluder:242","type":"CtMethodImpl","sourcecode":"private boolean isValidUntil(com.google.gson.annotations.Until annotation) {\n    if (annotation != null) {\n        {\n            if (annotation != null) {\n                double double = annotation.value();\n                if (annotationVersion <= (double)) {\n                    return false;\n                } \n            } \n            return true;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl"},"failures":[0,3,5,9,10,11,19,20,21,24,25,26,36,37,56,57,58,64,65,68,69,73,92,96,98,99,100,101,103,105,106,107,108,109,110,111,112,114,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,134,135,151,160,164,166,167,171,178,179,181,190,195,196,199,627,210,211,219,221,222,224,225,226,227,228,229,230,231,235,236,237,238,244,245,255,259,266,274,290,295,303,304,305,306,307,308,309,311,312,313,314,315,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,333,335,336,338,340,342,344,345,346,347,349,350,351,352,355,356,357,358,359,360,361,362,363,364,438,628,629,630,631,632,462,464,465,467,468,469,470,471,472,473,474,475,476,478,479,481,482,483,485,486,487,488,490,494,495,497,499,508,509,510,511,512,513,514,515,516,517,518,519,520,523,524,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,558,559,560,567,570,571,572,576,577,578,579,581,584,585,586,588,589,590,633,592,593,598],"tindex":"2457d49d-3f53-11e6-808b-1119fec95315","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<?> getFieldAdapter(com.google.gson.Gson gson, java.lang.reflect.Field field, com.google.gson.reflect.TypeToken<?> fieldType) {\n    if (field.isSynthetic()) {\n        {\n            com.google.gson.annotations.JsonAdapter com.google.gson.annotations.JsonAdapter = field.getAnnotation(com.google.gson.annotations.JsonAdapter.com.google.gson.annotations.JsonAdapter.java.lang.Class);\n            if (annotation != null) {\n                com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.getTypeAdapter(com.google.gson.internal.ConstructorConstructor, gson, fieldType, annotation);\n                if (adapter != null)\n                    return adapter;\n                \n            } \n            return gson.getAdapter(fieldType);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"field"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:103","type":"CtInvocationImpl"},"failures":[],"tindex":"2457d49e-3f53-11e6-808b-9d716a0dc0ee","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element instanceof com.google.gson.JsonObject) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:511","type":"CtBinaryOperatorImpl"},"failures":[656,625],"tindex":"2457fbaf-3f53-11e6-808b-b9d052919867","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"2457fbb0-3f53-11e6-808b-45b191e39f33","method":{"position":"com.google.gson.internal.bind.TypeAdapters:211","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return ((short)(in.nextInt()));\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl"},"failures":[12,13,14,15,16,17,19,20,21,22,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,48,49,50,54,56,58,60,62,64,66,67,68,69,70,71,72,73,75,76,77,78,79,82,84,88,91,92,93,95,96,99,101,649,104,105,108,109,112,114,115,116,117,118,119,121,122,123,124,125,126,128,129,130,132,135,137,139,143,144,147,149,151,156,157,158,161,162,164,165,166,167,168,169,171,172,174,177,178,179,180,181,182,186,187,188,189,190,193,196,197,199,200,202,627,204,205,206,207,210,212,213,214,217,219,221,223,225,226,235,238,240,241,242,246,248,249,251,253,254,257,259,261,262,263,264,265,267,269,270,272,274,275,276,277,279,282,284,285,287,288,290,291,292,293,294,295,298,299,301,303,304,305,306,307,313,314,315,316,319,321,322,325,328,331,332,335,337,338,341,343,344,346,347,348,350,355,357,358,360,368,370,376,379,387,388,394,396,397,400,403,405,406,409,410,414,423,425,427,428,431,434,436,440,441,442,443,444,445,446,450,452,456,457,459,628,629,630,631,632,462,463,465,468,471,472,473,474,478,479,481,483,484,485,487,488,489,491,495,496,497,499,500,501,503,505,506,507,511,512,513,518,519,522,524,525,529,530,531,532,533,534,536,538,541,542,543,544,545,546,547,550,552,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,573,575,576,577,579,580,581,582,584,586,589,590,592,593,595,596,598,599,600,601],"tindex":"2457fbb1-3f53-11e6-808b-0d9af1016bee","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43","type":"CtBinaryOperatorImpl"},"failures":[627,532,533,534,535,536,563,564,566,568,569],"tindex":"245822c2-3f53-11e6-808b-9b61bc32624a","method":{"position":"com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:50","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\nstatic com.google.gson.TypeAdapter<?> getTypeAdapter(com.google.gson.internal.ConstructorConstructor constructorConstructor, com.google.gson.Gson gson, com.google.gson.reflect.TypeToken<?> fieldType, com.google.gson.annotations.JsonAdapter annotation) {\n    if (annotation == null) {\n        {\n            java.lang.Class<?> java.lang.Class<?> = annotation.value();\n            if (com.google.gson.TypeAdapter.com.google.gson.TypeAdapter.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapter<?>> java.lang.Class<com.google.gson.TypeAdapter<?>> = ((java.lang.Class<com.google.gson.TypeAdapter<?>>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapter)).construct();\n            } \n            if (com.google.gson.TypeAdapterFactory.com.google.gson.TypeAdapterFactory.java.lang.Class.isAssignableFrom(value)) {\n                java.lang.Class<com.google.gson.TypeAdapterFactory> java.lang.Class<com.google.gson.TypeAdapterFactory> = ((java.lang.Class<com.google.gson.TypeAdapterFactory>)(value));\n                return constructorConstructor.get(com.google.gson.reflect.TypeToken.get(typeAdapterFactory)).construct().create(gson, fieldType);\n            } \n            throw new java.lang.IllegalArgumentException(\"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"annotation"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"245822c3-3f53-11e6-808b-ab93faf58ca2","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:45","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"rawtypes\" , \"unchecked\" })\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.TypeAdapter<T>;\n    java.lang.reflect.Type java.lang.reflect.Type = getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type, value);\n    if (runtimeType != (java.lang.reflect.Type)) {\n        com.google.gson.TypeAdapter com.google.gson.TypeAdapter = com.google.gson.Gson.getAdapter(com.google.gson.reflect.TypeToken.get(runtimeType));\n        if (!(runtimeTypeAdapter instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = runtimeTypeAdapter;\n        } else if (!((com.google.gson.TypeAdapter<T>) instanceof com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.Adapter)) {\n            chosen = com.google.gson.TypeAdapter<T>;\n        } else {\n            chosen = runtimeTypeAdapter;\n        }\n    } \n    chosen.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:511","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"245849d4-3f53-11e6-808b-ab4b7b9eaedc","method":{"position":"com.google.gson.internal.Streams:88","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(char[] chars, int offset, int length) throws java.io.IOException {\n    if (length == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            com.google.gson.internal.Streams.AppendableWriter.CurrentWrite.char[] = chars;\n            java.lang.Appendable.append(com.google.gson.internal.Streams.AppendableWriter.CurrentWrite, offset, (offset + length));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"stackSize":"length"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:137","type":"CtBinaryOperatorImpl"},"failures":[657,658,659,660,661],"tindex":"245849d5-3f53-11e6-808b-21f35af2a219","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if ((!create) && (!create)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"serialize":"create","deserialize":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"245870e6-3f53-11e6-808b-df719116946e","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl"},"failures":[],"tindex":"245897f7-3f53-11e6-808b-057867824a1e","method":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:39","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:716","type":"CtBinaryOperatorImpl"},"failures":[],"tindex":"245897f8-3f53-11e6-808b-19b53b4cc25d","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if ((c < '0') || (c > '9')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467352484892/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":67,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
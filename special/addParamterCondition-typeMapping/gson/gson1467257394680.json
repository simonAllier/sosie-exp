{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":526,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":322,"com.google.gson.functional.StringTest.testStringValueDeserialization":590,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":102,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":469,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":574,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":442,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":26,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":512,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":387,"com.google.gson.MixedStreamTest.testWriteLenient":603,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":493,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":296,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":375,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":52,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":62,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":492,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":474,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":25,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":260,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":200,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":449,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":357,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":416,"com.google.gson.functional.ObjectTest.testSingletonLists":164,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":261,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":292,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":323,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":437,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":341,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":386,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":14,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":373,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":581,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":501,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":11,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":476,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":584,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":598,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":185,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":218,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":470,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":408,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":1,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":431,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":214,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":407,"com.google.gson.functional.EnumTest.testEnumCaseMapping":24,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":321,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":333,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":430,"com.google.gson.functional.JsonTreeTest.testToJsonTree":557,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":582,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":428,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":42,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":275,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":538,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":438,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":572,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":115,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":59,"com.google.gson.functional.ObjectTest.testNullDeserialization":623,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":188,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":596,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":499,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":8,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":154,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":443,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":173,"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray":611,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":212,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":107,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":504,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":7,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":198,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":306,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":560,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":111,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":482,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":481,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":580,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":146,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":140,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":486,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":565,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":179,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":248,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":291,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":457,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":388,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":403,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":467,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":50,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":571,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":265,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":380,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":100,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":147,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":394,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":468,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":178,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":244,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":6,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":314,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":496,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":30,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":132,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":410,"com.google.gson.metrics.PerformanceTest.testDummy":620,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":549,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":123,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":36,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":520,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":381,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":345,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":413,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":295,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":524,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":286,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":517,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":106,"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray":612,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":515,"com.google.gson.functional.CollectionTest.testSetDeserialization":371,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":201,"com.google.gson.functional.EnumTest.testEnumSet":18,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":169,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":551,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":460,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":37,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":68,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":84,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":568,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":174,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":0,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":35,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":471,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":519,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":477,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":17,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":209,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":150,"com.google.gson.functional.MapTest.testHashMapDeserialization":397,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":440,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":367,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":577,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":315,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":527,"com.google.gson.MixedStreamTest.testReadNulls":604,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":43,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":232,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":263,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":349,"com.google.gson.functional.MapTest.testSortedMap":409,"com.google.gson.functional.MapTest.testMapSerialization":89,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":234,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":465,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":522,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":540,"com.google.gson.functional.MapTest.testSerializeMaps":83,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":319,"com.google.gson.functional.MapTest.testComplexKeysSerialization":98,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":550,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":412,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":255,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":190,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":352,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":122,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":363,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":15,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":351,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":221,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":27,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":506,"com.google.gson.functional.MapTest.testStringKeyDeserialization":411,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards":616,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":542,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":70,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":158,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":101,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":446,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":204,"com.google.gson.functional.PrettyPrintingTest.testMap":219,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":441,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":55,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":235,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":272,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":347,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":10,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":543,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":327,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":591,"com.google.gson.functional.CollectionTest.testQueueSerialization":56,"com.google.gson.functional.MapTest.testMapSerializationEmpty":99,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":283,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":461,"com.google.gson.functional.MapTest.testMapOfMapSerialization":88,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":138,"com.google.gson.JavaSerializationTest.testMapIsSerializable":343,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":573,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":369,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":143,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":196,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":76,"com.google.gson.functional.FieldNamingTest.testIdentity":320,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":324,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":382,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":236,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":507,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":29,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":163,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":377,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":556,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":432,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":2,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":104,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":325,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":141,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":513,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":579,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":5,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":569,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":195,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":284,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":305,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":395,"com.google.gson.functional.MapTest.testMapSubclassSerialization":82,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":157,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":229,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":359,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":552,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":206,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":307,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":455,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":601,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":389,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":490,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":563,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":346,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":34,"com.google.gson.functional.EnumTest.testEnumSubclass":21,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":144,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":12,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":500,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":128,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":103,"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType":339,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":473,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":69,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":360,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":433,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":184,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":458,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":514,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":422,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":4,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":537,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":462,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":498,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":139,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":355,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":300,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":491,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":396,"com.google.gson.MixedStreamTest.testWriteNulls":626,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":250,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":392,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":246,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":189,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":356,"com.google.gson.CommentsTest.testParseComments":609,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":73,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":165,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":418,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":259,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":472,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":541,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":521,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":91,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":326,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":624,"com.google.gson.MixedStreamTest.testReadInvalidState":600,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":197,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":41,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":302,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":226,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":617,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":131,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":610,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":544,"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters":615,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":256,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":135,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":194,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":151,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":289,"com.google.gson.functional.MapTest.testMapDeserialization":402,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":536,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":285,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":224,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":81,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":415,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":85,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":126,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":117,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":114,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":364,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":266,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":350,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":562,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":172,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":180,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":45,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":207,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":423,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":276,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":358,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":51,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":183,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":90,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":220,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":337,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":304,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":429,"com.google.gson.functional.PrimitiveTest.testShortSerialization":155,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":385,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":119,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":475,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":216,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":456,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":148,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":278,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":439,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":316,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":20,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":54,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":228,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":399,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":452,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":66,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":159,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":390,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":578,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":608,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":614,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":162,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":485,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":28,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":181,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":383,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":268,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":308,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":479,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":558,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":71,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":459,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":510,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":495,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":23,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":47,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":262,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":60,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":566,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":202,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":384,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":113,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":118,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":290,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":445,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":280,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":120,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":576,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":365,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":424,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":434,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":480,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":142,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":160,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":79,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":19,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":116,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":530,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":523,"com.google.gson.functional.MapTest.testGeneralMapField":95,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":494,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":243,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":488,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":105,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":203,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":252,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":297,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":93,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":110,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":130,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":269,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":149,"com.google.gson.MixedStreamTest.testReadMixedStreamed":607,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":136,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":404,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":567,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":3,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":63,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":554,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":548,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":463,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":215,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":342,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":288,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":405,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":312,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":398,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":74,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":161,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":240,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":310,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":453,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":287,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":393,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":237,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":368,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":559,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":419,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":78,"com.google.gson.functional.ObjectTest.testNestedDeserialization":511,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":177,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":186,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":528,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":421,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":213,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":487,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":258,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":353,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":406,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":592,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":33,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":153,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":46,"com.google.gson.JavaSerializationTest.testListIsSerializable":344,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":379,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":391,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":65,"com.google.gson.functional.ObjectTest.testNullSerialization":170,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":49,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":589,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":400,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":94,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":129,"com.google.gson.functional.MapTest.testInterfaceTypeMap":92,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":539,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":205,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":125,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":435,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":22,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":217,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":208,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":362,"com.google.gson.MixedStreamTest.testReadClosed":625,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":270,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":211,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":447,"com.google.gson.MixedStreamTest.testWriteClosed":606,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":58,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":529,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":166,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":426,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":583,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":38,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":124,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":546,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":182,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":257,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":303,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":127,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":167,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":57,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":586,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":466,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":311,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":361,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":61,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":293,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":532,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":192,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":489,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":134,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":555,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":564,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":191,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":241,"com.google.gson.functional.CollectionTest.testQueueDeserialization":374,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":545,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":137,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":464,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":595,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":233,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":301,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":587,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":86,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":282,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":112,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":509,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":53,"com.google.gson.functional.MapTest.testRawMapSerialization":97,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":599,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":372,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":575,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":44,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":175,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":525,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":121,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":336,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":13,"com.google.gson.functional.PrimitiveTest.testByteSerialization":152,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":245,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":338,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":331,"com.google.gson.ObjectTypeAdapterTest.testSerialize":340,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":108,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":444,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":376,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":251,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":317,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":39,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":335,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":593,"com.google.gson.functional.MapTest.testMapWithQuotes":87,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":273,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":450,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":594,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":67,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":553,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":77,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":231,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":483,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":271,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":199,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":417,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":31,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":508,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":225,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":145,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":279,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":622,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":254,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":497,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":298,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":274,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":281,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":309,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":378,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":478,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":16,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":370,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":535,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":32,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":242,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":299,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":48,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":238,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":588,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":230,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":348,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":436,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":621,"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink":618,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":75,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":502,"com.google.gson.functional.ObjectTest.testNestedSerialization":176,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":80,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":109,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":133,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":597,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":239,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":96,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":227,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":267,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":9,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":605,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":171,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":531,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":484,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":425,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":547,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":570,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":334,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":448,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":619,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":503,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":561,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":585,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":328,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":249,"com.google.gson.functional.CollectionTest.testSetSerialization":64,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":414,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":72,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":222,"com.google.gson.functional.StringTest.testStringValueSerialization":329,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":330,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":193,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":354,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":366,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":534,"com.google.gson.MixedStreamTest.testWriteInvalidState":602,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":168,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":451,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":253,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":454,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":313,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":277,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":318,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":187,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":533,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":210,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":613,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":40,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":294,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":332,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":401,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":247,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":516},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:188","type":"CtBinaryOperatorImpl","sourcecode":"from == null"},"failures":[],"tindex":"e98dd95e-3e72-11e6-a6bf-2ff38f9f3ba3","method":{"position":"com.google.gson.internal.$Gson$Types:394","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type context, java.lang.Class<?> contextRawType, java.lang.reflect.TypeVariable<?> unknown) {\n    java.lang.Class<?> java.lang.Class<?> = com.google.gson.internal.$Gson$Types.declaringClassOf(unknown);\n    if (declaredByRaw == null) {\n        return unknown;\n    } \n    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.getGenericSupertype(context, contextRawType, declaredByRaw);\n    if (declaredBy instanceof java.lang.reflect.ParameterizedType) {\n        int int = com.google.gson.internal.$Gson$Types.indexOf(declaredByRaw.getTypeParameters(), unknown);\n        return ((java.lang.reflect.ParameterizedType)(declaredBy)).getActualTypeArguments()[index];\n    } \n    return unknown;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"context"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e98e277f-3e72-11e6-a6bf-bfdc10325cbc","method":{"position":"com.google.gson.internal.bind.TypeAdapters:289","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:319","type":"CtBinaryOperatorImpl","sourcecode":"((value) instanceof java.lang.Number) && ((other.value) instanceof java.lang.Number)"},"failures":[],"tindex":"e98e2780-3e72-11e6-a6bf-edf5cac9574d","method":{"position":"com.google.gson.Gson:136","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((src instanceof java.lang.Number) && ((src.java.lang.Object) instanceof java.lang.Number)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src, typeOfSrc);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"src","value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"e98e2781-3e72-11e6-a6bf-7dc6968ef642","method":{"position":"com.google.gson.stream.JsonWriter:532","type":"CtMethodImpl","sourcecode":"private void string(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            java.lang.String[] java.lang.String[] = boolean ? com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[] : com.google.gson.stream.JsonWriter.com.google.gson.stream.JsonWriter.java.lang.String[];\n            java.io.Writer.write(\"\\\"\");\n            int int = 0;\n            int int = value.length();\n            for (int int = 0 ; i < length ; i++) {\n                char char = value.charAt(i);\n                java.lang.String java.lang.String;\n                if (c < 128) {\n                    replacement = replacements[c];\n                    if (replacement == null) {\n                        continue;\n                    } \n                } else if (c == '\\u2028') {\n                    replacement = \"\\\\u2028\";\n                } else if (c == '\\u2029') {\n                    replacement = \"\\\\u2029\";\n                } else {\n                    continue;\n                }\n                if (last < i) {\n                    java.io.Writer.write(value, last, (i - last));\n                } \n                java.io.Writer.write(replacement);\n                last = i + 1;\n            }\n            if (last < length) {\n                java.io.Writer.write(value, last, (length - last));\n            } \n            java.io.Writer.write(\"\\\"\");\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334],"tindex":"e98e4e92-3e72-11e6-a6bf-7b36c4875718","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[335,0,1,2,3,336,337,338,4,5,339,340,341,6,9,342,343,344,10,11,12,345,13,346,14,347,348,349,17,18,19,20,21,350,351,22,352,23,24,25,26,353,27,354,28,355,29,30,31,356,32,33,34,35,36,37,357,38,39,40,358,41,359,42,43,44,45,46,47,48,49,360,361,50,362,51,363,364,52,53,54,55,365,366,367,56,57,58,59,60,368,369,61,370,371,62,63,372,64,65,373,374,375,376,377,378,379,67,380,68,381,382,383,69,70,71,384,72,73,74,385,75,386,76,77,78,79,80,387,388,389,390,391,392,393,394,395,396,397,398,82,83,399,400,84,401,85,402,86,403,404,405,406,87,88,89,407,408,90,91,409,92,93,94,95,96,97,410,98,99,411,100,412,413,101,102,103,104,105,414,106,107,108,109,110,111,112,113,415,416,114,417,115,116,117,418,118,119,120,121,419,122,420,421,422,423,123,124,125,424,425,426,427,126,127,428,429,430,431,128,432,129,433,434,435,436,437,130,438,439,131,440,441,442,443,444,445,446,132,133,447,448,449,450,451,134,452,135,136,453,454,137,455,456,138,457,139,140,458,459,141,142,460,461,462,143,463,464,465,466,467,468,469,470,144,471,145,472,146,147,473,474,148,475,476,149,477,150,478,479,480,151,152,153,154,155,156,157,481,482,483,158,484,159,485,486,487,160,161,488,162,489,490,163,164,491,492,165,493,494,166,495,496,167,497,498,169,499,171,500,172,501,173,174,502,175,176,177,503,178,504,505,506,179,507,180,181,508,182,509,510,511,512,183,513,514,184,185,186,187,188,189,190,515,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,516,517,518,519,520,218,219,220,221,222,223,224,225,521,522,226,523,227,524,525,228,229,230,231,232,233,526,234,527,528,235,529,530,531,236,237,532,238,533,239,240,241,242,534,243,244,245,246,247,535,536,248,249,250,537,538,539,251,540,252,541,253,542,254,543,255,544,256,257,258,259,545,546,260,547,548,261,549,550,551,262,552,263,553,554,264,265,555,266,556,557,267,558,559,268,269,270,560,561,562,271,563,272,273,564,274,565,275,276,566,567,277,568,278,569,279,280,281,282,283,570,284,571,285,286,572,287,573,288,289,290,291,574,292,575,576,293,577,294,295,578,296,297,579,298,299,300,301,302,303,580,581,304,305,582,306,583,307,308,584,585,309,310,586,587,311,588,589,312,313,314,315,316,317,318,319,320,590,321,322,323,324,325,591,592,326,593,327,594,595,596,328,597,598,329,330,599,600,601,602,603,604,605,606,607,608,333,334,609],"tindex":"e98e75a3-3e72-11e6-a6bf-7563d546c707","method":{"position":"com.google.gson.reflect.TypeToken:295","type":"CtMethodImpl","sourcecode":"public static com.google.gson.reflect.TypeToken<?> get(java.lang.reflect.Type type) {\n    if (type instanceof java.lang.reflect.ParameterizedType) {\n        {\n            return new com.google.gson.reflect.TypeToken<java.lang.Object>(type);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[610],"tindex":"e98e75a4-3e72-11e6-a6bf-b5beb2d24c44","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:401","type":"CtMethodImpl","sourcecode":"private void rotateLeft(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> root) {\n    if ((root != null) && (root != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivotLeft;\n            if (pivotLeft != null) {\n                pivotLeft.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            } \n            replaceInParent(root, pivot);\n            pivot.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = root;\n            root.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = pivot;\n            root.int = (java.lang.Math.max((left != null ? left.int : 0), (pivotLeft != null ? pivotLeft.int : 0))) + 1;\n            pivot.int = (java.lang.Math.max(root.int, (pivotRight != null ? pivotRight.int : 0))) + 1;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"root","right":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e98e9cb5-3e72-11e6-a6bf-41f6bdcd7e20","method":{"position":"com.google.gson.Gson:254","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextDouble();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[278],"tindex":"e98ec3c6-3e72-11e6-a6bf-8bac3ea69b88","method":{"position":"com.google.gson.Gson:285","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                out.nullValue();\n                return ;\n            } \n            float float = value.floatValue();\n            checkValidFloatingPoint(floatValue);\n            out.value(value);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:553","type":"CtBinaryOperatorImpl","sourcecode":"src != null"},"failures":[611,612],"tindex":"e98ec3c7-3e72-11e6-a6bf-9368eeff19d6","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o != null) {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"o"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"e98ec3c8-3e72-11e6-a6bf-8b69762f7a12","method":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\n@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Object value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.TypeAdapter<java.lang.Object> com.google.gson.TypeAdapter<java.lang.Object> = ((com.google.gson.TypeAdapter<java.lang.Object>)(com.google.gson.Gson.getAdapter(value.getClass())));\n    if (typeAdapter instanceof com.google.gson.internal.bind.ObjectTypeAdapter) {\n        out.beginObject();\n        out.endObject();\n        return ;\n    } \n    typeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"value","this":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e98ec3c9-3e72-11e6-a6bf-aba15fd05b52","method":{"position":"com.google.gson.Gson:278","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Float read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return ((float)(in.nextDouble()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:382","type":"CtBinaryOperatorImpl","sourcecode":"upperBound != (originalUpperBound[0])"},"failures":[],"tindex":"e98eeada-3e72-11e6-a6bf-c35c41adf622","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"originalUpperBound":"b","upperBound":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[0,4,5,340,6,346,14,17,22,352,26,353,27,354,28,355,29,30,31,356,33,34,35,36,37,357,38,39,40,358,41,359,42,43,44,45,46,47,48,49,360,361,50,362,51,363,364,52,54,60,371,62,64,375,376,378,379,380,383,69,71,72,79,80,387,388,389,390,391,86,408,92,94,95,98,102,103,105,414,106,107,108,111,112,113,415,416,116,117,418,118,120,122,420,421,422,423,123,124,125,424,425,426,427,126,127,428,130,479,163,164,491,492,165,493,494,166,495,496,167,497,169,499,171,500,501,174,502,175,176,177,503,178,504,505,506,179,507,180,181,508,182,509,510,511,512,183,513,514,184,185,187,188,189,190,515,191,192,193,194,195,196,197,199,200,201,206,517,518,519,220,221,225,522,226,523,227,525,228,229,230,231,232,526,234,528,235,529,530,236,237,238,533,240,252,541,253,256,257,258,259,545,546,547,548,261,549,263,554,264,265,555,266,556,557,267,558,561,562,566,278,570,288,298,303,308,584,585,309,310,586,587,311,313,314,316,317,318,319,320,330,599,601,602,606,607,608],"tindex":"e98eeadb-3e72-11e6-a6bf-35a443094d32","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:125","type":"CtMethodImpl","sourcecode":"private java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> getBoundFields(com.google.gson.Gson context, com.google.gson.reflect.TypeToken<?> type, java.lang.Class<?> raw) {\n    if (raw.isAssignableFrom(raw)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField> = new java.util.LinkedHashMap<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>();\n            if (raw.isInterface()) {\n                return result;\n            } \n            java.lang.reflect.Type java.lang.reflect.Type = type.getType();\n            while (raw != (java.lang.Object.java.lang.Object.java.lang.Class)) {\n                java.lang.reflect.Field[] java.lang.reflect.Field[] = raw.getDeclaredFields();\n                for (java.lang.reflect.Field java.lang.reflect.Field : fields) {\n                    boolean boolean = excludeField(field, true);\n                    boolean boolean = excludeField(field, false);\n                    if ((!serialize) && (!deserialize)) {\n                        continue;\n                    } \n                    field.setAccessible(true);\n                    java.lang.reflect.Type java.lang.reflect.Type = com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, field.getGenericType());\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = createBoundField(context, field, getFieldName(field), com.google.gson.reflect.TypeToken.get(fieldType), serialize, deserialize);\n                    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = result.put(boundField.java.lang.String, boundField);\n                    if (previous != null) {\n                        throw new java.lang.IllegalArgumentException(((declaredType + \" declares multiple JSON fields named \") + (previous.java.lang.String)));\n                    } \n                }\n                type = com.google.gson.reflect.TypeToken.get(com.google.gson.internal.$Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));\n                raw = type.getRawType();\n            }\n            return result;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"raw","rawSupertype":"raw"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e98f11ec-3e72-11e6-a6bf-75b9a7dd160c","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:180","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    T T = com.google.gson.internal.ObjectConstructor<T>.construct();\n    try {\n        in.beginObject();\n        while (in.hasNext()) {\n            java.lang.String java.lang.String = in.nextName();\n            com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField = java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.get(name);\n            if ((field == null) || (!(field.boolean))) {\n                in.skipValue();\n            } else {\n                field.read(in, instance);\n            }\n        }\n    } catch (java.lang.IllegalStateException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError(e);\n    }\n    in.endObject();\n    return instance;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e98f11ed-3e72-11e6-a6bf-c172105c454a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[613,614],"tindex":"e98f11ee-3e72-11e6-a6bf-db44367fade3","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1243","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT)"},"failures":[],"tindex":"e98f11ef-3e72-11e6-a6bf-e5b50e64d2fe","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            if (modifier == modifier) {\n                {\n                    return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:194","type":"CtBinaryOperatorImpl","sourcecode":"(token != (com.google.gson.stream.JsonToken.NUMBER)) && (token != (com.google.gson.stream.JsonToken.STRING))"},"failures":[],"tindex":"e98f11f0-3e72-11e6-a6bf-499784add99b","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if ((o != o) && (token != o)) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.STRING":"o","token":"o","com.google.gson.stream.JsonToken.NUMBER":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e98f3901-3e72-11e6-a6bf-85acd18eddf2","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:198","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.Map<K, V> map) throws java.io.IOException {\n    if (map == null) {\n        out.nullValue();\n        return ;\n    } \n    if (!(boolean)) {\n        out.beginObject();\n        for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n            out.name(java.lang.String.valueOf(entry.getKey()));\n            com.google.gson.TypeAdapter<V>.write(out, entry.getValue());\n        }\n        out.endObject();\n        return ;\n    } \n    boolean boolean = false;\n    java.util.List<com.google.gson.JsonElement> java.util.List<com.google.gson.JsonElement> = new java.util.ArrayList<com.google.gson.JsonElement>(map.size());\n    java.util.List<V> java.util.List<V> = new java.util.ArrayList<V>(map.size());\n    for (java.util.Map.Entry<K, V> java.util.Map.Entry<K, V> : map.entrySet()) {\n        com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.TypeAdapter<K>.toJsonTree(entry.getKey());\n        keys.add(keyElement);\n        values.add(entry.getValue());\n        hasComplexKeys |= (keyElement.isJsonArray()) || (keyElement.isJsonObject());\n    }\n    if (hasComplexKeys) {\n        out.beginArray();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            out.beginArray();\n            com.google.gson.internal.Streams.write(keys.get(i), out);\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n            out.endArray();\n        }\n        out.endArray();\n    } else {\n        out.beginObject();\n        for (int int = 0 ; i < (keys.size()) ; i++) {\n            com.google.gson.JsonElement com.google.gson.JsonElement = keys.get(i);\n            out.name(keyToString(keyElement));\n            com.google.gson.TypeAdapter<V>.write(out, values.get(i));\n        }\n        out.endObject();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:565","type":"CtBinaryOperatorImpl","sourcecode":"(indent) == null"},"failures":[102,421,422,423,424,425,428,556],"tindex":"e98f3902-3e72-11e6-a6bf-f963e5a08f7c","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:159","type":"CtBinaryOperatorImpl","sourcecode":"a == b"},"failures":[336,337,338,32,375,376,377,378,379,102,104,421,422,423,424,425,428,185,526,545,546,555,266,556,557],"tindex":"e98f3903-3e72-11e6-a6bf-a54630194e61","method":{"position":"com.google.gson.Gson:491","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement toJsonTree(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc == src) {\n        {\n            com.google.gson.internal.bind.JsonTreeWriter com.google.gson.internal.bind.JsonTreeWriter = new com.google.gson.internal.bind.JsonTreeWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.get();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"typeOfSrc","b":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:591","type":"CtBinaryOperatorImpl","sourcecode":"result != (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"e98f3904-3e72-11e6-a6bf-632fb348021d","method":{"position":"com.google.gson.stream.JsonWriter:375","type":"CtMethodImpl","sourcecode":"private void replaceTop(int topOfStack) {\n    if (topOfStack != topOfStack) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            int[][((int) - 1)] = topOfStack;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"result":"topOfStack","com.google.gson.stream.JsonReader.PEEKED_NONE":"topOfStack"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"e98f6015-3e72-11e6-a6bf-9d9e5efa4415","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json != null) {\n                        {\n                            if (!(typeOfT instanceof java.lang.reflect.TypeVariable)) {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:131","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.Class<?>"},"failures":[615,616],"tindex":"e98f6016-3e72-11e6-a6bf-613213bf0c6b","method":{"position":"com.google.gson.reflect.TypeToken:272","type":"CtMethodImpl","sourcecode":"private static boolean matches(java.lang.reflect.Type from, java.lang.reflect.Type to, java.util.Map<java.lang.String, java.lang.reflect.Type> typeMap) {\n    if (to instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (to.equals(from)) || ((from instanceof java.lang.reflect.TypeVariable) && (to.equals(typeMap.get(((java.lang.reflect.TypeVariable<?>)(from)).getName()))));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"to"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[617,340,341],"tindex":"e98f6017-3e72-11e6-a6bf-a34936e8535d","method":{"position":"com.google.gson.TypeAdapter:140","type":"CtMethodImpl","sourcecode":"public final void toJson(java.io.Writer out, T value) throws java.io.IOException {\n    if (out == null) {\n        {\n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(out);\n            write(writer, value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"out"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:192","type":"CtInvocationImpl","sourcecode":"to.equals(from)"},"failures":[],"tindex":"e98f6018-3e72-11e6-a6bf-73389df5e3f3","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    if (typeAdapter.equals(typeAdapter)) {\n        {\n            boolean boolean = (exactType.getType()) == (exactType.getRawType());\n            return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeAdapter","to":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:469","type":"CtBinaryOperatorImpl","sourcecode":"src == null"},"failures":[],"tindex":"e98f8729-3e72-11e6-a6bf-3df124fbddb9","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"src":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1243","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT)"},"failures":[],"tindex":"e98f872a-3e72-11e6-a6bf-d7affc4bda2e","method":{"position":"com.google.gson.internal.Streams:108","type":"CtMethodImpl","sourcecode":"public char charAt(int i) {\n    if (i == i) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return char[][i];\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_BEGIN_OBJECT":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[43,48,360,364,316,319],"tindex":"e98f872b-3e72-11e6-a6bf-c523c2db1378","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        {\n            if ((name.length()) == 0) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"name"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"e98f872c-3e72-11e6-a6bf-eb34af9a4453","method":{"position":"com.google.gson.reflect.TypeToken:283","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic final boolean equals(java.lang.Object o) {\n    if ((o != o) && (token != o)) {\n        {\n            return (o instanceof com.google.gson.reflect.TypeToken<?>) && (com.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, ((com.google.gson.reflect.TypeToken<?>)(o)).java.lang.reflect.Type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[],"tindex":"e98f872d-3e72-11e6-a6bf-a9074367f4d9","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o == o) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"o","com.google.gson.LongSerializationPolicy.DEFAULT":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonParseException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"e98fae3e-3e72-11e6-a6bf-99b3dedbaf3c","method":{"position":"com.google.gson.Gson:127","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T deserialize(com.google.gson.JsonElement json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonParseException {\n    return ((T)(fromJson(json, typeOfT)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"e98fae3f-3e72-11e6-a6bf-71a23f6f4378","method":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:63","type":"CtMethodImpl","sourcecode":"public java.lang.Object read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.List<E> java.util.List<E> = new java.util.ArrayList<E>();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        list.add(instance);\n    }\n    in.endArray();\n    java.lang.Object java.lang.Object = java.lang.reflect.Array.newInstance(java.lang.Class<E>, list.size());\n    for (int int = 0 ; i < (list.size()) ; i++) {\n        java.lang.reflect.Array.set(array, i, list.get(i));\n    }\n    return array;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:309","type":"CtBinaryOperatorImpl","sourcecode":"context == (java.util.Properties.class)"},"failures":[],"tindex":"e98fae40-3e72-11e6-a6bf-c12f75f01076","method":{"position":"com.google.gson.internal.$Gson$Types:158","type":"CtMethodImpl","sourcecode":"public static boolean equals(java.lang.reflect.Type a, java.lang.reflect.Type b) {\n    if (a == b) {\n        return true;\n    } else if (a instanceof java.lang.Class) {\n        return a.equals(b);\n    } else if (a instanceof java.lang.reflect.ParameterizedType) {\n        if (!(b instanceof java.lang.reflect.ParameterizedType)) {\n            return false;\n        } \n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(a));\n        java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(b));\n        return ((com.google.gson.internal.$Gson$Types.equal(pa.getOwnerType(), pb.getOwnerType())) && (pa.getRawType().equals(pb.getRawType()))) && (java.util.Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments()));\n    } else if (a instanceof java.lang.reflect.GenericArrayType) {\n        if (!(b instanceof java.lang.reflect.GenericArrayType)) {\n            return false;\n        } \n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(a));\n        java.lang.reflect.GenericArrayType java.lang.reflect.GenericArrayType = ((java.lang.reflect.GenericArrayType)(b));\n        return com.google.gson.internal.$Gson$Types.equals(ga.getGenericComponentType(), gb.getGenericComponentType());\n    } else if (a instanceof java.lang.reflect.WildcardType) {\n        if (!(b instanceof java.lang.reflect.WildcardType)) {\n            return false;\n        } \n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(a));\n        java.lang.reflect.WildcardType java.lang.reflect.WildcardType = ((java.lang.reflect.WildcardType)(b));\n        return (java.util.Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())) && (java.util.Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds()));\n    } else if (a instanceof java.lang.reflect.TypeVariable) {\n        if (!(b instanceof java.lang.reflect.TypeVariable)) {\n            return false;\n        } \n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(a));\n        java.lang.reflect.TypeVariable<?> java.lang.reflect.TypeVariable<?> = ((java.lang.reflect.TypeVariable<?>)(b));\n        return ((va.getGenericDeclaration()) == (vb.getGenericDeclaration())) && (va.getName().equals(vb.getName()));\n    } else {\n        return false;\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"java.util.Properties.class":"a","context":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e98fae41-3e72-11e6-a6bf-dfcd4fb2c903","method":{"position":"com.google.gson.internal.bind.TypeAdapters:338","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Character value) throws java.io.IOException {\n    out.value((value == null ? null : java.lang.String.valueOf(value)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:249","type":"CtInvocationImpl","sourcecode":"toResolve.isAssignableFrom(rawSupertype)"},"failures":[],"tindex":"e98fd452-3e72-11e6-a6bf-efbe2dfb8256","method":{"position":"com.google.gson.internal.Excluder:215","type":"CtMethodImpl","sourcecode":"private boolean isAnonymousOrLocal(java.lang.Class<?> clazz) {\n    if (clazz.isAssignableFrom(clazz)) {\n        {\n            return (!(java.lang.Enum.java.lang.Enum.java.lang.Class.isAssignableFrom(clazz))) && ((clazz.isAnonymousClass()) || (clazz.isLocalClass()));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"clazz","rawSupertype":"clazz"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"e98fd453-3e72-11e6-a6bf-f560afb99d29","method":{"position":"com.google.gson.Gson:631","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (writer == null) {\n        {\n            try {\n                com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = newJsonWriter(com.google.gson.internal.Streams.writerForAppendable(writer));\n                toJson(jsonElement, jsonWriter);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"e98fd454-3e72-11e6-a6bf-3bcd49ca3528","method":{"position":"com.google.gson.FieldNamingPolicy:53","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.upperCaseFirstLetter(f.getName());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:431","type":"CtBinaryOperatorImpl","sourcecode":"factory == skipPast"},"failures":[],"tindex":"e98fd455-3e72-11e6-a6bf-7731e775f1f6","method":{"position":"com.google.gson.Gson:422","type":"CtMethodImpl","sourcecode":"public <T>com.google.gson.TypeAdapter<T> getDelegateAdapter(com.google.gson.TypeAdapterFactory skipPast, com.google.gson.reflect.TypeToken<T> type) {\n    if (skipPast == skipPast) {\n        {\n            boolean boolean = false;\n            if (!(java.util.List<com.google.gson.TypeAdapterFactory>.contains(skipPast)))\n                skipPastFound = true;\n            \n            for (com.google.gson.TypeAdapterFactory com.google.gson.TypeAdapterFactory : java.util.List<com.google.gson.TypeAdapterFactory>) {\n                if (!skipPastFound) {\n                    if (factory == skipPast) {\n                        skipPastFound = true;\n                    } \n                    continue;\n                } \n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = factory.create(com.google.gson.Gson.this, type);\n                if (candidate != null) {\n                    return candidate;\n                } \n            }\n            throw new java.lang.IllegalArgumentException((\"GSON cannot serialize \" + type));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"factory":"skipPast","skipPast":"skipPast"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.stream.JsonWriter:341","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"e98ffb66-3e72-11e6-a6bf-8788eebd2bac","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json != null) {\n                        {\n                            if (!(typeOfT instanceof java.lang.reflect.TypeVariable)) {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"e98ffb67-3e72-11e6-a6bf-d345acb6421e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Preconditions:41","type":"CtUnaryOperatorImpl","sourcecode":"!condition"},"failures":[618],"tindex":"e98ffb68-3e72-11e6-a6bf-e34659364376","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:245","type":"CtMethodImpl","sourcecode":"void removeInternal(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, boolean unlink) {\n    if (!unlink) {\n        {\n            if (unlink) {\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if ((left != null) && (right != null)) {\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = (left.int) > (right.int) ? left.last() : right.first();\n                removeInternal(adjacent, false);\n                int int = 0;\n                left = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (left != null) {\n                    leftHeight = left.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = left;\n                    left.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                int int = 0;\n                right = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                if (right != null) {\n                    rightHeight = right.int;\n                    adjacent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = right;\n                    right.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = adjacent;\n                    node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n                } \n                adjacent.int = (java.lang.Math.max(leftHeight, rightHeight)) + 1;\n                replaceInParent(node, adjacent);\n                return ;\n            } else if (left != null) {\n                replaceInParent(node, left);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else if (right != null) {\n                replaceInParent(node, right);\n                node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            } else {\n                replaceInParent(node, null);\n            }\n            rebalance(originalParent, false);\n            (int)--;\n            (int)++;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"condition":"unlink"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"e9902279-3e72-11e6-a6bf-df31fbde44da","method":{"position":"com.google.gson.internal.bind.TypeAdapters:432","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.StringBuffer value) throws java.io.IOException {\n    out.value((value == null ? null : value.toString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1258","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NUMBER)"},"failures":[],"tindex":"e990227a-3e72-11e6-a6bf-fff0884ff95c","method":{"position":"com.google.gson.FieldAttributes:134","type":"CtMethodImpl","sourcecode":"public boolean hasModifier(int modifier) {\n    if (modifier == modifier) {\n        {\n            if (modifier == modifier) {\n                {\n                    return ((java.lang.reflect.Field.getModifiers()) & modifier) != 0;\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"modifier","com.google.gson.stream.JsonReader.PEEKED_NUMBER":"modifier"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"e990227b-3e72-11e6-a6bf-e92a4f59c2d3","method":{"position":"com.google.gson.FieldNamingPolicy:90","type":"CtMethodImpl","sourcecode":"public java.lang.String translateName(java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.FieldNamingPolicy.separateCamelCase(f.getName(), \"_\").toLowerCase();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"e990498c-3e72-11e6-a6bf-03f1abc8dcfc","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonArray) {\n        {\n            if (jsonElement.isString()) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:306","type":"CtBinaryOperatorImpl","sourcecode":"longSerializationPolicy == (com.google.gson.LongSerializationPolicy.DEFAULT)"},"failures":[335,0,1,2,3,4,5,619,6,7,8,9,620,10,11,12,345,13,346,14,15,347,348,349,16,17,18,19,20,21,350,351,22,352,23,24,25,26,353,27,354,28,355,29,30,31,356,32,33,34,35,36,37,357,38,39,40,358,41,621,359,42,43,44,45,46,47,48,49,360,361,50,362,51,363,364,52,53,54,55,365,366,367,56,57,58,59,60,368,369,61,370,371,62,63,372,64,65,373,66,374,375,376,377,378,379,67,380,68,381,382,383,69,70,71,384,72,73,74,385,75,386,76,77,78,79,80,387,388,389,390,391,392,393,394,395,81,396,397,398,82,83,399,400,84,401,85,402,86,403,404,405,406,87,88,89,407,408,90,91,409,92,93,94,95,96,97,410,98,99,411,100,412,413,101,102,103,104,105,414,106,107,108,109,110,111,112,113,415,416,114,417,115,116,117,418,118,119,120,121,419,122,420,421,422,423,123,124,125,424,425,426,427,126,127,428,429,430,431,128,432,129,433,434,435,436,437,130,438,439,131,440,441,442,443,444,445,446,132,133,447,448,449,450,451,134,452,135,136,453,454,137,455,456,138,457,139,140,458,459,141,142,460,461,462,143,463,464,465,466,467,468,469,470,144,471,145,472,146,147,473,474,148,475,476,149,477,150,478,479,480,151,152,153,154,155,156,157,481,482,483,158,484,159,485,486,487,160,161,488,162,489,490,163,164,491,492,165,493,494,166,495,496,167,168,497,498,169,499,170,171,622,500,172,501,173,174,502,175,176,177,503,178,504,505,506,623,179,507,180,181,508,182,509,510,511,512,183,513,514,184,185,186,624,187,188,189,190,515,191,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,516,517,518,519,520,218,219,220,221,222,223,224,225,521,522,226,523,227,524,525,228,229,230,232,233,526,234,527,528,235,529,530,531,236,237,532,238,533,239,240,241,242,534,243,244,245,246,247,535,536,248,249,250,537,538,539,251,540,252,541,253,542,254,543,255,544,256,257,258,259,545,546,260,547,548,261,549,550,551,262,552,263,553,554,264,265,555,266,556,557,267,558,559,268,269,270,560,561,562,271,563,272,273,564,274,565,275,276,566,567,277,568,278,569,279,280,281,282,283,570,284,571,285,286,572,287,573,288,289,290,291,574,292,575,576,293,577,294,295,578,296,297,579,298,299,300,301,302,303,580,581,304,305,582,306,583,307,308,584,585,309,310,586,587,311,588,589,312,313,314,315,316,317,318,319,320,590,321,322,323,324,325,591,592,326,593,327,594,595,596,328,597,598,329,330,331,332,599,600,625,601,626,602,603,604,605,606,607,608,333,334,609],"tindex":"e990498d-3e72-11e6-a6bf-f72b3ac117fc","method":{"position":"com.google.gson.Gson:305","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> longAdapter(com.google.gson.LongSerializationPolicy longSerializationPolicy) {\n    if (longSerializationPolicy == longSerializationPolicy) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (longSerializationPolicy == (com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy.com.google.gson.LongSerializationPolicy)) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextLong();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    out.value(value.toString());\n                }\n            };\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"longSerializationPolicy":"longSerializationPolicy","com.google.gson.LongSerializationPolicy.DEFAULT":"longSerializationPolicy"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:76","type":"CtBinaryOperatorImpl","sourcecode":"(pendingName) != null"},"failures":[],"tindex":"e990709e-3e72-11e6-a6bf-9dd59ff371a3","method":{"position":"com.google.gson.FieldNamingPolicy:137","type":"CtMethodImpl","sourcecode":"private static java.lang.String upperCaseFirstLetter(java.lang.String name) {\n    if (name != null) {\n        {\n            if ((name.length()) == 0) {\n                {\n                    java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n                    int int = 0;\n                    char char = name.charAt(index);\n                    while (index < ((name.length()) - 1)) {\n                        if (java.lang.Character.isLetter(firstCharacter)) {\n                            break;\n                        } \n                        fieldNameBuilder.append(firstCharacter);\n                        firstCharacter = name.charAt((++index));\n                    }\n                    if (index == (name.length())) {\n                        return fieldNameBuilder.toString();\n                    } \n                    if (!(java.lang.Character.isUpperCase(firstCharacter))) {\n                        java.lang.String java.lang.String = com.google.gson.FieldNamingPolicy.modifyString(java.lang.Character.toUpperCase(firstCharacter), name, (++index));\n                        return fieldNameBuilder.append(modifiedTarget).toString();\n                    } else {\n                        return name;\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"pendingName":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:133","type":"CtBinaryOperatorImpl","sourcecode":"(type) instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"e990709f-3e72-11e6-a6bf-9de18f97d69e","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json != null) {\n                        {\n                            if (!(typeOfT instanceof java.lang.reflect.TypeVariable)) {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.$Gson$Types:103","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.GenericArrayType"},"failures":[],"tindex":"e99070a0-3e72-11e6-a6bf-9b34ebd5c622","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.GenericArrayType) {\n        {\n            if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonSyntaxException();\n            } else {\n                {\n                    if (json != null) {\n                        {\n                            if (!(typeOfT instanceof java.lang.reflect.TypeVariable)) {\n                                {\n                                    if (json == null) {\n                                        return null;\n                                    } \n                                    java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n                                    T T = ((T)(fromJson(reader, typeOfT)));\n                                    return target;\n                                }\n                            } else {\n                                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                                throw new com.google.gson.JsonSyntaxException();\n                            }\n                        }\n                    } else {\n                        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                        throw new com.google.gson.JsonSyntaxException();\n                    }\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"e99070a1-3e72-11e6-a6bf-a9cbb2f8e674","method":{"position":"com.google.gson.JsonObject:89","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Number value) {\n    if (value == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            add(property, createJsonElement(value));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"e99097b2-3e72-11e6-a6bf-e5adecc07d2e","method":{"position":"com.google.gson.internal.bind.TypeAdapters:607","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Locale read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer(locale , \"_\");\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    java.lang.String java.lang.String = null;\n    if (tokenizer.hasMoreElements()) {\n        language = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        country = tokenizer.nextToken();\n    } \n    if (tokenizer.hasMoreElements()) {\n        variant = tokenizer.nextToken();\n    } \n    if ((country == null) && (variant == null)) {\n        return new java.util.Locale(language);\n    } else if (variant == null) {\n        return new java.util.Locale(language , country);\n    } else {\n        return new java.util.Locale(language , country , variant);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[0,4,5,340,6,346,14,17,22,352,26,27,354,355,29,30,31,356,33,34,35,36,37,357,38,39,40,358,41,359,42,43,44,45,46,47,48,49,360,361,50,362,51,363,364,52,54,60,371,62,64,375,376,378,379,380,383,69,71,72,79,80,387,388,389,390,391,86,408,92,94,95,98,102,103,105,414,106,107,108,111,112,113,415,416,116,117,418,118,120,122,420,421,422,423,123,124,125,424,425,426,427,126,127,428,479,163,164,491,492,165,493,494,166,495,496,167,497,169,499,171,500,501,174,502,175,176,503,178,504,505,179,507,180,181,508,182,509,510,511,512,183,513,514,184,185,187,188,189,190,515,191,192,193,194,195,196,197,199,200,201,206,517,518,519,220,221,225,522,226,523,227,525,228,229,230,231,232,526,234,528,235,529,530,236,237,238,533,240,252,541,253,256,257,258,259,545,546,547,548,261,549,263,554,264,265,555,266,556,557,267,558,561,562,566,278,570,288,298,303,308,584,585,309,310,586,587,311,313,314,316,317,318,319,320,330,599,601,602,606,607,608],"tindex":"e99097b3-3e72-11e6-a6bf-7363504d5a16","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:70","type":"CtMethodImpl","sourcecode":"static java.lang.String getFieldName(com.google.gson.FieldNamingStrategy fieldNamingPolicy, java.lang.reflect.Field f) {\n    if (f.isSynthetic()) {\n        {\n            com.google.gson.annotations.SerializedName com.google.gson.annotations.SerializedName = f.getAnnotation(com.google.gson.annotations.SerializedName.com.google.gson.annotations.SerializedName.java.lang.Class);\n            return serializedName == null ? fieldNamingPolicy.translateName(f) : serializedName.value();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"f"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.DefaultDateTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"typeOfT == (java.sql.Timestamp.class)"},"failures":[],"tindex":"e99097b4-3e72-11e6-a6bf-efb2819a2112","method":{"position":"com.google.gson.Gson:801","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(com.google.gson.stream.JsonReader reader, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT == typeOfT) {\n        {\n            boolean boolean = true;\n            boolean boolean = reader.isLenient();\n            reader.setLenient(true);\n            try {\n                reader.peek();\n                isEmpty = false;\n                com.google.gson.reflect.TypeToken<T> com.google.gson.reflect.TypeToken<T> = ((com.google.gson.reflect.TypeToken<T>)(com.google.gson.reflect.TypeToken.get(typeOfT)));\n                com.google.gson.TypeAdapter<T> com.google.gson.TypeAdapter<T> = getAdapter(typeToken);\n                T T = typeAdapter.read(reader);\n                return object;\n            } catch (java.io.EOFException e) {\n                if (isEmpty) {\n                    return null;\n                } \n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.lang.IllegalStateException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonSyntaxException(e);\n            } finally {\n                reader.setLenient(oldLenient);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"typeOfT":"typeOfT","java.sql.Timestamp.class":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"e990bec5-3e72-11e6-a6bf-e114086acec3","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonArray) {\n        {\n            if (jsonElement.isString()) {\n                {\n                    boolean boolean = writer.isLenient();\n                    writer.setLenient(true);\n                    boolean boolean = writer.isHtmlSafe();\n                    writer.setHtmlSafe(boolean);\n                    boolean boolean = writer.getSerializeNulls();\n                    writer.setSerializeNulls(boolean);\n                    try {\n                        com.google.gson.internal.Streams.write(jsonElement, writer);\n                    } catch (java.io.IOException e) {\n                        throw new com.google.gson.JsonIOException(e);\n                    } finally {\n                        writer.setLenient(oldLenient);\n                        writer.setHtmlSafe(oldHtmlSafe);\n                        writer.setSerializeNulls(oldSerializeNulls);\n                    }\n                }\n            } else {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new com.google.gson.JsonIOException();\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467256502008/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"e990bec6-3e72-11e6-a6bf-53cb1222b466","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n    return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":57,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
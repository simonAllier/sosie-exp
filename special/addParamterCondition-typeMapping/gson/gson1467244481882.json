{"failureDictionary":{"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext":440,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":26,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":355,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":36,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":150,"com.google.gson.JsonPrimitiveTest.testDeepCopy":423,"com.google.gson.stream.JsonWriterTest.testRepeatedName":33,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":78,"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose":369,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":400,"com.google.gson.MixedStreamTest.testWriteLenient":478,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":329,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":10,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":42,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":43,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":77,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":295,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":241,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":4,"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities":384,"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails":391,"com.google.gson.functional.ObjectTest.testSingletonLists":207,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":296,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":325,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":356,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":445,"com.google.gson.stream.JsonWriterTest.testStrings":466,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":399,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":41,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":39,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":475,"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern":428,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":21,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":259,"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues":460,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":58,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":255,"com.google.gson.functional.EnumTest.testEnumCaseMapping":76,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":354,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":366,"com.google.gson.functional.JsonTreeTest.testToJsonTree":414,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":264,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":415,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":20,"com.google.gson.stream.JsonWriterTest.testNulls":451,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":94,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":308,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":472,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":160,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":110,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":229,"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean":419,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":38,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":197,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":216,"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities":383,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":253,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":155,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":63,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":239,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":339,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":47,"com.google.gson.JsonParserTest.testParseString":1,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":37,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":189,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":473,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":183,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":221,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":283,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":432,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":324,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":401,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":406,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":102,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":55,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":371,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":148,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":190,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":220,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":279,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":30,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":347,"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes":426,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush":461,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":82,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":176,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":168,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":88,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":14,"com.google.gson.stream.JsonWriterTest.testEmptyArray":446,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":328,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":409,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":319,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":154,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":242,"com.google.gson.functional.EnumTest.testEnumSet":70,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":212,"com.google.gson.JsonStreamParserTest.testIterator":441,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":89,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":118,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":133,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":217,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":57,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":87,"com.google.gson.stream.JsonWriterTest.testBadNestingArray":459,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":69,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":250,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":193,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":348,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":95,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":268,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":430,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":298,"com.google.gson.functional.MapTest.testMapSerialization":138,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":270,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":408,"com.google.gson.functional.MapTest.testSerializeMaps":132,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":352,"com.google.gson.functional.MapTest.testComplexKeysSerialization":146,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse":370,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":404,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":290,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":231,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":167,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":67,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":5,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":262,"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType":385,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":79,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":120,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":201,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":149,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":245,"com.google.gson.functional.PrettyPrintingTest.testMap":260,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":106,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":271,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":306,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":65,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":474,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":360,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":6,"com.google.gson.functional.CollectionTest.testQueueSerialization":107,"com.google.gson.functional.MapTest.testMapSerializationEmpty":147,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":316,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":462,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName":464,"com.google.gson.functional.MapTest.testMapOfMapSerialization":137,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":181,"com.google.gson.stream.JsonWriterTest.testNameWithoutValue":447,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":186,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":237,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":44,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities":375,"com.google.gson.functional.FieldNamingTest.testIdentity":353,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":357,"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput":438,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":397,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":272,"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues":453,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":81,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":206,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":396,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":413,"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays":449,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":59,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":152,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":358,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":184,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":62,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":236,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":317,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":338,"com.google.gson.functional.MapTest.testMapSubclassSerialization":131,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":200,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":53,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":247,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":340,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":477,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":402,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":86,"com.google.gson.functional.EnumTest.testEnumSubclass":73,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":187,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":40,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":172,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":151,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":119,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":226,"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent":454,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":16,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":61,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":182,"com.google.gson.stream.JsonWriterTest.testBadNestingObject":456,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":34,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":333,"com.google.gson.MixedStreamTest.testWriteNulls":416,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":285,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure":452,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":281,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":230,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":2,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":123,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":208,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":294,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":407,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":45,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":359,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":238,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":93,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":199,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":335,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":22,"com.google.gson.ObjectTypeAdapterTest.testSerializeObject":443,"com.google.gson.JsonParserTest.testParseMixedArray":393,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":433,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":175,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":291,"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose":376,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":179,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":235,"com.google.gson.JsonArrayTest.testRemove":436,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":194,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":322,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":318,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":265,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":130,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":418,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":49,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":134,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":162,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":159,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":300,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":215,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":222,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":97,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":248,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":17,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":309,"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings":386,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":103,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":225,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":139,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":261,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":389,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":337,"com.google.gson.functional.PrimitiveTest.testShortSerialization":198,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":398,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":164,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":257,"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities":373,"com.google.gson.JsonParserTest.testParseEmptyString":394,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":191,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":311,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":349,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":72,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":105,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":52,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":116,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":202,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":368,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr":431,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray":379,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":377,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":205,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":469,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":80,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":223,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":302,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":341,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":380,"com.google.gson.JsonPrimitiveTest.testStringsAndChar":420,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":121,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":75,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":99,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":297,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":111,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":243,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":158,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":163,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":323,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":299,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":313,"com.google.gson.stream.JsonWriterTest.testNullStringValue":448,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":165,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":18,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":185,"com.google.gson.JsonArrayTest.testSet":434,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":203,"com.google.gson.stream.JsonWriterTest.testEmptyObject":458,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":128,"com.google.gson.JsonPrimitiveTest.testEquals":422,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":71,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":161,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":411,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":23,"com.google.gson.functional.MapTest.testGeneralMapField":143,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":278,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":153,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":244,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":287,"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization":427,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":330,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":141,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":157,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":174,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":303,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":192,"com.google.gson.JsonObjectTest.testDeepCopy":7,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":180,"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans":381,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":60,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":113,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":256,"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter":374,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":321,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":345,"com.google.gson.JsonArrayTest.testDeepCopy":435,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":124,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":204,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":54,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":343,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":32,"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject":378,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":320,"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes":421,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":273,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":127,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":219,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":227,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":15,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":254,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":293,"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails":395,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":85,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":196,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":98,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":13,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":403,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":115,"com.google.gson.functional.ObjectTest.testNullSerialization":213,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":101,"com.google.gson.stream.JsonWriterTest.testDoubles":463,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":142,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":173,"com.google.gson.functional.MapTest.testInterfaceTypeMap":140,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":246,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":170,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":74,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":258,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":249,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":304,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":252,"com.google.gson.MixedStreamTest.testWriteClosed":480,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":109,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":209,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":90,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":169,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":29,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":224,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":292,"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization":437,"com.google.gson.stream.JsonWriterTest.testLongs":450,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":336,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":171,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":210,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":108,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":344,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":112,"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue":382,"com.google.gson.internal.bind.JsonElementReaderTest.testStrings":387,"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs":429,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":326,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":27,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":233,"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber":425,"com.google.gson.stream.JsonWriterTest.testNumbers":465,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":178,"com.google.gson.JsonNullTest.testEqualsAndHashcode":442,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":412,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":232,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":276,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":28,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":50,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":269,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":334,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":135,"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects":457,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":315,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":48,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":104,"com.google.gson.functional.MapTest.testRawMapSerialization":145,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":476,"com.google.gson.JsonParserTest.testParseReader":0,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":470,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":96,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":218,"com.google.gson.JsonPrimitiveTest.testExponential":424,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":410,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":166,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":388,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":66,"com.google.gson.functional.PrimitiveTest.testByteSerialization":195,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":280,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":390,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":364,"com.google.gson.ObjectTypeAdapterTest.testSerialize":444,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":46,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":11,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":286,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":350,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":91,"com.google.gson.functional.MapTest.testMapWithQuotes":136,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":56,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":117,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":126,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":25,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":305,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":240,"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues":455,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":405,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":83,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":266,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":188,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":312,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":289,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":331,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":307,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":314,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":342,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":68,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":84,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":277,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":332,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":100,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":274,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":267,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":9,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":125,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":468,"com.google.gson.JsonObjectTest.testAddingStringProperties":8,"com.google.gson.functional.ObjectTest.testNestedSerialization":51,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":129,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":156,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":177,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":275,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":144,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":24,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":301,"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails":392,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":64,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":479,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":467,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":214,"com.google.gson.JsonPrimitiveTest.testBoolean":417,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":19,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":367,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":471,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":361,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":284,"com.google.gson.functional.CollectionTest.testSetSerialization":114,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":122,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":263,"com.google.gson.functional.StringTest.testStringValueSerialization":362,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":363,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":234,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":211,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":288,"com.google.gson.stream.JsonWriterTest.testBooleans":31,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":346,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":310,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":351,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":228,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":3,"com.google.gson.JsonStreamParserTest.testParseTwoStrings":439,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":251,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":372,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":92,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":327,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":365,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":35,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":282},"transformations":[{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"tindex":"d8ed160a-3e54-11e6-ba92-1b2d93d7b99b","method":{"position":"com.google.gson.JsonObject:151","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(java.lang.String memberName) {\n    if (memberName == null) {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d8ed642b-3e54-11e6-ba92-379a69ffb0f9","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:208","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginObject();\n    try {\n        for (com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField : java.util.Map<java.lang.String, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField>.values()) {\n            if (boundField.writeField(value)) {\n                out.name(boundField.java.lang.String);\n                boundField.write(out, value);\n            } \n        }\n    } catch (java.lang.IllegalAccessException e) {\n        throw new java.lang.AssertionError();\n    }\n    out.endObject();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:370","type":"CtVariableReadImpl","sourcecode":"requiresThreadLocalCleanup"},"failures":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"tindex":"d8ed8b3c-3e54-11e6-ba92-93af00bee34e","method":{"position":"com.google.gson.stream.JsonWriter:447","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(boolean value) throws java.io.IOException {\n    if (value) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            writeDeferredName();\n            beforeValue(false);\n            java.io.Writer.write((value ? \"true\" : \"false\"));\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requiresThreadLocalCleanup":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d8ed8b3d-3e54-11e6-ba92-bf257e6450b0","method":{"position":"com.google.gson.internal.bind.TypeAdapters:379","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigDecimal value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d8ed8b3e-3e54-11e6-ba92-158190d994d0","method":{"position":"com.google.gson.internal.bind.DateTypeAdapter:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic synchronized void write(com.google.gson.stream.JsonWriter out, java.util.Date value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    java.lang.String java.lang.String = java.text.DateFormat.format(value);\n    out.value(dateFormatAsString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:137","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonObject"},"failures":[],"tindex":"d8ed8b3f-3e54-11e6-ba92-b18fa6e37453","method":{"position":"com.google.gson.internal.$Gson$Types:151","type":"CtMethodImpl","sourcecode":"static boolean equal(java.lang.Object a, java.lang.Object b) {\n    return (a == b) || ((a != null) && (a.equals(b)));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.stream.JsonReader:290","type":"CtBinaryOperatorImpl","sourcecode":"in == null"},"failures":[],"tindex":"d8ed8b40-3e54-11e6-ba92-535e09527bb7","method":{"position":"com.google.gson.Gson:746","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.io.Reader json, java.lang.Class<T> classOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (json == null) {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            java.lang.Object java.lang.Object = fromJson(jsonReader, classOfT);\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"in":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[57,58,59,60,61,62,30,63,38,64,65,39,40,66,41,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,42,104,105,106,107,108,109,110,111,112,43,113,114,115,116,117,118,119,120,121,122,123,124,125,44,126,127,128,129,130,131,132,133,134,135,136,137,138,139,45,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,46,156,157,47,48,158,159,160,161,162,163,164,165,166,167,168,169,170,49,171,172,173,174,175,176,177,178,179,180,50,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,51,219,220,221,222,223,224,225,226,21,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,22,24,52,53,267,25,268,269,270,271,272,273,274,275,54,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,55,300,301,302,303,304,305,306,56,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367],"tindex":"d8edb251-3e54-11e6-ba92-17e7823ba97d","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"d8edb252-3e54-11e6-ba92-35224f52e566","method":{"position":"com.google.gson.stream.JsonWriter:413","type":"CtMethodImpl","sourcecode":"public com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if ((value != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if (value == null) {\n                return nullValue();\n            } \n            writeDeferredName();\n            beforeValue(false);\n            string(value);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d8edd963-3e54-11e6-ba92-e3f674c7687f","method":{"position":"com.google.gson.internal.bind.TypeAdapters:255","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextLong();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ObjectTypeAdapter:95","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[5,368],"tindex":"d8edd964-3e54-11e6-ba92-97900dee88a8","method":{"position":"com.google.gson.internal.LinkedTreeMap:276","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedTreeMap.Node<K, V> removeInternalByKey(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = findByObject(key);\n            if (node != null) {\n                removeInternal(node, true);\n            } \n            return node;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:290","type":"CtBinaryOperatorImpl","sourcecode":"collectionType instanceof java.lang.reflect.WildcardType"},"failures":[369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,0,1,30,392,393,394,395,2,63,5,6,7,8,38,66,41,72,84,9,116,10,11,396,12,13,117,118,397,119,123,124,398,399,127,400,401,402,368,403,140,143,404,150,152,405,15,16,17,18,19,20,21,227,244,246,250,252,253,255,406,407,408,22,23,24,409,410,25,26,411,27,28,29,298,299,55,412,300,413,414,301,303,56,307,308,329,332,337,415,364,365,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441],"tindex":"d8ee0075-3e54-11e6-ba92-dd2a354d577a","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.reflect.WildcardType) {\n        {\n            if (target instanceof java.lang.String) {\n                return true;\n            } \n            java.lang.Class<?> java.lang.Class<?> = target.getClass();\n            for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n                if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"collectionType":"target"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d8ee0076-3e54-11e6-ba92-4d41a3d0c3b9","method":{"position":"com.google.gson.Gson:317","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value.toString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d8ee0077-3e54-11e6-ba92-215541268d7a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:482","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.InetAddress read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return java.net.InetAddress.getByName(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d8ee0078-3e54-11e6-ba92-17736b4be21b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:201","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.Excluder:159","type":"CtInvocationImpl","sourcecode":"field.isSynthetic()"},"failures":[],"tindex":"d8ee2789-3e54-11e6-ba92-f9bfa6d09277","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:94","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\n@java.lang.Override\nvoid write(com.google.gson.stream.JsonWriter writer, java.lang.Object value) throws java.io.IOException, java.lang.IllegalAccessException {\n    if (value.isSynthetic()) {\n        {\n            java.lang.Object java.lang.Object = field.get(value);\n            com.google.gson.TypeAdapter com.google.gson.TypeAdapter = new com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper(context , this.com.google.gson.TypeAdapter<?> , fieldType.getType());\n            t.write(writer, fieldValue);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonParser:60","type":"CtBinaryOperatorImpl","sourcecode":"(!(element.isJsonNull())) && ((jsonReader.peek()) != (com.google.gson.stream.JsonToken.END_DOCUMENT))"},"failures":[],"tindex":"d8ee4e9a-3e54-11e6-ba92-118d46a97105","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if ((!(src.isJsonNull())) && ((src.peek()) != src)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"com.google.gson.stream.JsonToken.END_DOCUMENT":"src","jsonReader":"src","element":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"d8ee4e9b-3e54-11e6-ba92-e1927ff6d1e8","method":{"position":"com.google.gson.reflect.TypeToken:253","type":"CtMethodImpl","sourcecode":"private static java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type token, java.lang.Class<?>... expected) {\n    if (token instanceof java.lang.reflect.TypeVariable) {\n        {\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder(\"Unexpected type. Expected one of: \");\n            for (java.lang.Class<?> java.lang.Class<?> : expected) {\n                exceptionMessage.append(clazz.getName()).append(\", \");\n            }\n            exceptionMessage.append(\"but got: \").append(token.getClass().getName()).append(\", for type token: \").append(token.toString()).append('.');\n            return new java.lang.AssertionError(exceptionMessage.toString());\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"token"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:163","type":"CtBinaryOperatorImpl","sourcecode":"a instanceof java.lang.Class"},"failures":[],"tindex":"d8ee75ac-3e54-11e6-ba92-c1445b174fbb","method":{"position":"com.google.gson.reflect.TypeToken:160","type":"CtMethodImpl","sourcecode":"private static boolean isAssignableFrom(java.lang.reflect.Type from, java.lang.reflect.GenericArrayType to) {\n    if (from instanceof java.lang.Class) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            java.lang.reflect.Type java.lang.reflect.Type = to.getGenericComponentType();\n            if (toGenericComponentType instanceof java.lang.reflect.ParameterizedType) {\n                java.lang.reflect.Type java.lang.reflect.Type = from;\n                if (from instanceof java.lang.reflect.GenericArrayType) {\n                    t = ((java.lang.reflect.GenericArrayType)(from)).getGenericComponentType();\n                } else if (from instanceof java.lang.Class<?>) {\n                    java.lang.Class<?> java.lang.Class<?> = ((java.lang.Class<?>)(from));\n                    while (classType.isArray()) {\n                        classType = classType.getComponentType();\n                    }\n                    t = classType;\n                } \n                return com.google.gson.reflect.TypeToken.isAssignableFrom(t, ((java.lang.reflect.ParameterizedType)(toGenericComponentType)), new java.util.HashMap<java.lang.String, java.lang.reflect.Type>());\n            } \n            return true;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"a":"from"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:176","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[442],"tindex":"d8ee75ad-3e54-11e6-ba92-7b2600051f2f","method":{"position":"com.google.gson.JsonNull:60","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object other) {\n    if (other == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonNull.this) == other) || (other instanceof com.google.gson.JsonNull);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"other"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"d8ee75ae-3e54-11e6-ba92-e379b45553ab","method":{"position":"com.google.gson.Gson:888","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.TypeAdapter<T>) == null) {\n        throw new java.lang.IllegalStateException();\n    } \n    return com.google.gson.TypeAdapter<T>.read(in);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d8ee75af-3e54-11e6-ba92-c9bd1ffef739","method":{"position":"com.google.gson.internal.bind.TypeAdapters:348","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.String read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        return java.lang.Boolean.toString(in.nextBoolean());\n    } \n    return in.nextString();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:726","type":"CtBinaryOperatorImpl","sourcecode":"value == 0"},"failures":[372,377],"tindex":"d8ee75b0-3e54-11e6-ba92-3950c9da3764","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:170","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(long value) throws java.io.IOException {\n    if (value == 0) {\n        {\n            put(new com.google.gson.JsonPrimitive(value));\n            return com.google.gson.internal.bind.JsonTreeWriter.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"d8ee9cc1-3e54-11e6-ba92-451e77ba462a","method":{"position":"com.google.gson.Gson:261","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    double double = value.doubleValue();\n    checkValidFloatingPoint(doubleValue);\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.reflect.TypeToken:240","type":"CtInvocationImpl","sourcecode":"from.getRawType().equals(to.getRawType())"},"failures":[],"tindex":"d8ee9cc2-3e54-11e6-ba92-5da9ca968ad6","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src.getRawType().equals(src.getRawType())) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (src == null) {\n                return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n            } \n            return toJson(src, src.getClass());\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"src","to":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:556","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[370,371,372,377,378,379,380,57,61,62,443,444,445,30,393,446,447,31,448,449,450,451,32,33,452,34,453,454,455,456,35,36,457,458,459,460,461,462,463,464,465,466,467,63,38,41,69,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,42,104,105,106,107,108,109,110,111,112,43,113,114,115,117,118,119,120,121,122,123,125,127,128,129,130,131,132,133,134,135,136,137,138,139,45,140,141,142,143,144,145,146,147,148,149,150,153,155,46,156,157,47,48,158,159,161,162,163,164,165,167,168,169,170,49,171,174,177,180,191,199,202,204,206,207,208,209,210,211,212,214,217,218,51,219,220,221,222,223,224,225,226,21,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,247,468,258,469,470,471,472,473,474,475,259,260,261,262,263,264,265,266,22,24,52,53,267,25,268,270,271,272,273,274,275,54,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,296,298,299,55,300,301,305,307,310,313,316,320,321,323,324,328,330,331,336,341,342,343,344,346,347,349,350,351,352,353,359,363,364,365,476,477,478,479,480,366,367],"tindex":"d8ee9cc3-3e54-11e6-ba92-f9904d697556","method":{"position":"com.google.gson.stream.JsonWriter:335","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter close(int empty, int nonempty, java.lang.String closeBracket) throws java.io.IOException {\n    if (nonempty == nonempty) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            int int = peek();\n            if ((context != nonempty) && (context != empty)) {\n                throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            } \n            if ((java.lang.String) != null) {\n                throw new java.lang.IllegalStateException((\"Dangling name: \" + (java.lang.String)));\n            } \n            (int)--;\n            if (context == nonempty) {\n                newline();\n            } \n            java.io.Writer.write(closeBracket);\n            return com.google.gson.stream.JsonWriter.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"nonempty","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"nonempty"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:168","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.ParameterizedType)"},"failures":[],"tindex":"d8eec3d4-3e54-11e6-ba92-1f08f3b96711","method":{"position":"com.google.gson.Gson:552","type":"CtMethodImpl","sourcecode":"public void toJson(java.lang.Object src, java.lang.Appendable writer) throws com.google.gson.JsonIOException {\n    if (!(src instanceof java.lang.reflect.ParameterizedType)) {\n        {\n            if (src != null) {\n                toJson(src, src.getClass(), writer);\n            } else {\n                toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull, writer);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:334","type":"CtBinaryOperatorImpl","sourcecode":"(primitive.value) instanceof java.lang.Number"},"failures":[],"tindex":"d8eec3d5-3e54-11e6-ba92-edb01f770521","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key instanceof java.lang.Number) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"key","value":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d8eec3d6-3e54-11e6-ba92-7f4a51f526a3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:442","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URL read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.lang.String java.lang.String = in.nextString();\n    return \"null\".equals(nextString) ? null : new java.net.URL(nextString);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"d8eec3d7-3e54-11e6-ba92-15d9ae022be4","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (src == null) {\n        {\n            com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"d8eec3d8-3e54-11e6-ba92-734b281355d6","method":{"position":"com.google.gson.internal.bind.MapTypeAdapterFactory:160","type":"CtMethodImpl","sourcecode":"public java.util.Map<K, V> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Map<K, V> java.util.Map<K, V> = com.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>.construct();\n    if (peek == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.beginArray();\n        while (in.hasNext()) {\n            in.beginArray();\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n            in.endArray();\n        }\n        in.endArray();\n    } else {\n        in.beginObject();\n        while (in.hasNext()) {\n            com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.com.google.gson.internal.JsonReaderInternalAccess.promoteNameToValue(in);\n            K K = com.google.gson.TypeAdapter<K>.read(in);\n            V V = com.google.gson.TypeAdapter<V>.read(in);\n            V V = map.put(key, value);\n            if (replaced != null) {\n                throw new com.google.gson.JsonSyntaxException((\"duplicate key: \" + key));\n            } \n        }\n        in.endObject();\n    }\n    return map;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:141","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.WildcardType"},"failures":[],"tindex":"d8eeeae9-3e54-11e6-ba92-556ef21fbcc6","method":{"position":"com.google.gson.internal.$Gson$Types:431","type":"CtMethodImpl","sourcecode":"private static void checkNotPrimitive(java.lang.reflect.Type type) {\n    com.google.gson.internal.$Gson$Preconditions.checkArgument(((!(type instanceof java.lang.Class<?>)) || (!(((java.lang.Class<?>)(type)).isPrimitive()))));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"type"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:618","type":"CtBinaryOperatorImpl","sourcecode":"(c == 'f') || (c == 'F')"},"failures":[],"tindex":"d8eeeaea-3e54-11e6-ba92-2ff7a99e2a69","method":{"position":"com.google.gson.stream.JsonReader:999","type":"CtMethodImpl","sourcecode":"private java.lang.String nextQuotedValue(char quote) throws java.io.IOException {\n    if ((quote == 'f') || (c == 'F')) {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder();\n            while (true) {\n                int int = int;\n                int int = int;\n                int int = p;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        return builder.toString();\n                    } else if (c == '\\\\') {\n                        int = p;\n                        builder.append(buffer, start, ((p - start) - 1));\n                        builder.append(readEscapeCharacter());\n                        p = int;\n                        l = int;\n                        start = p;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                builder.append(buffer, start, (p - start));\n                int = p;\n                if (!(fillBuffer(1))) {\n                    throw syntaxError(\"Unterminated string\");\n                } \n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"d8eeeaeb-3e54-11e6-ba92-97c1d8edafbb","method":{"position":"com.google.gson.GsonBuilder:382","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(java.lang.String pattern) {\n    if ((pattern.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.GsonBuilder.this.java.lang.String = pattern;\n            return com.google.gson.GsonBuilder.this;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"pattern"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:86","type":"CtBinaryOperatorImpl","sourcecode":"element instanceof com.google.gson.JsonArray"},"failures":[],"tindex":"d8eeeaec-3e54-11e6-ba92-415446aa5018","method":{"position":"com.google.gson.Gson:660","type":"CtMethodImpl","sourcecode":"public void toJson(com.google.gson.JsonElement jsonElement, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    if (jsonElement instanceof com.google.gson.JsonArray) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            boolean boolean = writer.isLenient();\n            writer.setLenient(true);\n            boolean boolean = writer.isHtmlSafe();\n            writer.setHtmlSafe(boolean);\n            boolean boolean = writer.getSerializeNulls();\n            writer.setSerializeNulls(boolean);\n            try {\n                com.google.gson.internal.Streams.write(jsonElement, writer);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            } finally {\n                writer.setLenient(oldLenient);\n                writer.setHtmlSafe(oldHtmlSafe);\n                writer.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonElement"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:163","type":"CtFieldReadImpl","sourcecode":"requireExpose"},"failures":[],"tindex":"d8ef11fd-3e54-11e6-ba92-bdefe200c7de","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"requireExpose":"serialize"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.IllegalAccessException","condition":{"position":"com.google.gson.TreeTypeAdapter:55","type":"CtInvocationImpl","sourcecode":"value.isJsonNull()"},"failures":[],"tindex":"d8ef11fe-3e54-11e6-ba92-49e81aa45eff","method":{"position":"com.google.gson.FieldAttributes:145","type":"CtMethodImpl","sourcecode":"java.lang.Object get(java.lang.Object instance) throws java.lang.IllegalAccessException {\n    if (instance.isJsonNull()) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.IllegalAccessException();\n    } else {\n        {\n            return java.lang.reflect.Field.get(instance);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"instance"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:233","type":"CtBinaryOperatorImpl","sourcecode":"annotation != null"},"failures":[],"tindex":"d8ef11ff-3e54-11e6-ba92-bd342426844f","method":{"position":"com.google.gson.internal.Excluder:228","type":"CtMethodImpl","sourcecode":"private boolean isValidVersion(com.google.gson.annotations.Since since, com.google.gson.annotations.Until until) {\n    if (since != null) {\n        {\n            return (isValidSince(since)) && (isValidUntil(until));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"annotation":"since"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:545","type":"CtBinaryOperatorImpl","sourcecode":"c == '\\u2028'"},"failures":[],"tindex":"d8ef1200-3e54-11e6-ba92-3199aadfdf6b","method":{"position":"com.google.gson.stream.JsonReader:755","type":"CtMethodImpl","sourcecode":"private boolean isLiteral(char c) throws java.io.IOException {\n    if (c == '\\u2028') {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467243874423/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            switch (c) {\n                case '/' :\n                case '\\\\' :\n                case ';' :\n                case '#' :\n                case '=' :\n                    checkLenient();\n                case '{' :\n                case '}' :\n                case '[' :\n                case ']' :\n                case ':' :\n                case ',' :\n                case ' ' :\n                case '\\t' :\n                case '\\f' :\n                case '\\r' :\n                case '\\n' :\n                    return false;\n                default :\n                    return true;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"c"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":39,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}
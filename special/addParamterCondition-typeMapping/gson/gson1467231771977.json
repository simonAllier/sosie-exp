{"failureDictionary":{"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode":33,"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization":389,"com.google.gson.functional.StringTest.testStringValueDeserialization":556,"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject":653,"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer":180,"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization":505,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization":636,"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported":478,"com.google.gson.stream.JsonWriterTest.testRepeatedName":650,"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization":65,"com.google.gson.functional.ObjectTest.testInnerClassDeserialization":219,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree":142,"com.google.gson.MixedStreamTest.testWriteLenient":457,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored":190,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern":364,"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses":455,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances":50,"com.google.gson.functional.CollectionTest.testWildcardCollectionField":236,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization":188,"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization":240,"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization":510,"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization":380,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization":413,"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects":134,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization":485,"com.google.gson.JsonObjectTest.testAddingNullPropertyValue":251,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization":108,"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull":166,"com.google.gson.functional.ObjectTest.testSingletonLists":186,"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization":162,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization":360,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization":390,"com.google.gson.functional.PrimitiveTest.testNumberDeserialization":473,"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue":625,"com.google.gson.stream.JsonWriterTest.testStrings":659,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator":529,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects":125,"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed":616,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization":548,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization":201,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter":282,"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans":512,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization":42,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive":668,"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization":564,"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy":100,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays":432,"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization":506,"com.google.gson.functional.MapTest.testComplexKeysDeserialization":175,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException":284,"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization":467,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming":442,"com.google.gson.functional.MapTest.testMapOfMapDeserialization":268,"com.google.gson.functional.EnumTest.testEnumCaseMapping":379,"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration":288,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization":388,"com.google.gson.functional.JsonTreeTest.testToJsonTree":141,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong":466,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives":435,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization":637,"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization":99,"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject":252,"com.google.gson.stream.JsonWriterTest.testNulls":648,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization":115,"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization":345,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField":665,"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization":572,"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails":474,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization":540,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization":415,"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys":277,"com.google.gson.functional.CollectionTest.testNullsInListSerialization":609,"com.google.gson.functional.ObjectTest.testNullDeserialization":643,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation":221,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization":562,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization":198,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization":321,"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName":631,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails":479,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization":425,"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse":278,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming":440,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization":58,"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization":208,"com.google.gson.JsonObjectTest.testPropertyWithQuotes":630,"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives":381,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization":262,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization":372,"com.google.gson.functional.EscapingTest.testEscapingObjectFields":151,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization":517,"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization":516,"com.google.gson.JsonParserTest.testParseString":272,"com.google.gson.stream.JsonWriterTest.testValueWithoutName":654,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization":547,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization":313,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject":666,"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault":307,"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization":521,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization":635,"com.google.gson.functional.ObjectTest.testNullFieldsSerialization":210,"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays":404,"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone":447,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization":359,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization":493,"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree":143,"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization":503,"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization":588,"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree":450,"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName":82,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant":539,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter":157,"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities":671,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues":60,"com.google.gson.functional.MapTest.testSerializeMapOfMaps":597,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization":314,"com.google.gson.functional.JsonParserTest.testParseInvalidJson":567,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble":504,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization":207,"com.google.gson.functional.ArrayTest.testEmptyArraySerialization":400,"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded":40,"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization":194,"com.google.gson.JsonParserTest.testReadWriteTwoObjects":245,"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues":3,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization":72,"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue":269,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault":299,"com.google.gson.metrics.PerformanceTest.testDummy":626,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization":163,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod":90,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization":106,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType":460,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers":259,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings":550,"com.google.gson.functional.MapTest.testNumberKeyDeserialization":599,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization":363,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject":604,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField":12,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage":355,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization":57,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields":224,"com.google.gson.functional.CollectionTest.testSetDeserialization":239,"com.google.gson.functional.RawSerializationTest.testParameterizedObject":135,"com.google.gson.functional.ObjectTest.testInnerClassSerialization":197,"com.google.gson.functional.EnumTest.testEnumSet":374,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization":620,"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization":496,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization":107,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType":526,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization":537,"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys":585,"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization":202,"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass":5,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization":105,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive":507,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType":14,"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds":513,"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization":126,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming":437,"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization":317,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails":476,"com.google.gson.functional.MapTest.testHashMapDeserialization":584,"com.google.gson.functional.CollectionTest.testLinkedListDeserialization":607,"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization":544,"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion":291,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization":462,"com.google.gson.MixedStreamTest.testReadNulls":629,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization":32,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization":73,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale":446,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization":154,"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders":553,"com.google.gson.functional.MapTest.testSortedMap":593,"com.google.gson.functional.MapTest.testMapSerialization":591,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization":34,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField":226,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization":501,"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization":574,"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces":234,"com.google.gson.functional.MapTest.testSerializeMaps":419,"com.google.gson.functional.MapTest.testComplexKeysSerialization":179,"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization":619,"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader":598,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization":409,"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization":128,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault":223,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls":172,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation":85,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter":638,"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization":555,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects":243,"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties":253,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization":67,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization":602,"com.google.gson.functional.MapTest.testStringKeyDeserialization":270,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization":575,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass":331,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization":325,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization":482,"com.google.gson.functional.MapTest.testMapSerializationWithNullKey":600,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter":384,"com.google.gson.functional.PrettyPrintingTest.testMap":433,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger":477,"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization":428,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization":36,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization":343,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls":551,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter":281,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization":576,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap":667,"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization":394,"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization":557,"com.google.gson.JsonObjectTest.testAddingBooleanProperties":254,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization":352,"com.google.gson.functional.MapTest.testMapSerializationEmpty":596,"com.google.gson.functional.CollectionTest.testQueueSerialization":608,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper":497,"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue":655,"com.google.gson.functional.MapTest.testMapOfMapSerialization":421,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault":305,"com.google.gson.JavaSerializationTest.testMapIsSerializable":452,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry":541,"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization":611,"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause":23,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization":310,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives":335,"com.google.gson.functional.FieldNamingTest.testIdentity":235,"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization":391,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization":260,"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization":15,"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization":211,"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization":71,"com.google.gson.functional.JsonTreeTest.testJsonTreeNull":140,"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization":185,"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull":464,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization":468,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes":285,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization":294,"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization":392,"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization":182,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization":308,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization":546,"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers":247,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization":538,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause":22,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization":353,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization":371,"com.google.gson.functional.MapTest.testMapDeserializationEmpty":581,"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault":324,"com.google.gson.functional.MapTest.testMapSubclassSerialization":418,"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization":114,"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables":130,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization":621,"com.google.gson.MixedStreamTest.testWriteMixedStreamed":7,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked":136,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization":293,"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization":491,"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree":144,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive":525,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage":534,"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization":124,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization":104,"com.google.gson.functional.EnumTest.testEnumSubclass":377,"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization":311,"com.google.gson.functional.ObjectTest.testNullArraysDeserialization":200,"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter":283,"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization":295,"com.google.gson.functional.CircularReferenceTest.testCircularSerialization":54,"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization":509,"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues":62,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation":80,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper":469,"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization":184,"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported":494,"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization":183,"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization":88,"com.google.gson.GsonBuilderTest.testTransientFieldExclusion":246,"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization":571,"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode":280,"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported":498,"com.google.gson.functional.ObjectTest.testTruncatedDeserialization":601,"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization":70,"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization":306,"com.google.gson.stream.JsonWriterTest.testObjectsInArrays":651,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry":367,"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization":187,"com.google.gson.functional.MapTest.testMapSubclassDeserialization":583,"com.google.gson.MixedStreamTest.testWriteNulls":628,"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization":406,"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps":565,"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization":402,"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization":102,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter":222,"com.google.gson.CommentsTest.testParseComments":622,"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName":249,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization":169,"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization":189,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization":332,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields":27,"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization":148,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal":508,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements":603,"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization":393,"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey":422,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed":634,"com.google.gson.MixedStreamTest.testReadInvalidState":456,"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject":132,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization":113,"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization":323,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization":369,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField":227,"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale":448,"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization":298,"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash":0,"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization":577,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields":24,"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault":302,"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause":21,"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization":318,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter":357,"com.google.gson.functional.MapTest.testMapDeserialization":266,"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization":570,"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization":354,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays":436,"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType":582,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls":165,"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString":670,"com.google.gson.functional.InheritanceTest.testSubClassSerialization":97,"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization":587,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers":168,"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls":414,"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation":86,"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap":258,"com.google.gson.functional.JsonTreeTest.testJsonTreeToString":139,"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization":554,"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization":117,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization":212,"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization":424,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization":75,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked":386,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType":89,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization":346,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization":112,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization":84,"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization":181,"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField":242,"com.google.gson.functional.MapTest.testMapSerializationWithNullValue":592,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization":623,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter":370,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal":465,"com.google.gson.functional.PrimitiveTest.testShortSerialization":322,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization":528,"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls":416,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization":511,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical":444,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization":492,"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization":315,"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization":119,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal":475,"com.google.gson.functional.FieldNamingTest.testUpperCamelCase":231,"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter":376,"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues":279,"com.google.gson.functional.CollectionTest.testFieldIsArrayList":237,"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables":129,"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides":276,"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues":264,"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization":488,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization":326,"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter":617,"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing":145,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization":173,"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization":545,"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState":11,"com.google.gson.internal.bind.JsonTreeWriterTest.testObject":673,"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization":329,"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails":520,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter":662,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization":69,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers":61,"com.google.gson.functional.InheritanceTest.testSubClassDeserialization":96,"com.google.gson.functional.ObjectTest.testDateAsMapObjectField":213,"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization":41,"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant":339,"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue":674,"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField":59,"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId":159,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses":63,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive":495,"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization":217,"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization":193,"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization":378,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization":77,"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization":445,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization":118,"com.google.gson.functional.CollectionTest.testRawCollectionSerialization":238,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked":382,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives":527,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers":164,"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization":170,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization":358,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt":481,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect":156,"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization":349,"com.google.gson.stream.JsonWriterTest.testNullStringValue":646,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls":171,"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization":543,"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization":93,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization":605,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper":470,"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral":515,"com.google.gson.functional.PrimitiveTest.testNumberSerialization":309,"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization":327,"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField":30,"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers":167,"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType":375,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization":38,"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization":228,"com.google.gson.functional.MapTest.testGeneralMapField":178,"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization":191,"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization":399,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive":523,"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization":55,"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization":147,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter":383,"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization":365,"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues":594,"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization":297,"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization":340,"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray":411,"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization":316,"com.google.gson.MixedStreamTest.testReadMixedStreamed":10,"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue":274,"com.google.gson.JsonObjectTest.testDeepCopy":255,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization":303,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization":536,"com.google.gson.functional.MapTest.testBooleanKeyDeserialization":589,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization":155,"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes":286,"com.google.gson.functional.CollectionTest.testLinkedListSerialization":613,"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization":161,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive":499,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical":443,"com.google.gson.JavaSerializationTest.testNumberIsSerializable":451,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject":13,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization":121,"com.google.gson.functional.MapTest.testDeerializeMapOfMaps":267,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization":337,"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey":263,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization":328,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer":333,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked":153,"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization":45,"com.google.gson.stream.JsonWriterTest.testArraysInObjects":649,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive":489,"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode":4,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization":356,"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays":566,"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized":16,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization":533,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization":610,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization":580,"com.google.gson.functional.ObjectTest.testNestedDeserialization":218,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType":530,"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst":338,"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization":426,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization":35,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType":87,"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming":441,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber":522,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields":26,"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization":66,"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization":558,"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys":590,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization":103,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization":320,"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization":76,"com.google.gson.JavaSerializationTest.testListIsSerializable":453,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":53,"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree":146,"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization":615,"com.google.gson.functional.ObjectTest.testNullSerialization":641,"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy":79,"com.google.gson.stream.JsonWriterTest.testDoubles":656,"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization":531,"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey":265,"com.google.gson.functional.MapTest.testMapSerializationWithNullValues":177,"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault":296,"com.google.gson.functional.MapTest.testInterfaceTypeMap":176,"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization":573,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter":385,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod":92,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper":471,"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization":127,"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe":292,"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization":83,"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails":387,"com.google.gson.MixedStreamTest.testReadClosed":627,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization":341,"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming":439,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger":483,"com.google.gson.MixedStreamTest.testWriteClosed":9,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization":37,"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization":430,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization":95,"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization":192,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization":549,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization":109,"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization":91,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields":29,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields":25,"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization":215,"com.google.gson.stream.JsonWriterTest.testLongs":647,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization":123,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod":98,"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization":195,"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization":429,"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization":46,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper":502,"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization":48,"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation":81,"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization":431,"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter":361,"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization":257,"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause":19,"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization":524,"com.google.gson.stream.JsonWriterTest.testNumbers":658,"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization":301,"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType":138,"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization":535,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault":225,"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization":397,"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides":1,"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields":28,"com.google.gson.functional.CollectionTest.testQueueDeserialization":618,"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization":304,"com.google.gson.functional.PrimitiveTest.testByteDeserialization":500,"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization":561,"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization":290,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization":47,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder":368,"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized":174,"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization":209,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization":351,"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization":152,"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization":216,"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization":427,"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState":6,"com.google.gson.functional.MapTest.testRawMapSerialization":423,"com.google.gson.JsonParserTest.testParseReader":271,"com.google.gson.functional.CollectionTest.testNullsInListDeserialization":614,"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization":542,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize":663,"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy":74,"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization":204,"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull":230,"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization":417,"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization":273,"com.google.gson.functional.PrimitiveTest.testByteSerialization":319,"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings":373,"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization":401,"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization":624,"com.google.gson.ObjectTypeAdapterTest.testSerialize":248,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized":632,"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization":150,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper":480,"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger":669,"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields":51,"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization":407,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes":232,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization":110,"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException":454,"com.google.gson.functional.StringTest.testAssignmentCharDeserialization":559,"com.google.gson.functional.MapTest.testMapWithQuotes":420,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization":344,"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization":486,"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization":560,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization":330,"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize":578,"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate":336,"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed":137,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber":518,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization":342,"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject":133,"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization":579,"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization":101,"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization":214,"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList":244,"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization":312,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder":348,"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization":642,"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization":196,"com.google.gson.functional.ArrayTest.testNullsInArraySerialization":408,"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization":122,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection":449,"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization":44,"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances":52,"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization":350,"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger":514,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls":639,"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed":612,"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization":569,"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern":366,"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization":398,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer":532,"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation":78,"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization":17,"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse":2,"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization":463,"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter":131,"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader":552,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer":261,"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat":472,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers":334,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray":661,"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization":203,"com.google.gson.functional.ObjectTest.testNestedSerialization":205,"com.google.gson.JsonObjectTest.testAddingStringProperties":256,"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface":31,"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization":300,"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters":410,"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization":563,"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings":412,"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls":595,"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject":229,"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId":158,"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization":287,"com.google.gson.MixedStreamTest.testWriteHtmlSafe":458,"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped":660,"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields":199,"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace":461,"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization":519,"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub":94,"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization":160,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization":120,"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration":289,"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger":484,"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce":644,"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization":116,"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization":206,"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization":43,"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray":664,"com.google.gson.functional.StringTest.testAssignmentCharSerialization":395,"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization":405,"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization":56,"com.google.gson.functional.CollectionTest.testSetSerialization":241,"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers":64,"com.google.gson.functional.StringTest.testStringValueSerialization":396,"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays":434,"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace":49,"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields":20,"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization":68,"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization":606,"com.google.gson.MixedStreamTest.testWriteInvalidState":8,"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization":568,"com.google.gson.functional.ObjectTest.testJsonObjectSerialization":640,"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization":487,"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization":149,"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero":490,"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion":39,"com.google.gson.stream.JsonWriterTest.testBooleans":645,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization":347,"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType":657,"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores":233,"com.google.gson.ObjectTypeAdapterTest.testDeserialize":275,"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter":220,"com.google.gson.JsonObjectTest.testAddingCharacterProperties":250,"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails":18,"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter":438,"com.google.gson.internal.bind.JsonTreeWriterTest.testArray":672,"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization":111,"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization":362,"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues":633,"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys":586,"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray":652,"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization":403,"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType":459},"transformations":[{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.JsonElement:119","type":"CtInvocationImpl","sourcecode":"isJsonPrimitive()"},"failures":[],"tindex":"413d525d-3e37-11e6-955d-331fea4379df","method":{"position":"com.google.gson.Gson:591","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic void toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc, com.google.gson.stream.JsonWriter writer) throws com.google.gson.JsonIOException {\n    com.google.gson.TypeAdapter<?> com.google.gson.TypeAdapter<?> = getAdapter(com.google.gson.reflect.TypeToken.get(typeOfSrc));\n    boolean boolean = writer.isLenient();\n    writer.setLenient(true);\n    boolean boolean = writer.isHtmlSafe();\n    writer.setHtmlSafe(boolean);\n    boolean boolean = writer.getSerializeNulls();\n    writer.setSerializeNulls(boolean);\n    try {\n        ((com.google.gson.TypeAdapter<java.lang.Object>)(adapter)).write(writer, src);\n    } catch (java.io.IOException e) {\n        throw new com.google.gson.JsonIOException(e);\n    } finally {\n        writer.setLenient(oldLenient);\n        writer.setHtmlSafe(oldHtmlSafe);\n        writer.setSerializeNulls(oldSerializeNulls);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1413","type":"CtVariableReadImpl","sourcecode":"throwOnEof"},"failures":[0,1,2,3,4],"tindex":"413dc78e-3e37-11e6-955d-4937d877bd48","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:131","type":"CtMethodImpl","sourcecode":"com.google.gson.internal.LinkedHashTreeMap.Node<K, V> find(K key, boolean create) {\n    if (create) {\n        {\n            java.util.Comparator<? super K> java.util.Comparator<? super K> = com.google.gson.internal.LinkedHashTreeMap.this.java.util.Comparator<? super K>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[] = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[];\n            int int = com.google.gson.internal.LinkedHashTreeMap.secondaryHash(key.hashCode());\n            int int = hash & ((table.int) - 1);\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = table[index];\n            int int = 0;\n            if (nearest != null) {\n                @java.lang.SuppressWarnings(value = \"unchecked\")\n                java.lang.Comparable<java.lang.Object> java.lang.Comparable<java.lang.Object> = comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>) ? ((java.lang.Comparable<java.lang.Object>)(key)) : null;\n                while (true) {\n                    comparison = comparableKey != null ? comparableKey.compareTo(nearest.K) : comparator.compare(key, nearest.K);\n                    if (comparison == 0) {\n                        return nearest;\n                    } \n                    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = comparison < 0 ? nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> : nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n                    if (child == null) {\n                        break;\n                    } \n                    nearest = child;\n                }\n            } \n            if (!create) {\n                return null;\n            } \n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = com.google.gson.internal.LinkedHashTreeMap.this.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            if (nearest == null) {\n                if ((comparator == (com.google.gson.internal.LinkedHashTreeMap.com.google.gson.internal.LinkedHashTreeMap.java.util.Comparator<java.lang.Comparable>)) && (!(key instanceof java.lang.Comparable))) {\n                    throw new java.lang.ClassCastException(((key.getClass().getName()) + \" is not Comparable\"));\n                } \n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                table[index] = created;\n            } else {\n                created = new com.google.gson.internal.LinkedHashTreeMap.Node<K, V>(nearest , key , hash , header , header.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>);\n                if (comparison < 0) {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                } else {\n                    nearest.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = created;\n                }\n                rebalance(nearest, true);\n            }\n            if (((int)++) > (int)) {\n                doubleCapacity();\n            } \n            (int)++;\n            return created;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"throwOnEof":"create"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.Excluder:174","type":"CtInvocationImpl","sourcecode":"isAnonymousOrLocal(field.getType())"},"failures":[],"tindex":"413e15af-3e37-11e6-955d-4199619ebd06","method":{"position":"com.google.gson.JsonPrimitive:273","type":"CtMethodImpl","sourcecode":"private static boolean isPrimitiveOrString(java.lang.Object target) {\n    if (target instanceof java.lang.String) {\n        return true;\n    } \n    java.lang.Class<?> java.lang.Class<?> = target.getClass();\n    for (java.lang.Class<?> java.lang.Class<?> : com.google.gson.JsonPrimitive.com.google.gson.JsonPrimitive.java.lang.Class<?>[]) {\n        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n            return true;\n        } \n    }\n    return false;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"field":"target","this":"target"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248],"tindex":"413e3cc0-3e37-11e6-955d-37da7721c830","method":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:62","type":"CtMethodImpl","sourcecode":"static boolean excludeField(java.lang.reflect.Field f, boolean serialize, com.google.gson.internal.Excluder excluder) {\n    if (serialize) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (!(excluder.excludeClass(f.getType(), serialize))) && (!(excluder.excludeField(f, serialize)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"com.google.gson.JsonIOException","condition":{"position":"com.google.gson.internal.$Gson$Types:122","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"413e3cc1-3e37-11e6-955d-3593e8598667","method":{"position":"com.google.gson.Gson:773","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.io.Reader json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonIOException, com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonIOException();\n    } else {\n        {\n            com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.stream.JsonReader(json);\n            T T = ((T)(fromJson(jsonReader, typeOfT)));\n            com.google.gson.Gson.assertFullConsumption(object, jsonReader);\n            return object;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:255","type":"CtBinaryOperatorImpl","sourcecode":"(left != null) && (right != null)"},"failures":[0],"tindex":"413e63d2-3e37-11e6-955d-c997b7e8581e","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:311","type":"CtMethodImpl","sourcecode":"private void replaceInParent(com.google.gson.internal.LinkedHashTreeMap.Node<K, V> node, com.google.gson.internal.LinkedHashTreeMap.Node<K, V> replacement) {\n    if ((replacement != null) && (replacement != null)) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>;\n            node.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = null;\n            if (replacement != null) {\n                replacement.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = parent;\n            } \n            if (parent != null) {\n                if ((parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node) {\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                } else {\n                    assert (parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V>) == node;\n                    parent.com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = replacement;\n                }\n            } else {\n                int int = (node.int) & ((com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[].int) - 1);\n                com.google.gson.internal.LinkedHashTreeMap.Node<K, V>[][index] = replacement;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"left":"replacement","right":"replacement"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1079","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[249,250,251,252,253,254,255,256,257,28,29,33,258,50,51,52,53,259,260,87,88,89,93,94,99,100,261,262,130,131,137,140,145,157,263,264,265,266,267,268,269,270,227,228,229,271,272,273,274,275,276,277,278,279,280],"tindex":"413e8ae3-3e37-11e6-955d-374af3e77441","method":{"position":"com.google.gson.internal.LinkedTreeMap:184","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\ncom.google.gson.internal.LinkedTreeMap.Node<K, V> findByObject(java.lang.Object key) {\n    if (key == null) {\n        {\n            try {\n                return key != null ? find(((K)(key)), false) : null;\n            } catch (java.lang.ClassCastException e) {\n                return null;\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:386","type":"CtBinaryOperatorImpl","sourcecode":"name == null"},"failures":[],"tindex":"413eb1f4-3e37-11e6-955d-e9b87e4ecb09","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if ((property.length()) == 0) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"name":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"413eb1f5-3e37-11e6-955d-e368f3639baf","method":{"position":"com.google.gson.internal.bind.TypeAdapters:460","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.net.URI read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        java.lang.String java.lang.String = in.nextString();\n        return \"null\".equals(nextString) ? null : new java.net.URI(nextString);\n    } catch (java.net.URISyntaxException e) {\n        throw new com.google.gson.JsonIOException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"413ed906-3e37-11e6-955d-47e239ce56c0","method":{"position":"com.google.gson.stream.JsonWriter:212","type":"CtMethodImpl","sourcecode":"public final void setIndent(java.lang.String indent) {\n    if ((indent != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            if ((indent.length()) == 0) {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = null;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \":\";\n            } else {\n                com.google.gson.stream.JsonWriter.this.java.lang.String = indent;\n                com.google.gson.stream.JsonWriter.this.java.lang.String = \": \";\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"indent"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"413ed907-3e37-11e6-955d-adf3d54ebe5b","method":{"position":"com.google.gson.JsonObject:67","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement remove(java.lang.String property) {\n    if ((property.length()) == 0) {\n        {\n            if (property == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.remove(property);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"413f0018-3e37-11e6-955d-09f9955612a4","method":{"position":"com.google.gson.internal.Excluder:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (skipSerialize) {\n        out.nullValue();\n        return ;\n    } \n    delegate().write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"413f0019-3e37-11e6-955d-31eeb4b30e9d","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"413f272a-3e37-11e6-955d-59889b54d978","method":{"position":"com.google.gson.internal.bind.CollectionTypeAdapterFactory:72","type":"CtMethodImpl","sourcecode":"public java.util.Collection<E> read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    java.util.Collection<E> java.util.Collection<E> = com.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>.construct();\n    in.beginArray();\n    while (in.hasNext()) {\n        E E = com.google.gson.TypeAdapter<E>.read(in);\n        collection.add(instance);\n    }\n    in.endArray();\n    return collection;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"413f272b-3e37-11e6-955d-d30f9c177c57","method":{"position":"com.google.gson.TypeAdapter:187","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        com.google.gson.TypeAdapter.this.write(out, value);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:348","type":"CtBinaryOperatorImpl","sourcecode":"toResolve instanceof java.lang.reflect.ParameterizedType"},"failures":[281,282,283,5,284,285,286,287,288,289,15,16,17,19,20,21,22,23,24,25,26,27,30,31,32,290,34,36,39,40,291,292,293,41,44,45,48,49,54,294,55,57,58,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,62,331,63,64,332,333,334,335,336,337,65,67,69,71,72,73,74,75,76,77,78,79,82,84,90,91,92,97,98,100,338,106,339,340,341,342,343,344,345,346,347,119,348,349,350,351,352,353,354,355,356,121,357,358,359,360,361,362,363,364,365,122,366,367,368,369,123,370,371,372,373,125,374,375,376,377,127,378,379,380,129,130,132,381,133,134,135,382,383,384,385,136,386,387,137,139,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,147,149,408,409,150,410,411,151,152,412,153,157,413,162,164,414,415,167,168,170,416,171,417,172,418,419,174,420,421,422,176,177,178,423,179,180,181,184,185,186,189,192,195,197,199,424,425,202,204,205,426,207,210,212,213,215,220,221,222,223,225,227,229,231,232,233,234,235,236,427,237,428,429,430,238,431,240,241,432,433,242,243,434,435,436,437,438,439,440,441,442,443,444,445,245,246,247],"tindex":"413f4e3c-3e37-11e6-955d-6d43cac01cce","method":{"position":"com.google.gson.Gson:532","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src, java.lang.reflect.Type typeOfSrc) {\n    if (typeOfSrc instanceof java.lang.reflect.ParameterizedType) {\n        {\n            java.io.StringWriter java.io.StringWriter = new java.io.StringWriter();\n            toJson(src, typeOfSrc, writer);\n            return writer.toString();\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"toResolve":"typeOfSrc"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"413f4e3d-3e37-11e6-955d-69bcfb8d75d6","method":{"position":"com.google.gson.internal.bind.TypeAdapters:156","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Boolean value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.DateTypeAdapter:86","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"413f754e-3e37-11e6-955d-377df6873b71","method":{"position":"com.google.gson.internal.LinkedTreeMap:41","type":"CtMethodImpl","sourcecode":"public int compare(java.lang.Comparable a, java.lang.Comparable b) {\n    if (a == null) {\n        {\n            return a.compareTo(b);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"a"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[87,88,89,93,94,99,140,180],"tindex":"413f754f-3e37-11e6-955d-f3882d5daa02","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"413f7550-3e37-11e6-955d-2193c00bbcc7","method":{"position":"com.google.gson.internal.bind.TypeAdapters:397","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.math.BigInteger value) throws java.io.IOException {\n    out.value(value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonElement:136","type":"CtInvocationImpl","sourcecode":"isJsonNull()"},"failures":[],"tindex":"413f7551-3e37-11e6-955d-6942986f92c6","method":{"position":"com.google.gson.TreeTypeAdapter:92","type":"CtMethodImpl","sourcecode":"public static com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken<?> exactType, java.lang.Object typeAdapter) {\n    boolean boolean = (exactType.getType()) == (exactType.getRawType());\n    return new com.google.gson.TreeTypeAdapter.SingleTypeFactory(typeAdapter , exactType , matchRawType , null);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"typeAdapter"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[446,447,448,340,449,345,366],"tindex":"413f7552-3e37-11e6-955d-830f5a35f5e3","method":{"position":"com.google.gson.DefaultDateTypeAdapter:94","type":"CtMethodImpl","sourcecode":"private java.util.Date deserializeToDate(com.google.gson.JsonElement json) {\n    if (json == null) {\n        {\n            synchronized(java.text.DateFormat) {\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException ignored) {\n                }\n                try {\n                    return java.text.DateFormat.parse(json.getAsString());\n                } catch (java.text.ParseException e) {\n                    throw new com.google.gson.JsonSyntaxException(json.getAsString() , e);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"json"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"413f7553-3e37-11e6-955d-250d915abcc6","method":{"position":"com.google.gson.TreeTypeAdapter:61","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, T value) throws java.io.IOException {\n    if ((com.google.gson.JsonSerializer<T>) == null) {\n        delegate().write(out, value);\n        return ;\n    } \n    if (value == null) {\n        out.nullValue();\n        return ;\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.JsonSerializer<T>.serialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonSerializationContext);\n    com.google.gson.internal.Streams.write(tree, out);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"413f9c64-3e37-11e6-955d-63b0d42fb28d","method":{"position":"com.google.gson.internal.bind.TypeAdapters:63","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Class value) throws java.io.IOException {\n    if (value == null) {\n        out.nullValue();\n    } else {\n        throw new java.lang.UnsupportedOperationException(((\"Attempted to serialize java.lang.Class: \" + (value.getName())) + \". Forgot to register a type adapter?\"));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1091","type":"CtBinaryOperatorImpl","sourcecode":"builder == null"},"failures":[],"tindex":"413f9c65-3e37-11e6-955d-a1bb92510564","method":{"position":"com.google.gson.internal.Streams:72","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"resource\")\npublic static java.io.Writer writerForAppendable(java.lang.Appendable appendable) {\n    if (appendable == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return appendable instanceof java.io.Writer ? ((java.io.Writer)(appendable)) : new com.google.gson.internal.Streams.AppendableWriter(appendable);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"builder":"appendable"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonArray:58","type":"CtBinaryOperatorImpl","sourcecode":"element == null"},"failures":[450,137],"tindex":"413f9c66-3e37-11e6-955d-b5b019e00185","method":{"position":"com.google.gson.TypeAdapter:278","type":"CtMethodImpl","sourcecode":"public final T fromJsonTree(com.google.gson.JsonElement jsonTree) {\n    if (jsonTree == null) {\n        {\n            try {\n                com.google.gson.stream.JsonReader com.google.gson.stream.JsonReader = new com.google.gson.internal.bind.JsonTreeReader(jsonTree);\n                return read(jsonReader);\n            } catch (java.io.IOException e) {\n                throw new com.google.gson.JsonIOException(e);\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"element":"jsonTree"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"413f9c67-3e37-11e6-955d-8b6f2ba56029","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:120","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = removeInternalByKey(key);\n    return node != null ? node.V : null;\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"413f9c68-3e37-11e6-955d-716537405991","method":{"position":"com.google.gson.Gson:695","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(java.lang.String json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if ((json != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:246","type":"CtVariableReadImpl","sourcecode":"unlink"},"failures":[281,282,283,451,452,453,454,5,284,285,286,287,455,6,456,7,8,457,458,9,10,11,288,289,459,12,13,14,460,461,15,16,257,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,290,33,34,462,35,36,37,38,39,40,291,293,41,42,43,44,45,46,47,48,463,49,50,51,464,52,53,54,294,55,56,57,58,465,466,467,295,468,296,469,470,471,472,473,297,474,475,298,476,477,478,479,480,481,482,299,300,483,484,485,486,487,301,488,302,303,489,490,304,491,492,305,493,306,307,494,495,308,309,496,497,498,310,499,500,501,502,503,504,505,506,311,507,312,508,313,314,509,510,315,511,512,316,513,317,514,59,515,318,319,320,321,322,323,324,516,517,518,325,519,326,520,521,522,327,328,523,329,524,525,330,60,526,259,260,61,62,331,63,527,64,332,333,528,334,529,335,336,530,531,337,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,338,101,102,532,103,104,105,106,107,108,109,110,111,112,113,261,114,115,533,339,340,341,116,117,534,343,535,449,345,346,118,536,537,119,538,348,349,350,351,352,120,353,539,354,355,540,356,541,121,357,358,359,360,542,543,361,544,363,545,364,365,546,122,366,367,368,369,123,547,548,370,372,549,550,373,124,125,551,552,553,126,374,375,376,377,554,555,127,128,378,379,380,129,130,131,132,381,133,134,135,382,383,384,385,136,386,387,137,138,139,140,141,556,388,389,390,391,392,557,558,393,559,394,560,561,562,395,563,564,396,142,143,144,145,146,565,566,567,397,398,568,399,400,401,402,403,569,570,404,405,406,571,572,573,407,574,147,148,149,575,408,576,409,577,150,410,411,151,152,412,153,154,578,155,156,157,158,159,413,160,161,162,163,164,165,166,414,579,415,167,168,169,170,416,171,417,580,172,173,581,582,583,584,263,418,419,264,265,585,586,587,266,174,588,589,267,590,420,421,591,268,175,592,422,593,176,594,177,178,595,423,269,179,596,270,597,598,599,600,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,601,197,198,199,200,424,201,425,202,203,204,205,426,206,207,208,209,602,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,603,226,227,228,229,604,230,231,232,233,234,235,236,427,237,428,605,606,607,608,429,430,609,238,610,611,431,612,239,240,613,614,241,615,616,617,618,432,433,242,243,434,435,436,244,437,438,439,440,441,442,443,444,619,620,445,621,245,622,273,623,624,246,247,248,625],"tindex":"413fc379-3e37-11e6-955d-39f9835468bd","method":{"position":"com.google.gson.internal.Excluder:191","type":"CtMethodImpl","sourcecode":"public boolean excludeClass(java.lang.Class<?> clazz, boolean serialize) {\n    if (serialize) {\n        {\n            if (((double) != (com.google.gson.internal.Excluder.com.google.gson.internal.Excluder.double)) && (!(isValidVersion(clazz.getAnnotation(com.google.gson.annotations.Since.com.google.gson.annotations.Since.java.lang.Class), clazz.getAnnotation(com.google.gson.annotations.Until.com.google.gson.annotations.Until.java.lang.Class))))) {\n                return true;\n            } \n            if ((!(boolean)) && (isInnerClass(clazz))) {\n                return true;\n            } \n            if (isAnonymousOrLocal(clazz)) {\n                return true;\n            } \n            java.util.List<com.google.gson.ExclusionStrategy> java.util.List<com.google.gson.ExclusionStrategy> = serialize ? java.util.List<com.google.gson.ExclusionStrategy> : java.util.List<com.google.gson.ExclusionStrategy>;\n            for (com.google.gson.ExclusionStrategy com.google.gson.ExclusionStrategy : list) {\n                if (exclusionStrategy.shouldSkipClass(clazz)) {\n                    return true;\n                } \n            }\n            return false;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"unlink":"serialize"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:199","type":"CtUnaryOperatorImpl","sourcecode":"!(b instanceof java.lang.reflect.TypeVariable)"},"failures":[],"tindex":"413fea8a-3e37-11e6-955d-016471d54da3","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:223","type":"CtMethodImpl","sourcecode":"private boolean equal(java.lang.Object a, java.lang.Object b) {\n    if (!(b instanceof java.lang.reflect.TypeVariable)) {\n        {\n            return (a == b) || ((a != null) && (a.equals(b)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"b":"b"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"413fea8b-3e37-11e6-955d-57e29fa2b994","method":{"position":"com.google.gson.Gson:310","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return in.nextLong();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[253,145],"tindex":"413fea8c-3e37-11e6-955d-f9a96a3e0fac","method":{"position":"com.google.gson.internal.LinkedTreeMap:110","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V remove(java.lang.Object key) {\n    if (key == null) {\n        {\n            com.google.gson.internal.LinkedTreeMap.Node<K, V> com.google.gson.internal.LinkedTreeMap.Node<K, V> = removeInternalByKey(key);\n            return node != null ? node.V : null;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"key"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:491","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[322],"tindex":"413fea8d-3e37-11e6-955d-7fb9b6c83872","method":{"position":"com.google.gson.internal.bind.TypeAdapters:223","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n    if (value == null) {\n        {\n            out.value(value);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"value"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:872","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"413fea8e-3e37-11e6-955d-4db9e8411dff","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:843","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:414","type":"CtBinaryOperatorImpl","sourcecode":"value == null"},"failures":[],"tindex":"4140119f-3e37-11e6-955d-bd153b93fd9b","method":{"position":"com.google.gson.JsonPrimitive:93","type":"CtMethodImpl","sourcecode":"void setValue(java.lang.Object primitive) {\n    if (primitive == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if (primitive instanceof java.lang.Character) {\n                char char = ((java.lang.Character)(primitive)).charValue();\n                com.google.gson.JsonPrimitive.this.java.lang.Object = java.lang.String.valueOf(c);\n            } else {\n                com.google.gson.internal.$Gson$Preconditions.checkArgument(((primitive instanceof java.lang.Number) || (com.google.gson.JsonPrimitive.isPrimitiveOrString(primitive))));\n                com.google.gson.JsonPrimitive.this.java.lang.Object = primitive;\n            }\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"value":"primitive"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"414011a0-3e37-11e6-955d-a354976c2e63","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:132","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter name(java.lang.String name) throws java.io.IOException {\n    if (name == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if ((java.util.List<com.google.gson.JsonElement>.isEmpty()) || ((java.lang.String) != null)) {\n                throw new java.lang.IllegalStateException();\n            } \n            com.google.gson.JsonElement com.google.gson.JsonElement = peek();\n            if (element instanceof com.google.gson.JsonObject) {\n                java.lang.String = name;\n                return com.google.gson.internal.bind.JsonTreeWriter.this;\n            } \n            throw new java.lang.IllegalStateException();\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"name"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[415],"tindex":"414011a1-3e37-11e6-955d-874affe62581","method":{"position":"com.google.gson.Gson:133","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement serialize(java.lang.Object src) {\n    if (src == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return toJsonTree(src);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"src"},"type":"special","throwBranchCoverage":true,"returnInThen":false,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"414011a2-3e37-11e6-955d-87ced9b85258","method":{"position":"com.google.gson.internal.LinkedTreeMap:609","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean remove(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (removeInternalByKey(key)) != null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:882","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NULL)"},"failures":[],"tindex":"414011a3-3e37-11e6-955d-03ac45e239b1","method":{"position":"com.google.gson.JsonArray:146","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement get(int i) {\n    if (i == i) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.get(i);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"i","com.google.gson.stream.JsonReader.PEEKED_NULL":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:136","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.reflect.TypeVariable"},"failures":[],"tindex":"414038b4-3e37-11e6-955d-eb820088f3a6","method":{"position":"com.google.gson.internal.$Gson$Types:84","type":"CtMethodImpl","sourcecode":"public static java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type bound) {\n    return new com.google.gson.internal.$Gson$Types.WildcardTypeImpl(new java.lang.reflect.Type[]{ java.lang.Object.java.lang.Object.java.lang.Class } , new java.lang.reflect.Type[]{ bound });\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"bound"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"414038b5-3e37-11e6-955d-a34107eaac62","method":{"position":"com.google.gson.internal.bind.TypeAdapters:546","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.util.Calendar read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    in.beginObject();\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    int int = 0;\n    while ((in.peek()) != (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        java.lang.String java.lang.String = in.nextName();\n        int int = in.nextInt();\n        if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            year = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            month = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            dayOfMonth = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            hourOfDay = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            minute = value;\n        } else if (com.google.gson.internal.bind.TypeAdapters.23.java.lang.String.equals(name)) {\n            second = value;\n        } \n    }\n    in.endObject();\n    return new java.util.GregorianCalendar(year , month , dayOfMonth , hourOfDay , minute , second);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"414038b6-3e37-11e6-955d-df5521ba570a","method":{"position":"com.google.gson.internal.bind.TypeAdapters:233","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return in.nextInt();\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:520","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.DANGLING_NAME)"},"failures":[],"tindex":"41405fc7-3e37-11e6-955d-0fbc6bfc5817","method":{"position":"com.google.gson.JsonArray:81","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonElement set(int index, com.google.gson.JsonElement element) {\n    if (index == index) {\n        {\n            return java.util.List<com.google.gson.JsonElement>.set(index, element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"index","com.google.gson.stream.JsonScope.DANGLING_NAME":"index"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:429","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"41405fc8-3e37-11e6-955d-6731a13b9b2c","method":{"position":"com.google.gson.JsonObject:161","type":"CtMethodImpl","sourcecode":"public com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String memberName) {\n    if (memberName != null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return ((com.google.gson.JsonPrimitive)(com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.get(memberName)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonReader:948","type":"CtBinaryOperatorImpl","sourcecode":"p == (com.google.gson.stream.JsonReader.PEEKED_NONE)"},"failures":[],"tindex":"41405fc9-3e37-11e6-955d-1ba25ef48b5e","method":{"position":"com.google.gson.GsonBuilder:423","type":"CtMethodImpl","sourcecode":"public com.google.gson.GsonBuilder setDateFormat(int dateStyle, int timeStyle) {\n    if (timeStyle == dateStyle) {\n        {\n            com.google.gson.GsonBuilder.this.int = dateStyle;\n            com.google.gson.GsonBuilder.this.int = timeStyle;\n            com.google.gson.GsonBuilder.this.java.lang.String = null;\n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"p":"timeStyle","com.google.gson.stream.JsonReader.PEEKED_NONE":"dateStyle"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:127","type":"CtInvocationImpl","sourcecode":"raw.isInterface()"},"failures":[],"tindex":"41405fca-3e37-11e6-955d-7be7f21dd96f","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == null) {\n        {\n            if (subclass.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n                    if (superclass instanceof java.lang.Class) {\n                        throw new java.lang.RuntimeException(\"Missing type parameter.\");\n                    } \n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n                    return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"raw":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:145","type":"CtBinaryOperatorImpl","sourcecode":"previous != null"},"failures":[],"tindex":"41405fcb-3e37-11e6-955d-330324bd3799","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:839","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o != null) {\n        {\n            return containsKey(o);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"previous":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"414086dc-3e37-11e6-955d-85d7e7670b31","method":{"position":"com.google.gson.Gson:847","type":"CtMethodImpl","sourcecode":"public <T>T fromJson(com.google.gson.JsonElement json, java.lang.Class<T> classOfT) throws com.google.gson.JsonSyntaxException {\n    if (json.isString()) {\n        {\n            java.lang.Object java.lang.Object = fromJson(json, ((java.lang.reflect.Type)(classOfT)));\n            return com.google.gson.internal.Primitives.wrap(classOfT).cast(object);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"json"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:467","type":"CtBinaryOperatorImpl","sourcecode":"peekStack == (com.google.gson.stream.JsonScope.EMPTY_ARRAY)"},"failures":[],"tindex":"414086dd-3e37-11e6-955d-3b30aea78d60","method":{"position":"com.google.gson.internal.Streams:93","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(int i) throws java.io.IOException {\n    if (i == i) {\n        {\n            java.lang.Appendable.append(((char)(i)));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"peekStack":"i","com.google.gson.stream.JsonScope.EMPTY_ARRAY":"i"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.LinkedTreeMap:356","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[626,281,282,283,454,5,284,285,286,287,6,456,627,7,628,8,457,629,458,9,10,11,630,631,288,289,459,12,13,14,460,461,15,16,257,17,18,24,25,26,27,28,29,30,31,32,290,33,34,462,35,36,37,38,39,40,291,293,41,42,43,44,45,46,47,48,463,49,632,633,50,51,464,52,53,54,294,55,56,57,58,465,466,467,295,468,296,469,470,471,472,473,297,474,475,298,476,477,478,479,480,481,482,299,300,483,484,485,486,487,301,488,302,303,489,490,304,491,492,305,493,306,307,494,495,308,309,496,497,498,310,499,500,501,502,503,504,505,506,311,507,312,508,313,314,509,510,315,511,512,316,513,317,514,59,515,318,319,320,321,322,323,324,516,517,518,325,519,326,520,521,522,327,328,523,329,524,525,330,60,526,259,260,61,62,331,63,527,64,332,333,528,334,529,335,336,530,531,337,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,338,634,101,102,532,103,104,105,106,107,108,109,110,111,112,113,261,114,115,533,339,340,341,262,116,117,342,534,343,344,535,449,635,345,346,118,536,347,537,119,538,348,349,350,351,352,120,353,539,354,355,540,356,541,121,357,358,359,636,360,542,543,361,544,362,363,545,364,365,546,122,366,367,368,369,123,547,548,370,371,637,372,549,550,373,124,125,638,551,552,553,639,126,374,375,376,377,554,555,127,128,378,379,380,129,130,131,132,381,133,134,135,382,383,384,385,136,386,387,138,139,140,141,556,388,389,390,391,392,557,558,393,559,394,560,561,562,395,563,564,396,142,143,144,145,146,565,566,567,397,398,568,399,400,401,402,403,569,570,404,405,406,571,572,573,407,574,147,148,149,575,408,576,409,577,150,410,411,151,152,412,153,154,578,155,156,157,158,159,413,160,161,162,163,164,165,166,414,579,415,167,168,169,170,416,171,417,580,172,173,581,582,583,584,263,418,419,264,265,585,586,587,266,174,588,589,267,590,420,421,591,268,175,592,422,593,176,594,177,178,595,423,269,179,596,270,597,598,599,600,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,640,196,601,197,198,641,199,642,200,424,201,425,202,203,204,205,426,206,207,208,209,602,643,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,603,226,227,228,229,604,230,231,232,233,234,235,236,427,237,428,605,606,607,608,429,430,609,238,610,611,431,612,239,240,613,614,241,615,616,617,618,432,433,242,243,434,435,436,244,437,438,439,440,441,442,443,444,619,620,445,621,245,622,246,247,644],"tindex":"414086de-3e37-11e6-955d-81c6209ad007","method":{"position":"com.google.gson.Gson:249","type":"CtMethodImpl","sourcecode":"private com.google.gson.TypeAdapter<java.lang.Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n    if (serializeSpecialFloatingPointValues) {\n        {\n            if (serializeSpecialFloatingPointValues) {\n                return com.google.gson.internal.bind.TypeAdapters.com.google.gson.internal.bind.TypeAdapters.com.google.gson.TypeAdapter<java.lang.Number>;\n            } \n            return new com.google.gson.TypeAdapter<java.lang.Number>() {\n                @java.lang.Override\n                public java.lang.Double read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n                    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n                        in.nextNull();\n                        return null;\n                    } \n                    return in.nextDouble();\n                }\n\n                @java.lang.Override\n                public void write(com.google.gson.stream.JsonWriter out, java.lang.Number value) throws java.io.IOException {\n                    if (value == null) {\n                        out.nullValue();\n                        return ;\n                    } \n                    double double = value.doubleValue();\n                    checkValidFloatingPoint(doubleValue);\n                    out.value(value);\n                }\n            };\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"serializeSpecialFloatingPointValues"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1346","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4140adef-3e37-11e6-955d-7dacf6a4ced3","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4140adf0-3e37-11e6-955d-23fd1af5e54f","method":{"position":"com.google.gson.TreeTypeAdapter:50","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic T read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((com.google.gson.JsonDeserializer<T>) == null) {\n        return delegate().read(in);\n    } \n    com.google.gson.JsonElement com.google.gson.JsonElement = com.google.gson.internal.Streams.parse(in);\n    if (value.isJsonNull()) {\n        return null;\n    } \n    return com.google.gson.JsonDeserializer<T>.deserialize(value, com.google.gson.reflect.TypeToken<T>.getType(), com.google.gson.Gson.com.google.gson.JsonDeserializationContext);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:398","type":"CtBinaryOperatorImpl","sourcecode":"declaredByRaw == null"},"failures":[],"tindex":"4140adf1-3e37-11e6-955d-2db2eefa9334","method":{"position":"com.google.gson.reflect.TypeToken:81","type":"CtMethodImpl","sourcecode":"static java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class<?> subclass) {\n    if (subclass == null) {\n        {\n            if (subclass.isInterface()) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.lang.RuntimeException();\n            } else {\n                {\n                    java.lang.reflect.Type java.lang.reflect.Type = subclass.getGenericSuperclass();\n                    if (superclass instanceof java.lang.Class) {\n                        throw new java.lang.RuntimeException(\"Missing type parameter.\");\n                    } \n                    java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = ((java.lang.reflect.ParameterizedType)(superclass));\n                    return com.google.gson.internal.$Gson$Types.canonicalize(parameterized.getActualTypeArguments()[0]);\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"declaredByRaw":"subclass"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:198","type":"CtBinaryOperatorImpl","sourcecode":"out == null"},"failures":[],"tindex":"4140adf2-3e37-11e6-955d-bd7bbb25b03d","method":{"position":"com.google.gson.Gson:644","type":"CtMethodImpl","sourcecode":"private com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer writer) throws java.io.IOException {\n    if (writer == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            if (boolean) {\n                writer.write(com.google.gson.Gson.com.google.gson.Gson.java.lang.String);\n            } \n            com.google.gson.stream.JsonWriter com.google.gson.stream.JsonWriter = new com.google.gson.stream.JsonWriter(writer);\n            if (boolean) {\n                jsonWriter.setIndent(\"  \");\n            } \n            jsonWriter.setSerializeNulls(boolean);\n            return jsonWriter;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"out":"writer"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.$Gson$Types:118","type":"CtBinaryOperatorImpl","sourcecode":"type instanceof java.lang.Class<?>"},"failures":[],"tindex":"4140d503-3e37-11e6-955d-59c0f08a9949","method":{"position":"com.google.gson.JsonArray:329","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object o) {\n    if (o instanceof java.lang.Class<?>) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o == (com.google.gson.JsonArray.this)) || ((o instanceof com.google.gson.JsonArray) && (((com.google.gson.JsonArray)(o)).java.util.List<com.google.gson.JsonElement>.equals(java.util.List<com.google.gson.JsonElement>)));\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1379","type":"CtUnaryOperatorImpl","sourcecode":"!(skipTo(\"*/\"))"},"failures":[],"tindex":"4140d504-3e37-11e6-955d-3d1b9d1dd261","method":{"position":"com.google.gson.internal.bind.TypeAdapters:367","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.math.BigDecimal read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    try {\n        return new java.math.BigDecimal(in.nextString());\n    } catch (java.lang.NumberFormatException e) {\n        throw new com.google.gson.JsonSyntaxException(e);\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonWriter:400","type":"CtBinaryOperatorImpl","sourcecode":"(deferredName) != null"},"failures":[],"tindex":"4140d505-3e37-11e6-955d-41575703b0d2","method":{"position":"com.google.gson.internal.bind.JsonTreeWriter:144","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic com.google.gson.stream.JsonWriter value(java.lang.String value) throws java.io.IOException {\n    if (value != null) {\n        {\n            if (value == null) {\n                try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n                throw new java.io.IOException();\n            } else {\n                {\n                    if (value == null) {\n                        return nullValue();\n                    } \n                    put(new com.google.gson.JsonPrimitive(value));\n                    return com.google.gson.internal.bind.JsonTreeWriter.this;\n                }\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"deferredName":"value"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":0},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4140d506-3e37-11e6-955d-4768966a1afa","method":{"position":"com.google.gson.internal.bind.TypeAdapters:530","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.sql.Timestamp value) throws java.io.IOException {\n    dateTypeAdapter.write(out, value);\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4140d507-3e37-11e6-955d-1f0be307a59b","method":{"position":"com.google.gson.internal.bind.TypeAdapters:126","type":"CtMethodImpl","sourcecode":"public void write(com.google.gson.stream.JsonWriter out, java.util.BitSet src) throws java.io.IOException {\n    if (src == null) {\n        out.nullValue();\n        return ;\n    } \n    out.beginArray();\n    for (int int = 0 ; i < (src.length()) ; i++) {\n        int int = src.get(i) ? 1 : 0;\n        out.value(value);\n    }\n    out.endArray();\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1085","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4140d508-3e37-11e6-955d-87fa45a54aed","method":{"position":"com.google.gson.internal.bind.TypeAdapters:406","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.StringBuilder read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    if ((in.peek()) == (com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken.com.google.gson.stream.JsonToken)) {\n        in.nextNull();\n        return null;\n    } \n    return new java.lang.StringBuilder(in.nextString());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.ArrayTypeAdapter:85","type":"CtBinaryOperatorImpl","sourcecode":"array == null"},"failures":[5,336,100,338,634,376,425,440,442,443,444],"tindex":"4140fc19-3e37-11e6-955d-57a114df98cb","method":{"position":"com.google.gson.GsonBuilder:493","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = { \"unchecked\" , \"rawtypes\" })\npublic com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class<?> baseType, java.lang.Object typeAdapter) {\n    if (typeAdapter == null) {\n        {\n            com.google.gson.internal.$Gson$Preconditions.checkArgument((((typeAdapter instanceof com.google.gson.JsonSerializer<?>) || (typeAdapter instanceof com.google.gson.JsonDeserializer<?>)) || (typeAdapter instanceof com.google.gson.TypeAdapter<?>)));\n            if ((typeAdapter instanceof com.google.gson.JsonDeserializer) || (typeAdapter instanceof com.google.gson.JsonSerializer)) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(0, com.google.gson.TreeTypeAdapter.newTypeHierarchyFactory(baseType, typeAdapter));\n            } \n            if (typeAdapter instanceof com.google.gson.TypeAdapter<?>) {\n                java.util.List<com.google.gson.TypeAdapterFactory>.add(com.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(baseType, ((com.google.gson.TypeAdapter)(typeAdapter))));\n            } \n            return com.google.gson.GsonBuilder.this;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"array":"typeAdapter"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:213","type":"CtBinaryOperatorImpl","sourcecode":"(indent.length()) == 0"},"failures":[],"tindex":"4140fc1a-3e37-11e6-955d-830b212b903a","method":{"position":"com.google.gson.JsonPrimitive:305","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean equals(java.lang.Object obj) {\n    if ((obj.length()) == 0) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            if ((com.google.gson.JsonPrimitive.this) == obj) {\n                return true;\n            } \n            if ((obj == null) || ((getClass()) != (obj.getClass()))) {\n                return false;\n            } \n            com.google.gson.JsonPrimitive com.google.gson.JsonPrimitive = ((com.google.gson.JsonPrimitive)(obj));\n            if ((java.lang.Object) == null) {\n                return (other.java.lang.Object) == null;\n            } \n            if ((com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))) {\n                return (getAsNumber().longValue()) == (other.getAsNumber().longValue());\n            } \n            if (((java.lang.Object) instanceof java.lang.Number) && ((other.java.lang.Object) instanceof java.lang.Number)) {\n                double double = getAsNumber().doubleValue();\n                double double = other.getAsNumber().doubleValue();\n                return (a == b) || ((java.lang.Double.isNaN(a)) && (java.lang.Double.isNaN(b)));\n            } \n            return java.lang.Object.equals(other.java.lang.Object);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"indent":"obj"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.JsonTreeReader:111","type":"CtInvocationImpl","sourcecode":"primitive.isString()"},"failures":[],"tindex":"4140fc1b-3e37-11e6-955d-d5f91b4904bd","method":{"position":"com.google.gson.JsonArray:57","type":"CtMethodImpl","sourcecode":"public void add(com.google.gson.JsonElement element) {\n    if (element.isString()) {\n        {\n            if (element == null) {\n                element = com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull;\n            } \n            java.util.List<com.google.gson.JsonElement>.add(element);\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"primitive":"element"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1030","type":"CtUnaryOperatorImpl","sourcecode":"!(fillBuffer(1))"},"failures":[],"tindex":"4140fc1c-3e37-11e6-955d-7932f6d7ee08","method":{"position":"com.google.gson.internal.bind.TypeAdapters:304","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic java.lang.Number read(com.google.gson.stream.JsonReader in) throws java.io.IOException {\n    com.google.gson.stream.JsonToken com.google.gson.stream.JsonToken = in.peek();\n    switch (jsonToken) {\n        case NULL :\n            in.nextNull();\n            return null;\n        case NUMBER :\n            return new com.google.gson.internal.LazilyParsedNumber(in.nextString());\n        default :\n            throw new com.google.gson.JsonSyntaxException((\"Expecting number, got: \" + jsonToken));\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"in"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.Gson:720","type":"CtBinaryOperatorImpl","sourcecode":"json == null"},"failures":[],"tindex":"4141232d-3e37-11e6-955d-75a8d6adaf4b","method":{"position":"com.google.gson.JsonObject:141","type":"CtMethodImpl","sourcecode":"public boolean has(java.lang.String memberName) {\n    if (memberName == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return com.google.gson.internal.LinkedTreeMap<java.lang.String, com.google.gson.JsonElement>.containsKey(memberName);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"json":"memberName"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.JsonPrimitive:316","type":"CtBinaryOperatorImpl","sourcecode":"(com.google.gson.JsonPrimitive.isIntegral(com.google.gson.JsonPrimitive.this)) && (com.google.gson.JsonPrimitive.isIntegral(other))"},"failures":[],"tindex":"4141232e-3e37-11e6-955d-19102ce777d8","method":{"position":"com.google.gson.Gson:510","type":"CtMethodImpl","sourcecode":"public java.lang.String toJson(java.lang.Object src) {\n    if (src == null) {\n        return toJson(com.google.gson.JsonNull.com.google.gson.JsonNull.com.google.gson.JsonNull);\n    } \n    return toJson(src, src.getClass());\n}"},"series":0,"name":"addParameterCondition","variableMap":{"other":"src","this":"src"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.bind.JsonTreeWriter:180","type":"CtUnaryOperatorImpl","sourcecode":"!(isLenient())"},"failures":[],"tindex":"4141232f-3e37-11e6-955d-ed480a17be67","method":{"position":"com.google.gson.internal.bind.TypeAdapters:473","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic void write(com.google.gson.stream.JsonWriter out, java.net.URI value) throws java.io.IOException {\n    out.value((value == null ? null : value.toASCIIString()));\n}"},"series":0,"name":"addParameterCondition","variableMap":{"this":"out"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:54","type":"CtBinaryOperatorImpl","sourcecode":"runtimeType != (type)"},"failures":[],"tindex":"41412330-3e37-11e6-955d-c7920b70228c","method":{"position":"com.google.gson.internal.LinkedTreeMap:570","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic boolean contains(java.lang.Object o) {\n    if (o != o) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            return (o instanceof java.util.Map.Entry) && ((findByEntry(((java.util.Map.Entry<?, ?>)(o)))) != null);\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"runtimeType":"o","type":"o"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.stream.JsonWriter:542","type":"CtBinaryOperatorImpl","sourcecode":"replacement == null"},"failures":[],"tindex":"41412331-3e37-11e6-955d-297429d6923c","method":{"position":"com.google.gson.internal.LinkedHashTreeMap:85","type":"CtMethodImpl","sourcecode":"@java.lang.Override\npublic V get(java.lang.Object key) {\n    if (key == null) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    } else {\n        {\n            com.google.gson.internal.LinkedHashTreeMap.Node<K, V> com.google.gson.internal.LinkedHashTreeMap.Node<K, V> = findByObject(key);\n            return node != null ? node.V : null;\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"replacement":"key"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":0},{"exception":"java.lang.RuntimeException","condition":{"position":"com.google.gson.GsonBuilder:554","type":"CtBinaryOperatorImpl","sourcecode":"(datePattern != null) && (!(\"\".equals(datePattern.trim())))"},"failures":[],"tindex":"41412332-3e37-11e6-955d-49ce8290981f","method":{"position":"com.google.gson.JsonObject:111","type":"CtMethodImpl","sourcecode":"public void addProperty(java.lang.String property, java.lang.Character value) {\n    if ((property != null) && (!(\"\".equals(datePattern.trim())))) {\n        {\n            add(property, createJsonElement(value));\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.lang.RuntimeException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"datePattern":"property"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.internal.LinkedHashTreeMap:384","type":"CtVariableReadImpl","sourcecode":"insert"},"failures":[645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,281,282,283,5,285,286,287,6,7,628,457,458,630,631,288,289,15,16,19,20,21,22,23,24,25,26,27,30,31,32,290,34,36,39,40,291,661,292,662,663,664,665,666,667,668,293,41,44,45,48,49,632,633,295,297,298,300,301,303,304,306,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,325,326,327,328,329,330,526,62,331,63,64,332,333,334,335,336,530,337,65,67,71,73,74,75,77,78,79,82,84,90,91,92,97,98,100,338,101,532,103,104,105,106,107,109,110,111,113,115,339,340,341,342,343,344,449,345,346,347,119,348,349,350,351,352,353,354,355,356,121,357,358,359,360,361,362,363,364,365,366,367,368,369,123,370,371,372,373,125,638,639,126,374,375,376,377,127,378,379,380,129,130,131,132,381,133,134,135,382,383,384,385,136,386,137,139,388,389,390,391,392,393,394,395,396,397,398,399,401,402,403,404,405,406,407,147,149,408,409,150,410,411,151,152,412,153,154,156,157,158,413,162,164,414,415,167,168,170,416,171,417,172,582,418,419,585,587,174,420,421,591,422,176,177,178,595,423,179,597,600,180,181,184,185,186,189,192,195,197,641,199,424,425,202,204,205,210,212,213,215,220,221,222,223,225,227,229,231,232,233,234,235,236,427,237,428,608,429,430,609,238,431,240,613,241,615,617,432,433,242,243,434,435,436,244,437,438,439,440,441,442,443,444,445,245,669,670,246,247,248,625,671,672,673,674],"tindex":"41414a43-3e37-11e6-955d-99ec238a8d99","method":{"position":"com.google.gson.stream.JsonWriter:599","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"fallthrough\")\nprivate void beforeValue(boolean root) throws java.io.IOException {\n    if (root) {\n        {\n            switch (peek()) {\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if (!(boolean)) {\n                        throw new java.lang.IllegalStateException(\"JSON must have only one top-level value.\");\n                    } \n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    if ((!(boolean)) && (!root)) {\n                        throw new java.lang.IllegalStateException(\"JSON must start with an array or an object.\");\n                    } \n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(',');\n                    newline();\n                    break;\n                case com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int :\n                    java.io.Writer.append(java.lang.String);\n                    replaceTop(com.google.gson.stream.JsonScope.com.google.gson.stream.JsonScope.int);\n                    break;\n                default :\n                    throw new java.lang.IllegalStateException(\"Nesting problem.\");\n            }\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"insert":"root"},"type":"special","throwBranchCoverage":true,"returnInThen":true,"status":-1},{"exception":"java.io.IOException","condition":{"position":"com.google.gson.stream.JsonReader:1531","type":"CtBinaryOperatorImpl","sourcecode":"(c >= 'A') && (c <= 'F')"},"failures":[],"tindex":"41414a44-3e37-11e6-955d-e3b932f7d72d","method":{"position":"com.google.gson.stream.JsonReader:1101","type":"CtMethodImpl","sourcecode":"private void skipQuotedValue(char quote) throws java.io.IOException {\n    if ((quote >= 'A') && (c <= 'F')) {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new java.io.IOException();\n    } else {\n        {\n            char[] char[] = com.google.gson.stream.JsonReader.this.char[];\n            do {\n                int int = int;\n                int int = int;\n                while (p < l) {\n                    int int = buffer[(p++)];\n                    if (c == quote) {\n                        int = p;\n                        return ;\n                    } else if (c == '\\\\') {\n                        int = p;\n                        readEscapeCharacter();\n                        p = int;\n                        l = int;\n                    } else if (c == '\\n') {\n                        (int)++;\n                        int = p;\n                    } \n                }\n                int = p;\n            } while (fillBuffer(1) );\n            throw syntaxError(\"Unterminated string\");\n        }\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"c":"quote"},"type":"special","throwBranchCoverage":false,"returnInThen":false,"status":-2},{"exception":"com.google.gson.JsonSyntaxException","condition":{"position":"com.google.gson.reflect.TypeToken:199","type":"CtBinaryOperatorImpl","sourcecode":"from instanceof java.lang.reflect.ParameterizedType"},"failures":[],"tindex":"41414a45-3e37-11e6-955d-0f6f05e16ded","method":{"position":"com.google.gson.Gson:719","type":"CtMethodImpl","sourcecode":"@java.lang.SuppressWarnings(value = \"unchecked\")\npublic <T>T fromJson(java.lang.String json, java.lang.reflect.Type typeOfT) throws com.google.gson.JsonSyntaxException {\n    if (typeOfT instanceof java.lang.reflect.ParameterizedType) {\n        {\n            if (json == null) {\n                return null;\n            } \n            java.io.StringReader java.io.StringReader = new java.io.StringReader(json);\n            T T = ((T)(fromJson(reader, typeOfT)));\n            return target;\n        }\n    } else {\n        try {\njava.io.PrintWriter p = new java.io.PrintWriter(\"/root/diversify-statements/tmpDir/tmp_1467230449098/src/main/java/logThrowBranch\");\np.write(\"b\");\np.close();\n} catch (java.io.FileNotFoundException e) {};\n        throw new com.google.gson.JsonSyntaxException();\n    }\n}"},"series":0,"name":"addParameterCondition","variableMap":{"from":"typeOfT"},"type":"special","throwBranchCoverage":false,"returnInThen":true,"status":-2}],"header":{"groupId":"com.google.code.gson","transformationCount":73,"projectType":"maven","artifactId":"gson","generatorVersion":"1.0","version":"2.3.2-SNAPSHOT"}}